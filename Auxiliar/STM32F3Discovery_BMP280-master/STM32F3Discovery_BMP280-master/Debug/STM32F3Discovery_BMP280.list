
STM32F3Discovery_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006394  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006520  08006520  00016520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c0  20000000  08006698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201c0  2**0
                  CONTENTS
  7 .bss          00001ae8  200001c0  200001c0  000201c0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001ca8  20001ca8  000201c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023fb2  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000044be  00000000  00000000  000441a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c6ac  00000000  00000000  00048660  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e70  00000000  00000000  00054d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001420  00000000  00000000  00055b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000091cf  00000000  00000000  00056fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005175  00000000  00000000  0006016f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000652e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030c8  00000000  00000000  00065360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c0 	.word	0x200001c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006504 	.word	0x08006504

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001c4 	.word	0x200001c4
 80001c4:	08006504 	.word	0x08006504

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_InitTick+0x24>)
{
 8000b9c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ba8:	f000 f88c 	bl	8000cc4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	4621      	mov	r1, r4
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 f846 	bl	8000c44 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000bb8:	2000      	movs	r0, #0
 8000bba:	bd10      	pop	{r4, pc}
 8000bbc:	20000110 	.word	0x20000110

08000bc0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x20>)
{
 8000bc2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	6813      	ldr	r3, [r2, #0]
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f827 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff ffe0 	bl	8000b98 <HAL_InitTick>
  HAL_MspInit();
 8000bd8:	f003 fb2e 	bl	8004238 <HAL_MspInit>
}
 8000bdc:	2000      	movs	r0, #0
 8000bde:	bd08      	pop	{r3, pc}
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000be4:	4a02      	ldr	r2, [pc, #8]	; (8000bf0 <HAL_IncTick+0xc>)
 8000be6:	6813      	ldr	r3, [r2, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000404 	.word	0x20000404

08000bf4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000bf4:	4b01      	ldr	r3, [pc, #4]	; (8000bfc <HAL_GetTick+0x8>)
 8000bf6:	6818      	ldr	r0, [r3, #0]
}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000404 	.word	0x20000404

08000c00 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c02:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff fff6 	bl	8000bf4 <HAL_GetTick>
  uint32_t wait = Delay;
 8000c08:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0a:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	4605      	mov	r5, r0
  {
     wait++;
 8000c0e:	bf18      	it	ne
 8000c10:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	f7ff ffef 	bl	8000bf4 <HAL_GetTick>
 8000c16:	1b40      	subs	r0, r0, r5
 8000c18:	42a0      	cmp	r0, r4
 8000c1a:	d3fa      	bcc.n	8000c12 <HAL_Delay+0x12>
  {
  }
}
 8000c1c:	b003      	add	sp, #12
 8000c1e:	bd30      	pop	{r4, r5, pc}

08000c20 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c22:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c28:	041b      	lsls	r3, r3, #16
 8000c2a:	0c1b      	lsrs	r3, r3, #16
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c30:	0200      	lsls	r0, r0, #8
 8000c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c3a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c3c:	60d3      	str	r3, [r2, #12]
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c46:	b530      	push	{r4, r5, lr}
 8000c48:	68dc      	ldr	r4, [r3, #12]
 8000c4a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	bf28      	it	cs
 8000c58:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 0501 	mov.w	r5, #1
 8000c60:	fa05 f303 	lsl.w	r3, r5, r3
 8000c64:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c68:	bf8c      	ite	hi
 8000c6a:	3c03      	subhi	r4, #3
 8000c6c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6e:	4019      	ands	r1, r3
 8000c70:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c72:	fa05 f404 	lsl.w	r4, r5, r4
 8000c76:	3c01      	subs	r4, #1
 8000c78:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	ea42 0201 	orr.w	r2, r2, r1
 8000c80:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	bfaf      	iteee	ge
 8000c86:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	f000 000f 	andlt.w	r0, r0, #15
 8000c8e:	4b06      	ldrlt	r3, [pc, #24]	; (8000ca8 <HAL_NVIC_SetPriority+0x64>)
 8000c90:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	bfa5      	ittet	ge
 8000c94:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000c98:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ca0:	bd30      	pop	{r4, r5, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	e000ed14 	.word	0xe000ed14

08000cac <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cac:	0942      	lsrs	r2, r0, #5
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f000 001f 	and.w	r0, r0, #31
 8000cb4:	fa03 f000 	lsl.w	r0, r3, r0
 8000cb8:	4b01      	ldr	r3, [pc, #4]	; (8000cc0 <HAL_NVIC_EnableIRQ+0x14>)
 8000cba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cca:	d20a      	bcs.n	8000ce2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	21f0      	movs	r1, #240	; 0xf0
 8000cd4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cf2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cf4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cf6:	bf0c      	ite	eq
 8000cf8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cfc:	f022 0204 	bicne.w	r2, r2, #4
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	4770      	bx	lr
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d08:	4770      	bx	lr

08000d0a <HAL_SYSTICK_IRQHandler>:
{
 8000d0a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000d0c:	f7ff fffc 	bl	8000d08 <HAL_SYSTICK_Callback>
 8000d10:	bd08      	pop	{r3, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d18:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000e94 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d20:	4a5a      	ldr	r2, [pc, #360]	; (8000e8c <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 8000d22:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d24:	fa38 f403 	lsrs.w	r4, r8, r3
 8000d28:	d102      	bne.n	8000d30 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000d2a:	b003      	add	sp, #12
 8000d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d30:	2401      	movs	r4, #1
 8000d32:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000d36:	ea18 050a 	ands.w	r5, r8, sl
 8000d3a:	f000 809c 	beq.w	8000e76 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3e:	684c      	ldr	r4, [r1, #4]
 8000d40:	f024 0b10 	bic.w	fp, r4, #16
 8000d44:	f1bb 0f02 	cmp.w	fp, #2
 8000d48:	d114      	bne.n	8000d74 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000d4a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000d4e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d52:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000d56:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d5a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d5e:	270f      	movs	r7, #15
 8000d60:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d64:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d68:	690e      	ldr	r6, [r1, #16]
 8000d6a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d6e:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000d70:	f8ce 6020 	str.w	r6, [lr, #32]
 8000d74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d78:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000d7a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d80:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d82:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d86:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d88:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d8c:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d90:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d94:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000d98:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d9a:	d811      	bhi.n	8000dc0 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000d9c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d9e:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da2:	68ce      	ldr	r6, [r1, #12]
 8000da4:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000da8:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000dac:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dae:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000db4:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000db8:	409e      	lsls	r6, r3
 8000dba:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000dbe:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000dc0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc2:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc4:	688e      	ldr	r6, [r1, #8]
 8000dc6:	fa06 f60c 	lsl.w	r6, r6, ip
 8000dca:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dcc:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000dce:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd0:	d551      	bpl.n	8000e76 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000dd6:	f046 0601 	orr.w	r6, r6, #1
 8000dda:	f8c9 6018 	str.w	r6, [r9, #24]
 8000dde:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000de2:	f023 0703 	bic.w	r7, r3, #3
 8000de6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000dea:	f006 0601 	and.w	r6, r6, #1
 8000dee:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000df2:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000df4:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000dfa:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000dfc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000e00:	f04f 0e0f 	mov.w	lr, #15
 8000e04:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e08:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e0c:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e10:	d033      	beq.n	8000e7a <HAL_GPIO_Init+0x166>
 8000e12:	4e1f      	ldr	r6, [pc, #124]	; (8000e90 <HAL_GPIO_Init+0x17c>)
 8000e14:	42b0      	cmp	r0, r6
 8000e16:	d032      	beq.n	8000e7e <HAL_GPIO_Init+0x16a>
 8000e18:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e1c:	42b0      	cmp	r0, r6
 8000e1e:	d030      	beq.n	8000e82 <HAL_GPIO_Init+0x16e>
 8000e20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e24:	42b0      	cmp	r0, r6
 8000e26:	d02e      	beq.n	8000e86 <HAL_GPIO_Init+0x172>
 8000e28:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e2c:	42b0      	cmp	r0, r6
 8000e2e:	bf14      	ite	ne
 8000e30:	2605      	movne	r6, #5
 8000e32:	2604      	moveq	r6, #4
 8000e34:	fa06 f60c 	lsl.w	r6, r6, ip
 8000e38:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e3c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000e3e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e40:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e42:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e46:	bf0c      	ite	eq
 8000e48:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e4a:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000e4c:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000e4e:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e50:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e54:	bf0c      	ite	eq
 8000e56:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e58:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000e5a:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000e5c:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e62:	bf0c      	ite	eq
 8000e64:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e66:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000e68:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000e6a:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e6c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e6e:	bf54      	ite	pl
 8000e70:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000e72:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000e74:	60d6      	str	r6, [r2, #12]
    position++;
 8000e76:	3301      	adds	r3, #1
 8000e78:	e754      	b.n	8000d24 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	e7da      	b.n	8000e34 <HAL_GPIO_Init+0x120>
 8000e7e:	2601      	movs	r6, #1
 8000e80:	e7d8      	b.n	8000e34 <HAL_GPIO_Init+0x120>
 8000e82:	2602      	movs	r6, #2
 8000e84:	e7d6      	b.n	8000e34 <HAL_GPIO_Init+0x120>
 8000e86:	2603      	movs	r6, #3
 8000e88:	e7d4      	b.n	8000e34 <HAL_GPIO_Init+0x120>
 8000e8a:	bf00      	nop
 8000e8c:	40010400 	.word	0x40010400
 8000e90:	48000400 	.word	0x48000400
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e98:	6903      	ldr	r3, [r0, #16]
 8000e9a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000e9c:	bf14      	ite	ne
 8000e9e:	2001      	movne	r0, #1
 8000ea0:	2000      	moveq	r0, #0
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea4:	b10a      	cbz	r2, 8000eaa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea6:	6181      	str	r1, [r0, #24]
 8000ea8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eaa:	6281      	str	r1, [r0, #40]	; 0x28
 8000eac:	4770      	bx	lr

08000eae <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000eae:	6803      	ldr	r3, [r0, #0]
 8000eb0:	699a      	ldr	r2, [r3, #24]
 8000eb2:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000eb4:	bf44      	itt	mi
 8000eb6:	2200      	movmi	r2, #0
 8000eb8:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000eba:	699a      	ldr	r2, [r3, #24]
 8000ebc:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ebe:	bf5e      	ittt	pl
 8000ec0:	699a      	ldrpl	r2, [r3, #24]
 8000ec2:	f042 0201 	orrpl.w	r2, r2, #1
 8000ec6:	619a      	strpl	r2, [r3, #24]
 8000ec8:	4770      	bx	lr

08000eca <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000eca:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000ecc:	6805      	ldr	r5, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000ece:	9c03      	ldr	r4, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 8000ed0:	6868      	ldr	r0, [r5, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000ed2:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8000ed6:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000eda:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000ede:	4323      	orrs	r3, r4
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000ee0:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000ee4:	4319      	orrs	r1, r3
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000ee6:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000eea:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000eee:	4301      	orrs	r1, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000ef0:	6069      	str	r1, [r5, #4]
 8000ef2:	bd30      	pop	{r4, r5, pc}

08000ef4 <I2C_WaitOnFlagUntilTimeout>:
{
 8000ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef8:	9f06      	ldr	r7, [sp, #24]
 8000efa:	4604      	mov	r4, r0
 8000efc:	4688      	mov	r8, r1
 8000efe:	4616      	mov	r6, r2
 8000f00:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f02:	6822      	ldr	r2, [r4, #0]
 8000f04:	6993      	ldr	r3, [r2, #24]
 8000f06:	ea38 0303 	bics.w	r3, r8, r3
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	42b3      	cmp	r3, r6
 8000f12:	d002      	beq.n	8000f1a <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000f14:	2000      	movs	r0, #0
}
 8000f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000f1a:	1c6b      	adds	r3, r5, #1
 8000f1c:	d0f2      	beq.n	8000f04 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f1e:	b955      	cbnz	r5, 8000f36 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 8000f20:	2320      	movs	r3, #32
 8000f22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000f2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000f30:	2003      	movs	r0, #3
 8000f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f36:	f7ff fe5d 	bl	8000bf4 <HAL_GetTick>
 8000f3a:	1bc0      	subs	r0, r0, r7
 8000f3c:	4285      	cmp	r5, r0
 8000f3e:	d2e0      	bcs.n	8000f02 <I2C_WaitOnFlagUntilTimeout+0xe>
 8000f40:	e7ee      	b.n	8000f20 <I2C_WaitOnFlagUntilTimeout+0x2c>

08000f42 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f42:	6803      	ldr	r3, [r0, #0]
{
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f48:	6998      	ldr	r0, [r3, #24]
 8000f4a:	f010 0010 	ands.w	r0, r0, #16
{
 8000f4e:	460d      	mov	r5, r1
 8000f50:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f52:	d112      	bne.n	8000f7a <I2C_IsAcknowledgeFailed+0x38>
 8000f54:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000f56:	1c69      	adds	r1, r5, #1
 8000f58:	d010      	beq.n	8000f7c <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f5a:	b94d      	cbnz	r5, 8000f70 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000f68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f70:	f7ff fe40 	bl	8000bf4 <HAL_GetTick>
 8000f74:	1b80      	subs	r0, r0, r6
 8000f76:	4285      	cmp	r5, r0
 8000f78:	d3f0      	bcc.n	8000f5c <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	6999      	ldr	r1, [r3, #24]
 8000f7e:	068a      	lsls	r2, r1, #26
 8000f80:	d5e9      	bpl.n	8000f56 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f82:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f84:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f86:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000f88:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f8a:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000f8c:	f7ff ff8f 	bl	8000eae <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000f90:	6822      	ldr	r2, [r4, #0]
 8000f92:	6853      	ldr	r3, [r2, #4]
 8000f94:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000f98:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000f9c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000faa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000fac:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000fb0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8000fb8:	2001      	movs	r0, #1
}
 8000fba:	bd70      	pop	{r4, r5, r6, pc}

08000fbc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000fbc:	b570      	push	{r4, r5, r6, lr}
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	460d      	mov	r5, r1
 8000fc2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	079b      	lsls	r3, r3, #30
 8000fca:	d501      	bpl.n	8000fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000fcc:	2000      	movs	r0, #0
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fd0:	4632      	mov	r2, r6
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f7ff ffb4 	bl	8000f42 <I2C_IsAcknowledgeFailed>
 8000fda:	b9b0      	cbnz	r0, 800100a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000fdc:	1c6a      	adds	r2, r5, #1
 8000fde:	d0f1      	beq.n	8000fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000fe0:	b96d      	cbnz	r5, 8000ffe <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fe2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fe4:	f043 0320 	orr.w	r3, r3, #32
 8000fe8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000fea:	2320      	movs	r3, #32
 8000fec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000ff6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ffe:	f7ff fdf9 	bl	8000bf4 <HAL_GetTick>
 8001002:	1b80      	subs	r0, r0, r6
 8001004:	4285      	cmp	r5, r0
 8001006:	d2dd      	bcs.n	8000fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8001008:	e7eb      	b.n	8000fe2 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 800100a:	2001      	movs	r0, #1
}
 800100c:	bd70      	pop	{r4, r5, r6, pc}

0800100e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800100e:	b570      	push	{r4, r5, r6, lr}
 8001010:	4604      	mov	r4, r0
 8001012:	460d      	mov	r5, r1
 8001014:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	075b      	lsls	r3, r3, #29
 800101c:	d501      	bpl.n	8001022 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
  return HAL_OK;
 800101e:	2000      	movs	r0, #0
 8001020:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001022:	4632      	mov	r2, r6
 8001024:	4629      	mov	r1, r5
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff ff8b 	bl	8000f42 <I2C_IsAcknowledgeFailed>
 800102c:	b9b0      	cbnz	r0, 800105c <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	0692      	lsls	r2, r2, #26
 8001034:	d514      	bpl.n	8001060 <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001036:	2120      	movs	r1, #32
 8001038:	61d9      	str	r1, [r3, #28]
      I2C_RESET_CR2(hi2c);
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001040:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001044:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001048:	f022 0201 	bic.w	r2, r2, #1
 800104c:	605a      	str	r2, [r3, #4]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800104e:	6460      	str	r0, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001050:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8001054:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001058:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      return HAL_ERROR;
 800105c:	2001      	movs	r0, #1
}
 800105e:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001060:	b95d      	cbnz	r5, 800107a <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001062:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001064:	f043 0320 	orr.w	r3, r3, #32
 8001068:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800106a:	2320      	movs	r3, #32
 800106c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001070:	2300      	movs	r3, #0
 8001072:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001076:	2003      	movs	r0, #3
 8001078:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800107a:	f7ff fdbb 	bl	8000bf4 <HAL_GetTick>
 800107e:	1b80      	subs	r0, r0, r6
 8001080:	4285      	cmp	r5, r0
 8001082:	d2c8      	bcs.n	8001016 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001084:	e7ed      	b.n	8001062 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>

08001086 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001086:	b570      	push	{r4, r5, r6, lr}
 8001088:	4604      	mov	r4, r0
 800108a:	460d      	mov	r5, r1
 800108c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	069b      	lsls	r3, r3, #26
 8001094:	d501      	bpl.n	800109a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001096:	2000      	movs	r0, #0
 8001098:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800109a:	4632      	mov	r2, r6
 800109c:	4629      	mov	r1, r5
 800109e:	4620      	mov	r0, r4
 80010a0:	f7ff ff4f 	bl	8000f42 <I2C_IsAcknowledgeFailed>
 80010a4:	b9a0      	cbnz	r0, 80010d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80010a6:	b96d      	cbnz	r5, 80010c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010aa:	f043 0320 	orr.w	r3, r3, #32
 80010ae:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80010b0:	2320      	movs	r3, #32
 80010b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80010bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80010c0:	2003      	movs	r0, #3
 80010c2:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80010c4:	f7ff fd96 	bl	8000bf4 <HAL_GetTick>
 80010c8:	1b80      	subs	r0, r0, r6
 80010ca:	4285      	cmp	r5, r0
 80010cc:	d2df      	bcs.n	800108e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 80010ce:	e7eb      	b.n	80010a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80010d0:	2001      	movs	r0, #1
}
 80010d2:	bd70      	pop	{r4, r5, r6, pc}

080010d4 <HAL_I2C_Init>:
{
 80010d4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80010d6:	4604      	mov	r4, r0
 80010d8:	2800      	cmp	r0, #0
 80010da:	d04a      	beq.n	8001172 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010e4:	b91b      	cbnz	r3, 80010ee <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80010e6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80010ea:	f003 f8e3 	bl	80042b4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80010ee:	2324      	movs	r3, #36	; 0x24
 80010f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80010f4:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010f6:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001100:	6862      	ldr	r2, [r4, #4]
 8001102:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001106:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001108:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800110a:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800110c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001114:	d124      	bne.n	8001160 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800111a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800111c:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800111e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001120:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001128:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001130:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001132:	6922      	ldr	r2, [r4, #16]
 8001134:	430a      	orrs	r2, r1
 8001136:	69a1      	ldr	r1, [r4, #24]
 8001138:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800113c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800113e:	6a21      	ldr	r1, [r4, #32]
 8001140:	69e2      	ldr	r2, [r4, #28]
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f042 0201 	orr.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001150:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001152:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001154:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001158:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800115a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 800115e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001160:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001164:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001166:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001168:	bf04      	itt	eq
 800116a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800116e:	605a      	streq	r2, [r3, #4]
 8001170:	e7d4      	b.n	800111c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001172:	2001      	movs	r0, #1
}
 8001174:	bd10      	pop	{r4, pc}

08001176 <HAL_I2C_Master_Transmit>:
{
 8001176:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800117a:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800117c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001180:	2b20      	cmp	r3, #32
{
 8001182:	4604      	mov	r4, r0
 8001184:	460e      	mov	r6, r1
 8001186:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001188:	f040 808c 	bne.w	80012a4 <HAL_I2C_Master_Transmit+0x12e>
    __HAL_LOCK(hi2c);
 800118c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001190:	2b01      	cmp	r3, #1
 8001192:	f000 8087 	beq.w	80012a4 <HAL_I2C_Master_Transmit+0x12e>
 8001196:	2701      	movs	r7, #1
 8001198:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800119c:	f7ff fd2a 	bl	8000bf4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011a0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80011a2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011a4:	9000      	str	r0, [sp, #0]
 80011a6:	463a      	mov	r2, r7
 80011a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff fea1 	bl	8000ef4 <I2C_WaitOnFlagUntilTimeout>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d14b      	bne.n	800124e <HAL_I2C_Master_Transmit+0xd8>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011b6:	2321      	movs	r3, #33	; 0x21
 80011b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011bc:	2310      	movs	r3, #16
 80011be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80011c4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80011ca:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80011d2:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011d4:	d927      	bls.n	8001226 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011d6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80011d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011dc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80011de:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011e4:	4631      	mov	r1, r6
 80011e6:	4620      	mov	r0, r4
 80011e8:	f7ff fe6f 	bl	8000eca <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ee:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80011f0:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f2:	462a      	mov	r2, r5
 80011f4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80011f6:	bb03      	cbnz	r3, 800123a <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f8:	f7ff ff45 	bl	8001086 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011fc:	bb00      	cbnz	r0, 8001240 <HAL_I2C_Master_Transmit+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	2120      	movs	r1, #32
 8001202:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800120a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800120e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001218:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800121c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001220:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001224:	e010      	b.n	8001248 <HAL_I2C_Master_Transmit+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8001226:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = hi2c->XferCount;
 800122c:	b292      	uxth	r2, r2
 800122e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001230:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	e7d4      	b.n	80011e4 <HAL_I2C_Master_Transmit+0x6e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800123a:	f7ff febf 	bl	8000fbc <I2C_WaitOnTXISFlagUntilTimeout>
 800123e:	b140      	cbz	r0, 8001252 <HAL_I2C_Master_Transmit+0xdc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001240:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001242:	2b04      	cmp	r3, #4
 8001244:	d103      	bne.n	800124e <HAL_I2C_Master_Transmit+0xd8>
          return HAL_ERROR;
 8001246:	2001      	movs	r0, #1
}
 8001248:	b003      	add	sp, #12
 800124a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 800124e:	2003      	movs	r0, #3
 8001250:	e7fa      	b.n	8001248 <HAL_I2C_Master_Transmit+0xd2>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001254:	6822      	ldr	r2, [r4, #0]
 8001256:	1c59      	adds	r1, r3, #1
 8001258:	6261      	str	r1, [r4, #36]	; 0x24
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800125e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001260:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001262:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001264:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001266:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001268:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800126a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800126c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800126e:	2a00      	cmp	r2, #0
 8001270:	d1bc      	bne.n	80011ec <HAL_I2C_Master_Transmit+0x76>
 8001272:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001274:	b29b      	uxth	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0b8      	beq.n	80011ec <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800127a:	9500      	str	r5, [sp, #0]
 800127c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	4620      	mov	r0, r4
 8001282:	f7ff fe37 	bl	8000ef4 <I2C_WaitOnFlagUntilTimeout>
 8001286:	2800      	cmp	r0, #0
 8001288:	d1e1      	bne.n	800124e <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800128a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800128c:	b29b      	uxth	r3, r3
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	d903      	bls.n	800129a <HAL_I2C_Master_Transmit+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001296:	9000      	str	r0, [sp, #0]
 8001298:	e7a2      	b.n	80011e0 <HAL_I2C_Master_Transmit+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 800129a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800129c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800129e:	b292      	uxth	r2, r2
 80012a0:	8522      	strh	r2, [r4, #40]	; 0x28
 80012a2:	e7c6      	b.n	8001232 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 80012a4:	2002      	movs	r0, #2
 80012a6:	e7cf      	b.n	8001248 <HAL_I2C_Master_Transmit+0xd2>

080012a8 <HAL_I2C_Master_Receive>:
{
 80012a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80012ac:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80012b2:	2b20      	cmp	r3, #32
{
 80012b4:	4604      	mov	r4, r0
 80012b6:	460e      	mov	r6, r1
 80012b8:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ba:	f040 808c 	bne.w	80013d6 <HAL_I2C_Master_Receive+0x12e>
    __HAL_LOCK(hi2c);
 80012be:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f000 8087 	beq.w	80013d6 <HAL_I2C_Master_Receive+0x12e>
 80012c8:	2701      	movs	r7, #1
 80012ca:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80012ce:	f7ff fc91 	bl	8000bf4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012d2:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80012d4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012d6:	9000      	str	r0, [sp, #0]
 80012d8:	463a      	mov	r2, r7
 80012da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff fe08 	bl	8000ef4 <I2C_WaitOnFlagUntilTimeout>
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d14b      	bne.n	8001380 <HAL_I2C_Master_Receive+0xd8>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012e8:	2322      	movs	r3, #34	; 0x22
 80012ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012ee:	2310      	movs	r3, #16
 80012f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80012f6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80012fc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001300:	b29b      	uxth	r3, r3
 8001302:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001304:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001306:	d927      	bls.n	8001358 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001308:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800130a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800130e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001310:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001316:	4631      	mov	r1, r6
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff fdd6 	bl	8000eca <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800131e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001320:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8001322:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001324:	462a      	mov	r2, r5
 8001326:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001328:	bb03      	cbnz	r3, 800136c <HAL_I2C_Master_Receive+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800132a:	f7ff feac 	bl	8001086 <I2C_WaitOnSTOPFlagUntilTimeout>
 800132e:	bb00      	cbnz	r0, 8001372 <HAL_I2C_Master_Receive+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	2120      	movs	r1, #32
 8001334:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800133c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001340:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001344:	f022 0201 	bic.w	r2, r2, #1
 8001348:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800134a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800134e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001352:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001356:	e010      	b.n	800137a <HAL_I2C_Master_Receive+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8001358:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800135a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 800135e:	b292      	uxth	r2, r2
 8001360:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001362:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	e7d4      	b.n	8001316 <HAL_I2C_Master_Receive+0x6e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800136c:	f7ff fe4f 	bl	800100e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001370:	b140      	cbz	r0, 8001384 <HAL_I2C_Master_Receive+0xdc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001372:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001374:	2b04      	cmp	r3, #4
 8001376:	d103      	bne.n	8001380 <HAL_I2C_Master_Receive+0xd8>
          return HAL_ERROR;
 8001378:	2001      	movs	r0, #1
}
 800137a:	b003      	add	sp, #12
 800137c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8001380:	2003      	movs	r0, #3
 8001382:	e7fa      	b.n	800137a <HAL_I2C_Master_Receive+0xd2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	6262      	str	r2, [r4, #36]	; 0x24
 800138a:	6822      	ldr	r2, [r4, #0]
 800138c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800138e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001390:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001392:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001394:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001396:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001398:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800139a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800139c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800139e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	d1bc      	bne.n	800131e <HAL_I2C_Master_Receive+0x76>
 80013a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0b8      	beq.n	800131e <HAL_I2C_Master_Receive+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013ac:	9500      	str	r5, [sp, #0]
 80013ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7ff fd9e 	bl	8000ef4 <I2C_WaitOnFlagUntilTimeout>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1e1      	bne.n	8001380 <HAL_I2C_Master_Receive+0xd8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013be:	b29b      	uxth	r3, r3
 80013c0:	2bff      	cmp	r3, #255	; 0xff
 80013c2:	d903      	bls.n	80013cc <HAL_I2C_Master_Receive+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013c4:	22ff      	movs	r2, #255	; 0xff
 80013c6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013c8:	9000      	str	r0, [sp, #0]
 80013ca:	e7a2      	b.n	8001312 <HAL_I2C_Master_Receive+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 80013cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013ce:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80013d0:	b292      	uxth	r2, r2
 80013d2:	8522      	strh	r2, [r4, #40]	; 0x28
 80013d4:	e7c6      	b.n	8001364 <HAL_I2C_Master_Receive+0xbc>
    return HAL_BUSY;
 80013d6:	2002      	movs	r0, #2
 80013d8:	e7cf      	b.n	800137a <HAL_I2C_Master_Receive+0xd2>

080013da <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013da:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	2a20      	cmp	r2, #32
{
 80013e2:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e4:	d11d      	bne.n	8001422 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d019      	beq.n	8001422 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013ee:	2324      	movs	r3, #36	; 0x24
 80013f0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013f4:	6803      	ldr	r3, [r0, #0]
 80013f6:	681c      	ldr	r4, [r3, #0]
 80013f8:	f024 0401 	bic.w	r4, r4, #1
 80013fc:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013fe:	681c      	ldr	r4, [r3, #0]
 8001400:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001404:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001406:	681c      	ldr	r4, [r3, #0]
 8001408:	4321      	orrs	r1, r4
 800140a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800140c:	6819      	ldr	r1, [r3, #0]
 800140e:	f041 0101 	orr.w	r1, r1, #1
 8001412:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001414:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001416:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800141a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800141e:	4618      	mov	r0, r3
 8001420:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001422:	2002      	movs	r0, #2
  }
}
 8001424:	bd10      	pop	{r4, pc}

08001426 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001426:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001428:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800142c:	b2e4      	uxtb	r4, r4
 800142e:	2c20      	cmp	r4, #32
 8001430:	d11c      	bne.n	800146c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001432:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001436:	2b01      	cmp	r3, #1
 8001438:	d018      	beq.n	800146c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800143a:	2324      	movs	r3, #36	; 0x24
 800143c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001440:	6803      	ldr	r3, [r0, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800144a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800144c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001450:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001454:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800145e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001460:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001464:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001468:	4618      	mov	r0, r3
 800146a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800146c:	2002      	movs	r0, #2
  }
}
 800146e:	bd10      	pop	{r4, pc}

08001470 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001470:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001472:	4604      	mov	r4, r0
 8001474:	2800      	cmp	r0, #0
 8001476:	d04d      	beq.n	8001514 <HAL_PCD_Init+0xa4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001478:	f890 3371 	ldrb.w	r3, [r0, #881]	; 0x371
 800147c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001480:	b91b      	cbnz	r3, 800148a <HAL_PCD_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001482:	f880 2370 	strb.w	r2, [r0, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001486:	f003 f86b 	bl	8004560 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800148a:	2303      	movs	r3, #3
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800148c:	2100      	movs	r1, #0
 800148e:	6860      	ldr	r0, [r4, #4]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001490:	f884 3371 	strb.w	r3, [r4, #881]	; 0x371
 8001494:	460a      	mov	r2, r1
 8001496:	f104 0328 	add.w	r3, r4, #40	; 0x28
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800149a:	2501      	movs	r5, #1
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800149c:	4281      	cmp	r1, r0
 800149e:	f103 031c 	add.w	r3, r3, #28
 80014a2:	d11b      	bne.n	80014dc <HAL_PCD_Init+0x6c>
 80014a4:	2000      	movs	r0, #0
 80014a6:	f504 72e6 	add.w	r2, r4, #460	; 0x1cc
 80014aa:	4603      	mov	r3, r0
   hpcd->IN_ep[i].maxpacket =  0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80014ac:	4281      	cmp	r1, r0
 80014ae:	f102 021c 	add.w	r2, r2, #28
 80014b2:	d121      	bne.n	80014f8 <HAL_PCD_Init+0x88>
   hpcd->OUT_ep[i].xfer_len = 0U;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1U*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 80014b4:	6822      	ldr	r2, [r4, #0]
 80014b6:	2101      	movs	r1, #1
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
  | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80014b8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 80014bc:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
 hpcd->Instance->CNTR = 0U;
 80014c0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 hpcd->Instance->ISTR = 0U;
 80014c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80014c8:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80014cc:	f8a2 0040 	strh.w	r0, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0U;
 80014d0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;

 return HAL_OK;
 80014d4:	2000      	movs	r0, #0
  hpcd->State= HAL_PCD_STATE_READY;
 80014d6:	f884 1371 	strb.w	r1, [r4, #881]	; 0x371
 return HAL_OK;
 80014da:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 80014dc:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].is_in = 1U;
 80014e0:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 80014e4:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].maxpacket =  0U;
 80014e8:	f843 2c10 	str.w	r2, [r3, #-16]
   hpcd->IN_ep[i].xfer_buff = 0U;
 80014ec:	f843 2c0c 	str.w	r2, [r3, #-12]
   hpcd->IN_ep[i].xfer_len = 0U;
 80014f0:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80014f4:	3101      	adds	r1, #1
 80014f6:	e7d1      	b.n	800149c <HAL_PCD_Init+0x2c>
   hpcd->OUT_ep[i].num = i;
 80014f8:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].is_in = 0U;
 80014fc:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8001500:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001504:	f842 3c10 	str.w	r3, [r2, #-16]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001508:	f842 3c0c 	str.w	r3, [r2, #-12]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800150c:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001510:	3001      	adds	r0, #1
 8001512:	e7cb      	b.n	80014ac <HAL_PCD_Init+0x3c>
    return HAL_ERROR;
 8001514:	2001      	movs	r0, #1
}
 8001516:	bd38      	pop	{r3, r4, r5, pc}

08001518 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8001518:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1U);
 800151a:	2101      	movs	r1, #1
 800151c:	f003 f963 	bl	80047e6 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8001520:	2000      	movs	r0, #0
 8001522:	bd08      	pop	{r3, pc}

08001524 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8001524:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8001528:	2b01      	cmp	r3, #1
 800152a:	d00f      	beq.n	800154c <HAL_PCD_SetAddress+0x28>
 800152c:	2301      	movs	r3, #1
 800152e:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370

   if(address == 0U) 
 8001532:	b941      	cbnz	r1, 8001546 <HAL_PCD_SetAddress+0x22>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8001534:	6803      	ldr	r3, [r0, #0]
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 800153c:	2300      	movs	r3, #0
 800153e:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
 8001542:	4618      	mov	r0, r3
 8001544:	4770      	bx	lr
     hpcd->USB_Address = address;
 8001546:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800154a:	e7f7      	b.n	800153c <HAL_PCD_SetAddress+0x18>
   __HAL_LOCK(hpcd); 
 800154c:	2002      	movs	r0, #2
  return HAL_OK;
}
 800154e:	4770      	bx	lr

08001550 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001552:	b24c      	sxtb	r4, r1
 8001554:	2c00      	cmp	r4, #0
 8001556:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 800155a:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800155e:	bfb5      	itete	lt
 8001560:	fb05 0106 	mlalt	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001564:	fb05 0101 	mlage	r1, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001568:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800156a:	f501 71e6 	addge.w	r1, r1, #460	; 0x1cc
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800156e:	0fe4      	lsrs	r4, r4, #31
  ep->num   = ep_addr & 0x7FU;
 8001570:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001572:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8001574:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8001576:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
  ep->maxpacket = ep_mps;
 800157a:	60ca      	str	r2, [r1, #12]
  __HAL_LOCK(hpcd); 
 800157c:	2b01      	cmp	r3, #1
 800157e:	f000 8160 	beq.w	8001842 <HAL_PCD_EP_Open+0x2f2>
 8001582:	2301      	movs	r3, #1
 8001584:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370

  /* initialize Endpoint */
  switch (ep->type)
 8001588:	78cd      	ldrb	r5, [r1, #3]
 800158a:	780c      	ldrb	r4, [r1, #0]
 800158c:	6803      	ldr	r3, [r0, #0]
 800158e:	2d03      	cmp	r5, #3
 8001590:	d80e      	bhi.n	80015b0 <HAL_PCD_EP_Open+0x60>
 8001592:	e8df f005 	tbb	[pc, r5]
 8001596:	6402      	.short	0x6402
 8001598:	5a52      	.short	0x5a52
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800159a:	b224      	sxth	r4, r4
 800159c:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80015a0:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 80015a4:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80015a8:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80015ac:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    break;
  default:
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 80015b0:	780c      	ldrb	r4, [r1, #0]
 80015b2:	b226      	sxth	r6, r4
 80015b4:	f640 770f 	movw	r7, #3855	; 0xf0f
 80015b8:	f833 5026 	ldrh.w	r5, [r3, r6, lsl #2]
 80015bc:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80015c0:	403d      	ands	r5, r7
 80015c2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80015c6:	432c      	orrs	r4, r5
 80015c8:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0U) 
 80015cc:	7a8c      	ldrb	r4, [r1, #10]
 80015ce:	f891 e000 	ldrb.w	lr, [r1]
 80015d2:	2c00      	cmp	r4, #0
 80015d4:	f040 808d 	bne.w	80016f2 <HAL_PCD_EP_Open+0x1a2>
  {
    if (ep->is_in)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80015d8:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
    if (ep->is_in)
 80015dc:	784c      	ldrb	r4, [r1, #1]
 80015de:	888e      	ldrh	r6, [r1, #4]
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80015e0:	b2ad      	uxth	r5, r5
    if (ep->is_in)
 80015e2:	2c00      	cmp	r4, #0
 80015e4:	d045      	beq.n	8001672 <HAL_PCD_EP_Open+0x122>
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80015e6:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
 80015ea:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80015ee:	f026 0601 	bic.w	r6, r6, #1
 80015f2:	f8a5 6400 	strh.w	r6, [r5, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80015f6:	780d      	ldrb	r5, [r1, #0]
 80015f8:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80015fc:	0654      	lsls	r4, r2, #25
 80015fe:	bf41      	itttt	mi
 8001600:	ea02 0407 	andmi.w	r4, r2, r7
 8001604:	f444 4400 	orrmi.w	r4, r4, #32768	; 0x8000
 8001608:	f044 04c0 	orrmi.w	r4, r4, #192	; 0xc0
 800160c:	f823 4025 	strhmi.w	r4, [r3, r5, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8001610:	7809      	ldrb	r1, [r1, #0]
 8001612:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001616:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800161a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800161e:	b292      	uxth	r2, r2
 8001620:	f082 0220 	eor.w	r2, r2, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001624:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001628:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800162c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8001630:	2300      	movs	r3, #0
 8001632:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  return ret;
 8001636:	4618      	mov	r0, r3
 8001638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 800163a:	b224      	sxth	r4, r4
 800163c:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8001640:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 8001644:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8001648:	e7b0      	b.n	80015ac <HAL_PCD_EP_Open+0x5c>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 800164a:	b224      	sxth	r4, r4
 800164c:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8001650:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 8001654:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8001658:	f445 65c0 	orr.w	r5, r5, #1536	; 0x600
 800165c:	e7a6      	b.n	80015ac <HAL_PCD_EP_Open+0x5c>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 800165e:	b224      	sxth	r4, r4
 8001660:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8001664:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 8001668:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 800166c:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 8001670:	e79c      	b.n	80015ac <HAL_PCD_EP_Open+0x5c>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001672:	2408      	movs	r4, #8
 8001674:	fb14 550e 	smlabb	r5, r4, lr, r5
 8001678:	3504      	adds	r5, #4
 800167a:	f503 6780 	add.w	r7, r3, #1024	; 0x400
 800167e:	f026 0601 	bic.w	r6, r6, #1
 8001682:	f827 6015 	strh.w	r6, [r7, r5, lsl #1]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8001686:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800168a:	780e      	ldrb	r6, [r1, #0]
 800168c:	b2ad      	uxth	r5, r5
 800168e:	fb14 5406 	smlabb	r4, r4, r6, r5
 8001692:	2a3e      	cmp	r2, #62	; 0x3e
 8001694:	f104 0406 	add.w	r4, r4, #6
 8001698:	d925      	bls.n	80016e6 <HAL_PCD_EP_Open+0x196>
 800169a:	0955      	lsrs	r5, r2, #5
 800169c:	06d2      	lsls	r2, r2, #27
 800169e:	bf08      	it	eq
 80016a0:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80016a4:	4a68      	ldr	r2, [pc, #416]	; (8001848 <HAL_PCD_EP_Open+0x2f8>)
 80016a6:	bf08      	it	eq
 80016a8:	b2ad      	uxtheq	r5, r5
 80016aa:	ea42 2585 	orr.w	r5, r2, r5, lsl #10
 80016ae:	f827 5014 	strh.w	r5, [r7, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80016b2:	780c      	ldrb	r4, [r1, #0]
 80016b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80016b8:	0455      	lsls	r5, r2, #17
 80016ba:	d509      	bpl.n	80016d0 <HAL_PCD_EP_Open+0x180>
 80016bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016c0:	0512      	lsls	r2, r2, #20
 80016c2:	0d12      	lsrs	r2, r2, #20
 80016c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80016c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80016d0:	7809      	ldrb	r1, [r1, #0]
 80016d2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80016d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016de:	b292      	uxth	r2, r2
 80016e0:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80016e4:	e79e      	b.n	8001624 <HAL_PCD_EP_Open+0xd4>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 80016e6:	0855      	lsrs	r5, r2, #1
 80016e8:	07d6      	lsls	r6, r2, #31
 80016ea:	bf48      	it	mi
 80016ec:	3501      	addmi	r5, #1
 80016ee:	02ad      	lsls	r5, r5, #10
 80016f0:	e7dd      	b.n	80016ae <HAL_PCD_EP_Open+0x15e>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80016f2:	fa0f f58e 	sxth.w	r5, lr
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 80016f6:	2208      	movs	r2, #8
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80016f8:	f833 6025 	ldrh.w	r6, [r3, r5, lsl #2]
 80016fc:	f426 76f8 	bic.w	r6, r6, #496	; 0x1f0
 8001700:	0536      	lsls	r6, r6, #20
 8001702:	0d36      	lsrs	r6, r6, #20
 8001704:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 8001708:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 800170c:	f823 6025 	strh.w	r6, [r3, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8001710:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8001714:	b2ae      	uxth	r6, r5
 8001716:	780d      	ldrb	r5, [r1, #0]
 8001718:	fb12 6505 	smlabb	r5, r2, r5, r6
 800171c:	88ce      	ldrh	r6, [r1, #6]
 800171e:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8001722:	f026 0601 	bic.w	r6, r6, #1
 8001726:	f824 6015 	strh.w	r6, [r4, r5, lsl #1]
 800172a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800172e:	780e      	ldrb	r6, [r1, #0]
 8001730:	b2ad      	uxth	r5, r5
 8001732:	fb12 5206 	smlabb	r2, r2, r6, r5
 8001736:	890d      	ldrh	r5, [r1, #8]
 8001738:	3204      	adds	r2, #4
 800173a:	f025 0501 	bic.w	r5, r5, #1
 800173e:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 8001742:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in==0U)
 8001744:	784c      	ldrb	r4, [r1, #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001746:	b212      	sxth	r2, r2
    if (ep->is_in==0U)
 8001748:	2c00      	cmp	r4, #0
 800174a:	d13f      	bne.n	80017cc <HAL_PCD_EP_Open+0x27c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800174c:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8001750:	046c      	lsls	r4, r5, #17
 8001752:	bf41      	itttt	mi
 8001754:	ea05 0407 	andmi.w	r4, r5, r7
 8001758:	f444 4440 	orrmi.w	r4, r4, #49152	; 0xc000
 800175c:	f044 0480 	orrmi.w	r4, r4, #128	; 0x80
 8001760:	f823 4022 	strhmi.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001764:	780c      	ldrb	r4, [r1, #0]
 8001766:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800176a:	0657      	lsls	r7, r2, #25
 800176c:	d509      	bpl.n	8001782 <HAL_PCD_EP_Open+0x232>
 800176e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001772:	0512      	lsls	r2, r2, #20
 8001774:	0d12      	lsrs	r2, r2, #20
 8001776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800177a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800177e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001782:	780c      	ldrb	r4, [r1, #0]
 8001784:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001788:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800178c:	0512      	lsls	r2, r2, #20
 800178e:	0d12      	lsrs	r2, r2, #20
 8001790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001794:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001798:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800179c:	780d      	ldrb	r5, [r1, #0]
 800179e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80017a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017aa:	b292      	uxth	r2, r2
 80017ac:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80017b0:	f248 0480 	movw	r4, #32896	; 0x8080
 80017b4:	4322      	orrs	r2, r4
 80017b6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80017ba:	7809      	ldrb	r1, [r1, #0]
 80017bc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80017c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80017c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80017c8:	4322      	orrs	r2, r4
 80017ca:	e72f      	b.n	800162c <HAL_PCD_EP_Open+0xdc>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80017cc:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80017d0:	0466      	lsls	r6, r4, #17
 80017d2:	bf41      	itttt	mi
 80017d4:	403c      	andmi	r4, r7
 80017d6:	f444 4440 	orrmi.w	r4, r4, #49152	; 0xc000
 80017da:	f044 0480 	orrmi.w	r4, r4, #128	; 0x80
 80017de:	f823 4022 	strhmi.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80017e2:	780c      	ldrb	r4, [r1, #0]
 80017e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80017e8:	0655      	lsls	r5, r2, #25
 80017ea:	d509      	bpl.n	8001800 <HAL_PCD_EP_Open+0x2b0>
 80017ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017f0:	0512      	lsls	r2, r2, #20
 80017f2:	0d12      	lsrs	r2, r2, #20
 80017f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017f8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80017fc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8001800:	780c      	ldrb	r4, [r1, #0]
 8001802:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001806:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800180a:	0512      	lsls	r2, r2, #20
 800180c:	0d12      	lsrs	r2, r2, #20
 800180e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001812:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001816:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800181a:	780d      	ldrb	r5, [r1, #0]
 800181c:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8001820:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001828:	f248 0480 	movw	r4, #32896	; 0x8080
 800182c:	4322      	orrs	r2, r4
 800182e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001832:	7809      	ldrb	r1, [r1, #0]
 8001834:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001838:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800183c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001840:	e7c2      	b.n	80017c8 <HAL_PCD_EP_Open+0x278>
  __HAL_LOCK(hpcd); 
 8001842:	2002      	movs	r0, #2
}
 8001844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001846:	bf00      	nop
 8001848:	ffff8000 	.word	0xffff8000

0800184c <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800184c:	b24b      	sxtb	r3, r1
 800184e:	2b00      	cmp	r3, #0
{  
 8001850:	b530      	push	{r4, r5, lr}
 8001852:	f04f 021c 	mov.w	r2, #28
 8001856:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800185a:	bfb5      	itete	lt
 800185c:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001860:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001864:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001866:	f501 71e6 	addge.w	r1, r1, #460	; 0x1cc
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800186a:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 800186c:	700c      	strb	r4, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 800186e:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8001870:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8001874:	2b01      	cmp	r3, #1
 8001876:	f000 80bf 	beq.w	80019f8 <HAL_PCD_EP_Close+0x1ac>
 800187a:	2301      	movs	r3, #1
 800187c:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
 8001880:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0U) 
 8001882:	7a8d      	ldrb	r5, [r1, #10]
 8001884:	784c      	ldrb	r4, [r1, #1]
 8001886:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001888:	b212      	sxth	r2, r2
  if (ep->doublebuffer == 0U) 
 800188a:	bbb5      	cbnz	r5, 80018fa <HAL_PCD_EP_Close+0xae>
    if (ep->is_in)
 800188c:	b1fc      	cbz	r4, 80018ce <HAL_PCD_EP_Close+0x82>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800188e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001892:	0665      	lsls	r5, r4, #25
 8001894:	d509      	bpl.n	80018aa <HAL_PCD_EP_Close+0x5e>
 8001896:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800189a:	0524      	lsls	r4, r4, #20
 800189c:	0d24      	lsrs	r4, r4, #20
 800189e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80018a2:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 80018a6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS) 
 80018aa:	7809      	ldrb	r1, [r1, #0]
 80018ac:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80018b0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80018b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80018b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80018c0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80018c4:	2300      	movs	r3, #0
 80018c6:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  return HAL_OK;
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd30      	pop	{r4, r5, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80018ce:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80018d2:	0465      	lsls	r5, r4, #17
 80018d4:	d509      	bpl.n	80018ea <HAL_PCD_EP_Close+0x9e>
 80018d6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80018da:	0524      	lsls	r4, r4, #20
 80018dc:	0d24      	lsrs	r4, r4, #20
 80018de:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80018e2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80018e6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80018ea:	7809      	ldrb	r1, [r1, #0]
 80018ec:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80018f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018f8:	e7de      	b.n	80018b8 <HAL_PCD_EP_Close+0x6c>
    if (ep->is_in==0U)
 80018fa:	2c00      	cmp	r4, #0
 80018fc:	d13e      	bne.n	800197c <HAL_PCD_EP_Close+0x130>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80018fe:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001902:	0465      	lsls	r5, r4, #17
 8001904:	d509      	bpl.n	800191a <HAL_PCD_EP_Close+0xce>
 8001906:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800190a:	0524      	lsls	r4, r4, #20
 800190c:	0d24      	lsrs	r4, r4, #20
 800190e:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8001912:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001916:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800191a:	780c      	ldrb	r4, [r1, #0]
 800191c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001920:	0655      	lsls	r5, r2, #25
 8001922:	d509      	bpl.n	8001938 <HAL_PCD_EP_Close+0xec>
 8001924:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001928:	0512      	lsls	r2, r2, #20
 800192a:	0d12      	lsrs	r2, r2, #20
 800192c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001930:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001934:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001938:	780c      	ldrb	r4, [r1, #0]
 800193a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800193e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001942:	0512      	lsls	r2, r2, #20
 8001944:	0d12      	lsrs	r2, r2, #20
 8001946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800194a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800194e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001952:	780d      	ldrb	r5, [r1, #0]
 8001954:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8001958:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800195c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001960:	f248 0480 	movw	r4, #32896	; 0x8080
 8001964:	4322      	orrs	r2, r4
 8001966:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800196a:	7809      	ldrb	r1, [r1, #0]
 800196c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001970:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001978:	4322      	orrs	r2, r4
 800197a:	e7a1      	b.n	80018c0 <HAL_PCD_EP_Close+0x74>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800197c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001980:	0465      	lsls	r5, r4, #17
 8001982:	d509      	bpl.n	8001998 <HAL_PCD_EP_Close+0x14c>
 8001984:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8001988:	0524      	lsls	r4, r4, #20
 800198a:	0d24      	lsrs	r4, r4, #20
 800198c:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8001990:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001994:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001998:	780c      	ldrb	r4, [r1, #0]
 800199a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800199e:	0655      	lsls	r5, r2, #25
 80019a0:	d509      	bpl.n	80019b6 <HAL_PCD_EP_Close+0x16a>
 80019a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019a6:	0512      	lsls	r2, r2, #20
 80019a8:	0d12      	lsrs	r2, r2, #20
 80019aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ae:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80019b2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80019b6:	780c      	ldrb	r4, [r1, #0]
 80019b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80019bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019c0:	0512      	lsls	r2, r2, #20
 80019c2:	0d12      	lsrs	r2, r2, #20
 80019c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80019c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80019d0:	780d      	ldrb	r5, [r1, #0]
 80019d2:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80019d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80019da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019de:	f248 0480 	movw	r4, #32896	; 0x8080
 80019e2:	4322      	orrs	r2, r4
 80019e4:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80019e8:	7809      	ldrb	r1, [r1, #0]
 80019ea:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80019ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019f6:	e7bf      	b.n	8001978 <HAL_PCD_EP_Close+0x12c>
  __HAL_LOCK(hpcd); 
 80019f8:	2002      	movs	r0, #2
}
 80019fa:	bd30      	pop	{r4, r5, pc}

080019fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001a02:	241c      	movs	r4, #28
 8001a04:	fb04 0501 	mla	r5, r4, r1, r0
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001a08:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;  
 8001a0a:	f8c5 21dc 	str.w	r2, [r5, #476]	; 0x1dc
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;

  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001a0e:	f8d5 21d8 	ldr.w	r2, [r5, #472]	; 0x1d8
  ep->xfer_len = len;
 8001a12:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0
  if (ep->xfer_len > ep->maxpacket)
 8001a16:	4293      	cmp	r3, r2
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8001a18:	bf86      	itte	hi
 8001a1a:	1a9b      	subhi	r3, r3, r2
 8001a1c:	f8c5 31e0 	strhi.w	r3, [r5, #480]	; 0x1e0
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0U;
 8001a20:	461a      	movls	r2, r3
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0U) 
 8001a22:	fb04 0301 	mla	r3, r4, r1, r0
  ep->xfer_count = 0U;
 8001a26:	f8c5 61e4 	str.w	r6, [r5, #484]	; 0x1e4
  ep->is_in = 0U;
 8001a2a:	f885 61cd 	strb.w	r6, [r5, #461]	; 0x1cd
  ep->num = ep_addr & 0x7FU;
 8001a2e:	f885 11cc 	strb.w	r1, [r5, #460]	; 0x1cc
    ep->xfer_len =0U;
 8001a32:	bf98      	it	ls
 8001a34:	f8c5 61e0 	strls.w	r6, [r5, #480]	; 0x1e0
  if (ep->doublebuffer == 0U) 
 8001a38:	f893 51d6 	ldrb.w	r5, [r3, #470]	; 0x1d6
 8001a3c:	6804      	ldr	r4, [r0, #0]
 8001a3e:	bb7d      	cbnz	r5, 8001aa0 <HAL_PCD_EP_Receive+0xa4>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001a40:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8001a44:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001a48:	b2ad      	uxth	r5, r5
 8001a4a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001a4e:	2a3e      	cmp	r2, #62	; 0x3e
 8001a50:	f103 0306 	add.w	r3, r3, #6
 8001a54:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 8001a58:	d934      	bls.n	8001ac4 <HAL_PCD_EP_Receive+0xc8>
 8001a5a:	f3c2 154f 	ubfx	r5, r2, #5, #16
 8001a5e:	06d2      	lsls	r2, r2, #27
 8001a60:	bf08      	it	eq
 8001a62:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8001a66:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_PCD_EP_Receive+0xd8>)
 8001a68:	bf08      	it	eq
 8001a6a:	b2ad      	uxtheq	r5, r5
 8001a6c:	ea42 2585 	orr.w	r5, r2, r5, lsl #10
 8001a70:	f826 5013 	strh.w	r5, [r6, r3, lsl #1]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001a74:	231c      	movs	r3, #28
 8001a76:	fb03 0001 	mla	r0, r3, r1, r0
 8001a7a:	f890 21cc 	ldrb.w	r2, [r0, #460]	; 0x1cc
 8001a7e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a98:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]

  return HAL_OK;
}
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001aa0:	f893 51cd 	ldrb.w	r5, [r3, #461]	; 0x1cd
 8001aa4:	2d00      	cmp	r5, #0
 8001aa6:	d0cb      	beq.n	8001a40 <HAL_PCD_EP_Receive+0x44>
 8001aa8:	2d01      	cmp	r5, #1
 8001aaa:	d1e3      	bne.n	8001a74 <HAL_PCD_EP_Receive+0x78>
 8001aac:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8001ab0:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001ab4:	b2ad      	uxth	r5, r5
 8001ab6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001aba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001abe:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8001ac2:	e7d7      	b.n	8001a74 <HAL_PCD_EP_Receive+0x78>
 8001ac4:	f3c2 054f 	ubfx	r5, r2, #1, #16
 8001ac8:	07d2      	lsls	r2, r2, #31
 8001aca:	bf44      	itt	mi
 8001acc:	3501      	addmi	r5, #1
 8001ace:	b2ad      	uxthmi	r5, r5
 8001ad0:	02ad      	lsls	r5, r5, #10
 8001ad2:	e7cd      	b.n	8001a70 <HAL_PCD_EP_Receive+0x74>
 8001ad4:	ffff8000 	.word	0xffff8000

08001ad8 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8001ad8:	231c      	movs	r3, #28
 8001ada:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001ade:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001ae2:	f8b1 01e4 	ldrh.w	r0, [r1, #484]	; 0x1e4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aea:	f001 077f 	and.w	r7, r1, #127	; 0x7f
  uint16_t pmabuffer = 0U;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001aee:	241c      	movs	r4, #28
 8001af0:	fb04 0107 	mla	r1, r4, r7, r0
{
 8001af4:	4605      	mov	r5, r0
  ep->xfer_count = 0U;
  ep->is_in = 1U;
  ep->num = ep_addr & 0x7FU;

  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001af6:	6b4e      	ldr	r6, [r1, #52]	; 0x34
  ep->xfer_len = len;
 8001af8:	63cb      	str	r3, [r1, #60]	; 0x3c
  if (ep->xfer_len > ep->maxpacket)
 8001afa:	42b3      	cmp	r3, r6
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8001afc:	bf88      	it	hi
 8001afe:	1b9b      	subhi	r3, r3, r6
  ep->xfer_buff = pBuf;  
 8001b00:	638a      	str	r2, [r1, #56]	; 0x38
  ep->is_in = 1U;
 8001b02:	f04f 0001 	mov.w	r0, #1
  ep->xfer_count = 0U;
 8001b06:	f04f 0200 	mov.w	r2, #0
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8001b0a:	fb04 5407 	mla	r4, r4, r7, r5
  ep->xfer_count = 0U;
 8001b0e:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1U;
 8001b10:	f881 0029 	strb.w	r0, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 8001b14:	f881 7028 	strb.w	r7, [r1, #40]	; 0x28
    ep->xfer_len-=len; 
 8001b18:	bf8e      	itee	hi
 8001b1a:	63cb      	strhi	r3, [r1, #60]	; 0x3c
    ep->xfer_len =0U;
 8001b1c:	63ca      	strls	r2, [r1, #60]	; 0x3c
 8001b1e:	461e      	movls	r6, r3
  if (ep->doublebuffer == 0U) 
 8001b20:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8001b24:	b2b6      	uxth	r6, r6
 8001b26:	bb43      	cbnz	r3, 8001b7a <HAL_PCD_EP_Transmit+0x92>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8001b28:	4633      	mov	r3, r6
 8001b2a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8001b2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001b2e:	6828      	ldr	r0, [r5, #0]
 8001b30:	f000 fb62 	bl	80021f8 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8001b34:	682a      	ldr	r2, [r5, #0]
 8001b36:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8001b3a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001b44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001b48:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8001b4c:	231c      	movs	r3, #28
 8001b4e:	fb03 5707 	mla	r7, r3, r7, r5
 8001b52:	682a      	ldr	r2, [r5, #0]
 8001b54:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001b58:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b72:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8001b76:	2000      	movs	r0, #0
 8001b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001b7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001b7e:	6828      	ldr	r0, [r5, #0]
 8001b80:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8001b84:	065b      	lsls	r3, r3, #25
      pmabuffer = ep->pmaaddr1;
 8001b86:	bf4c      	ite	mi
 8001b88:	8e22      	ldrhmi	r2, [r4, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 8001b8a:	8de2      	ldrhpl	r2, [r4, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8001b8c:	241c      	movs	r4, #28
 8001b8e:	fb04 5407 	mla	r4, r4, r7, r5
 8001b92:	4633      	mov	r3, r6
 8001b94:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001b96:	f000 fb2f 	bl	80021f8 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8001b9a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8001b9e:	682a      	ldr	r2, [r5, #0]
 8001ba0:	b973      	cbnz	r3, 8001bc0 <HAL_PCD_EP_Transmit+0xd8>
 8001ba2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8001ba6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bae:	051b      	lsls	r3, r3, #20
 8001bb0:	0d1b      	lsrs	r3, r3, #20
 8001bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bba:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001bbe:	e7c5      	b.n	8001b4c <HAL_PCD_EP_Transmit+0x64>
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d1c3      	bne.n	8001b4c <HAL_PCD_EP_Transmit+0x64>
 8001bc4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8001bc8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bd0:	051b      	lsls	r3, r3, #20
 8001bd2:	0d1b      	lsrs	r3, r3, #20
 8001bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bdc:	e7ed      	b.n	8001bba <HAL_PCD_EP_Transmit+0xd2>
	...

08001be0 <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001be0:	6803      	ldr	r3, [r0, #0]
 8001be2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001be6:	041b      	lsls	r3, r3, #16
{
 8001be8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bec:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001bee:	d472      	bmi.n	8001cd6 <HAL_PCD_IRQHandler+0xf6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001bf6:	0557      	lsls	r7, r2, #21
 8001bf8:	d50a      	bpl.n	8001c10 <HAL_PCD_IRQHandler+0x30>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bfa:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 8001bfe:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001c04:	f002 fcf5 	bl	80045f2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fc8a 	bl	8001524 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001c16:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001c18:	bf44      	itt	mi
 8001c1a:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8001c1e:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001c22:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001c26:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001c28:	bf44      	itt	mi
 8001c2a:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8001c2e:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001c32:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001c36:	04d6      	lsls	r6, r2, #19
 8001c38:	d517      	bpl.n	8001c6a <HAL_PCD_IRQHandler+0x8a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001c3a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001c3e:	f022 0204 	bic.w	r2, r2, #4
 8001c42:	0412      	lsls	r2, r2, #16
 8001c44:	0c12      	lsrs	r2, r2, #16
 8001c46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c4a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001c4e:	f022 0208 	bic.w	r2, r2, #8
 8001c52:	0412      	lsls	r2, r2, #16
 8001c54:	0c12      	lsrs	r2, r2, #16
 8001c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f002 fce6 	bl	800462c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8001c66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001c70:	0515      	lsls	r5, r2, #20
 8001c72:	d518      	bpl.n	8001ca6 <HAL_PCD_IRQHandler+0xc6>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001c74:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001c78:	b292      	uxth	r2, r2
 8001c7a:	f042 0208 	orr.w	r2, r2, #8
 8001c7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c82:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8001c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001c8a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	f042 0204 	orr.w	r2, r2, #4
 8001c94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9c:	04d8      	lsls	r0, r3, #19
 8001c9e:	d402      	bmi.n	8001ca6 <HAL_PCD_IRQHandler+0xc6>
      HAL_PCD_SuspendCallback(hpcd);
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f002 fcb3 	bl	800460c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001cac:	0591      	lsls	r1, r2, #22
 8001cae:	d506      	bpl.n	8001cbe <HAL_PCD_IRQHandler+0xde>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001cb0:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8001cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f002 fc96 	bl	80045ea <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001cc4:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8001cc6:	bf44      	itt	mi
 8001cc8:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8001ccc:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 8001cd0:	b002      	add	sp, #8
 8001cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __IO uint16_t wEPVal = 0U;
 8001cd6:	2300      	movs	r3, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8001cd8:	4fc3      	ldr	r7, [pc, #780]	; (8001fe8 <HAL_PCD_IRQHandler+0x408>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8001cda:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8001fec <HAL_PCD_IRQHandler+0x40c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8001cde:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8001ff0 <HAL_PCD_IRQHandler+0x410>
  __IO uint16_t wEPVal = 0U;
 8001ce2:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8001ce6:	6820      	ldr	r0, [r4, #0]
 8001ce8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	0419      	lsls	r1, r3, #16
 8001cf0:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001cf4:	f57f af7c 	bpl.w	8001bf0 <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001cf8:	f8bd 6004 	ldrh.w	r6, [sp, #4]
    if (EPindex == 0U)
 8001cfc:	f016 060f 	ands.w	r6, r6, #15
 8001d00:	f040 80a9 	bne.w	8001e56 <HAL_PCD_IRQHandler+0x276>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d04:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d08:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d0a:	f011 0110 	ands.w	r1, r1, #16
 8001d0e:	d126      	bne.n	8001d5e <HAL_PCD_IRQHandler+0x17e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d10:	403b      	ands	r3, r7
 8001d12:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001d18:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001d22:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8001d26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d28:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8001d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d30:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8001d32:	4413      	add	r3, r2
 8001d34:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d36:	4620      	mov	r0, r4
 8001d38:	f002 fc4f 	bl	80045da <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001d3c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0d0      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x106>
 8001d44:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d1cd      	bne.n	8001ce6 <HAL_PCD_IRQHandler+0x106>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001d4a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001d4e:	6821      	ldr	r1, [r4, #0]
 8001d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d54:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d58:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001d5c:	e7c3      	b.n	8001ce6 <HAL_PCD_IRQHandler+0x106>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001d68:	051e      	lsls	r6, r3, #20
 8001d6a:	d51f      	bpl.n	8001dac <HAL_PCD_IRQHandler+0x1cc>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d6c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001d70:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001d7a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 8001d7e:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8001d82:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d8a:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 8001d8e:	f504 715d 	add.w	r1, r4, #884	; 0x374
 8001d92:	f000 fa44 	bl	800221e <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	8813      	ldrh	r3, [r2, #0]
 8001d9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da2:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001da4:	4620      	mov	r0, r4
 8001da6:	f002 fc09 	bl	80045bc <HAL_PCD_SetupStageCallback>
 8001daa:	e79c      	b.n	8001ce6 <HAL_PCD_IRQHandler+0x106>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001db0:	041d      	lsls	r5, r3, #16
 8001db2:	d598      	bpl.n	8001ce6 <HAL_PCD_IRQHandler+0x106>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001db4:	8803      	ldrh	r3, [r0, #0]
 8001db6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dbe:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dc0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001dc4:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001dce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001dd2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dda:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
          if (ep->xfer_count != 0U)
 8001dde:	b163      	cbz	r3, 8001dfa <HAL_PCD_IRQHandler+0x21a>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001de0:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8001de4:	f8d4 11dc 	ldr.w	r1, [r4, #476]	; 0x1dc
 8001de8:	f000 fa19 	bl	800221e <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001dec:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 8001df0:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8001df4:	4413      	add	r3, r2
 8001df6:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f002 fbe3 	bl	80045c8 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
 8001e08:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001e0c:	283e      	cmp	r0, #62	; 0x3e
 8001e0e:	b289      	uxth	r1, r1
 8001e10:	f101 0106 	add.w	r1, r1, #6
 8001e14:	f502 6580 	add.w	r5, r2, #1024	; 0x400
 8001e18:	d915      	bls.n	8001e46 <HAL_PCD_IRQHandler+0x266>
 8001e1a:	f3c0 134f 	ubfx	r3, r0, #5, #16
 8001e1e:	06c0      	lsls	r0, r0, #27
 8001e20:	bf04      	itt	eq
 8001e22:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8001e26:	b29b      	uxtheq	r3, r3
 8001e28:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8001e2c:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8001e30:	8813      	ldrh	r3, [r2, #0]
 8001e32:	ea08 0303 	and.w	r3, r8, r3
 8001e36:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e42:	8013      	strh	r3, [r2, #0]
 8001e44:	e74f      	b.n	8001ce6 <HAL_PCD_IRQHandler+0x106>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8001e46:	f3c0 034f 	ubfx	r3, r0, #1, #16
 8001e4a:	07c6      	lsls	r6, r0, #31
 8001e4c:	bf44      	itt	mi
 8001e4e:	3301      	addmi	r3, #1
 8001e50:	b29b      	uxthmi	r3, r3
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	e7ea      	b.n	8001e2c <HAL_PCD_IRQHandler+0x24c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8001e56:	fa0f fa86 	sxth.w	sl, r6
 8001e5a:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8001e5e:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001e66:	0415      	lsls	r5, r2, #16
 8001e68:	d53e      	bpl.n	8001ee8 <HAL_PCD_IRQHandler+0x308>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001e6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
        if (ep->doublebuffer == 0U)
 8001e72:	211c      	movs	r1, #28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001e74:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0U)
 8001e78:	fb01 4106 	mla	r1, r1, r6, r4
 8001e7c:	f891 31d6 	ldrb.w	r3, [r1, #470]	; 0x1d6
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d172      	bne.n	8001f6a <HAL_PCD_IRQHandler+0x38a>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e84:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001e88:	f891 21cc 	ldrb.w	r2, [r1, #460]	; 0x1cc
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001e92:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e96:	f8b3 540c 	ldrh.w	r5, [r3, #1036]	; 0x40c
 8001e9a:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001e9e:	b135      	cbz	r5, 8001eae <HAL_PCD_IRQHandler+0x2ce>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ea0:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
 8001ea4:	f8d1 11dc 	ldr.w	r1, [r1, #476]	; 0x1dc
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	f000 f9b8 	bl	800221e <PCD_ReadPMA>
        ep->xfer_count+=count;
 8001eae:	211c      	movs	r1, #28
 8001eb0:	fb01 4106 	mla	r1, r1, r6, r4
 8001eb4:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
        ep->xfer_buff+=count;
 8001eb8:	f8d1 21dc 	ldr.w	r2, [r1, #476]	; 0x1dc
        ep->xfer_count+=count;
 8001ebc:	442b      	add	r3, r5
 8001ebe:	f8c1 31e4 	str.w	r3, [r1, #484]	; 0x1e4
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ec2:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
        ep->xfer_buff+=count;
 8001ec6:	442a      	add	r2, r5
 8001ec8:	f8c1 21dc 	str.w	r2, [r1, #476]	; 0x1dc
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ecc:	b123      	cbz	r3, 8001ed8 <HAL_PCD_IRQHandler+0x2f8>
 8001ece:	f8d1 01d8 	ldr.w	r0, [r1, #472]	; 0x1d8
 8001ed2:	4285      	cmp	r5, r0
 8001ed4:	f080 8082 	bcs.w	8001fdc <HAL_PCD_IRQHandler+0x3fc>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ed8:	231c      	movs	r3, #28
 8001eda:	fb03 4306 	mla	r3, r3, r6, r4
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f893 11cc 	ldrb.w	r1, [r3, #460]	; 0x1cc
 8001ee4:	f002 fb70 	bl	80045c8 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ee8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001eec:	0618      	lsls	r0, r3, #24
 8001eee:	f57f aefa 	bpl.w	8001ce6 <HAL_PCD_IRQHandler+0x106>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8001ef2:	6820      	ldr	r0, [r4, #0]
 8001ef4:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0U)
 8001ef8:	211c      	movs	r1, #28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8001efa:	403b      	ands	r3, r7
 8001efc:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0U)
 8001f00:	fb01 4106 	mla	r1, r1, r6, r4
 8001f04:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d173      	bne.n	8001ff4 <HAL_PCD_IRQHandler+0x414>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f0c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f10:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f1a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001f1e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f26:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0U)
 8001f28:	b11b      	cbz	r3, 8001f32 <HAL_PCD_IRQHandler+0x352>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001f2a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001f2c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001f2e:	f000 f963 	bl	80021f8 <PCD_WritePMA>
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f32:	6822      	ldr	r2, [r4, #0]
 8001f34:	211c      	movs	r1, #28
 8001f36:	fb01 4606 	mla	r6, r1, r6, r4
 8001f3a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001f3e:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001f48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f4c:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f4e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8001f52:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f54:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001f58:	6432      	str	r2, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8001f5a:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8001f5c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 8001f5e:	63b2      	str	r2, [r6, #56]	; 0x38
        if (ep->xfer_len == 0U)
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d17d      	bne.n	8002060 <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f64:	f002 fb39 	bl	80045da <HAL_PCD_DataInStageCallback>
 8001f68:	e6bd      	b.n	8001ce6 <HAL_PCD_IRQHandler+0x106>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001f6a:	f891 51cc 	ldrb.w	r5, [r1, #460]	; 0x1cc
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f6e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001f72:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f76:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001f78:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001f7c:	f04f 0308 	mov.w	r3, #8
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f80:	fb13 2305 	smlabb	r3, r3, r5, r2
 8001f84:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001f88:	d01e      	beq.n	8001fc8 <HAL_PCD_IRQHandler+0x3e8>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f8a:	f8b3 5404 	ldrh.w	r5, [r3, #1028]	; 0x404
 8001f8e:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001f92:	b135      	cbz	r5, 8001fa2 <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f94:	f8b1 21d2 	ldrh.w	r2, [r1, #466]	; 0x1d2
 8001f98:	462b      	mov	r3, r5
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f9a:	f8d1 11dc 	ldr.w	r1, [r1, #476]	; 0x1dc
 8001f9e:	f000 f93e 	bl	800221e <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8001fa2:	231c      	movs	r3, #28
 8001fa4:	fb03 4306 	mla	r3, r3, r6, r4
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	f893 11cc 	ldrb.w	r1, [r3, #460]	; 0x1cc
 8001fae:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fb6:	051b      	lsls	r3, r3, #20
 8001fb8:	0d1b      	lsrs	r3, r3, #20
 8001fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fc2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001fc6:	e772      	b.n	8001eae <HAL_PCD_IRQHandler+0x2ce>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fc8:	f8b3 540c 	ldrh.w	r5, [r3, #1036]	; 0x40c
 8001fcc:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001fd0:	2d00      	cmp	r5, #0
 8001fd2:	d0e6      	beq.n	8001fa2 <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fd4:	462b      	mov	r3, r5
 8001fd6:	f8b1 21d4 	ldrh.w	r2, [r1, #468]	; 0x1d4
 8001fda:	e7de      	b.n	8001f9a <HAL_PCD_IRQHandler+0x3ba>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001fdc:	f891 11cc 	ldrb.w	r1, [r1, #460]	; 0x1cc
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7ff fd0b 	bl	80019fc <HAL_PCD_EP_Receive>
 8001fe6:	e77f      	b.n	8001ee8 <HAL_PCD_IRQHandler+0x308>
 8001fe8:	ffff8f0f 	.word	0xffff8f0f
 8001fec:	ffffbf8f 	.word	0xffffbf8f
 8001ff0:	ffff8000 	.word	0xffff8000
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001ff4:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ff8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001ffc:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002000:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8002002:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002006:	f04f 0308 	mov.w	r3, #8
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800200a:	fb13 2305 	smlabb	r3, r3, r5, r2
 800200e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8002012:	d01c      	beq.n	800204e <HAL_PCD_IRQHandler+0x46e>
 8002014:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8002018:	f3c3 0309 	ubfx	r3, r3, #0, #10
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800201c:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0U)
 800201e:	b11b      	cbz	r3, 8002028 <HAL_PCD_IRQHandler+0x448>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002020:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002022:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8002024:	f000 f8e8 	bl	80021f8 <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN)  
 8002028:	231c      	movs	r3, #28
 800202a:	fb03 4306 	mla	r3, r3, r6, r4
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8002034:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002038:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203c:	051b      	lsls	r3, r3, #20
 800203e:	0d1b      	lsrs	r3, r3, #20
 8002040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002048:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800204c:	e771      	b.n	8001f32 <HAL_PCD_IRQHandler+0x352>
 800204e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002052:	f3c3 0309 	ubfx	r3, r3, #0, #10
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002056:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0e5      	beq.n	8002028 <HAL_PCD_IRQHandler+0x448>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800205c:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800205e:	e7e0      	b.n	8002022 <HAL_PCD_IRQHandler+0x442>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002060:	f7ff fd42 	bl	8001ae8 <HAL_PCD_EP_Transmit>
 8002064:	e63f      	b.n	8001ce6 <HAL_PCD_IRQHandler+0x106>
 8002066:	bf00      	nop

08002068 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002068:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 800206c:	2b01      	cmp	r3, #1
{
 800206e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8002070:	d045      	beq.n	80020fe <HAL_PCD_EP_SetStall+0x96>
   
  if ((0x80U & ep_addr) == 0x80U)
 8002072:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 8002074:	2301      	movs	r3, #1
 8002076:	221c      	movs	r2, #28
 8002078:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  if ((0x80U & ep_addr) == 0x80U)
 800207c:	2c00      	cmp	r4, #0
 800207e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002082:	bfb5      	itete	lt
 8002084:	fb02 0203 	mlalt	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002088:	fb02 0201 	mlage	r2, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800208c:	3228      	addlt	r2, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800208e:	f502 72e6 	addge.w	r2, r2, #460	; 0x1cc
  }
  
  ep->is_stall = 1U;
 8002092:	2101      	movs	r1, #1
 8002094:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7FU;
 8002096:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002098:	0fe3      	lsrs	r3, r4, #31
  ep->num   = ep_addr & 0x7FU;
 800209a:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800209c:	7053      	strb	r3, [r2, #1]
 800209e:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0U)
 80020a0:	b991      	cbnz	r1, 80020c8 <HAL_PCD_EP_SetStall+0x60>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL) 
 80020a2:	8813      	ldrh	r3, [r2, #0]
 80020a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020b0:	f083 0310 	eor.w	r3, r3, #16
 80020b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	8013      	strh	r3, [r2, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
    }
  }
  __HAL_UNLOCK(hpcd); 
 80020be:	2300      	movs	r3, #0
 80020c0:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  
  return HAL_OK;
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd10      	pop	{r4, pc}
 80020c8:	b209      	sxth	r1, r1
    if (ep->is_in)
 80020ca:	2c00      	cmp	r4, #0
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL) 
 80020cc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80020d0:	bfb5      	itete	lt
 80020d2:	f423 43e0 	biclt.w	r3, r3, #28672	; 0x7000
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 80020d6:	f423 4380 	bicge.w	r3, r3, #16384	; 0x4000
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL) 
 80020da:	f023 0340 	biclt.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 80020de:	f023 0370 	bicge.w	r3, r3, #112	; 0x70
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL) 
 80020e2:	bfb5      	itete	lt
 80020e4:	b29b      	uxthlt	r3, r3
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 80020e6:	b29b      	uxthge	r3, r3
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL) 
 80020e8:	f083 0310 	eorlt.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 80020ec:	f483 5380 	eorge.w	r3, r3, #4096	; 0x1000
 80020f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80020fc:	e7df      	b.n	80020be <HAL_PCD_EP_SetStall+0x56>
  __HAL_LOCK(hpcd); 
 80020fe:	2002      	movs	r0, #2
}
 8002100:	bd10      	pop	{r4, pc}

08002102 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8002102:	b24b      	sxtb	r3, r1
 8002104:	2b00      	cmp	r3, #0
{
 8002106:	b510      	push	{r4, lr}
 8002108:	f04f 021c 	mov.w	r2, #28
 800210c:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002110:	bfb5      	itete	lt
 8002112:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002116:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800211a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800211c:	f501 71e6 	addge.w	r1, r1, #460	; 0x1cc
  }
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002120:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8002122:	2200      	movs	r2, #0
 8002124:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8002126:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002128:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800212a:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 800212e:	2b01      	cmp	r3, #1
 8002130:	d045      	beq.n	80021be <HAL_PCD_EP_ClrStall+0xbc>
 8002132:	2301      	movs	r3, #1
 8002134:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
 8002138:	780b      	ldrb	r3, [r1, #0]
  
  if (ep->is_in)
 800213a:	784c      	ldrb	r4, [r1, #1]
 800213c:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800213e:	b21b      	sxth	r3, r3
  if (ep->is_in)
 8002140:	b31c      	cbz	r4, 800218a <HAL_PCD_EP_ClrStall+0x88>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002142:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 8002146:	f014 0f40 	tst.w	r4, #64	; 0x40
 800214a:	d009      	beq.n	8002160 <HAL_PCD_EP_ClrStall+0x5e>
 800214c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8002150:	0524      	lsls	r4, r4, #20
 8002152:	0d24      	lsrs	r4, r4, #20
 8002154:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002158:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800215c:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8002160:	7809      	ldrb	r1, [r1, #0]
 8002162:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800216a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800216e:	b29b      	uxth	r3, r3
 8002170:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8002180:	2300      	movs	r3, #0
 8002182:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
    
  return HAL_OK;
 8002186:	4618      	mov	r0, r3
 8002188:	bd10      	pop	{r4, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800218a:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 800218e:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8002192:	d009      	beq.n	80021a8 <HAL_PCD_EP_ClrStall+0xa6>
 8002194:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8002198:	0524      	lsls	r4, r4, #20
 800219a:	0d24      	lsrs	r4, r4, #20
 800219c:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80021a0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80021a4:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80021a8:	7809      	ldrb	r1, [r1, #0]
 80021aa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80021ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80021bc:	e7da      	b.n	8002174 <HAL_PCD_EP_ClrStall+0x72>
  __HAL_LOCK(hpcd); 
 80021be:	2002      	movs	r0, #2
}
 80021c0:	bd10      	pop	{r4, pc}

080021c2 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80021c2:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80021c6:	b510      	push	{r4, lr}
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80021c8:	bf18      	it	ne
 80021ca:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80021ce:	f04f 041c 	mov.w	r4, #28
 80021d2:	bf15      	itete	ne
 80021d4:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021d8:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80021dc:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80021de:	f500 70e6 	addeq.w	r0, r0, #460	; 0x1cc
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80021e2:	b91a      	cbnz	r2, 80021ec <HAL_PCDEx_PMAConfig+0x2a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80021e4:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80021e6:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 80021e8:	2000      	movs	r0, #0
 80021ea:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1;
 80021ec:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 80021ee:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80021f0:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 80021f2:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80021f4:	8103      	strh	r3, [r0, #8]
 80021f6:	e7f7      	b.n	80021e8 <HAL_PCDEx_PMAConfig+0x26>

080021f8 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80021f8:	3301      	adds	r3, #1
  
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 80021fa:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80021fe:	f023 0301 	bic.w	r3, r3, #1
{
 8002202:	b530      	push	{r4, r5, lr}
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 8002204:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002208:	440b      	add	r3, r1
  
  for (i = n; i != 0; i--)
 800220a:	460c      	mov	r4, r1
 800220c:	429c      	cmp	r4, r3
 800220e:	d100      	bne.n	8002212 <PCD_WritePMA+0x1a>
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002210:	bd30      	pop	{r4, r5, pc}
    *pdwVal++ = temp2;
 8002212:	1a60      	subs	r0, r4, r1
 8002214:	8825      	ldrh	r5, [r4, #0]
 8002216:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
 800221a:	3402      	adds	r4, #2
 800221c:	e7f6      	b.n	800220c <PCD_WritePMA+0x14>

0800221e <PCD_ReadPMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800221e:	b570      	push	{r4, r5, r6, lr}
  uint32_t n = (uint32_t)wNBytes >> 1U;
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 8002220:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8002224:	085d      	lsrs	r5, r3, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 8002226:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800222a:	1c8c      	adds	r4, r1, #2
  
  for (i = n; i != 0U; i--)
 800222c:	462e      	mov	r6, r5
 800222e:	b936      	cbnz	r6, 800223e <PCD_ReadPMA+0x20>
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
    pdwVal++;
  }

  if (wNBytes % 2)
 8002230:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal++;
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8002232:	bf44      	itt	mi
 8002234:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
 8002238:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 800223c:	bd70      	pop	{r4, r5, r6, pc}
    temp = *pdwVal++;
 800223e:	1a60      	subs	r0, r4, r1
 8002240:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  for (i = n; i != 0U; i--)
 8002244:	3e01      	subs	r6, #1
    temp = *pdwVal++;
 8002246:	f830 0c04 	ldrh.w	r0, [r0, #-4]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 800224a:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 800224e:	0a00      	lsrs	r0, r0, #8
 8002250:	f804 0c01 	strb.w	r0, [r4, #-1]
 8002254:	3402      	adds	r4, #2
 8002256:	e7ea      	b.n	800222e <PCD_ReadPMA+0x10>

08002258 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002258:	6803      	ldr	r3, [r0, #0]
 800225a:	07da      	lsls	r2, r3, #31
{
 800225c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002260:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002262:	d411      	bmi.n	8002288 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002264:	682b      	ldr	r3, [r5, #0]
 8002266:	079b      	lsls	r3, r3, #30
 8002268:	f100 8088 	bmi.w	800237c <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	071c      	lsls	r4, r3, #28
 8002270:	f100 80f8 	bmi.w	8002464 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	0758      	lsls	r0, r3, #29
 8002278:	f100 8141 	bmi.w	80024fe <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227c:	69ea      	ldr	r2, [r5, #28]
 800227e:	2a00      	cmp	r2, #0
 8002280:	f040 81d7 	bne.w	8002632 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002284:	2000      	movs	r0, #0
 8002286:	e021      	b.n	80022cc <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002288:	4cba      	ldr	r4, [pc, #744]	; (8002574 <HAL_RCC_OscConfig+0x31c>)
 800228a:	6863      	ldr	r3, [r4, #4]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b04      	cmp	r3, #4
 8002292:	d007      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002294:	6863      	ldr	r3, [r4, #4]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	d119      	bne.n	80022d2 <HAL_RCC_OscConfig+0x7a>
 800229e:	6863      	ldr	r3, [r4, #4]
 80022a0:	03df      	lsls	r7, r3, #15
 80022a2:	d516      	bpl.n	80022d2 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	6821      	ldr	r1, [r4, #0]
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	2201      	movs	r2, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	420b      	tst	r3, r1
 80022c2:	d0cf      	beq.n	8002264 <HAL_RCC_OscConfig+0xc>
 80022c4:	686b      	ldr	r3, [r5, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1cc      	bne.n	8002264 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80022ca:	2001      	movs	r0, #1
}
 80022cc:	b002      	add	sp, #8
 80022ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	686a      	ldr	r2, [r5, #4]
 80022d4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80022d8:	d125      	bne.n	8002326 <HAL_RCC_OscConfig+0xce>
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022e4:	68a9      	ldr	r1, [r5, #8]
 80022e6:	f023 030f 	bic.w	r3, r3, #15
 80022ea:	430b      	orrs	r3, r1
 80022ec:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ee:	b352      	cbz	r2, 8002346 <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 80022f0:	f7fe fc80 	bl	8000bf4 <HAL_GetTick>
 80022f4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80022f8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	2701      	movs	r7, #1
 80022fc:	fa96 f3a6 	rbit	r3, r6
 8002300:	6822      	ldr	r2, [r4, #0]
 8002302:	fa96 f3a6 	rbit	r3, r6
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	fa07 f303 	lsl.w	r3, r7, r3
 8002312:	4213      	tst	r3, r2
 8002314:	d1a6      	bne.n	8002264 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002316:	f7fe fc6d 	bl	8000bf4 <HAL_GetTick>
 800231a:	eba0 0008 	sub.w	r0, r0, r8
 800231e:	2864      	cmp	r0, #100	; 0x64
 8002320:	d9ec      	bls.n	80022fc <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8002322:	2003      	movs	r0, #3
 8002324:	e7d2      	b.n	80022cc <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	b932      	cbnz	r2, 8002338 <HAL_RCC_OscConfig+0xe0>
 800232a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232e:	6023      	str	r3, [r4, #0]
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	e7d3      	b.n	80022e0 <HAL_RCC_OscConfig+0x88>
 8002338:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800233c:	d1f5      	bne.n	800232a <HAL_RCC_OscConfig+0xd2>
 800233e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002342:	6023      	str	r3, [r4, #0]
 8002344:	e7c9      	b.n	80022da <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002346:	f7fe fc55 	bl	8000bf4 <HAL_GetTick>
 800234a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800234e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002350:	2701      	movs	r7, #1
 8002352:	fa96 f3a6 	rbit	r3, r6
 8002356:	6822      	ldr	r2, [r4, #0]
 8002358:	fa96 f3a6 	rbit	r3, r6
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa07 f303 	lsl.w	r3, r7, r3
 8002368:	4213      	tst	r3, r2
 800236a:	f43f af7b 	beq.w	8002264 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236e:	f7fe fc41 	bl	8000bf4 <HAL_GetTick>
 8002372:	eba0 0008 	sub.w	r0, r0, r8
 8002376:	2864      	cmp	r0, #100	; 0x64
 8002378:	d9eb      	bls.n	8002352 <HAL_RCC_OscConfig+0xfa>
 800237a:	e7d2      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800237c:	4c7d      	ldr	r4, [pc, #500]	; (8002574 <HAL_RCC_OscConfig+0x31c>)
 800237e:	6863      	ldr	r3, [r4, #4]
 8002380:	f013 0f0c 	tst.w	r3, #12
 8002384:	d007      	beq.n	8002396 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002386:	6863      	ldr	r3, [r4, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	d121      	bne.n	80023d4 <HAL_RCC_OscConfig+0x17c>
 8002390:	6863      	ldr	r3, [r4, #4]
 8002392:	03de      	lsls	r6, r3, #15
 8002394:	d41e      	bmi.n	80023d4 <HAL_RCC_OscConfig+0x17c>
 8002396:	2302      	movs	r3, #2
 8002398:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239c:	6821      	ldr	r1, [r4, #0]
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	2201      	movs	r2, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	420b      	tst	r3, r1
 80023b2:	d002      	beq.n	80023ba <HAL_RCC_OscConfig+0x162>
 80023b4:	692b      	ldr	r3, [r5, #16]
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d187      	bne.n	80022ca <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	6821      	ldr	r1, [r4, #0]
 80023bc:	23f8      	movs	r3, #248	; 0xf8
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	fab3 f283 	clz	r2, r3
 80023c6:	696b      	ldr	r3, [r5, #20]
 80023c8:	4093      	lsls	r3, r2
 80023ca:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80023ce:	4313      	orrs	r3, r2
 80023d0:	6023      	str	r3, [r4, #0]
 80023d2:	e74b      	b.n	800226c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d4:	692a      	ldr	r2, [r5, #16]
 80023d6:	2601      	movs	r6, #1
 80023d8:	b30a      	cbz	r2, 800241e <HAL_RCC_OscConfig+0x1c6>
 80023da:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	2702      	movs	r7, #2
 80023ee:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80023f0:	f7fe fc00 	bl	8000bf4 <HAL_GetTick>
 80023f4:	4680      	mov	r8, r0
 80023f6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	6822      	ldr	r2, [r4, #0]
 80023fc:	fa97 f3a7 	rbit	r3, r7
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa06 f303 	lsl.w	r3, r6, r3
 800240c:	4213      	tst	r3, r2
 800240e:	d1d4      	bne.n	80023ba <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002410:	f7fe fbf0 	bl	8000bf4 <HAL_GetTick>
 8002414:	eba0 0008 	sub.w	r0, r0, r8
 8002418:	2802      	cmp	r0, #2
 800241a:	d9ec      	bls.n	80023f6 <HAL_RCC_OscConfig+0x19e>
 800241c:	e781      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
 800241e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800242a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	2702      	movs	r7, #2
 8002432:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002434:	f7fe fbde 	bl	8000bf4 <HAL_GetTick>
 8002438:	4680      	mov	r8, r0
 800243a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	6822      	ldr	r2, [r4, #0]
 8002440:	fa97 f3a7 	rbit	r3, r7
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	fa06 f303 	lsl.w	r3, r6, r3
 8002450:	4213      	tst	r3, r2
 8002452:	f43f af0b 	beq.w	800226c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002456:	f7fe fbcd 	bl	8000bf4 <HAL_GetTick>
 800245a:	eba0 0008 	sub.w	r0, r0, r8
 800245e:	2802      	cmp	r0, #2
 8002460:	d9eb      	bls.n	800243a <HAL_RCC_OscConfig+0x1e2>
 8002462:	e75e      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002464:	69aa      	ldr	r2, [r5, #24]
 8002466:	4e43      	ldr	r6, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x31c>)
 8002468:	4943      	ldr	r1, [pc, #268]	; (8002578 <HAL_RCC_OscConfig+0x320>)
 800246a:	2401      	movs	r4, #1
 800246c:	b31a      	cbz	r2, 80024b6 <HAL_RCC_OscConfig+0x25e>
 800246e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	440b      	add	r3, r1
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	2702      	movs	r7, #2
 800247c:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800247e:	f7fe fbb9 	bl	8000bf4 <HAL_GetTick>
 8002482:	4680      	mov	r8, r0
 8002484:	fa97 f3a7 	rbit	r3, r7
 8002488:	fa97 f3a7 	rbit	r3, r7
 800248c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002490:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002492:	fa97 f3a7 	rbit	r3, r7
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	fa04 f303 	lsl.w	r3, r4, r3
 80024a2:	4213      	tst	r3, r2
 80024a4:	f47f aee6 	bne.w	8002274 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a8:	f7fe fba4 	bl	8000bf4 <HAL_GetTick>
 80024ac:	eba0 0008 	sub.w	r0, r0, r8
 80024b0:	2802      	cmp	r0, #2
 80024b2:	d9e7      	bls.n	8002484 <HAL_RCC_OscConfig+0x22c>
 80024b4:	e735      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
 80024b6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	440b      	add	r3, r1
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	2702      	movs	r7, #2
 80024c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024c6:	f7fe fb95 	bl	8000bf4 <HAL_GetTick>
 80024ca:	4680      	mov	r8, r0
 80024cc:	fa97 f3a7 	rbit	r3, r7
 80024d0:	fa97 f3a7 	rbit	r3, r7
 80024d4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80024da:	fa97 f3a7 	rbit	r3, r7
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	fa04 f303 	lsl.w	r3, r4, r3
 80024ea:	4213      	tst	r3, r2
 80024ec:	f43f aec2 	beq.w	8002274 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe fb80 	bl	8000bf4 <HAL_GetTick>
 80024f4:	eba0 0008 	sub.w	r0, r0, r8
 80024f8:	2802      	cmp	r0, #2
 80024fa:	d9e7      	bls.n	80024cc <HAL_RCC_OscConfig+0x274>
 80024fc:	e711      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4c1d      	ldr	r4, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x31c>)
 8002500:	69e3      	ldr	r3, [r4, #28]
 8002502:	00d9      	lsls	r1, r3, #3
 8002504:	d434      	bmi.n	8002570 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	69e3      	ldr	r3, [r4, #28]
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	61e3      	str	r3, [r4, #28]
 800250e:	69e3      	ldr	r3, [r4, #28]
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002518:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4f18      	ldr	r7, [pc, #96]	; (800257c <HAL_RCC_OscConfig+0x324>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	05da      	lsls	r2, r3, #23
 8002520:	d52e      	bpl.n	8002580 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002522:	68eb      	ldr	r3, [r5, #12]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d13c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x34a>
 8002528:	6a23      	ldr	r3, [r4, #32]
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002530:	f7fe fb60 	bl	8000bf4 <HAL_GetTick>
 8002534:	2702      	movs	r7, #2
 8002536:	4682      	mov	sl, r0
 8002538:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	f04f 0801 	mov.w	r8, #1
 800253e:	fa97 f3a7 	rbit	r3, r7
 8002542:	fa97 f3a7 	rbit	r3, r7
 8002546:	2b00      	cmp	r3, #0
 8002548:	d06b      	beq.n	8002622 <HAL_RCC_OscConfig+0x3ca>
 800254a:	6a22      	ldr	r2, [r4, #32]
 800254c:	fa99 f3a9 	rbit	r3, r9
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	fa08 f303 	lsl.w	r3, r8, r3
 800255c:	4213      	tst	r3, r2
 800255e:	d057      	beq.n	8002610 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8002560:	2e00      	cmp	r6, #0
 8002562:	f43f ae8b 	beq.w	800227c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002566:	69e3      	ldr	r3, [r4, #28]
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256c:	61e3      	str	r3, [r4, #28]
 800256e:	e685      	b.n	800227c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002570:	2600      	movs	r6, #0
 8002572:	e7d2      	b.n	800251a <HAL_RCC_OscConfig+0x2c2>
 8002574:	40021000 	.word	0x40021000
 8002578:	10908120 	.word	0x10908120
 800257c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002586:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002588:	f7fe fb34 	bl	8000bf4 <HAL_GetTick>
 800258c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	05db      	lsls	r3, r3, #23
 8002592:	d4c6      	bmi.n	8002522 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7fe fb2e 	bl	8000bf4 <HAL_GetTick>
 8002598:	eba0 0008 	sub.w	r0, r0, r8
 800259c:	2864      	cmp	r0, #100	; 0x64
 800259e:	d9f6      	bls.n	800258e <HAL_RCC_OscConfig+0x336>
 80025a0:	e6bf      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a2:	bb3b      	cbnz	r3, 80025f4 <HAL_RCC_OscConfig+0x39c>
 80025a4:	6a23      	ldr	r3, [r4, #32]
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	6223      	str	r3, [r4, #32]
 80025ac:	6a23      	ldr	r3, [r4, #32]
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80025b4:	f7fe fb1e 	bl	8000bf4 <HAL_GetTick>
 80025b8:	2702      	movs	r7, #2
 80025ba:	4682      	mov	sl, r0
 80025bc:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025be:	f04f 0801 	mov.w	r8, #1
 80025c2:	fa97 f3a7 	rbit	r3, r7
 80025c6:	fa97 f3a7 	rbit	r3, r7
 80025ca:	b373      	cbz	r3, 800262a <HAL_RCC_OscConfig+0x3d2>
 80025cc:	6a22      	ldr	r2, [r4, #32]
 80025ce:	fa99 f3a9 	rbit	r3, r9
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	fa08 f303 	lsl.w	r3, r8, r3
 80025de:	4213      	tst	r3, r2
 80025e0:	d0be      	beq.n	8002560 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe fb07 	bl	8000bf4 <HAL_GetTick>
 80025e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80025ea:	eba0 000a 	sub.w	r0, r0, sl
 80025ee:	4298      	cmp	r0, r3
 80025f0:	d9e7      	bls.n	80025c2 <HAL_RCC_OscConfig+0x36a>
 80025f2:	e696      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	6a23      	ldr	r3, [r4, #32]
 80025f8:	d103      	bne.n	8002602 <HAL_RCC_OscConfig+0x3aa>
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	6223      	str	r3, [r4, #32]
 8002600:	e792      	b.n	8002528 <HAL_RCC_OscConfig+0x2d0>
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	6223      	str	r3, [r4, #32]
 8002608:	6a23      	ldr	r3, [r4, #32]
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	e78e      	b.n	800252e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7fe faf0 	bl	8000bf4 <HAL_GetTick>
 8002614:	f241 3388 	movw	r3, #5000	; 0x1388
 8002618:	eba0 000a 	sub.w	r0, r0, sl
 800261c:	4298      	cmp	r0, r3
 800261e:	d98e      	bls.n	800253e <HAL_RCC_OscConfig+0x2e6>
 8002620:	e67f      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
 8002622:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002628:	e790      	b.n	800254c <HAL_RCC_OscConfig+0x2f4>
 800262a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002630:	e7cd      	b.n	80025ce <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002632:	4c41      	ldr	r4, [pc, #260]	; (8002738 <HAL_RCC_OscConfig+0x4e0>)
 8002634:	6863      	ldr	r3, [r4, #4]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b08      	cmp	r3, #8
 800263c:	f43f ae45 	beq.w	80022ca <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002640:	2a02      	cmp	r2, #2
 8002642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002646:	d152      	bne.n	80026ee <HAL_RCC_OscConfig+0x496>
 8002648:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800265e:	f7fe fac9 	bl	8000bf4 <HAL_GetTick>
 8002662:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8002666:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002668:	2601      	movs	r6, #1
 800266a:	fa97 f3a7 	rbit	r3, r7
 800266e:	6822      	ldr	r2, [r4, #0]
 8002670:	fa97 f3a7 	rbit	r3, r7
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	fa06 f303 	lsl.w	r3, r6, r3
 8002680:	4213      	tst	r3, r2
 8002682:	d12d      	bne.n	80026e0 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002684:	6862      	ldr	r2, [r4, #4]
 8002686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002688:	6a29      	ldr	r1, [r5, #32]
 800268a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800268e:	430b      	orrs	r3, r1
 8002690:	4313      	orrs	r3, r2
 8002692:	6063      	str	r3, [r4, #4]
 8002694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002698:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80026ae:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80026b0:	f7fe faa0 	bl	8000bf4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b4:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80026b6:	4607      	mov	r7, r0
 80026b8:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026bc:	6822      	ldr	r2, [r4, #0]
 80026be:	fa95 f3a5 	rbit	r3, r5
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	fa06 f303 	lsl.w	r3, r6, r3
 80026ce:	4213      	tst	r3, r2
 80026d0:	f47f add8 	bne.w	8002284 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fa8e 	bl	8000bf4 <HAL_GetTick>
 80026d8:	1bc0      	subs	r0, r0, r7
 80026da:	2802      	cmp	r0, #2
 80026dc:	d9ec      	bls.n	80026b8 <HAL_RCC_OscConfig+0x460>
 80026de:	e620      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe fa88 	bl	8000bf4 <HAL_GetTick>
 80026e4:	eba0 0008 	sub.w	r0, r0, r8
 80026e8:	2802      	cmp	r0, #2
 80026ea:	d9be      	bls.n	800266a <HAL_RCC_OscConfig+0x412>
 80026ec:	e619      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
 80026ee:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002704:	f7fe fa76 	bl	8000bf4 <HAL_GetTick>
 8002708:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800270c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	2601      	movs	r6, #1
 8002710:	fa95 f3a5 	rbit	r3, r5
 8002714:	6822      	ldr	r2, [r4, #0]
 8002716:	fa95 f3a5 	rbit	r3, r5
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	fa06 f303 	lsl.w	r3, r6, r3
 8002726:	4213      	tst	r3, r2
 8002728:	f43f adac 	beq.w	8002284 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fa62 	bl	8000bf4 <HAL_GetTick>
 8002730:	1bc0      	subs	r0, r0, r7
 8002732:	2802      	cmp	r0, #2
 8002734:	d9ec      	bls.n	8002710 <HAL_RCC_OscConfig+0x4b8>
 8002736:	e5f4      	b.n	8002322 <HAL_RCC_OscConfig+0xca>
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800273e:	4c13      	ldr	r4, [pc, #76]	; (800278c <HAL_RCC_GetSysClockFreq+0x50>)
 8002740:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002742:	f001 030c 	and.w	r3, r1, #12
 8002746:	2b08      	cmp	r3, #8
 8002748:	d11e      	bne.n	8002788 <HAL_RCC_GetSysClockFreq+0x4c>
 800274a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800274e:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002752:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	fa22 f303 	lsr.w	r3, r2, r3
 800275e:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <HAL_RCC_GetSysClockFreq+0x54>)
 8002760:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002762:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002764:	220f      	movs	r2, #15
 8002766:	fa92 f2a2 	rbit	r2, r2
 800276a:	fab2 f282 	clz	r2, r2
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	40d3      	lsrs	r3, r2
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_RCC_GetSysClockFreq+0x58>)
 8002776:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002778:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800277a:	bf4a      	itet	mi
 800277c:	4b06      	ldrmi	r3, [pc, #24]	; (8002798 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800277e:	4b07      	ldrpl	r3, [pc, #28]	; (800279c <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002780:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002784:	4358      	muls	r0, r3
 8002786:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8002788:	4803      	ldr	r0, [pc, #12]	; (8002798 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800278a:	bd10      	pop	{r4, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	08006520 	.word	0x08006520
 8002794:	08006530 	.word	0x08006530
 8002798:	007a1200 	.word	0x007a1200
 800279c:	003d0900 	.word	0x003d0900

080027a0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80027a0:	4a5c      	ldr	r2, [pc, #368]	; (8002914 <HAL_RCC_ClockConfig+0x174>)
 80027a2:	6813      	ldr	r3, [r2, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	428b      	cmp	r3, r1
{
 80027aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ae:	4606      	mov	r6, r0
 80027b0:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80027b2:	d330      	bcc.n	8002816 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	6832      	ldr	r2, [r6, #0]
 80027b6:	0791      	lsls	r1, r2, #30
 80027b8:	d43a      	bmi.n	8002830 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ba:	07d2      	lsls	r2, r2, #31
 80027bc:	d440      	bmi.n	8002840 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80027be:	4a55      	ldr	r2, [pc, #340]	; (8002914 <HAL_RCC_ClockConfig+0x174>)
 80027c0:	6813      	ldr	r3, [r2, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	429d      	cmp	r5, r3
 80027c8:	f0c0 8092 	bcc.w	80028f0 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	6832      	ldr	r2, [r6, #0]
 80027ce:	4c52      	ldr	r4, [pc, #328]	; (8002918 <HAL_RCC_ClockConfig+0x178>)
 80027d0:	f012 0f04 	tst.w	r2, #4
 80027d4:	f040 8097 	bne.w	8002906 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	0713      	lsls	r3, r2, #28
 80027da:	d506      	bpl.n	80027ea <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027dc:	6863      	ldr	r3, [r4, #4]
 80027de:	6932      	ldr	r2, [r6, #16]
 80027e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80027e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80027e8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027ea:	f7ff ffa7 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80027ee:	6863      	ldr	r3, [r4, #4]
 80027f0:	22f0      	movs	r2, #240	; 0xf0
 80027f2:	fa92 f2a2 	rbit	r2, r2
 80027f6:	fab2 f282 	clz	r2, r2
 80027fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fe:	40d3      	lsrs	r3, r2
 8002800:	4a46      	ldr	r2, [pc, #280]	; (800291c <HAL_RCC_ClockConfig+0x17c>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	40d8      	lsrs	r0, r3
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_RCC_ClockConfig+0x180>)
 8002808:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe f9c4 	bl	8000b98 <HAL_InitTick>
  return HAL_OK;
 8002810:	2000      	movs	r0, #0
}
 8002812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	6813      	ldr	r3, [r2, #0]
 8002818:	f023 0307 	bic.w	r3, r3, #7
 800281c:	430b      	orrs	r3, r1
 800281e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002820:	6813      	ldr	r3, [r2, #0]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	4299      	cmp	r1, r3
 8002828:	d0c4      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800282a:	2001      	movs	r0, #1
 800282c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4939      	ldr	r1, [pc, #228]	; (8002918 <HAL_RCC_ClockConfig+0x178>)
 8002832:	68b0      	ldr	r0, [r6, #8]
 8002834:	684b      	ldr	r3, [r1, #4]
 8002836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800283a:	4303      	orrs	r3, r0
 800283c:	604b      	str	r3, [r1, #4]
 800283e:	e7bc      	b.n	80027ba <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002840:	6872      	ldr	r2, [r6, #4]
 8002842:	4c35      	ldr	r4, [pc, #212]	; (8002918 <HAL_RCC_ClockConfig+0x178>)
 8002844:	2a01      	cmp	r2, #1
 8002846:	d128      	bne.n	800289a <HAL_RCC_ClockConfig+0xfa>
 8002848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002850:	6821      	ldr	r1, [r4, #0]
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	d0e1      	beq.n	800282a <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	6863      	ldr	r3, [r4, #4]
 8002868:	f023 0303 	bic.w	r3, r3, #3
 800286c:	431a      	orrs	r2, r3
 800286e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8002870:	f7fe f9c0 	bl	8000bf4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002874:	6873      	ldr	r3, [r6, #4]
 8002876:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8002878:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	d11f      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002880:	6863      	ldr	r3, [r4, #4]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b04      	cmp	r3, #4
 8002888:	d099      	beq.n	80027be <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288a:	f7fe f9b3 	bl	8000bf4 <HAL_GetTick>
 800288e:	1bc0      	subs	r0, r0, r7
 8002890:	4540      	cmp	r0, r8
 8002892:	d9f5      	bls.n	8002880 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8002894:	2003      	movs	r0, #3
 8002896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289a:	2a02      	cmp	r2, #2
 800289c:	bf0c      	ite	eq
 800289e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80028a2:	2302      	movne	r3, #2
 80028a4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	6820      	ldr	r0, [r4, #0]
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	4203      	tst	r3, r0
 80028be:	e7d1      	b.n	8002864 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d110      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	6863      	ldr	r3, [r4, #4]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	f43f af77 	beq.w	80027be <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7fe f990 	bl	8000bf4 <HAL_GetTick>
 80028d4:	1bc0      	subs	r0, r0, r7
 80028d6:	4540      	cmp	r0, r8
 80028d8:	d9f4      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x124>
 80028da:	e7db      	b.n	8002894 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe f98a 	bl	8000bf4 <HAL_GetTick>
 80028e0:	1bc0      	subs	r0, r0, r7
 80028e2:	4540      	cmp	r0, r8
 80028e4:	d8d6      	bhi.n	8002894 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80028e6:	6863      	ldr	r3, [r4, #4]
 80028e8:	f013 0f0c 	tst.w	r3, #12
 80028ec:	d1f6      	bne.n	80028dc <HAL_RCC_ClockConfig+0x13c>
 80028ee:	e766      	b.n	80027be <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	f023 0307 	bic.w	r3, r3, #7
 80028f6:	432b      	orrs	r3, r5
 80028f8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	429d      	cmp	r5, r3
 8002902:	d192      	bne.n	800282a <HAL_RCC_ClockConfig+0x8a>
 8002904:	e762      	b.n	80027cc <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002906:	6863      	ldr	r3, [r4, #4]
 8002908:	68f1      	ldr	r1, [r6, #12]
 800290a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800290e:	430b      	orrs	r3, r1
 8002910:	6063      	str	r3, [r4, #4]
 8002912:	e761      	b.n	80027d8 <HAL_RCC_ClockConfig+0x38>
 8002914:	40022000 	.word	0x40022000
 8002918:	40021000 	.word	0x40021000
 800291c:	08006596 	.word	0x08006596
 8002920:	20000110 	.word	0x20000110

08002924 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002924:	4b01      	ldr	r3, [pc, #4]	; (800292c <HAL_RCC_GetHCLKFreq+0x8>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000110 	.word	0x20000110

08002930 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002930:	6803      	ldr	r3, [r0, #0]
{
 8002932:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002936:	03dd      	lsls	r5, r3, #15
{
 8002938:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800293a:	d523      	bpl.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293c:	4d7c      	ldr	r5, [pc, #496]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800293e:	69eb      	ldr	r3, [r5, #28]
 8002940:	00d8      	lsls	r0, r3, #3
 8002942:	f100 8098 	bmi.w	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	69eb      	ldr	r3, [r5, #28]
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	61eb      	str	r3, [r5, #28]
 800294e:	69eb      	ldr	r3, [r5, #28]
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002958:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	4f76      	ldr	r7, [pc, #472]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	05d9      	lsls	r1, r3, #23
 8002960:	f140 808b 	bpl.w	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x14a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002964:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002966:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800296a:	f040 809b 	bne.w	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800296e:	6a2b      	ldr	r3, [r5, #32]
 8002970:	6862      	ldr	r2, [r4, #4]
 8002972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002976:	4313      	orrs	r3, r2
 8002978:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800297a:	b11e      	cbz	r6, 8002984 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297c:	69eb      	ldr	r3, [r5, #28]
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002982:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	07c7      	lsls	r7, r0, #31
 8002988:	d506      	bpl.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800298a:	4a69      	ldr	r2, [pc, #420]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800298c:	68a1      	ldr	r1, [r4, #8]
 800298e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002990:	f023 0303 	bic.w	r3, r3, #3
 8002994:	430b      	orrs	r3, r1
 8002996:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002998:	0786      	lsls	r6, r0, #30
 800299a:	d506      	bpl.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800299c:	4a64      	ldr	r2, [pc, #400]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800299e:	68e1      	ldr	r1, [r4, #12]
 80029a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029aa:	0745      	lsls	r5, r0, #29
 80029ac:	d506      	bpl.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029ae:	4a60      	ldr	r2, [pc, #384]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029b0:	6921      	ldr	r1, [r4, #16]
 80029b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029b4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029bc:	0681      	lsls	r1, r0, #26
 80029be:	d506      	bpl.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c0:	4a5b      	ldr	r2, [pc, #364]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029c2:	69e1      	ldr	r1, [r4, #28]
 80029c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029c6:	f023 0310 	bic.w	r3, r3, #16
 80029ca:	430b      	orrs	r3, r1
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029ce:	0382      	lsls	r2, r0, #14
 80029d0:	d506      	bpl.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029d2:	4a57      	ldr	r2, [pc, #348]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80029d6:	6853      	ldr	r3, [r2, #4]
 80029d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029dc:	430b      	orrs	r3, r1
 80029de:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029e0:	0643      	lsls	r3, r0, #25
 80029e2:	d506      	bpl.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029e4:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029e6:	6a21      	ldr	r1, [r4, #32]
 80029e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029ea:	f023 0320 	bic.w	r3, r3, #32
 80029ee:	430b      	orrs	r3, r1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029f2:	0707      	lsls	r7, r0, #28
 80029f4:	d506      	bpl.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029f6:	4a4e      	ldr	r2, [pc, #312]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029f8:	6961      	ldr	r1, [r4, #20]
 80029fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a04:	06c6      	lsls	r6, r0, #27
 8002a06:	d506      	bpl.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a08:	4a49      	ldr	r2, [pc, #292]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a0a:	69a1      	ldr	r1, [r4, #24]
 8002a0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a12:	430b      	orrs	r3, r1
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a16:	0585      	lsls	r5, r0, #22
 8002a18:	d506      	bpl.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a1a:	4a45      	ldr	r2, [pc, #276]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002a1e:	6853      	ldr	r3, [r2, #4]
 8002a20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a28:	0601      	lsls	r1, r0, #24
 8002a2a:	d506      	bpl.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a2c:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002a32:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002a36:	430b      	orrs	r3, r1
 8002a38:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a3a:	05c2      	lsls	r2, r0, #23
 8002a3c:	d506      	bpl.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a3e:	4a3c      	ldr	r2, [pc, #240]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a42:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002a44:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a4c:	04c3      	lsls	r3, r0, #19
 8002a4e:	d506      	bpl.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a50:	4a37      	ldr	r2, [pc, #220]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002a54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a5e:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8002a62:	d01c      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a64:	4a32      	ldr	r2, [pc, #200]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a72:	2000      	movs	r0, #0
 8002a74:	e013      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    FlagStatus       pwrclkchanged = RESET;
 8002a76:	2600      	movs	r6, #0
 8002a78:	e76f      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002a82:	f7fe f8b7 	bl	8000bf4 <HAL_GetTick>
 8002a86:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	05da      	lsls	r2, r3, #23
 8002a8c:	f53f af6a 	bmi.w	8002964 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe f8b0 	bl	8000bf4 <HAL_GetTick>
 8002a94:	eba0 0008 	sub.w	r0, r0, r8
 8002a98:	2864      	cmp	r0, #100	; 0x64
 8002a9a:	d9f5      	bls.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x158>
          return HAL_TIMEOUT;
 8002a9c:	2003      	movs	r0, #3
}
 8002a9e:	b002      	add	sp, #8
 8002aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aa4:	6862      	ldr	r2, [r4, #4]
 8002aa6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	f43f af5f 	beq.w	800296e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ab0:	6a29      	ldr	r1, [r5, #32]
 8002ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab6:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002aba:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8002abe:	f8df e078 	ldr.w	lr, [pc, #120]	; 8002b38 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002ac2:	fab2 f282 	clz	r2, r2
 8002ac6:	4472      	add	r2, lr
 8002ac8:	0092      	lsls	r2, r2, #2
 8002aca:	2701      	movs	r7, #1
 8002acc:	6017      	str	r7, [r2, #0]
 8002ace:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	4473      	add	r3, lr
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ade:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8002ae0:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ae2:	f57f af44 	bpl.w	800296e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8002ae6:	f7fe f885 	bl	8000bf4 <HAL_GetTick>
 8002aea:	f04f 0802 	mov.w	r8, #2
 8002aee:	4682      	mov	sl, r0
 8002af0:	46c1      	mov	r9, r8
 8002af2:	fa98 f3a8 	rbit	r3, r8
 8002af6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afa:	b1a3      	cbz	r3, 8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002afc:	6a2a      	ldr	r2, [r5, #32]
 8002afe:	fa99 f3a9 	rbit	r3, r9
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	fa07 f303 	lsl.w	r3, r7, r3
 8002b0e:	4213      	tst	r3, r2
 8002b10:	f47f af2d 	bne.w	800296e <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7fe f86e 	bl	8000bf4 <HAL_GetTick>
 8002b18:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b1c:	eba0 000a 	sub.w	r0, r0, sl
 8002b20:	4298      	cmp	r0, r3
 8002b22:	d9e6      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002b24:	e7ba      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b26:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002b2c:	e7e7      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40007000 	.word	0x40007000
 8002b38:	10908100 	.word	0x10908100

08002b3c <HAL_TIM_PeriodElapsedCallback>:
 8002b3c:	4770      	bx	lr

08002b3e <HAL_TIM_OC_DelayElapsedCallback>:
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_IC_CaptureCallback>:
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIM_TriggerCallback>:
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b46:	6803      	ldr	r3, [r0, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	0791      	lsls	r1, r2, #30
{
 8002b4c:	b510      	push	{r4, lr}
 8002b4e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b50:	d50f      	bpl.n	8002b72 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	0792      	lsls	r2, r2, #30
 8002b56:	d50c      	bpl.n	8002b72 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b58:	f06f 0202 	mvn.w	r2, #2
 8002b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b5e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b60:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b62:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b64:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b66:	f000 8085 	beq.w	8002c74 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	f7ff ffe9 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	d510      	bpl.n	8002b9c <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	0750      	lsls	r0, r2, #29
 8002b7e:	d50d      	bpl.n	8002b9c <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b80:	f06f 0204 	mvn.w	r2, #4
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b86:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b88:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b8a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8e:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002b90:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b92:	d075      	beq.n	8002c80 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b94:	f7ff ffd4 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	0711      	lsls	r1, r2, #28
 8002ba2:	d50f      	bpl.n	8002bc4 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	0712      	lsls	r2, r2, #28
 8002ba8:	d50c      	bpl.n	8002bc4 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002baa:	f06f 0208 	mvn.w	r2, #8
 8002bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bb0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bb4:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb6:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bba:	d067      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bbc:	f7ff ffc0 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	06d0      	lsls	r0, r2, #27
 8002bca:	d510      	bpl.n	8002bee <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	06d1      	lsls	r1, r2, #27
 8002bd0:	d50d      	bpl.n	8002bee <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bd2:	f06f 0210 	mvn.w	r2, #16
 8002bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bda:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bdc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be0:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002be4:	d058      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	f7ff ffab 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	2300      	movs	r3, #0
 8002bec:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	07d2      	lsls	r2, r2, #31
 8002bf4:	d508      	bpl.n	8002c08 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	07d0      	lsls	r0, r2, #31
 8002bfa:	d505      	bpl.n	8002c08 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bfc:	f06f 0201 	mvn.w	r2, #1
 8002c00:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7ff ff9a 	bl	8002b3c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	0611      	lsls	r1, r2, #24
 8002c0e:	d508      	bpl.n	8002c22 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	0612      	lsls	r2, r2, #24
 8002c14:	d505      	bpl.n	8002c22 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f000 f9a2 	bl	8002f66 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	05d0      	lsls	r0, r2, #23
 8002c28:	d508      	bpl.n	8002c3c <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	0611      	lsls	r1, r2, #24
 8002c2e:	d505      	bpl.n	8002c3c <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002c36:	4620      	mov	r0, r4
 8002c38:	f000 f996 	bl	8002f68 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	0652      	lsls	r2, r2, #25
 8002c42:	d508      	bpl.n	8002c56 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	0650      	lsls	r0, r2, #25
 8002c48:	d505      	bpl.n	8002c56 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7ff ff77 	bl	8002b44 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	0691      	lsls	r1, r2, #26
 8002c5c:	d522      	bpl.n	8002ca4 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	0692      	lsls	r2, r2, #26
 8002c62:	d51f      	bpl.n	8002ca4 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c64:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002c68:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c6a:	611a      	str	r2, [r3, #16]
    }
  }
}
 8002c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002c70:	f000 b978 	b.w	8002f64 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c74:	f7ff ff63 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff ff62 	bl	8002b42 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c7e:	e776      	b.n	8002b6e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c80:	f7ff ff5d 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c84:	4620      	mov	r0, r4
 8002c86:	f7ff ff5c 	bl	8002b42 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c8a:	e785      	b.n	8002b98 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8c:	f7ff ff57 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002c90:	4620      	mov	r0, r4
 8002c92:	f7ff ff56 	bl	8002b42 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c96:	e793      	b.n	8002bc0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c98:	f7ff ff51 	bl	8002b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f7ff ff50 	bl	8002b42 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ca2:	e7a2      	b.n	8002bea <HAL_TIM_IRQHandler+0xa4>
 8002ca4:	bd10      	pop	{r4, pc}
	...

08002ca8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	4a2c      	ldr	r2, [pc, #176]	; (8002d5c <TIM_Base_SetConfig+0xb4>)
  tmpcr1 = TIMx->CR1;
 8002caa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cac:	4290      	cmp	r0, r2
 8002cae:	d00e      	beq.n	8002cce <TIM_Base_SetConfig+0x26>
 8002cb0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cb4:	d00b      	beq.n	8002cce <TIM_Base_SetConfig+0x26>
 8002cb6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cba:	4290      	cmp	r0, r2
 8002cbc:	d007      	beq.n	8002cce <TIM_Base_SetConfig+0x26>
 8002cbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cc2:	4290      	cmp	r0, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_Base_SetConfig+0x26>
 8002cc6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002cca:	4290      	cmp	r0, r2
 8002ccc:	d115      	bne.n	8002cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002cce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cd4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd6:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <TIM_Base_SetConfig+0xb4>)
 8002cd8:	4290      	cmp	r0, r2
 8002cda:	d019      	beq.n	8002d10 <TIM_Base_SetConfig+0x68>
 8002cdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ce0:	d016      	beq.n	8002d10 <TIM_Base_SetConfig+0x68>
 8002ce2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ce6:	4290      	cmp	r0, r2
 8002ce8:	d012      	beq.n	8002d10 <TIM_Base_SetConfig+0x68>
 8002cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cee:	4290      	cmp	r0, r2
 8002cf0:	d00e      	beq.n	8002d10 <TIM_Base_SetConfig+0x68>
 8002cf2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002cf6:	4290      	cmp	r0, r2
 8002cf8:	d00a      	beq.n	8002d10 <TIM_Base_SetConfig+0x68>
 8002cfa:	4a19      	ldr	r2, [pc, #100]	; (8002d60 <TIM_Base_SetConfig+0xb8>)
 8002cfc:	4290      	cmp	r0, r2
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0x68>
 8002d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d04:	4290      	cmp	r0, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x68>
 8002d08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d0c:	4290      	cmp	r0, r2
 8002d0e:	d103      	bne.n	8002d18 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d10:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d16:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d18:	694a      	ldr	r2, [r1, #20]
 8002d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d1e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002d20:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d22:	688b      	ldr	r3, [r1, #8]
 8002d24:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d26:	680b      	ldr	r3, [r1, #0]
 8002d28:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <TIM_Base_SetConfig+0xb4>)
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	d00f      	beq.n	8002d50 <TIM_Base_SetConfig+0xa8>
 8002d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d34:	4298      	cmp	r0, r3
 8002d36:	d00b      	beq.n	8002d50 <TIM_Base_SetConfig+0xa8>
 8002d38:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002d3c:	4298      	cmp	r0, r3
 8002d3e:	d007      	beq.n	8002d50 <TIM_Base_SetConfig+0xa8>
 8002d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d44:	4298      	cmp	r0, r3
 8002d46:	d003      	beq.n	8002d50 <TIM_Base_SetConfig+0xa8>
 8002d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d4c:	4298      	cmp	r0, r3
 8002d4e:	d101      	bne.n	8002d54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d50:	690b      	ldr	r3, [r1, #16]
 8002d52:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002d54:	2301      	movs	r3, #1
 8002d56:	6143      	str	r3, [r0, #20]
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40014000 	.word	0x40014000

08002d64 <HAL_TIM_Base_Init>:
{ 
 8002d64:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002d66:	4604      	mov	r4, r0
 8002d68:	b1a0      	cbz	r0, 8002d94 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002d6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d72:	b91b      	cbnz	r3, 8002d7c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002d78:	f001 fac4 	bl	8004304 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002d82:	6820      	ldr	r0, [r4, #0]
 8002d84:	1d21      	adds	r1, r4, #4
 8002d86:	f7ff ff8f 	bl	8002ca8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d90:	2000      	movs	r0, #0
 8002d92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d94:	2001      	movs	r0, #1
}
 8002d96:	bd10      	pop	{r4, pc}

08002d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d98:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002d9a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d9c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d9e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002da2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002da6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da8:	6083      	str	r3, [r0, #8]
 8002daa:	bd10      	pop	{r4, pc}

08002dac <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002dac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
{
 8002db2:	b570      	push	{r4, r5, r6, lr}
 8002db4:	4604      	mov	r4, r0
 8002db6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002dba:	d01a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002dc8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dca:	4b52      	ldr	r3, [pc, #328]	; (8002f14 <HAL_TIM_ConfigClockSource+0x168>)
 8002dcc:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002dce:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002dd0:	680b      	ldr	r3, [r1, #0]
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d075      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x116>
 8002dd6:	d818      	bhi.n	8002e0a <HAL_TIM_ConfigClockSource+0x5e>
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	f000 808f 	beq.w	8002efc <HAL_TIM_ConfigClockSource+0x150>
 8002dde:	d809      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x48>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8085 	beq.w	8002ef0 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8002de6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002de8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002dee:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	f000 8087 	beq.w	8002f08 <HAL_TIM_ConfigClockSource+0x15c>
 8002dfa:	2b30      	cmp	r3, #48	; 0x30
 8002dfc:	d1f3      	bne.n	8002de6 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8002dfe:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e04:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002e08:	e033      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002e0a:	2b70      	cmp	r3, #112	; 0x70
 8002e0c:	d033      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0xca>
 8002e0e:	d81b      	bhi.n	8002e48 <HAL_TIM_ConfigClockSource+0x9c>
 8002e10:	2b50      	cmp	r3, #80	; 0x50
 8002e12:	d03f      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0xe8>
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d1e6      	bne.n	8002de6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002e18:	684d      	ldr	r5, [r1, #4]
 8002e1a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1c:	6a01      	ldr	r1, [r0, #32]
 8002e1e:	f021 0110 	bic.w	r1, r1, #16
 8002e22:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e24:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002e26:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e28:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e34:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002e38:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e3a:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002e3c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e42:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002e46:	e014      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4c:	d00c      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0xbc>
 8002e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e52:	d1c8      	bne.n	8002de6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8002e54:	68cb      	ldr	r3, [r1, #12]
 8002e56:	684a      	ldr	r2, [r1, #4]
 8002e58:	6889      	ldr	r1, [r1, #8]
 8002e5a:	f7ff ff9d 	bl	8002d98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e5e:	6822      	ldr	r2, [r4, #0]
 8002e60:	6893      	ldr	r3, [r2, #8]
 8002e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e66:	e013      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002e68:	6883      	ldr	r3, [r0, #8]
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6e:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8002e72:	6083      	str	r3, [r0, #8]
 8002e74:	e7b7      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8002e76:	68cb      	ldr	r3, [r1, #12]
 8002e78:	684a      	ldr	r2, [r1, #4]
 8002e7a:	6889      	ldr	r1, [r1, #8]
 8002e7c:	f7ff ff8c 	bl	8002d98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e80:	6822      	ldr	r2, [r4, #0]
 8002e82:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e90:	6093      	str	r3, [r2, #8]
    break;
 8002e92:	e7a8      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002e94:	684a      	ldr	r2, [r1, #4]
 8002e96:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002e98:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9a:	6a05      	ldr	r5, [r0, #32]
 8002e9c:	f025 0501 	bic.w	r5, r5, #1
 8002ea0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002ea2:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ea4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eac:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002eb0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002eb2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002eb4:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002eb6:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ebc:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002ec0:	e7d7      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002ec2:	684a      	ldr	r2, [r1, #4]
 8002ec4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ec6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec8:	6a05      	ldr	r5, [r0, #32]
 8002eca:	f025 0501 	bic.w	r5, r5, #1
 8002ece:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002ed0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ed2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eda:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002ede:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002ee0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ee2:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002ee4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002eea:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002eee:	e7c0      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002ef0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ef6:	f043 0307 	orr.w	r3, r3, #7
 8002efa:	e7ba      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002efc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002f02:	f043 0317 	orr.w	r3, r3, #23
 8002f06:	e7b4      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002f08:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002f0e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8002f12:	e7ae      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0xc6>
 8002f14:	fffe0088 	.word	0xfffe0088

08002f18 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002f18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f1c:	2b01      	cmp	r3, #1
{
 8002f1e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002f20:	d01c      	beq.n	8002f5c <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f22:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f24:	4d0e      	ldr	r5, [pc, #56]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8002f26:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002f28:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f2a:	42aa      	cmp	r2, r5
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8002f2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002f32:	42aa      	cmp	r2, r5
 8002f34:	d103      	bne.n	8002f3e <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f36:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f3c:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f3e:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f40:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f46:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f48:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4c:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f4e:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002f50:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8002f52:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002f54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002f5c:	2002      	movs	r0, #2
} 
 8002f5e:	bd30      	pop	{r4, r5, pc}
 8002f60:	40012c00 	.word	0x40012c00

08002f64 <HAL_TIMEx_CommutationCallback>:
 8002f64:	4770      	bx	lr

08002f66 <HAL_TIMEx_BreakCallback>:
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f68:	4770      	bx	lr

08002f6a <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f6a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002f6e:	b11b      	cbz	r3, 8002f78 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002f70:	2000      	movs	r0, #0
 8002f72:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002f76:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002f78:	2002      	movs	r0, #2
  }
}
 8002f7a:	4770      	bx	lr

08002f7c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002f7c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002f80:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f82:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002f86:	b15b      	cbz	r3, 8002fa0 <USBD_CDC_EP0_RxReady+0x24>
 8002f88:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002f8c:	28ff      	cmp	r0, #255	; 0xff
 8002f8e:	d007      	beq.n	8002fa0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002f96:	4621      	mov	r1, r4
 8002f98:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002f9a:	23ff      	movs	r3, #255	; 0xff
 8002f9c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	bd10      	pop	{r4, pc}

08002fa4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002fa4:	2343      	movs	r3, #67	; 0x43
 8002fa6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002fa8:	4800      	ldr	r0, [pc, #0]	; (8002fac <USBD_CDC_GetFSCfgDesc+0x8>)
 8002faa:	4770      	bx	lr
 8002fac:	20000038 	.word	0x20000038

08002fb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002fb0:	2343      	movs	r3, #67	; 0x43
 8002fb2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002fb4:	4800      	ldr	r0, [pc, #0]	; (8002fb8 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002fb6:	4770      	bx	lr
 8002fb8:	2000007c 	.word	0x2000007c

08002fbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002fbc:	2343      	movs	r3, #67	; 0x43
 8002fbe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002fc0:	4800      	ldr	r0, [pc, #0]	; (8002fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002fc2:	4770      	bx	lr
 8002fc4:	200000cc 	.word	0x200000cc

08002fc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002fc8:	230a      	movs	r3, #10
 8002fca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002fcc:	4800      	ldr	r0, [pc, #0]	; (8002fd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002fce:	4770      	bx	lr
 8002fd0:	200000c0 	.word	0x200000c0

08002fd4 <USBD_CDC_DataOut>:
{      
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002fd8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002fdc:	f001 fbf8 	bl	80047d0 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002fe0:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002fe4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002fe8:	b14b      	cbz	r3, 8002ffe <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002fea:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002fee:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002ff8:	4798      	blx	r3
    return USBD_OK;
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002ffe:	2002      	movs	r0, #2
}
 8003000:	bd38      	pop	{r3, r4, r5, pc}
	...

08003004 <USBD_CDC_Setup>:
{
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003006:	780f      	ldrb	r7, [r1, #0]
 8003008:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 800300c:	4606      	mov	r6, r0
 800300e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003010:	d023      	beq.n	800305a <USBD_CDC_Setup+0x56>
 8003012:	2b20      	cmp	r3, #32
 8003014:	d119      	bne.n	800304a <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8003016:	88ca      	ldrh	r2, [r1, #6]
 8003018:	784b      	ldrb	r3, [r1, #1]
 800301a:	b1c2      	cbz	r2, 800304e <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 800301c:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800301e:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8003022:	d50b      	bpl.n	800303c <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003024:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8003028:	4618      	mov	r0, r3
 800302a:	688f      	ldr	r7, [r1, #8]
 800302c:	4629      	mov	r1, r5
 800302e:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8003030:	88e2      	ldrh	r2, [r4, #6]
 8003032:	4629      	mov	r1, r5
 8003034:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8003036:	f000 fb8a 	bl	800374e <USBD_CtlSendData>
      break;
 800303a:	e006      	b.n	800304a <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 800303c:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8003040:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8003044:	4629      	mov	r1, r5
 8003046:	f000 fb97 	bl	8003778 <USBD_CtlPrepareRx>
}
 800304a:	2000      	movs	r0, #0
 800304c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800304e:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8003052:	6884      	ldr	r4, [r0, #8]
 8003054:	4618      	mov	r0, r3
 8003056:	47a0      	blx	r4
 8003058:	e7f7      	b.n	800304a <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 800305a:	784b      	ldrb	r3, [r1, #1]
 800305c:	2b0a      	cmp	r3, #10
 800305e:	d1f4      	bne.n	800304a <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8003060:	2201      	movs	r2, #1
 8003062:	4901      	ldr	r1, [pc, #4]	; (8003068 <USBD_CDC_Setup+0x64>)
 8003064:	e7e7      	b.n	8003036 <USBD_CDC_Setup+0x32>
 8003066:	bf00      	nop
 8003068:	200001dc 	.word	0x200001dc

0800306c <USBD_CDC_DeInit>:
{
 800306c:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800306e:	2181      	movs	r1, #129	; 0x81
{
 8003070:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003072:	f001 fb45 	bl	8004700 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003076:	2101      	movs	r1, #1
 8003078:	4620      	mov	r0, r4
 800307a:	f001 fb41 	bl	8004700 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800307e:	2182      	movs	r1, #130	; 0x82
 8003080:	4620      	mov	r0, r4
 8003082:	f001 fb3d 	bl	8004700 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003086:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800308a:	b153      	cbz	r3, 80030a2 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800308c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003094:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003098:	f001 fba4 	bl	80047e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800309c:	2300      	movs	r3, #0
 800309e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80030a2:	2000      	movs	r0, #0
 80030a4:	bd10      	pop	{r4, pc}

080030a6 <USBD_CDC_Init>:
{
 80030a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80030a8:	7c03      	ldrb	r3, [r0, #16]
{
 80030aa:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80030ac:	bb7b      	cbnz	r3, 800310e <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 80030ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030b2:	2202      	movs	r2, #2
 80030b4:	2181      	movs	r1, #129	; 0x81
 80030b6:	f001 fb13 	bl	80046e0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80030ba:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 80030be:	2202      	movs	r2, #2
 80030c0:	2101      	movs	r1, #1
 80030c2:	4620      	mov	r0, r4
 80030c4:	f001 fb0c 	bl	80046e0 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 80030c8:	2308      	movs	r3, #8
 80030ca:	2203      	movs	r2, #3
 80030cc:	2182      	movs	r1, #130	; 0x82
 80030ce:	4620      	mov	r0, r4
 80030d0:	f001 fb06 	bl	80046e0 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80030d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80030d8:	f001 fb80 	bl	80047dc <USBD_static_malloc>
 80030dc:	4606      	mov	r6, r0
 80030de:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80030e2:	b320      	cbz	r0, 800312e <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80030e4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80030ec:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 80030ee:	2500      	movs	r5, #0
 80030f0:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80030f4:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80030f8:	b987      	cbnz	r7, 800311c <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80030fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030fe:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003102:	2101      	movs	r1, #1
 8003104:	4620      	mov	r0, r4
 8003106:	f001 fb55 	bl	80047b4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800310a:	4638      	mov	r0, r7
 800310c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800310e:	2340      	movs	r3, #64	; 0x40
 8003110:	2202      	movs	r2, #2
 8003112:	2181      	movs	r1, #129	; 0x81
 8003114:	f001 fae4 	bl	80046e0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003118:	2340      	movs	r3, #64	; 0x40
 800311a:	e7d0      	b.n	80030be <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 800311c:	2340      	movs	r3, #64	; 0x40
 800311e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003122:	2101      	movs	r1, #1
 8003124:	4620      	mov	r0, r4
 8003126:	f001 fb45 	bl	80047b4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800312a:	4628      	mov	r0, r5
 800312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 800312e:	2001      	movs	r0, #1
}
 8003130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003132 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8003132:	b119      	cbz	r1, 800313c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8003134:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8003138:	2000      	movs	r0, #0
 800313a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800313c:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800313e:	4770      	bx	lr

08003140 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003140:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8003144:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003146:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800314a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800314e:	4770      	bx	lr

08003150 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8003150:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8003154:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003156:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800315a:	4770      	bx	lr

0800315c <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800315c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8003160:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8003162:	b172      	cbz	r2, 8003182 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8003164:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003168:	2301      	movs	r3, #1
 800316a:	b964      	cbnz	r4, 8003186 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800316c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003170:	2181      	movs	r1, #129	; 0x81
 8003172:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8003176:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800317a:	f001 fb0d 	bl	8004798 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800317e:	4620      	mov	r0, r4
 8003180:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8003182:	2002      	movs	r0, #2
 8003184:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8003186:	4618      	mov	r0, r3
  }
}
 8003188:	bd10      	pop	{r4, pc}

0800318a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800318a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800318e:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003190:	b162      	cbz	r2, 80031ac <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003192:	7c04      	ldrb	r4, [r0, #16]
 8003194:	b944      	cbnz	r4, 80031a8 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003196:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800319a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800319e:	2101      	movs	r1, #1
 80031a0:	f001 fb08 	bl	80047b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80031a4:	2000      	movs	r0, #0
 80031a6:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80031a8:	2340      	movs	r3, #64	; 0x40
 80031aa:	e7f6      	b.n	800319a <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80031ac:	2002      	movs	r0, #2
  }
}
 80031ae:	bd10      	pop	{r4, pc}

080031b0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80031b0:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80031b2:	b180      	cbz	r0, 80031d6 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80031b4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031b8:	b113      	cbz	r3, 80031c0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80031c0:	b109      	cbz	r1, 80031c6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80031c2:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80031cc:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80031ce:	f001 fa31 	bl	8004634 <USBD_LL_Init>
  
  return USBD_OK; 
 80031d2:	2000      	movs	r0, #0
 80031d4:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80031d6:	2002      	movs	r0, #2
}
 80031d8:	bd08      	pop	{r3, pc}

080031da <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80031da:	b119      	cbz	r1, 80031e4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80031dc:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80031e0:	2000      	movs	r0, #0
 80031e2:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80031e4:	2002      	movs	r0, #2
  }
  
  return status;
}
 80031e6:	4770      	bx	lr

080031e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80031e8:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80031ea:	f001 fa6b 	bl	80046c4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80031ee:	2000      	movs	r0, #0
 80031f0:	bd08      	pop	{r3, pc}

080031f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80031f2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80031f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031f8:	b90b      	cbnz	r3, 80031fe <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80031fa:	2002      	movs	r0, #2
 80031fc:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4798      	blx	r3
 8003202:	2800      	cmp	r0, #0
 8003204:	d1f9      	bne.n	80031fa <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003206:	bd08      	pop	{r3, pc}

08003208 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003208:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800320a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4798      	blx	r3
  return USBD_OK;
}
 8003212:	2000      	movs	r0, #0
 8003214:	bd08      	pop	{r3, pc}

08003216 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003216:	b538      	push	{r3, r4, r5, lr}
 8003218:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800321a:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800321e:	4628      	mov	r0, r5
 8003220:	f000 fa65 	bl	80036ee <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003224:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003226:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800322a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800322e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003232:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003236:	f001 031f 	and.w	r3, r1, #31
 800323a:	2b01      	cmp	r3, #1
 800323c:	d00e      	beq.n	800325c <USBD_LL_SetupStage+0x46>
 800323e:	d307      	bcc.n	8003250 <USBD_LL_SetupStage+0x3a>
 8003240:	2b02      	cmp	r3, #2
 8003242:	d010      	beq.n	8003266 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003244:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003248:	4620      	mov	r0, r4
 800324a:	f001 fa67 	bl	800471c <USBD_LL_StallEP>
    break;
 800324e:	e003      	b.n	8003258 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003250:	4629      	mov	r1, r5
 8003252:	4620      	mov	r0, r4
 8003254:	f000 f8d6 	bl	8003404 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003258:	2000      	movs	r0, #0
 800325a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800325c:	4629      	mov	r1, r5
 800325e:	4620      	mov	r0, r4
 8003260:	f000 f9ca 	bl	80035f8 <USBD_StdItfReq>
    break;
 8003264:	e7f8      	b.n	8003258 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003266:	4629      	mov	r1, r5
 8003268:	4620      	mov	r0, r4
 800326a:	f000 f9dd 	bl	8003628 <USBD_StdEPReq>
    break;
 800326e:	e7f3      	b.n	8003258 <USBD_LL_SetupStage+0x42>

08003270 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	4604      	mov	r4, r0
 8003274:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003276:	bb11      	cbnz	r1, 80032be <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003278:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800327c:	2b03      	cmp	r3, #3
 800327e:	d10f      	bne.n	80032a0 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8003280:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003284:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003288:	4293      	cmp	r3, r2
 800328a:	d90b      	bls.n	80032a4 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800328c:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800328e:	429a      	cmp	r2, r3
 8003290:	bf28      	it	cs
 8003292:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003294:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003298:	b292      	uxth	r2, r2
 800329a:	4629      	mov	r1, r5
 800329c:	f000 fa7b 	bl	8003796 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80032a0:	2000      	movs	r0, #0
 80032a2:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80032a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	b123      	cbz	r3, 80032b6 <USBD_LL_DataOutStage+0x46>
 80032ac:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80032b0:	2a03      	cmp	r2, #3
 80032b2:	d100      	bne.n	80032b6 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80032b4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 fa75 	bl	80037a6 <USBD_CtlSendStatus>
 80032bc:	e7f0      	b.n	80032a0 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80032be:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0eb      	beq.n	80032a0 <USBD_LL_DataOutStage+0x30>
 80032c8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80032cc:	2a03      	cmp	r2, #3
 80032ce:	d1e7      	bne.n	80032a0 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80032d0:	4798      	blx	r3
 80032d2:	e7e5      	b.n	80032a0 <USBD_LL_DataOutStage+0x30>

080032d4 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4613      	mov	r3, r2
 80032d8:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80032da:	460e      	mov	r6, r1
 80032dc:	2900      	cmp	r1, #0
 80032de:	d13d      	bne.n	800335c <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80032e0:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80032e4:	2a02      	cmp	r2, #2
 80032e6:	d10f      	bne.n	8003308 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80032e8:	69c5      	ldr	r5, [r0, #28]
 80032ea:	6a02      	ldr	r2, [r0, #32]
 80032ec:	4295      	cmp	r5, r2
 80032ee:	d914      	bls.n	800331a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80032f0:	1aaa      	subs	r2, r5, r2
 80032f2:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80032f4:	4619      	mov	r1, r3
 80032f6:	b292      	uxth	r2, r2
 80032f8:	f000 fa36 	bl	8003768 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80032fc:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80032fe:	461a      	mov	r2, r3
 8003300:	4619      	mov	r1, r3
 8003302:	4620      	mov	r0, r4
 8003304:	f001 fa56 	bl	80047b4 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003308:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800330c:	2b01      	cmp	r3, #1
 800330e:	d102      	bne.n	8003316 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003316:	2000      	movs	r0, #0
 8003318:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800331a:	6983      	ldr	r3, [r0, #24]
 800331c:	fbb3 f5f2 	udiv	r5, r3, r2
 8003320:	fb02 3515 	mls	r5, r2, r5, r3
 8003324:	b965      	cbnz	r5, 8003340 <USBD_LL_DataInStage+0x6c>
 8003326:	429a      	cmp	r2, r3
 8003328:	d80a      	bhi.n	8003340 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800332a:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800332e:	4293      	cmp	r3, r2
 8003330:	d206      	bcs.n	8003340 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003332:	462a      	mov	r2, r5
 8003334:	f000 fa18 	bl	8003768 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003338:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800333c:	462b      	mov	r3, r5
 800333e:	e7de      	b.n	80032fe <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003340:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	b12b      	cbz	r3, 8003354 <USBD_LL_DataInStage+0x80>
 8003348:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800334c:	2a03      	cmp	r2, #3
 800334e:	d101      	bne.n	8003354 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8003350:	4620      	mov	r0, r4
 8003352:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003354:	4620      	mov	r0, r4
 8003356:	f000 fa31 	bl	80037bc <USBD_CtlReceiveStatus>
 800335a:	e7d5      	b.n	8003308 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 800335c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0d7      	beq.n	8003316 <USBD_LL_DataInStage+0x42>
 8003366:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800336a:	2a03      	cmp	r2, #3
 800336c:	d1d3      	bne.n	8003316 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800336e:	4798      	blx	r3
 8003370:	e7d1      	b.n	8003316 <USBD_LL_DataInStage+0x42>

08003372 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003372:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003374:	2200      	movs	r2, #0
{
 8003376:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8003378:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800337a:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800337c:	2340      	movs	r3, #64	; 0x40
 800337e:	f001 f9af 	bl	80046e0 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003382:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003384:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8003388:	2200      	movs	r2, #0
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	4620      	mov	r0, r4
 800338e:	f001 f9a7 	bl	80046e0 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003392:	2301      	movs	r3, #1
 8003394:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003398:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800339c:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800339e:	b12b      	cbz	r3, 80033ac <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80033a0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80033a4:	7921      	ldrb	r1, [r4, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4620      	mov	r0, r4
 80033aa:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80033ac:	2000      	movs	r0, #0
 80033ae:	bd38      	pop	{r3, r4, r5, pc}

080033b0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80033b0:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80033b2:	2000      	movs	r0, #0
 80033b4:	4770      	bx	lr

080033b6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80033b6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80033ba:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80033be:	2304      	movs	r3, #4
 80033c0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80033c4:	2000      	movs	r0, #0
 80033c6:	4770      	bx	lr

080033c8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80033c8:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80033cc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80033d0:	2000      	movs	r0, #0
 80033d2:	4770      	bx	lr

080033d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80033d4:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80033d6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80033da:	2a03      	cmp	r2, #3
 80033dc:	d104      	bne.n	80033e8 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80033de:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	b103      	cbz	r3, 80033e8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80033e6:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80033e8:	2000      	movs	r0, #0
 80033ea:	bd08      	pop	{r3, pc}

080033ec <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80033ec:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80033ee:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80033f0:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80033f2:	f001 f993 	bl	800471c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80033f6:	4620      	mov	r0, r4
 80033f8:	2100      	movs	r1, #0
}
 80033fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80033fe:	f001 b98d 	b.w	800471c <USBD_LL_StallEP>
	...

08003404 <USBD_StdDevReq>:
{
 8003404:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8003406:	784b      	ldrb	r3, [r1, #1]
{
 8003408:	4604      	mov	r4, r0
 800340a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800340c:	2b09      	cmp	r3, #9
 800340e:	d879      	bhi.n	8003504 <USBD_StdDevReq+0x100>
 8003410:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003414:	00e500c9 	.word	0x00e500c9
 8003418:	00d90078 	.word	0x00d90078
 800341c:	006d0078 	.word	0x006d0078
 8003420:	0078000a 	.word	0x0078000a
 8003424:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8003428:	884b      	ldrh	r3, [r1, #2]
 800342a:	0a1a      	lsrs	r2, r3, #8
 800342c:	3a01      	subs	r2, #1
 800342e:	2a06      	cmp	r2, #6
 8003430:	d868      	bhi.n	8003504 <USBD_StdDevReq+0x100>
 8003432:	e8df f002 	tbb	[pc, r2]
 8003436:	1c04      	.short	0x1c04
 8003438:	49676729 	.word	0x49676729
 800343c:	52          	.byte	0x52
 800343d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800343e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003442:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003444:	7c20      	ldrb	r0, [r4, #16]
 8003446:	f10d 0106 	add.w	r1, sp, #6
 800344a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800344c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003450:	2a00      	cmp	r2, #0
 8003452:	d067      	beq.n	8003524 <USBD_StdDevReq+0x120>
 8003454:	88eb      	ldrh	r3, [r5, #6]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d064      	beq.n	8003524 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800345a:	429a      	cmp	r2, r3
 800345c:	bf28      	it	cs
 800345e:	461a      	movcs	r2, r3
 8003460:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003464:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8003466:	4620      	mov	r0, r4
 8003468:	f000 f971 	bl	800374e <USBD_CtlSendData>
 800346c:	e05a      	b.n	8003524 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800346e:	7c02      	ldrb	r2, [r0, #16]
 8003470:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003474:	b932      	cbnz	r2, 8003484 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003478:	f10d 0006 	add.w	r0, sp, #6
 800347c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800347e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003480:	7043      	strb	r3, [r0, #1]
 8003482:	e7e3      	b.n	800344c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	e7f7      	b.n	8003478 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b05      	cmp	r3, #5
 800348c:	d83a      	bhi.n	8003504 <USBD_StdDevReq+0x100>
 800348e:	e8df f003 	tbb	[pc, r3]
 8003492:	0703      	.short	0x0703
 8003494:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003498:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	e7d1      	b.n	8003444 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80034a0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	e7cd      	b.n	8003444 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80034a8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	e7c9      	b.n	8003444 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80034b0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	e7c5      	b.n	8003444 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80034b8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	e7c1      	b.n	8003444 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80034c0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	e7bd      	b.n	8003444 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80034c8:	7c03      	ldrb	r3, [r0, #16]
 80034ca:	b9db      	cbnz	r3, 8003504 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80034cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80034d0:	f10d 0006 	add.w	r0, sp, #6
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	4798      	blx	r3
 80034d8:	e7b8      	b.n	800344c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80034da:	7c03      	ldrb	r3, [r0, #16]
 80034dc:	b993      	cbnz	r3, 8003504 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80034de:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80034e2:	f10d 0006 	add.w	r0, sp, #6
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80034ea:	2307      	movs	r3, #7
 80034ec:	e7c8      	b.n	8003480 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80034ee:	888b      	ldrh	r3, [r1, #4]
 80034f0:	b943      	cbnz	r3, 8003504 <USBD_StdDevReq+0x100>
 80034f2:	88cb      	ldrh	r3, [r1, #6]
 80034f4:	b933      	cbnz	r3, 8003504 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80034f6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80034fa:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80034fc:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80034fe:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003502:	d103      	bne.n	800350c <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8003504:	4620      	mov	r0, r4
 8003506:	f7ff ff71 	bl	80033ec <USBD_CtlError.constprop.0>
    break;
 800350a:	e00b      	b.n	8003524 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 800350c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003510:	4629      	mov	r1, r5
 8003512:	f001 f933 	bl	800477c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003516:	4620      	mov	r0, r4
 8003518:	f000 f945 	bl	80037a6 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800351c:	b12d      	cbz	r5, 800352a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800351e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003520:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003524:	2000      	movs	r0, #0
 8003526:	b003      	add	sp, #12
 8003528:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800352a:	2301      	movs	r3, #1
 800352c:	e7f8      	b.n	8003520 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800352e:	7889      	ldrb	r1, [r1, #2]
 8003530:	4d30      	ldr	r5, [pc, #192]	; (80035f4 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003532:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003534:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003536:	d8e5      	bhi.n	8003504 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8003538:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800353c:	2b02      	cmp	r3, #2
 800353e:	d00c      	beq.n	800355a <USBD_StdDevReq+0x156>
 8003540:	2b03      	cmp	r3, #3
 8003542:	d1df      	bne.n	8003504 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003544:	b9b1      	cbnz	r1, 8003574 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003546:	2302      	movs	r3, #2
 8003548:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800354c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800354e:	f7ff fe5b 	bl	8003208 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8003552:	4620      	mov	r0, r4
 8003554:	f000 f927 	bl	80037a6 <USBD_CtlSendStatus>
 8003558:	e7e4      	b.n	8003524 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800355a:	2900      	cmp	r1, #0
 800355c:	d0f9      	beq.n	8003552 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800355e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003560:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003562:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003564:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003568:	4620      	mov	r0, r4
 800356a:	f7ff fe42 	bl	80031f2 <USBD_SetClassConfig>
 800356e:	2802      	cmp	r0, #2
 8003570:	d1ef      	bne.n	8003552 <USBD_StdDevReq+0x14e>
 8003572:	e7c7      	b.n	8003504 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8003574:	6841      	ldr	r1, [r0, #4]
 8003576:	2901      	cmp	r1, #1
 8003578:	d0eb      	beq.n	8003552 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800357a:	b2c9      	uxtb	r1, r1
 800357c:	f7ff fe44 	bl	8003208 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003580:	7829      	ldrb	r1, [r5, #0]
 8003582:	6061      	str	r1, [r4, #4]
 8003584:	e7f0      	b.n	8003568 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8003586:	88ca      	ldrh	r2, [r1, #6]
 8003588:	2a01      	cmp	r2, #1
 800358a:	d1bb      	bne.n	8003504 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 800358c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003590:	2b02      	cmp	r3, #2
 8003592:	d003      	beq.n	800359c <USBD_StdDevReq+0x198>
 8003594:	2b03      	cmp	r3, #3
 8003596:	d1b5      	bne.n	8003504 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8003598:	1d01      	adds	r1, r0, #4
 800359a:	e764      	b.n	8003466 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800359c:	4601      	mov	r1, r0
 800359e:	2300      	movs	r3, #0
 80035a0:	f841 3f08 	str.w	r3, [r1, #8]!
 80035a4:	e75f      	b.n	8003466 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80035a6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80035aa:	3b02      	subs	r3, #2
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d8a9      	bhi.n	8003504 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80035b0:	2301      	movs	r3, #1
 80035b2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80035b4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80035b8:	b10b      	cbz	r3, 80035be <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80035ba:	2303      	movs	r3, #3
 80035bc:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80035be:	2202      	movs	r2, #2
 80035c0:	f104 010c 	add.w	r1, r4, #12
 80035c4:	e74f      	b.n	8003466 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80035c6:	884b      	ldrh	r3, [r1, #2]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d1ab      	bne.n	8003524 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80035cc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80035d0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80035d4:	4629      	mov	r1, r5
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4620      	mov	r0, r4
 80035da:	4798      	blx	r3
 80035dc:	e7b9      	b.n	8003552 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80035de:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80035e2:	3b02      	subs	r3, #2
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d88d      	bhi.n	8003504 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80035e8:	884b      	ldrh	r3, [r1, #2]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d19a      	bne.n	8003524 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80035ee:	2300      	movs	r3, #0
 80035f0:	e7ec      	b.n	80035cc <USBD_StdDevReq+0x1c8>
 80035f2:	bf00      	nop
 80035f4:	200001dd 	.word	0x200001dd

080035f8 <USBD_StdItfReq>:
{
 80035f8:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80035fa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80035fe:	2b03      	cmp	r3, #3
{
 8003600:	4604      	mov	r4, r0
 8003602:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003604:	d10d      	bne.n	8003622 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003606:	790b      	ldrb	r3, [r1, #4]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d80a      	bhi.n	8003622 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800360c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003614:	88eb      	ldrh	r3, [r5, #6]
 8003616:	b913      	cbnz	r3, 800361e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003618:	4620      	mov	r0, r4
 800361a:	f000 f8c4 	bl	80037a6 <USBD_CtlSendStatus>
}
 800361e:	2000      	movs	r0, #0
 8003620:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003622:	f7ff fee3 	bl	80033ec <USBD_CtlError.constprop.0>
    break;
 8003626:	e7fa      	b.n	800361e <USBD_StdItfReq+0x26>

08003628 <USBD_StdEPReq>:
{
 8003628:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800362a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 800362c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800362e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003632:	2a20      	cmp	r2, #32
{
 8003634:	4604      	mov	r4, r0
 8003636:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003638:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800363a:	d105      	bne.n	8003648 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 800363c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	4798      	blx	r3
}
 8003644:	2000      	movs	r0, #0
 8003646:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003648:	784a      	ldrb	r2, [r1, #1]
 800364a:	2a01      	cmp	r2, #1
 800364c:	d01c      	beq.n	8003688 <USBD_StdEPReq+0x60>
 800364e:	d32a      	bcc.n	80036a6 <USBD_StdEPReq+0x7e>
 8003650:	2a03      	cmp	r2, #3
 8003652:	d1f7      	bne.n	8003644 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003654:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003658:	2a02      	cmp	r2, #2
 800365a:	d040      	beq.n	80036de <USBD_StdEPReq+0xb6>
 800365c:	2a03      	cmp	r2, #3
 800365e:	d002      	beq.n	8003666 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003660:	f7ff fec4 	bl	80033ec <USBD_CtlError.constprop.0>
      break;
 8003664:	e7ee      	b.n	8003644 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003666:	884a      	ldrh	r2, [r1, #2]
 8003668:	b922      	cbnz	r2, 8003674 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800366a:	065e      	lsls	r6, r3, #25
 800366c:	d002      	beq.n	8003674 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800366e:	4619      	mov	r1, r3
 8003670:	f001 f854 	bl	800471c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003674:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003678:	4629      	mov	r1, r5
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4620      	mov	r0, r4
 800367e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003680:	4620      	mov	r0, r4
 8003682:	f000 f890 	bl	80037a6 <USBD_CtlSendStatus>
 8003686:	e7dd      	b.n	8003644 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003688:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800368c:	2a02      	cmp	r2, #2
 800368e:	d026      	beq.n	80036de <USBD_StdEPReq+0xb6>
 8003690:	2a03      	cmp	r2, #3
 8003692:	d1e5      	bne.n	8003660 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003694:	884a      	ldrh	r2, [r1, #2]
 8003696:	2a00      	cmp	r2, #0
 8003698:	d1d4      	bne.n	8003644 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800369a:	0659      	lsls	r1, r3, #25
 800369c:	d0f0      	beq.n	8003680 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800369e:	4619      	mov	r1, r3
 80036a0:	f001 f84a 	bl	8004738 <USBD_LL_ClearStallEP>
 80036a4:	e7e6      	b.n	8003674 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80036a6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80036aa:	2a02      	cmp	r2, #2
 80036ac:	d017      	beq.n	80036de <USBD_StdEPReq+0xb6>
 80036ae:	2a03      	cmp	r2, #3
 80036b0:	d1d6      	bne.n	8003660 <USBD_StdEPReq+0x38>
 80036b2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80036b6:	f016 0f80 	tst.w	r6, #128	; 0x80
 80036ba:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80036be:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80036c0:	bf14      	ite	ne
 80036c2:	3514      	addne	r5, #20
 80036c4:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80036c8:	f001 f844 	bl	8004754 <USBD_LL_IsStallEP>
 80036cc:	b168      	cbz	r0, 80036ea <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80036ce:	2301      	movs	r3, #1
 80036d0:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80036d2:	2202      	movs	r2, #2
 80036d4:	4629      	mov	r1, r5
 80036d6:	4620      	mov	r0, r4
 80036d8:	f000 f839 	bl	800374e <USBD_CtlSendData>
      break;
 80036dc:	e7b2      	b.n	8003644 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80036de:	065a      	lsls	r2, r3, #25
 80036e0:	d0b0      	beq.n	8003644 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80036e2:	4619      	mov	r1, r3
 80036e4:	f001 f81a 	bl	800471c <USBD_LL_StallEP>
 80036e8:	e7ac      	b.n	8003644 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80036ea:	6028      	str	r0, [r5, #0]
 80036ec:	e7f1      	b.n	80036d2 <USBD_StdEPReq+0xaa>

080036ee <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80036ee:	780b      	ldrb	r3, [r1, #0]
 80036f0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80036f2:	784b      	ldrb	r3, [r1, #1]
 80036f4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80036f6:	78ca      	ldrb	r2, [r1, #3]
 80036f8:	788b      	ldrb	r3, [r1, #2]
 80036fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80036fe:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003700:	794a      	ldrb	r2, [r1, #5]
 8003702:	790b      	ldrb	r3, [r1, #4]
 8003704:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003708:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800370a:	79ca      	ldrb	r2, [r1, #7]
 800370c:	798b      	ldrb	r3, [r1, #6]
 800370e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003712:	80c3      	strh	r3, [r0, #6]
 8003714:	4770      	bx	lr

08003716 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003716:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003718:	b188      	cbz	r0, 800373e <USBD_GetString+0x28>
 800371a:	4605      	mov	r5, r0
 800371c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800371e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2c00      	cmp	r4, #0
 8003726:	d1f9      	bne.n	800371c <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	3302      	adds	r3, #2
 800372c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800372e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003730:	2303      	movs	r3, #3
 8003732:	704b      	strb	r3, [r1, #1]
 8003734:	3801      	subs	r0, #1
 8003736:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8003738:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800373c:	b905      	cbnz	r5, 8003740 <USBD_GetString+0x2a>
 800373e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8003746:	3302      	adds	r3, #2
 8003748:	b2db      	uxtb	r3, r3
 800374a:	548c      	strb	r4, [r1, r2]
 800374c:	e7f4      	b.n	8003738 <USBD_GetString+0x22>

0800374e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800374e:	b510      	push	{r4, lr}
 8003750:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003752:	2202      	movs	r2, #2
 8003754:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003758:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800375a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800375c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800375e:	2100      	movs	r1, #0
 8003760:	f001 f81a 	bl	8004798 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003764:	2000      	movs	r0, #0
 8003766:	bd10      	pop	{r4, pc}

08003768 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003768:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800376a:	4613      	mov	r3, r2
 800376c:	460a      	mov	r2, r1
 800376e:	2100      	movs	r1, #0
 8003770:	f001 f812 	bl	8004798 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003774:	2000      	movs	r0, #0
 8003776:	bd08      	pop	{r3, pc}

08003778 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003778:	b510      	push	{r4, lr}
 800377a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800377c:	2203      	movs	r2, #3
 800377e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003782:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003786:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003788:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800378c:	2100      	movs	r1, #0
 800378e:	f001 f811 	bl	80047b4 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003792:	2000      	movs	r0, #0
 8003794:	bd10      	pop	{r4, pc}

08003796 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003796:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003798:	4613      	mov	r3, r2
 800379a:	460a      	mov	r2, r1
 800379c:	2100      	movs	r1, #0
 800379e:	f001 f809 	bl	80047b4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80037a2:	2000      	movs	r0, #0
 80037a4:	bd08      	pop	{r3, pc}

080037a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80037a6:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80037a8:	2304      	movs	r3, #4
 80037aa:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80037ae:	2300      	movs	r3, #0
 80037b0:	461a      	mov	r2, r3
 80037b2:	4619      	mov	r1, r3
 80037b4:	f000 fff0 	bl	8004798 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80037b8:	2000      	movs	r0, #0
 80037ba:	bd08      	pop	{r3, pc}

080037bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80037bc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80037be:	2305      	movs	r3, #5
 80037c0:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80037c4:	2300      	movs	r3, #0
 80037c6:	461a      	mov	r2, r3
 80037c8:	4619      	mov	r1, r3
 80037ca:	f000 fff3 	bl	80047b4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80037ce:	2000      	movs	r0, #0
 80037d0:	bd08      	pop	{r3, pc}
	...

080037d4 <I2C_Read_Register>:
#include <math.h>
#include "stm32f3xx_hal.h"
I2C_HandleTypeDef hi2c1;

uint8_t I2C_Read_Register(uint8_t device_adr, uint8_t internal_adr)
{
 80037d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tx_buff[1];
	uint8_t rx_buff[1];

	tx_buff[0] = internal_adr;

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, 10000);
 80037d6:	4c0c      	ldr	r4, [pc, #48]	; (8003808 <I2C_Read_Register+0x34>)
	tx_buff[0] = internal_adr;
 80037d8:	aa04      	add	r2, sp, #16
	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, 10000);
 80037da:	f242 7610 	movw	r6, #10000	; 0x2710
	tx_buff[0] = internal_adr;
 80037de:	f802 1d08 	strb.w	r1, [r2, #-8]!
	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, 10000);
 80037e2:	4605      	mov	r5, r0
 80037e4:	4601      	mov	r1, r0
 80037e6:	9600      	str	r6, [sp, #0]
 80037e8:	2301      	movs	r3, #1
 80037ea:	4620      	mov	r0, r4
 80037ec:	f7fd fcc3 	bl	8001176 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_adr + 1, &rx_buff[0], 1, 10000);
 80037f0:	2301      	movs	r3, #1
 80037f2:	9600      	str	r6, [sp, #0]
 80037f4:	aa03      	add	r2, sp, #12
 80037f6:	18e9      	adds	r1, r5, r3
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7fd fd55 	bl	80012a8 <HAL_I2C_Master_Receive>


	return rx_buff[0];
}
 80037fe:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003802:	b004      	add	sp, #16
 8003804:	bd70      	pop	{r4, r5, r6, pc}
 8003806:	bf00      	nop
 8003808:	2000040c 	.word	0x2000040c

0800380c <I2C_Write_Register>:

void I2C_Write_Register(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 800380c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
	tx_buff[1] = data;

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, 2, 10000);
 800380e:	f242 7310 	movw	r3, #10000	; 0x2710
	tx_buff[0] = internal_adr;
 8003812:	f88d 100c 	strb.w	r1, [sp, #12]
	tx_buff[1] = data;
 8003816:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, 2, 10000);
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	4601      	mov	r1, r0
 800381e:	2302      	movs	r3, #2
 8003820:	aa03      	add	r2, sp, #12
 8003822:	4803      	ldr	r0, [pc, #12]	; (8003830 <I2C_Write_Register+0x24>)
 8003824:	f7fd fca7 	bl	8001176 <HAL_I2C_Master_Transmit>
}
 8003828:	b005      	add	sp, #20
 800382a:	f85d fb04 	ldr.w	pc, [sp], #4
 800382e:	bf00      	nop
 8003830:	2000040c 	.word	0x2000040c

08003834 <BMP280_get_calib_values>:

void BMP280_get_calib_values(void)
{
 8003834:	b530      	push	{r4, r5, lr}
 8003836:	b08b      	sub	sp, #44	; 0x2c
	uint8_t rx_buff[24], starting_address=0x88;
 8003838:	aa0a      	add	r2, sp, #40	; 0x28

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 800383a:	4c3a      	ldr	r4, [pc, #232]	; (8003924 <BMP280_get_calib_values+0xf0>)
 800383c:	f242 7510 	movw	r5, #10000	; 0x2710
	uint8_t rx_buff[24], starting_address=0x88;
 8003840:	2388      	movs	r3, #136	; 0x88
 8003842:	f802 3d19 	strb.w	r3, [r2, #-25]!
	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 8003846:	21ee      	movs	r1, #238	; 0xee
 8003848:	9500      	str	r5, [sp, #0]
 800384a:	2301      	movs	r3, #1
 800384c:	4620      	mov	r0, r4
 800384e:	f7fd fc92 	bl	8001176 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff[0], 24, 10000);
 8003852:	aa04      	add	r2, sp, #16
 8003854:	9500      	str	r5, [sp, #0]
 8003856:	2318      	movs	r3, #24
 8003858:	21ef      	movs	r1, #239	; 0xef
 800385a:	4620      	mov	r0, r4
 800385c:	f7fd fd24 	bl	80012a8 <HAL_I2C_Master_Receive>

	dig_T1=(rx_buff[0])+(rx_buff[1]<<8);
 8003860:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003864:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003868:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800386c:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <BMP280_get_calib_values+0xf4>)
 800386e:	8013      	strh	r3, [r2, #0]
	dig_T2=(rx_buff[2])+(rx_buff[3]<<8);
 8003870:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8003874:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003878:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800387c:	4a2b      	ldr	r2, [pc, #172]	; (800392c <BMP280_get_calib_values+0xf8>)
 800387e:	8013      	strh	r3, [r2, #0]
	dig_T3=(rx_buff[4])+(rx_buff[5]<<8);
 8003880:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8003884:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003888:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800388c:	4a28      	ldr	r2, [pc, #160]	; (8003930 <BMP280_get_calib_values+0xfc>)
 800388e:	8013      	strh	r3, [r2, #0]
	dig_P1=(rx_buff[6])+(rx_buff[7]<<8);
 8003890:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8003894:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003898:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800389c:	4a25      	ldr	r2, [pc, #148]	; (8003934 <BMP280_get_calib_values+0x100>)
 800389e:	8013      	strh	r3, [r2, #0]
	dig_P2=(rx_buff[8])+(rx_buff[9]<<8);
 80038a0:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80038a4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80038a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038ac:	4a22      	ldr	r2, [pc, #136]	; (8003938 <BMP280_get_calib_values+0x104>)
 80038ae:	8013      	strh	r3, [r2, #0]
	dig_P3=(rx_buff[10])+(rx_buff[11]<<8);
 80038b0:	f89d 201b 	ldrb.w	r2, [sp, #27]
 80038b4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80038b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038bc:	4a1f      	ldr	r2, [pc, #124]	; (800393c <BMP280_get_calib_values+0x108>)
 80038be:	8013      	strh	r3, [r2, #0]
	dig_P4=(rx_buff[12])+(rx_buff[13]<<8);
 80038c0:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80038c4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80038c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038cc:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <BMP280_get_calib_values+0x10c>)
 80038ce:	8013      	strh	r3, [r2, #0]
	dig_P5=(rx_buff[14])+(rx_buff[15]<<8);
 80038d0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80038d4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80038d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038dc:	4a19      	ldr	r2, [pc, #100]	; (8003944 <BMP280_get_calib_values+0x110>)
 80038de:	8013      	strh	r3, [r2, #0]
	dig_P6=(rx_buff[16])+(rx_buff[17]<<8);
 80038e0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80038e4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80038e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <BMP280_get_calib_values+0x114>)
 80038ee:	8013      	strh	r3, [r2, #0]
	dig_P7=(rx_buff[18])+(rx_buff[19]<<8);
 80038f0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 80038f4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80038f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038fc:	4a13      	ldr	r2, [pc, #76]	; (800394c <BMP280_get_calib_values+0x118>)
 80038fe:	8013      	strh	r3, [r2, #0]
	dig_P8=(rx_buff[20])+(rx_buff[21]<<8);
 8003900:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8003904:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8003908:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800390c:	4a10      	ldr	r2, [pc, #64]	; (8003950 <BMP280_get_calib_values+0x11c>)
 800390e:	8013      	strh	r3, [r2, #0]
	dig_P9=(rx_buff[22])+(rx_buff[23]<<8);
 8003910:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8003914:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8003918:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800391c:	4a0d      	ldr	r2, [pc, #52]	; (8003954 <BMP280_get_calib_values+0x120>)
 800391e:	8013      	strh	r3, [r2, #0]
}
 8003920:	b00b      	add	sp, #44	; 0x2c
 8003922:	bd30      	pop	{r4, r5, pc}
 8003924:	2000040c 	.word	0x2000040c
 8003928:	2000040a 	.word	0x2000040a
 800392c:	20000458 	.word	0x20000458
 8003930:	20000484 	.word	0x20000484
 8003934:	2000047c 	.word	0x2000047c
 8003938:	20000468 	.word	0x20000468
 800393c:	2000047e 	.word	0x2000047e
 8003940:	2000046a 	.word	0x2000046a
 8003944:	20000474 	.word	0x20000474
 8003948:	20000486 	.word	0x20000486
 800394c:	20000408 	.word	0x20000408
 8003950:	20000480 	.word	0x20000480
 8003954:	20000482 	.word	0x20000482

08003958 <BMP280_init>:

void BMP280_init(void)
{
 8003958:	b508      	push	{r3, lr}
	I2C_Write_Register(BMP280_dev_address, 0xF5, 0b10010000);// standby time 500ms 100, filter 16 100, SPI DIS 00
 800395a:	2290      	movs	r2, #144	; 0x90
 800395c:	21f5      	movs	r1, #245	; 0xf5
 800395e:	20ee      	movs	r0, #238	; 0xee
 8003960:	f7ff ff54 	bl	800380c <I2C_Write_Register>
	I2C_Write_Register(BMP280_dev_address, 0xF4, 0b01010111);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 8003964:	2257      	movs	r2, #87	; 0x57
 8003966:	21f4      	movs	r1, #244	; 0xf4
 8003968:	20ee      	movs	r0, #238	; 0xee
 800396a:	f7ff ff4f 	bl	800380c <I2C_Write_Register>

	BMP280_get_calib_values();
}
 800396e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BMP280_get_calib_values();
 8003972:	f7ff bf5f 	b.w	8003834 <BMP280_get_calib_values>
	...

08003978 <BMP280_calc_values>:

void BMP280_calc_values(void)
{
 8003978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397c:	b08d      	sub	sp, #52	; 0x34
	uint8_t status, rx_buff[6], starting_address=0xF7;
 800397e:	23f7      	movs	r3, #247	; 0xf7
 8003980:	f88d 300b 	strb.w	r3, [sp, #11]

	do
	{
		status=I2C_Read_Register(BMP280_dev_address, 0xF3);
 8003984:	21f3      	movs	r1, #243	; 0xf3
 8003986:	20ee      	movs	r0, #238	; 0xee
 8003988:	f7ff ff24 	bl	80037d4 <I2C_Read_Register>
	} while(((status&0b00001000)==8)||((status&0b00000001)==1));
 800398c:	f010 0f09 	tst.w	r0, #9
 8003990:	d1f8      	bne.n	8003984 <BMP280_calc_values+0xc>

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 8003992:	f242 7410 	movw	r4, #10000	; 0x2710
 8003996:	9400      	str	r4, [sp, #0]
 8003998:	f10d 020b 	add.w	r2, sp, #11
 800399c:	2301      	movs	r3, #1
 800399e:	21ee      	movs	r1, #238	; 0xee
 80039a0:	48d9      	ldr	r0, [pc, #868]	; (8003d08 <BMP280_calc_values+0x390>)
 80039a2:	f7fd fbe8 	bl	8001176 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff[0], 6, 10000);
 80039a6:	9400      	str	r4, [sp, #0]
 80039a8:	aa04      	add	r2, sp, #16
 80039aa:	2306      	movs	r3, #6
 80039ac:	21ef      	movs	r1, #239	; 0xef
 80039ae:	48d6      	ldr	r0, [pc, #856]	; (8003d08 <BMP280_calc_values+0x390>)
 80039b0:	f7fd fc7a 	bl	80012a8 <HAL_I2C_Master_Receive>

	volatile uint32_t temp[3];
	temp[2]=rx_buff[3];
 80039b4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80039b8:	930b      	str	r3, [sp, #44]	; 0x2c
	temp[1]=rx_buff[4];
 80039ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80039be:	930a      	str	r3, [sp, #40]	; 0x28
	temp[0]=rx_buff[5];
 80039c0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80039c4:	9309      	str	r3, [sp, #36]	; 0x24
	temperature_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 80039c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80039ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039cc:	0100      	lsls	r0, r0, #4
 80039ce:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80039d2:	eb00 1013 	add.w	r0, r0, r3, lsr #4
 80039d6:	4bcd      	ldr	r3, [pc, #820]	; (8003d0c <BMP280_calc_values+0x394>)
 80039d8:	6018      	str	r0, [r3, #0]

	temp[2]=rx_buff[0];
 80039da:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80039de:	930b      	str	r3, [sp, #44]	; 0x2c
	temp[1]=rx_buff[1];
 80039e0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80039e4:	930a      	str	r3, [sp, #40]	; 0x28
	temp[0]=rx_buff[2];
 80039e6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80039ea:	9309      	str	r3, [sp, #36]	; 0x24
	pressure_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 80039ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039f2:	ea4f 1a03 	mov.w	sl, r3, lsl #4
 80039f6:	eb0a 3a01 	add.w	sl, sl, r1, lsl #12
 80039fa:	4bc5      	ldr	r3, [pc, #788]	; (8003d10 <BMP280_calc_values+0x398>)
 80039fc:	eb0a 1a12 	add.w	sl, sl, r2, lsr #4
 8003a00:	f8c3 a000 	str.w	sl, [r3]

	double var1, var2;
	var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8003a04:	f7fc fd3a 	bl	800047c <__aeabi_i2d>
 8003a08:	4bc2      	ldr	r3, [pc, #776]	; (8003d14 <BMP280_calc_values+0x39c>)
 8003a0a:	4606      	mov	r6, r0
 8003a0c:	8818      	ldrh	r0, [r3, #0]
 8003a0e:	460f      	mov	r7, r1
 8003a10:	f7fc fd24 	bl	800045c <__aeabi_ui2d>
	var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8003a14:	2200      	movs	r2, #0
	var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8003a16:	4604      	mov	r4, r0
 8003a18:	460d      	mov	r5, r1
	var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8003a1a:	4bbf      	ldr	r3, [pc, #764]	; (8003d18 <BMP280_calc_values+0x3a0>)
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	4639      	mov	r1, r7
 8003a20:	f7fc fd92 	bl	8000548 <__aeabi_dmul>
 8003a24:	2200      	movs	r2, #0
 8003a26:	4680      	mov	r8, r0
 8003a28:	4689      	mov	r9, r1
 8003a2a:	4bbc      	ldr	r3, [pc, #752]	; (8003d1c <BMP280_calc_values+0x3a4>)
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	4629      	mov	r1, r5
 8003a30:	f7fc fd8a 	bl	8000548 <__aeabi_dmul>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4640      	mov	r0, r8
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	f7fc fbd0 	bl	80001e0 <__aeabi_dsub>
	var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8003a40:	2200      	movs	r2, #0
	var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8003a42:	4680      	mov	r8, r0
 8003a44:	4689      	mov	r9, r1
	var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8003a46:	4bb6      	ldr	r3, [pc, #728]	; (8003d20 <BMP280_calc_values+0x3a8>)
 8003a48:	4630      	mov	r0, r6
 8003a4a:	4639      	mov	r1, r7
 8003a4c:	f7fc fd7c 	bl	8000548 <__aeabi_dmul>
 8003a50:	2200      	movs	r2, #0
 8003a52:	4606      	mov	r6, r0
 8003a54:	460f      	mov	r7, r1
 8003a56:	4bb3      	ldr	r3, [pc, #716]	; (8003d24 <BMP280_calc_values+0x3ac>)
 8003a58:	4620      	mov	r0, r4
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	f7fc fd74 	bl	8000548 <__aeabi_dmul>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4630      	mov	r0, r6
 8003a66:	4639      	mov	r1, r7
 8003a68:	f7fc fbba 	bl	80001e0 <__aeabi_dsub>
 8003a6c:	4bae      	ldr	r3, [pc, #696]	; (8003d28 <BMP280_calc_values+0x3b0>)
 8003a6e:	4604      	mov	r4, r0
 8003a70:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003a74:	460d      	mov	r5, r1
 8003a76:	f7fc fd01 	bl	800047c <__aeabi_i2d>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4620      	mov	r0, r4
 8003a80:	4629      	mov	r1, r5
 8003a82:	f7fc fd61 	bl	8000548 <__aeabi_dmul>
	var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8003a86:	4ba9      	ldr	r3, [pc, #676]	; (8003d2c <BMP280_calc_values+0x3b4>)
	var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8003a88:	4604      	mov	r4, r0
	var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8003a8a:	f9b3 0000 	ldrsh.w	r0, [r3]
	var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8003a8e:	460d      	mov	r5, r1
	var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8003a90:	f7fc fcf4 	bl	800047c <__aeabi_i2d>
 8003a94:	4642      	mov	r2, r8
 8003a96:	4606      	mov	r6, r0
 8003a98:	460f      	mov	r7, r1
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	f7fc fd52 	bl	8000548 <__aeabi_dmul>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	4639      	mov	r1, r7
 8003aac:	f7fc fd4c 	bl	8000548 <__aeabi_dmul>
	double t_fine = (int32_t)(var1+var2);
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fb94 	bl	80001e4 <__adddf3>
volatile	float T = (var1+var2)/5120.0;
 8003abc:	2200      	movs	r2, #0
 8003abe:	4b9c      	ldr	r3, [pc, #624]	; (8003d30 <BMP280_calc_values+0x3b8>)
	double t_fine = (int32_t)(var1+var2);
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	460d      	mov	r5, r1
volatile	float T = (var1+var2)/5120.0;
 8003ac4:	f7fc fe6a 	bl	800079c <__aeabi_ddiv>
 8003ac8:	f7fd f816 	bl	8000af8 <__aeabi_d2f>
	double t_fine = (int32_t)(var1+var2);
 8003acc:	4629      	mov	r1, r5
volatile	float T = (var1+var2)/5120.0;
 8003ace:	9003      	str	r0, [sp, #12]
	double t_fine = (int32_t)(var1+var2);
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7fc ffe9 	bl	8000aa8 <__aeabi_d2iz>
 8003ad6:	f7fc fcd1 	bl	800047c <__aeabi_i2d>

	var1=((double)t_fine/2.0)-64000.0;
 8003ada:	2200      	movs	r2, #0
 8003adc:	4b95      	ldr	r3, [pc, #596]	; (8003d34 <BMP280_calc_values+0x3bc>)
 8003ade:	f7fc fd33 	bl	8000548 <__aeabi_dmul>
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4b94      	ldr	r3, [pc, #592]	; (8003d38 <BMP280_calc_values+0x3c0>)
 8003ae6:	f7fc fb7b 	bl	80001e0 <__aeabi_dsub>
	var2=var1*var1*((double)dig_P6)/32768.0;
 8003aea:	4b94      	ldr	r3, [pc, #592]	; (8003d3c <BMP280_calc_values+0x3c4>)
	var1=((double)t_fine/2.0)-64000.0;
 8003aec:	4604      	mov	r4, r0
	var2=var1*var1*((double)dig_P6)/32768.0;
 8003aee:	f9b3 0000 	ldrsh.w	r0, [r3]
	var1=((double)t_fine/2.0)-64000.0;
 8003af2:	460d      	mov	r5, r1
	var2=var1*var1*((double)dig_P6)/32768.0;
 8003af4:	f7fc fcc2 	bl	800047c <__aeabi_i2d>
 8003af8:	4622      	mov	r2, r4
 8003afa:	4606      	mov	r6, r0
 8003afc:	460f      	mov	r7, r1
 8003afe:	462b      	mov	r3, r5
 8003b00:	4620      	mov	r0, r4
 8003b02:	4629      	mov	r1, r5
 8003b04:	f7fc fd20 	bl	8000548 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	4639      	mov	r1, r7
 8003b10:	f7fc fd1a 	bl	8000548 <__aeabi_dmul>
 8003b14:	2200      	movs	r2, #0
 8003b16:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003b1a:	f7fc fd15 	bl	8000548 <__aeabi_dmul>
	var2=var2+var1*((double)dig_P5)*2.0;
 8003b1e:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <BMP280_calc_values+0x3c8>)
	var2=var1*var1*((double)dig_P6)/32768.0;
 8003b20:	4606      	mov	r6, r0
	var2=var2+var1*((double)dig_P5)*2.0;
 8003b22:	f9b3 0000 	ldrsh.w	r0, [r3]
	var2=var1*var1*((double)dig_P6)/32768.0;
 8003b26:	460f      	mov	r7, r1
	var2=var2+var1*((double)dig_P5)*2.0;
 8003b28:	f7fc fca8 	bl	800047c <__aeabi_i2d>
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	462b      	mov	r3, r5
 8003b30:	f7fc fd0a 	bl	8000548 <__aeabi_dmul>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	f7fc fb54 	bl	80001e4 <__adddf3>
 8003b3c:	4632      	mov	r2, r6
 8003b3e:	463b      	mov	r3, r7
 8003b40:	f7fc fb50 	bl	80001e4 <__adddf3>
	var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 8003b44:	2200      	movs	r2, #0
 8003b46:	4b7f      	ldr	r3, [pc, #508]	; (8003d44 <BMP280_calc_values+0x3cc>)
 8003b48:	f7fc fcfe 	bl	8000548 <__aeabi_dmul>
 8003b4c:	4b7e      	ldr	r3, [pc, #504]	; (8003d48 <BMP280_calc_values+0x3d0>)
 8003b4e:	4606      	mov	r6, r0
 8003b50:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003b54:	460f      	mov	r7, r1
 8003b56:	f7fc fc91 	bl	800047c <__aeabi_i2d>
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	4b7b      	ldr	r3, [pc, #492]	; (8003d4c <BMP280_calc_values+0x3d4>)
 8003b5e:	f7fc fcf3 	bl	8000548 <__aeabi_dmul>
 8003b62:	4632      	mov	r2, r6
 8003b64:	463b      	mov	r3, r7
 8003b66:	f7fc fb3d 	bl	80001e4 <__adddf3>
	var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 8003b6a:	4b79      	ldr	r3, [pc, #484]	; (8003d50 <BMP280_calc_values+0x3d8>)
	var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 8003b6c:	4680      	mov	r8, r0
	var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 8003b6e:	f9b3 0000 	ldrsh.w	r0, [r3]
	var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 8003b72:	4689      	mov	r9, r1
	var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 8003b74:	f7fc fc82 	bl	800047c <__aeabi_i2d>
 8003b78:	4622      	mov	r2, r4
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	f7fc fce4 	bl	8000548 <__aeabi_dmul>
 8003b80:	4622      	mov	r2, r4
 8003b82:	462b      	mov	r3, r5
 8003b84:	f7fc fce0 	bl	8000548 <__aeabi_dmul>
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8003b8e:	f7fc fcdb 	bl	8000548 <__aeabi_dmul>
 8003b92:	4b70      	ldr	r3, [pc, #448]	; (8003d54 <BMP280_calc_values+0x3dc>)
 8003b94:	4606      	mov	r6, r0
 8003b96:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003b9a:	460f      	mov	r7, r1
 8003b9c:	f7fc fc6e 	bl	800047c <__aeabi_i2d>
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	462b      	mov	r3, r5
 8003ba4:	f7fc fcd0 	bl	8000548 <__aeabi_dmul>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4630      	mov	r0, r6
 8003bae:	4639      	mov	r1, r7
 8003bb0:	f7fc fb18 	bl	80001e4 <__adddf3>
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8003bba:	f7fc fcc5 	bl	8000548 <__aeabi_dmul>
	var1=(1.0+var1/32768.0)*((double)dig_P1);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003bc4:	f7fc fcc0 	bl	8000548 <__aeabi_dmul>
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4b63      	ldr	r3, [pc, #396]	; (8003d58 <BMP280_calc_values+0x3e0>)
 8003bcc:	f7fc fb0a 	bl	80001e4 <__adddf3>
 8003bd0:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <BMP280_calc_values+0x3e4>)
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	460d      	mov	r5, r1
 8003bd6:	8818      	ldrh	r0, [r3, #0]
 8003bd8:	f7fc fc40 	bl	800045c <__aeabi_ui2d>
 8003bdc:	4622      	mov	r2, r4
 8003bde:	462b      	mov	r3, r5
 8003be0:	f7fc fcb2 	bl	8000548 <__aeabi_dmul>
 8003be4:	4604      	mov	r4, r0
volatile	double p=1048576.0-(double)pressure_raw;
 8003be6:	4650      	mov	r0, sl
	var1=(1.0+var1/32768.0)*((double)dig_P1);
 8003be8:	460d      	mov	r5, r1
volatile	double p=1048576.0-(double)pressure_raw;
 8003bea:	f7fc fc47 	bl	800047c <__aeabi_i2d>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	495a      	ldr	r1, [pc, #360]	; (8003d60 <BMP280_calc_values+0x3e8>)
 8003bf6:	f7fc faf3 	bl	80001e0 <__aeabi_dsub>
	p=(p-(var2/4096.0))*6250.0/var1;
 8003bfa:	2200      	movs	r2, #0
volatile	double p=1048576.0-(double)pressure_raw;
 8003bfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
	p=(p-(var2/4096.0))*6250.0/var1;
 8003c00:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <BMP280_calc_values+0x3ec>)
 8003c02:	4640      	mov	r0, r8
 8003c04:	4649      	mov	r1, r9
 8003c06:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8003c0a:	f7fc fc9d 	bl	8000548 <__aeabi_dmul>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4630      	mov	r0, r6
 8003c14:	4639      	mov	r1, r7
 8003c16:	f7fc fae3 	bl	80001e0 <__aeabi_dsub>
 8003c1a:	a339      	add	r3, pc, #228	; (adr r3, 8003d00 <BMP280_calc_values+0x388>)
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	f7fc fc92 	bl	8000548 <__aeabi_dmul>
 8003c24:	4622      	mov	r2, r4
 8003c26:	462b      	mov	r3, r5
 8003c28:	f7fc fdb8 	bl	800079c <__aeabi_ddiv>
 8003c2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
	var1=((double)dig_P9)*p*p/2147483648.0;
 8003c30:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8003c34:	4b4c      	ldr	r3, [pc, #304]	; (8003d68 <BMP280_calc_values+0x3f0>)
 8003c36:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003c3a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003c3e:	f7fc fc1d 	bl	800047c <__aeabi_i2d>
 8003c42:	4652      	mov	r2, sl
 8003c44:	465b      	mov	r3, fp
 8003c46:	f7fc fc7f 	bl	8000548 <__aeabi_dmul>
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	f7fc fc7b 	bl	8000548 <__aeabi_dmul>
 8003c52:	2200      	movs	r2, #0
 8003c54:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8003c58:	f7fc fc76 	bl	8000548 <__aeabi_dmul>
	var2=p*((double)dig_P8)/32768.0;
 8003c5c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8003c60:	4b42      	ldr	r3, [pc, #264]	; (8003d6c <BMP280_calc_values+0x3f4>)
	var1=((double)dig_P9)*p*p/2147483648.0;
 8003c62:	4680      	mov	r8, r0
	var2=p*((double)dig_P8)/32768.0;
 8003c64:	f9b3 0000 	ldrsh.w	r0, [r3]
	var1=((double)dig_P9)*p*p/2147483648.0;
 8003c68:	4689      	mov	r9, r1
	var2=p*((double)dig_P8)/32768.0;
 8003c6a:	f7fc fc07 	bl	800047c <__aeabi_i2d>
 8003c6e:	4632      	mov	r2, r6
 8003c70:	463b      	mov	r3, r7
 8003c72:	f7fc fc69 	bl	8000548 <__aeabi_dmul>
 8003c76:	2200      	movs	r2, #0
 8003c78:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003c7c:	f7fc fc64 	bl	8000548 <__aeabi_dmul>
	p=p+(var1+var2+((double)dig_P7))/16.0;
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4640      	mov	r0, r8
 8003c86:	4649      	mov	r1, r9
 8003c88:	f7fc faac 	bl	80001e4 <__adddf3>
 8003c8c:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <BMP280_calc_values+0x3f8>)
 8003c8e:	4606      	mov	r6, r0
 8003c90:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003c94:	460f      	mov	r7, r1
 8003c96:	f7fc fbf1 	bl	800047c <__aeabi_i2d>
 8003c9a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	4639      	mov	r1, r7
 8003ca6:	f7fc fa9d 	bl	80001e4 <__adddf3>
 8003caa:	2200      	movs	r2, #0
 8003cac:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <BMP280_calc_values+0x3fc>)
 8003cae:	f7fc fc4b 	bl	8000548 <__aeabi_dmul>
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	462b      	mov	r3, r5
 8003cb6:	f7fc fa95 	bl	80001e4 <__adddf3>

	temperature=T;
 8003cba:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <BMP280_calc_values+0x400>)
	p=p+(var1+var2+((double)dig_P7))/16.0;
 8003cbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
	temperature=T;
 8003cc0:	9a03      	ldr	r2, [sp, #12]
 8003cc2:	601a      	str	r2, [r3, #0]
	pressure=p;
 8003cc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cc8:	f7fc ff16 	bl	8000af8 <__aeabi_d2f>
	altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 8003ccc:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8003d7c <BMP280_calc_values+0x404>
	pressure=p;
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <BMP280_calc_values+0x408>)
	altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 8003cd2:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8003d84 <BMP280_calc_values+0x40c>
	pressure=p;
 8003cd6:	6018      	str	r0, [r3, #0]
 8003cd8:	ee07 0a90 	vmov	s15, r0
	altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 8003cdc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8003ce0:	f001 f814 	bl	8004d0c <powf>
 8003ce4:	4b28      	ldr	r3, [pc, #160]	; (8003d88 <BMP280_calc_values+0x410>)
 8003ce6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003cea:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003cee:	eddf 7a27 	vldr	s15, [pc, #156]	; 8003d8c <BMP280_calc_values+0x414>
 8003cf2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003cf6:	ed83 0a00 	vstr	s0, [r3]
}
 8003cfa:	e049      	b.n	8003d90 <BMP280_calc_values+0x418>
 8003cfc:	f3af 8000 	nop.w
 8003d00:	00000000 	.word	0x00000000
 8003d04:	40b86a00 	.word	0x40b86a00
 8003d08:	2000040c 	.word	0x2000040c
 8003d0c:	20000460 	.word	0x20000460
 8003d10:	20000464 	.word	0x20000464
 8003d14:	2000040a 	.word	0x2000040a
 8003d18:	3ee00000 	.word	0x3ee00000
 8003d1c:	3f200000 	.word	0x3f200000
 8003d20:	3f100000 	.word	0x3f100000
 8003d24:	3f500000 	.word	0x3f500000
 8003d28:	20000458 	.word	0x20000458
 8003d2c:	20000484 	.word	0x20000484
 8003d30:	40b40000 	.word	0x40b40000
 8003d34:	3fe00000 	.word	0x3fe00000
 8003d38:	40ef4000 	.word	0x40ef4000
 8003d3c:	20000486 	.word	0x20000486
 8003d40:	20000474 	.word	0x20000474
 8003d44:	3fd00000 	.word	0x3fd00000
 8003d48:	2000046a 	.word	0x2000046a
 8003d4c:	40f00000 	.word	0x40f00000
 8003d50:	2000047e 	.word	0x2000047e
 8003d54:	20000468 	.word	0x20000468
 8003d58:	3ff00000 	.word	0x3ff00000
 8003d5c:	2000047c 	.word	0x2000047c
 8003d60:	41300000 	.word	0x41300000
 8003d64:	3f300000 	.word	0x3f300000
 8003d68:	20000482 	.word	0x20000482
 8003d6c:	20000480 	.word	0x20000480
 8003d70:	20000408 	.word	0x20000408
 8003d74:	3fb00000 	.word	0x3fb00000
 8003d78:	2000045c 	.word	0x2000045c
 8003d7c:	47c5e680 	.word	0x47c5e680
 8003d80:	20000470 	.word	0x20000470
 8003d84:	3e42dcae 	.word	0x3e42dcae
 8003d88:	20000478 	.word	0x20000478
 8003d8c:	472d2a00 	.word	0x472d2a00
 8003d90:	b00d      	add	sp, #52	; 0x34
 8003d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d96:	bf00      	nop

08003d98 <string_compare>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
uint8_t string_compare(char array1[], char array2[], uint16_t lenght)
{
 8003d98:	b570      	push	{r4, r5, r6, lr}
	 uint8_t comVAR=0, i;
	 for(i=0;i<lenght;i++)
 8003d9a:	2400      	movs	r4, #0
	 uint8_t comVAR=0, i;
 8003d9c:	4623      	mov	r3, r4
	 for(i=0;i<lenght;i++)
 8003d9e:	b2e5      	uxtb	r5, r4
 8003da0:	4295      	cmp	r5, r2
 8003da2:	d303      	bcc.n	8003dac <string_compare+0x14>
	   	  	  else comVAR=0;
	   	}
	 if (comVAR==lenght)
		 	return 1;
	 else 	return 0;
}
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	4258      	negs	r0, r3
 8003da8:	4158      	adcs	r0, r3
 8003daa:	bd70      	pop	{r4, r5, r6, pc}
	   		  if(array1[i]==array2[i])
 8003dac:	5d46      	ldrb	r6, [r0, r5]
 8003dae:	5d4d      	ldrb	r5, [r1, r5]
 8003db0:	42ae      	cmp	r6, r5
	   	  		  comVAR++;
 8003db2:	bf06      	itte	eq
 8003db4:	3301      	addeq	r3, #1
 8003db6:	b2db      	uxtbeq	r3, r3
	   	  	  else comVAR=0;
 8003db8:	2300      	movne	r3, #0
 8003dba:	3401      	adds	r4, #1
 8003dbc:	e7ef      	b.n	8003d9e <string_compare+0x6>

08003dbe <reverse>:

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
 8003dbe:	b510      	push	{r4, lr}
    int i=0, j=len-1, temp;
 8003dc0:	3901      	subs	r1, #1
 8003dc2:	4401      	add	r1, r0
    while (i<j)
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	1a1a      	subs	r2, r3, r0
 8003dc8:	1a0c      	subs	r4, r1, r0
 8003dca:	42a2      	cmp	r2, r4
 8003dcc:	db00      	blt.n	8003dd0 <reverse+0x12>
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++; j--;
    }
}
 8003dce:	bd10      	pop	{r4, pc}
        temp = str[i];
 8003dd0:	781a      	ldrb	r2, [r3, #0]
        str[i] = str[j];
 8003dd2:	780c      	ldrb	r4, [r1, #0]
 8003dd4:	f803 4b01 	strb.w	r4, [r3], #1
        str[j] = temp;
 8003dd8:	f801 2901 	strb.w	r2, [r1], #-1
 8003ddc:	e7f3      	b.n	8003dc6 <reverse+0x8>

08003dde <intToStr>:

 // Converts a given integer x to string str[].  d is the number
 // of digits required in output. If d is more than the number
 // of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 8003dde:	b538      	push	{r3, r4, r5, lr}
 8003de0:	460d      	mov	r5, r1
    int i = 0;
    while (x)
 8003de2:	460b      	mov	r3, r1
    {
        str[i++] = (x%10) + '0';
 8003de4:	210a      	movs	r1, #10
 8003de6:	1b5c      	subs	r4, r3, r5
    while (x)
 8003de8:	b958      	cbnz	r0, 8003e02 <intToStr+0x24>
 8003dea:	192b      	adds	r3, r5, r4
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
        str[i++] = '0';
 8003dec:	2130      	movs	r1, #48	; 0x30
    while (i < d)
 8003dee:	4294      	cmp	r4, r2
 8003df0:	db10      	blt.n	8003e14 <intToStr+0x36>

    reverse(str, i);
 8003df2:	4628      	mov	r0, r5
 8003df4:	4621      	mov	r1, r4
 8003df6:	f7ff ffe2 	bl	8003dbe <reverse>
    str[i] = '\0';
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	552b      	strb	r3, [r5, r4]
    return i;
}
 8003dfe:	4620      	mov	r0, r4
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
        str[i++] = (x%10) + '0';
 8003e02:	fb90 f4f1 	sdiv	r4, r0, r1
 8003e06:	fb01 0014 	mls	r0, r1, r4, r0
 8003e0a:	3030      	adds	r0, #48	; 0x30
 8003e0c:	f803 0b01 	strb.w	r0, [r3], #1
        x = x/10;
 8003e10:	4620      	mov	r0, r4
 8003e12:	e7e8      	b.n	8003de6 <intToStr+0x8>
        str[i++] = '0';
 8003e14:	3401      	adds	r4, #1
 8003e16:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1a:	e7e8      	b.n	8003dee <intToStr+0x10>
 8003e1c:	0000      	movs	r0, r0
	...

08003e20 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char minus_flag = 0;
	if(n<0)
 8003e22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8003e2a:	ed2d 8b02 	vpush	{d8}
 8003e2e:	eeb0 8a40 	vmov.f32	s16, s0
	{
		minus_flag = 1;
		n = -n;
 8003e32:	bf48      	it	mi
 8003e34:	eeb1 8a40 	vnegmi.f32	s16, s0
	}

    // Extract integer part
    int ipart = (int)n;
 8003e38:	eefd 8ac8 	vcvt.s32.f32	s17, s16
{
 8003e3c:	b08b      	sub	sp, #44	; 0x2c
 8003e3e:	4604      	mov	r4, r0
 8003e40:	460e      	mov	r6, r1

    // Extract floating part
    float fpart = n - (float)ipart;

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	4601      	mov	r1, r0
 8003e48:	ee18 0a90 	vmov	r0, s17
		minus_flag = 1;
 8003e4c:	bf4c      	ite	mi
 8003e4e:	2701      	movmi	r7, #1
	unsigned char minus_flag = 0;
 8003e50:	2700      	movpl	r7, #0
    int i = intToStr(ipart, res, 0);
 8003e52:	f7ff ffc4 	bl	8003dde <intToStr>
 8003e56:	4605      	mov	r5, r0

    // check for display option after point
    if (afterpoint != 0)
 8003e58:	b346      	cbz	r6, 8003eac <ftoa+0x8c>
    {
        res[i] = '.';  // add dot
 8003e5a:	232e      	movs	r3, #46	; 0x2e
 8003e5c:	5423      	strb	r3, [r4, r0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f7fc fb0c 	bl	800047c <__aeabi_i2d>
 8003e64:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8003f38 <ftoa+0x118>
 8003e68:	ec41 0b11 	vmov	d1, r0, r1
 8003e6c:	f000 fdd6 	bl	8004a1c <pow>
    float fpart = n - (float)ipart;
 8003e70:	eef8 8ae8 	vcvt.f32.s32	s17, s17
        fpart = fpart * pow(10, afterpoint);
 8003e74:	ec53 2b10 	vmov	r2, r3, d0
 8003e78:	ee78 7a68 	vsub.f32	s15, s16, s17
 8003e7c:	e9cd 2300 	strd	r2, r3, [sp]
 8003e80:	ee17 0a90 	vmov	r0, s15
 8003e84:	f7fc fb0c 	bl	80004a0 <__aeabi_f2d>
 8003e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e8c:	f7fc fb5c 	bl	8000548 <__aeabi_dmul>
 8003e90:	f7fc fe32 	bl	8000af8 <__aeabi_d2f>

        intToStr((int)fpart, res + i + 1, afterpoint);
 8003e94:	ee07 0a90 	vmov	s15, r0
 8003e98:	3501      	adds	r5, #1
 8003e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e9e:	4425      	add	r5, r4
 8003ea0:	4632      	mov	r2, r6
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	ee17 0a90 	vmov	r0, s15
 8003ea8:	f7ff ff99 	bl	8003dde <intToStr>
 8003eac:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    }

    char string[30];
    if(minus_flag==1)
 8003eb0:	b34f      	cbz	r7, 8003f06 <ftoa+0xe6>
    {
        memset(string, 0, 30);
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	221e      	movs	r2, #30
 8003eb6:	a802      	add	r0, sp, #8
 8003eb8:	f000 fd50 	bl	800495c <memset>
        string[0]='-';
        if(n<1.0f)
 8003ebc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        string[0]='-';
 8003ec4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8003ec8:	f88d 3008 	strb.w	r3, [sp, #8]
        {
        	string[1]='0';
        	strcpy(&string[2], res);
 8003ecc:	bf45      	ittet	mi
 8003ece:	4621      	movmi	r1, r4
        	string[1]='0';
 8003ed0:	2330      	movmi	r3, #48	; 0x30
        }else
        	strcpy(&string[1], res);
 8003ed2:	4621      	movpl	r1, r4
        	strcpy(&string[2], res);
 8003ed4:	f10d 000a 	addmi.w	r0, sp, #10
        	strcpy(&string[1], res);
 8003ed8:	bf54      	ite	pl
 8003eda:	f10d 0009 	addpl.w	r0, sp, #9
        	string[1]='0';
 8003ede:	f88d 3009 	strbmi.w	r3, [sp, #9]
        	strcpy(&string[1], res);
 8003ee2:	f000 fd52 	bl	800498a <strcpy>

        memset(res, 0, strlen(res));
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f7fc f96e 	bl	80001c8 <strlen>
 8003eec:	2100      	movs	r1, #0
 8003eee:	4602      	mov	r2, r0
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 fd33 	bl	800495c <memset>
        strcpy(res, string);
 8003ef6:	a902      	add	r1, sp, #8
    if(n<1.0f)
	{
		string[0]='0';
		strcpy(&string[1], res);
		memset(res, 0, strlen(res));
		strcpy(res, string);
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f000 fd46 	bl	800498a <strcpy>
	}



}
 8003efe:	b00b      	add	sp, #44	; 0x2c
 8003f00:	ecbd 8b02 	vpop	{d8}
 8003f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(n<1.0f)
 8003f06:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0e:	d5f6      	bpl.n	8003efe <ftoa+0xde>
		string[0]='0';
 8003f10:	ad0a      	add	r5, sp, #40	; 0x28
 8003f12:	2330      	movs	r3, #48	; 0x30
		strcpy(&string[1], res);
 8003f14:	4621      	mov	r1, r4
 8003f16:	f10d 0009 	add.w	r0, sp, #9
		string[0]='0';
 8003f1a:	f805 3d20 	strb.w	r3, [r5, #-32]!
		strcpy(&string[1], res);
 8003f1e:	f000 fd34 	bl	800498a <strcpy>
		memset(res, 0, strlen(res));
 8003f22:	4620      	mov	r0, r4
 8003f24:	f7fc f950 	bl	80001c8 <strlen>
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f000 fd15 	bl	800495c <memset>
		strcpy(res, string);
 8003f32:	4629      	mov	r1, r5
 8003f34:	e7e0      	b.n	8003ef8 <ftoa+0xd8>
 8003f36:	bf00      	nop
 8003f38:	00000000 	.word	0x00000000
 8003f3c:	40240000 	.word	0x40240000

08003f40 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003f40:	b510      	push	{r4, lr}
 8003f42:	b09e      	sub	sp, #120	; 0x78
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003f44:	2303      	movs	r3, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003f46:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003f48:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003f4a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f50:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f52:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f54:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f56:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003f58:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003f5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f5e:	2402      	movs	r4, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f60:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003f62:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f64:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003f66:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f68:	f7fe f976 	bl	8002258 <HAL_RCC_OscConfig>
 8003f6c:	4601      	mov	r1, r0
 8003f6e:	b100      	cbz	r0, 8003f72 <SystemClock_Config+0x32>
 8003f70:	e7fe      	b.n	8003f70 <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f72:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f74:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f78:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003f7a:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f7c:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f7e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003f80:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f82:	f7fe fc0d 	bl	80027a0 <HAL_RCC_ClockConfig>
 8003f86:	b100      	cbz	r0, 8003f8a <SystemClock_Config+0x4a>
 8003f88:	e7fe      	b.n	8003f88 <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <SystemClock_Config+0x88>)
 8003f8c:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003f8e:	9016      	str	r0, [sp, #88]	; 0x58
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8003f90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f94:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8003f96:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f98:	f7fe fcca 	bl	8002930 <HAL_RCCEx_PeriphCLKConfig>
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	b100      	cbz	r0, 8003fa2 <SystemClock_Config+0x62>
 8003fa0:	e7fe      	b.n	8003fa0 <SystemClock_Config+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003fa2:	f7fe fcbf 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8003fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003faa:	fbb0 f0f3 	udiv	r0, r0, r3
 8003fae:	f7fc fe89 	bl	8000cc4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003fb2:	2004      	movs	r0, #4
 8003fb4:	f7fc fe9c 	bl	8000cf0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003fb8:	4622      	mov	r2, r4
 8003fba:	4621      	mov	r1, r4
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	f7fc fe40 	bl	8000c44 <HAL_NVIC_SetPriority>
}
 8003fc4:	b01e      	add	sp, #120	; 0x78
 8003fc6:	bd10      	pop	{r4, pc}
 8003fc8:	00020020 	.word	0x00020020

08003fcc <main>:
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b0ba      	sub	sp, #232	; 0xe8
  HAL_Init();
 8003fd0:	f7fc fdf6 	bl	8000bc0 <HAL_Init>
  SystemClock_Config();
 8003fd4:	f7ff ffb4 	bl	8003f40 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fd8:	4b81      	ldr	r3, [pc, #516]	; (80041e0 <main+0x214>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8003fda:	4882      	ldr	r0, [pc, #520]	; (80041e4 <main+0x218>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fdc:	695a      	ldr	r2, [r3, #20]
  hi2c1.Instance = I2C1;
 8003fde:	4c82      	ldr	r4, [pc, #520]	; (80041e8 <main+0x21c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fe0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003fe4:	615a      	str	r2, [r3, #20]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fec:	9201      	str	r2, [sp, #4]
 8003fee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003ff6:	615a      	str	r2, [r3, #20]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003ffe:	9202      	str	r2, [sp, #8]
 8004000:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004008:	615a      	str	r2, [r3, #20]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004010:	9203      	str	r2, [sp, #12]
 8004012:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800401a:	615a      	str	r2, [r3, #20]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004022:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004024:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004026:	f44f 417f 	mov.w	r1, #65280	; 0xff00
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800402a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800402c:	f7fc ff3a 	bl	8000ea4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8004030:	2334      	movs	r3, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004032:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8004034:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004036:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004038:	4b6c      	ldr	r3, [pc, #432]	; (80041ec <main+0x220>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800403a:	486a      	ldr	r0, [pc, #424]	; (80041e4 <main+0x218>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800403c:	9309      	str	r3, [sp, #36]	; 0x24

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800403e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004040:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004042:	f7fc fe67 	bl	8000d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004046:	a908      	add	r1, sp, #32
 8004048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800404c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800404e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004050:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004052:	f7fc fe5f 	bl	8000d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11 
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004056:	f44f 437f 	mov.w	r3, #65280	; 0xff00
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800405a:	a908      	add	r1, sp, #32
 800405c:	4861      	ldr	r0, [pc, #388]	; (80041e4 <main+0x218>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800405e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004060:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004062:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004064:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004066:	f7fc fe55 	bl	8000d14 <HAL_GPIO_Init>
  hi2c1.Init.Timing = 0x2000090E;
 800406a:	4961      	ldr	r1, [pc, #388]	; (80041f0 <main+0x224>)
 800406c:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <main+0x228>)
  hi2c1.Init.OwnAddress1 = 0;
 800406e:	60a5      	str	r5, [r4, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004070:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8004072:	e884 000a 	stmia.w	r4, {r1, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004076:	60e6      	str	r6, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004078:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800407a:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800407c:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800407e:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004080:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004082:	f7fd f827 	bl	80010d4 <HAL_I2C_Init>
 8004086:	4601      	mov	r1, r0
 8004088:	b100      	cbz	r0, 800408c <main+0xc0>
 800408a:	e7fe      	b.n	800408a <main+0xbe>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800408c:	4620      	mov	r0, r4
 800408e:	f7fd f9a4 	bl	80013da <HAL_I2CEx_ConfigAnalogFilter>
 8004092:	4601      	mov	r1, r0
 8004094:	b100      	cbz	r0, 8004098 <main+0xcc>
 8004096:	e7fe      	b.n	8004096 <main+0xca>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004098:	4620      	mov	r0, r4
 800409a:	f7fd f9c4 	bl	8001426 <HAL_I2CEx_ConfigDigitalFilter>
 800409e:	4605      	mov	r5, r0
 80040a0:	b100      	cbz	r0, 80040a4 <main+0xd8>
 80040a2:	e7fe      	b.n	80040a2 <main+0xd6>
  MX_USB_DEVICE_Init();
 80040a4:	f000 fa1a 	bl	80044dc <MX_USB_DEVICE_Init>
  htim3.Instance = TIM3;
 80040a8:	4c53      	ldr	r4, [pc, #332]	; (80041f8 <main+0x22c>)
  htim3.Init.Prescaler = 24000;
 80040aa:	4a54      	ldr	r2, [pc, #336]	; (80041fc <main+0x230>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ac:	60a5      	str	r5, [r4, #8]
  htim3.Init.Prescaler = 24000;
 80040ae:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 80040b2:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040b6:	4620      	mov	r0, r4
  htim3.Init.Period = 19;
 80040b8:	2313      	movs	r3, #19
 80040ba:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040bc:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040be:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040c0:	f7fe fe50 	bl	8002d64 <HAL_TIM_Base_Init>
 80040c4:	b100      	cbz	r0, 80040c8 <main+0xfc>
 80040c6:	e7fe      	b.n	80040c6 <main+0xfa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040cc:	a908      	add	r1, sp, #32
 80040ce:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040d0:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040d2:	f7fe fe6b 	bl	8002dac <HAL_TIM_ConfigClockSource>
 80040d6:	b100      	cbz	r0, 80040da <main+0x10e>
 80040d8:	e7fe      	b.n	80040d8 <main+0x10c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040da:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040dc:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040de:	a905      	add	r1, sp, #20
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7fe ff19 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 80040e6:	b100      	cbz	r0, 80040ea <main+0x11e>
 80040e8:	e7fe      	b.n	80040e8 <main+0x11c>
  HAL_Delay(2000);
 80040ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80040ee:	f7fc fd87 	bl	8000c00 <HAL_Delay>
  init_height=altitude;
 80040f2:	4c43      	ldr	r4, [pc, #268]	; (8004200 <main+0x234>)
  USB_allow=1;
 80040f4:	4b43      	ldr	r3, [pc, #268]	; (8004204 <main+0x238>)
  init_height=altitude;
 80040f6:	4d44      	ldr	r5, [pc, #272]	; (8004208 <main+0x23c>)
  USB_allow=1;
 80040f8:	701e      	strb	r6, [r3, #0]
	  strcat(string, "Temperature: ");
 80040fa:	4f44      	ldr	r7, [pc, #272]	; (800420c <main+0x240>)
	  ftoa(temperature, &string[strlen(string)], 3);
 80040fc:	4e44      	ldr	r6, [pc, #272]	; (8004210 <main+0x244>)
  BMP280_init();
 80040fe:	f7ff fc2b 	bl	8003958 <BMP280_init>
  BMP280_calc_values();
 8004102:	f7ff fc39 	bl	8003978 <BMP280_calc_values>
  init_height=altitude;
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	602b      	str	r3, [r5, #0]
	  BMP280_calc_values();
 800410a:	f7ff fc35 	bl	8003978 <BMP280_calc_values>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800410e:	2101      	movs	r1, #1
 8004110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004114:	f7fc fec0 	bl	8000e98 <HAL_GPIO_ReadPin>
 8004118:	b108      	cbz	r0, 800411e <main+0x152>
		  init_height=altitude;
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	602b      	str	r3, [r5, #0]
	  memset(&string, 0, strlen(string));
 800411e:	a808      	add	r0, sp, #32
 8004120:	f7fc f852 	bl	80001c8 <strlen>
 8004124:	2100      	movs	r1, #0
 8004126:	4602      	mov	r2, r0
 8004128:	a808      	add	r0, sp, #32
 800412a:	f000 fc17 	bl	800495c <memset>
	  strcat(string, "Temperature: ");
 800412e:	4639      	mov	r1, r7
 8004130:	a808      	add	r0, sp, #32
 8004132:	f000 fc1b 	bl	800496c <strcat>
	  ftoa(temperature, &string[strlen(string)], 3);
 8004136:	a808      	add	r0, sp, #32
 8004138:	f7fc f846 	bl	80001c8 <strlen>
 800413c:	ab08      	add	r3, sp, #32
 800413e:	4418      	add	r0, r3
 8004140:	ed96 0a00 	vldr	s0, [r6]
 8004144:	2103      	movs	r1, #3
 8004146:	f7ff fe6b 	bl	8003e20 <ftoa>
	  strcat(string, " C\n");
 800414a:	4932      	ldr	r1, [pc, #200]	; (8004214 <main+0x248>)
 800414c:	a808      	add	r0, sp, #32
 800414e:	f000 fc0d 	bl	800496c <strcat>
	  strcat(string, "Pressure: ");
 8004152:	4931      	ldr	r1, [pc, #196]	; (8004218 <main+0x24c>)
 8004154:	a808      	add	r0, sp, #32
 8004156:	f000 fc09 	bl	800496c <strcat>
	  ftoa(pressure, &string[strlen(string)], 3);
 800415a:	a808      	add	r0, sp, #32
 800415c:	f7fc f834 	bl	80001c8 <strlen>
 8004160:	ab08      	add	r3, sp, #32
 8004162:	4418      	add	r0, r3
 8004164:	4b2d      	ldr	r3, [pc, #180]	; (800421c <main+0x250>)
 8004166:	2103      	movs	r1, #3
 8004168:	ed93 0a00 	vldr	s0, [r3]
 800416c:	f7ff fe58 	bl	8003e20 <ftoa>
	  strcat(string, " Pa\n");
 8004170:	492b      	ldr	r1, [pc, #172]	; (8004220 <main+0x254>)
 8004172:	a808      	add	r0, sp, #32
 8004174:	f000 fbfa 	bl	800496c <strcat>
	  strcat(string, "Altitude: ");
 8004178:	492a      	ldr	r1, [pc, #168]	; (8004224 <main+0x258>)
 800417a:	a808      	add	r0, sp, #32
 800417c:	f000 fbf6 	bl	800496c <strcat>
	  ftoa(altitude, &string[strlen(string)], 3);
 8004180:	a808      	add	r0, sp, #32
 8004182:	f7fc f821 	bl	80001c8 <strlen>
 8004186:	ab08      	add	r3, sp, #32
 8004188:	4418      	add	r0, r3
 800418a:	ed94 0a00 	vldr	s0, [r4]
 800418e:	2103      	movs	r1, #3
 8004190:	f7ff fe46 	bl	8003e20 <ftoa>
	  strcat(string, " m\n");
 8004194:	4924      	ldr	r1, [pc, #144]	; (8004228 <main+0x25c>)
 8004196:	a808      	add	r0, sp, #32
 8004198:	f000 fbe8 	bl	800496c <strcat>
	  strcat(string, "Relative altitude: ");
 800419c:	4923      	ldr	r1, [pc, #140]	; (800422c <main+0x260>)
 800419e:	a808      	add	r0, sp, #32
 80041a0:	f000 fbe4 	bl	800496c <strcat>
	  ftoa(altitude-init_height, &string[strlen(string)], 3);
 80041a4:	a808      	add	r0, sp, #32
 80041a6:	f7fc f80f 	bl	80001c8 <strlen>
 80041aa:	edd5 7a00 	vldr	s15, [r5]
 80041ae:	ed94 0a00 	vldr	s0, [r4]
 80041b2:	ab08      	add	r3, sp, #32
 80041b4:	4418      	add	r0, r3
 80041b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80041ba:	2103      	movs	r1, #3
 80041bc:	f7ff fe30 	bl	8003e20 <ftoa>
	  strcat(string, " m\n\n\n");
 80041c0:	491b      	ldr	r1, [pc, #108]	; (8004230 <main+0x264>)
 80041c2:	a808      	add	r0, sp, #32
 80041c4:	f000 fbd2 	bl	800496c <strcat>
	  CDC_Transmit_FS1((uint8_t*)&string, strlen(string));
 80041c8:	a808      	add	r0, sp, #32
 80041ca:	f7fb fffd 	bl	80001c8 <strlen>
 80041ce:	b281      	uxth	r1, r0
 80041d0:	a808      	add	r0, sp, #32
 80041d2:	f000 f8c5 	bl	8004360 <CDC_Transmit_FS1>
	  HAL_Delay(1000);
 80041d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041da:	f7fc fd11 	bl	8000c00 <HAL_Delay>
	  BMP280_calc_values();
 80041de:	e794      	b.n	800410a <main+0x13e>
 80041e0:	40021000 	.word	0x40021000
 80041e4:	48001000 	.word	0x48001000
 80041e8:	2000040c 	.word	0x2000040c
 80041ec:	10110000 	.word	0x10110000
 80041f0:	40005400 	.word	0x40005400
 80041f4:	2000090e 	.word	0x2000090e
 80041f8:	20000488 	.word	0x20000488
 80041fc:	40000400 	.word	0x40000400
 8004200:	20000478 	.word	0x20000478
 8004204:	200001de 	.word	0x200001de
 8004208:	2000046c 	.word	0x2000046c
 800420c:	08006540 	.word	0x08006540
 8004210:	2000045c 	.word	0x2000045c
 8004214:	0800654e 	.word	0x0800654e
 8004218:	08006552 	.word	0x08006552
 800421c:	20000470 	.word	0x20000470
 8004220:	0800655d 	.word	0x0800655d
 8004224:	08006562 	.word	0x08006562
 8004228:	0800656d 	.word	0x0800656d
 800422c:	08006571 	.word	0x08006571
 8004230:	08006585 	.word	0x08006585

08004234 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8004234:	e7fe      	b.n	8004234 <_Error_Handler>
	...

08004238 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004238:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <HAL_MspInit+0x78>)
{
 800423a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	619a      	str	r2, [r3, #24]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800424c:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004250:	f7fc fce6 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004254:	2200      	movs	r2, #0
 8004256:	4611      	mov	r1, r2
 8004258:	f06f 000b 	mvn.w	r0, #11
 800425c:	f7fc fcf2 	bl	8000c44 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004260:	2200      	movs	r2, #0
 8004262:	4611      	mov	r1, r2
 8004264:	f06f 000a 	mvn.w	r0, #10
 8004268:	f7fc fcec 	bl	8000c44 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800426c:	2200      	movs	r2, #0
 800426e:	4611      	mov	r1, r2
 8004270:	f06f 0009 	mvn.w	r0, #9
 8004274:	f7fc fce6 	bl	8000c44 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004278:	2200      	movs	r2, #0
 800427a:	4611      	mov	r1, r2
 800427c:	f06f 0004 	mvn.w	r0, #4
 8004280:	f7fc fce0 	bl	8000c44 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004284:	2200      	movs	r2, #0
 8004286:	4611      	mov	r1, r2
 8004288:	f06f 0003 	mvn.w	r0, #3
 800428c:	f7fc fcda 	bl	8000c44 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004290:	2200      	movs	r2, #0
 8004292:	4611      	mov	r1, r2
 8004294:	f06f 0001 	mvn.w	r0, #1
 8004298:	f7fc fcd4 	bl	8000c44 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800429c:	2200      	movs	r2, #0
 800429e:	4611      	mov	r1, r2
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295
 80042a4:	f7fc fcce 	bl	8000c44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042a8:	b003      	add	sp, #12
 80042aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000

080042b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80042b6:	6802      	ldr	r2, [r0, #0]
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <HAL_I2C_MspInit+0x44>)
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d118      	bne.n	80042f0 <HAL_I2C_MspInit+0x3c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042be:	23c0      	movs	r3, #192	; 0xc0
 80042c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042c2:	2312      	movs	r3, #18
 80042c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042c6:	2301      	movs	r3, #1
 80042c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ca:	2303      	movs	r3, #3
 80042cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042ce:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d0:	eb0d 0103 	add.w	r1, sp, r3
 80042d4:	4809      	ldr	r0, [pc, #36]	; (80042fc <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042d6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d8:	f7fc fd1c 	bl	8000d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_I2C_MspInit+0x4c>)
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80042e4:	61da      	str	r2, [r3, #28]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80042f0:	b007      	add	sp, #28
 80042f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80042f6:	bf00      	nop
 80042f8:	40005400 	.word	0x40005400
 80042fc:	48000400 	.word	0x48000400
 8004300:	40021000 	.word	0x40021000

08004304 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004304:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <HAL_TIM_Base_MspInit+0x38>)
 8004308:	6802      	ldr	r2, [r0, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d112      	bne.n	8004334 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800430e:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004312:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	f042 0202 	orr.w	r2, r2, #2
 800431a:	61da      	str	r2, [r3, #28]
 800431c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800431e:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004326:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004328:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800432a:	f7fc fc8b 	bl	8000c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800432e:	201d      	movs	r0, #29
 8004330:	f7fc fcbc 	bl	8000cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004334:	b003      	add	sp, #12
 8004336:	f85d fb04 	ldr.w	pc, [sp], #4
 800433a:	bf00      	nop
 800433c:	40000400 	.word	0x40000400

08004340 <NMI_Handler>:
 8004340:	4770      	bx	lr

08004342 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004342:	e7fe      	b.n	8004342 <HardFault_Handler>

08004344 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004344:	e7fe      	b.n	8004344 <MemManage_Handler>

08004346 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004346:	e7fe      	b.n	8004346 <BusFault_Handler>

08004348 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004348:	e7fe      	b.n	8004348 <UsageFault_Handler>

0800434a <SVC_Handler>:
 800434a:	4770      	bx	lr

0800434c <DebugMon_Handler>:
 800434c:	4770      	bx	lr

0800434e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800434e:	4770      	bx	lr

08004350 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004350:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004352:	f7fc fc47 	bl	8000be4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800435a:	f7fc bcd6 	b.w	8000d0a <HAL_SYSTICK_IRQHandler>
	...

08004360 <CDC_Transmit_FS1>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f3xx.s).                    */
/******************************************************************************/

uint8_t CDC_Transmit_FS1(uint8_t* Buf, uint16_t Len)
{
 8004360:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004362:	4c09      	ldr	r4, [pc, #36]	; (8004388 <CDC_Transmit_FS1+0x28>)
 8004364:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8004368:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 800436c:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 800436e:	b943      	cbnz	r3, 8004382 <CDC_Transmit_FS1+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004370:	4601      	mov	r1, r0
 8004372:	4620      	mov	r0, r4
 8004374:	f7fe fee4 	bl	8003140 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004378:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800437a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800437e:	f7fe beed 	b.w	800315c <USBD_CDC_TransmitPacket>
}
 8004382:	2001      	movs	r0, #1
 8004384:	bd10      	pop	{r4, pc}
 8004386:	bf00      	nop
 8004388:	200004dc 	.word	0x200004dc

0800438c <rec_lenght>:
}

uint16_t rec_lenght(void)
{
	uint16_t i=0;
	while((bufferUSB[i]!='\0')&&(bufferUSB[i]!='\r')&&(bufferUSB[i]!='\n'))
 800438c:	4909      	ldr	r1, [pc, #36]	; (80043b4 <rec_lenght+0x28>)
{
 800438e:	b510      	push	{r4, lr}
	while((bufferUSB[i]!='\0')&&(bufferUSB[i]!='\r')&&(bufferUSB[i]!='\n'))
 8004390:	2200      	movs	r2, #0
 8004392:	f242 4401 	movw	r4, #9217	; 0x2401
 8004396:	b290      	uxth	r0, r2
 8004398:	3201      	adds	r2, #1
 800439a:	5c0b      	ldrb	r3, [r1, r0]
 800439c:	2b0d      	cmp	r3, #13
 800439e:	bf9a      	itte	ls
 80043a0:	fa24 f303 	lsrls.w	r3, r4, r3
 80043a4:	43db      	mvnls	r3, r3
 80043a6:	2301      	movhi	r3, #1
 80043a8:	07db      	lsls	r3, r3, #31
 80043aa:	d4f4      	bmi.n	8004396 <rec_lenght+0xa>
		i++;

	return i+1;
 80043ac:	3001      	adds	r0, #1
}
 80043ae:	b280      	uxth	r0, r0
 80043b0:	bd10      	pop	{r4, pc}
 80043b2:	bf00      	nop
 80043b4:	200004c8 	.word	0x200004c8

080043b8 <get_BMP_ID>:

void get_BMP_ID(void)
{
 80043b8:	b510      	push	{r4, lr}
	ID=I2C_Read_Register(BMP280_dev_address, 0xD0);
 80043ba:	21d0      	movs	r1, #208	; 0xd0
 80043bc:	20ee      	movs	r0, #238	; 0xee
 80043be:	f7ff fa09 	bl	80037d4 <I2C_Read_Register>
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <get_BMP_ID+0x30>)
	bufferUSB[0]='0';
 80043c4:	4c09      	ldr	r4, [pc, #36]	; (80043ec <get_BMP_ID+0x34>)
	ID=I2C_Read_Register(BMP280_dev_address, 0xD0);
 80043c6:	7018      	strb	r0, [r3, #0]
	bufferUSB[0]='0';
 80043c8:	2330      	movs	r3, #48	; 0x30
 80043ca:	7023      	strb	r3, [r4, #0]
	bufferUSB[1]='x';
	itoa(ID,&bufferUSB[2],16);
 80043cc:	1ca1      	adds	r1, r4, #2
	bufferUSB[1]='x';
 80043ce:	2378      	movs	r3, #120	; 0x78
	itoa(ID,&bufferUSB[2],16);
 80043d0:	2210      	movs	r2, #16
	bufferUSB[1]='x';
 80043d2:	7063      	strb	r3, [r4, #1]
	itoa(ID,&bufferUSB[2],16);
 80043d4:	f000 fac0 	bl	8004958 <itoa>
	bufferUSB[4]='\n';
 80043d8:	230a      	movs	r3, #10
 80043da:	7123      	strb	r3, [r4, #4]
	CDC_Transmit_FS1(&bufferUSB, 5);
 80043dc:	4620      	mov	r0, r4
 80043de:	2105      	movs	r1, #5
}
 80043e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	CDC_Transmit_FS1(&bufferUSB, 5);
 80043e4:	f7ff bfbc 	b.w	8004360 <CDC_Transmit_FS1>
 80043e8:	200001df 	.word	0x200001df
 80043ec:	200004c8 	.word	0x200004c8

080043f0 <USB_LP_CAN_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN_RX0 interrupts.
*/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80043f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80043f2:	4816      	ldr	r0, [pc, #88]	; (800444c <USB_LP_CAN_RX0_IRQHandler+0x5c>)
 80043f4:	f7fd fbf4 	bl	8001be0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */
  if(USB_allow==1)
 80043f8:	4b15      	ldr	r3, [pc, #84]	; (8004450 <USB_LP_CAN_RX0_IRQHandler+0x60>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d11d      	bne.n	800443c <USB_LP_CAN_RX0_IRQHandler+0x4c>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004400:	4c14      	ldr	r4, [pc, #80]	; (8004454 <USB_LP_CAN_RX0_IRQHandler+0x64>)
 8004402:	4815      	ldr	r0, [pc, #84]	; (8004458 <USB_LP_CAN_RX0_IRQHandler+0x68>)
 8004404:	4621      	mov	r1, r4
 8004406:	f7fe fea3 	bl	8003150 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800440a:	4813      	ldr	r0, [pc, #76]	; (8004458 <USB_LP_CAN_RX0_IRQHandler+0x68>)
 800440c:	f7fe febd 	bl	800318a <USBD_CDC_ReceivePacket>
    {
  	  CDC_Receive_FS1 (&bufferUSB, 20);
  	  if(bufferUSB[0]!='\n')
 8004410:	7823      	ldrb	r3, [r4, #0]
 8004412:	2b0a      	cmp	r3, #10
 8004414:	d012      	beq.n	800443c <USB_LP_CAN_RX0_IRQHandler+0x4c>
  		  {
  		  	if(string_compare(&bufferUSB, "get BMP ID", 10))
 8004416:	220a      	movs	r2, #10
 8004418:	4910      	ldr	r1, [pc, #64]	; (800445c <USB_LP_CAN_RX0_IRQHandler+0x6c>)
 800441a:	4620      	mov	r0, r4
 800441c:	f7ff fcbc 	bl	8003d98 <string_compare>
 8004420:	b168      	cbz	r0, 800443e <USB_LP_CAN_RX0_IRQHandler+0x4e>
  		  	{
  		  		get_BMP_ID();
 8004422:	f7ff ffc9 	bl	80043b8 <get_BMP_ID>
 8004426:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <USB_LP_CAN_RX0_IRQHandler+0x70>)
{
 8004428:	2300      	movs	r3, #0
  		  	} else CDC_Transmit_FS1(&bufferUSB, rec_lenght());
  		  	for(i=0;i<20;i++)//clear buffer
  		  		bufferUSB[i]='\n';
 800442a:	210a      	movs	r1, #10
  		  	for(i=0;i<20;i++)//clear buffer
 800442c:	3301      	adds	r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b14      	cmp	r3, #20
  		  		bufferUSB[i]='\n';
 8004432:	f802 1f01 	strb.w	r1, [r2, #1]!
  		  	for(i=0;i<20;i++)//clear buffer
 8004436:	d1f9      	bne.n	800442c <USB_LP_CAN_RX0_IRQHandler+0x3c>
 8004438:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <USB_LP_CAN_RX0_IRQHandler+0x74>)
 800443a:	7013      	strb	r3, [r2, #0]
 800443c:	bd10      	pop	{r4, pc}
  		  	} else CDC_Transmit_FS1(&bufferUSB, rec_lenght());
 800443e:	f7ff ffa5 	bl	800438c <rec_lenght>
 8004442:	4601      	mov	r1, r0
 8004444:	4620      	mov	r0, r4
 8004446:	f7ff ff8b 	bl	8004360 <CDC_Transmit_FS1>
 800444a:	e7ec      	b.n	8004426 <USB_LP_CAN_RX0_IRQHandler+0x36>
 800444c:	20001700 	.word	0x20001700
 8004450:	200001de 	.word	0x200001de
 8004454:	200004c8 	.word	0x200004c8
 8004458:	200004dc 	.word	0x200004dc
 800445c:	0800658b 	.word	0x0800658b
 8004460:	200004c7 	.word	0x200004c7
 8004464:	200001e0 	.word	0x200001e0

08004468 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004468:	4801      	ldr	r0, [pc, #4]	; (8004470 <TIM3_IRQHandler+0x8>)
 800446a:	f7fe bb6c 	b.w	8002b46 <HAL_TIM_IRQHandler>
 800446e:	bf00      	nop
 8004470:	20000488 	.word	0x20000488

08004474 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004474:	4915      	ldr	r1, [pc, #84]	; (80044cc <SystemInit+0x58>)
 8004476:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800447a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004482:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <SystemInit+0x5c>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800448c:	6858      	ldr	r0, [r3, #4]
 800448e:	4a11      	ldr	r2, [pc, #68]	; (80044d4 <SystemInit+0x60>)
 8004490:	4002      	ands	r2, r0
 8004492:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800449a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800449e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80044ae:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80044b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b2:	f022 020f 	bic.w	r2, r2, #15
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80044b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044ba:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <SystemInit+0x64>)
 80044bc:	4002      	ands	r2, r0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80044c0:	2200      	movs	r2, #0
 80044c2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80044c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044c8:	608b      	str	r3, [r1, #8]
 80044ca:	4770      	bx	lr
 80044cc:	e000ed00 	.word	0xe000ed00
 80044d0:	40021000 	.word	0x40021000
 80044d4:	f87fc00c 	.word	0xf87fc00c
 80044d8:	ff00fccc 	.word	0xff00fccc

080044dc <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */                                        
void MX_USB_DEVICE_Init(void)
{
 80044dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80044de:	4c09      	ldr	r4, [pc, #36]	; (8004504 <MX_USB_DEVICE_Init+0x28>)
 80044e0:	4909      	ldr	r1, [pc, #36]	; (8004508 <MX_USB_DEVICE_Init+0x2c>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	4620      	mov	r0, r4
 80044e6:	f7fe fe63 	bl	80031b0 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80044ea:	4908      	ldr	r1, [pc, #32]	; (800450c <MX_USB_DEVICE_Init+0x30>)
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fe fe74 	bl	80031da <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80044f2:	4620      	mov	r0, r4
 80044f4:	4906      	ldr	r1, [pc, #24]	; (8004510 <MX_USB_DEVICE_Init+0x34>)
 80044f6:	f7fe fe1c 	bl	8003132 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80044fa:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80044fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8004500:	f7fe be72 	b.w	80031e8 <USBD_Start>
 8004504:	200004dc 	.word	0x200004dc
 8004508:	20000124 	.word	0x20000124
 800450c:	20000000 	.word	0x20000000
 8004510:	20000114 	.word	0x20000114

08004514 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8004514:	2000      	movs	r0, #0
 8004516:	4770      	bx	lr

08004518 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004518:	2000      	movs	r0, #0
 800451a:	4770      	bx	lr

0800451c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 800451c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800451e:	4c05      	ldr	r4, [pc, #20]	; (8004534 <CDC_Receive_FS+0x18>)
 8004520:	4601      	mov	r1, r0
 8004522:	4620      	mov	r0, r4
 8004524:	f7fe fe14 	bl	8003150 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004528:	4620      	mov	r0, r4
 800452a:	f7fe fe2e 	bl	800318a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 800452e:	2000      	movs	r0, #0
 8004530:	bd10      	pop	{r4, pc}
 8004532:	bf00      	nop
 8004534:	200004dc 	.word	0x200004dc

08004538 <CDC_Init_FS>:
{ 
 8004538:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800453a:	4c06      	ldr	r4, [pc, #24]	; (8004554 <CDC_Init_FS+0x1c>)
 800453c:	4906      	ldr	r1, [pc, #24]	; (8004558 <CDC_Init_FS+0x20>)
 800453e:	2200      	movs	r2, #0
 8004540:	4620      	mov	r0, r4
 8004542:	f7fe fdfd 	bl	8003140 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004546:	4905      	ldr	r1, [pc, #20]	; (800455c <CDC_Init_FS+0x24>)
 8004548:	4620      	mov	r0, r4
 800454a:	f7fe fe01 	bl	8003150 <USBD_CDC_SetRxBuffer>
}
 800454e:	2000      	movs	r0, #0
 8004550:	bd10      	pop	{r4, pc}
 8004552:	bf00      	nop
 8004554:	200004dc 	.word	0x200004dc
 8004558:	20000f00 	.word	0x20000f00
 800455c:	20000700 	.word	0x20000700

08004560 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004560:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 8004562:	6802      	ldr	r2, [r0, #0]
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <HAL_PCD_MspInit+0x54>)
 8004566:	429a      	cmp	r2, r3
{
 8004568:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB)
 800456a:	d121      	bne.n	80045b0 <HAL_PCD_MspInit+0x50>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800456c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004570:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004572:	2302      	movs	r3, #2
 8004574:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004576:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800457a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800457e:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004584:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004586:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004588:	f7fc fbc4 	bl	8000d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_PCD_MspInit+0x58>)
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004594:	61d9      	str	r1, [r3, #28]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800459c:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800459e:	2014      	movs	r0, #20
 80045a0:	4622      	mov	r2, r4
 80045a2:	4621      	mov	r1, r4
    __HAL_RCC_USB_CLK_ENABLE();
 80045a4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80045a6:	f7fc fb4d 	bl	8000c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80045aa:	2014      	movs	r0, #20
 80045ac:	f7fc fb7e 	bl	8000cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80045b0:	b006      	add	sp, #24
 80045b2:	bd10      	pop	{r4, pc}
 80045b4:	40005c00 	.word	0x40005c00
 80045b8:	40021000 	.word	0x40021000

080045bc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80045bc:	f500 715d 	add.w	r1, r0, #884	; 0x374
 80045c0:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80045c4:	f7fe be27 	b.w	8003216 <USBD_LL_SetupStage>

080045c8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80045c8:	231c      	movs	r3, #28
 80045ca:	fb03 0301 	mla	r3, r3, r1, r0
 80045ce:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80045d2:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 80045d6:	f7fe be4b 	b.w	8003270 <USBD_LL_DataOutStage>

080045da <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80045da:	231c      	movs	r3, #28
 80045dc:	fb03 0301 	mla	r3, r3, r1, r0
 80045e0:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80045e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e6:	f7fe be75 	b.w	80032d4 <USBD_LL_DataInStage>

080045ea <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80045ea:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80045ee:	f7fe bef1 	b.w	80033d4 <USBD_LL_SOF>

080045f2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80045f2:	b510      	push	{r4, lr}
 80045f4:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 80045f6:	2101      	movs	r1, #1
 80045f8:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80045fc:	f7fe fed8 	bl	80033b0 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004600:	f8d4 03a4 	ldr.w	r0, [r4, #932]	; 0x3a4
}
 8004604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004608:	f7fe beb3 	b.w	8003372 <USBD_LL_Reset>

0800460c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800460c:	b510      	push	{r4, lr}
 800460e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004610:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8004614:	f7fe fecf 	bl	80033b6 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004618:	69a3      	ldr	r3, [r4, #24]
 800461a:	b123      	cbz	r3, 8004626 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800461c:	4a02      	ldr	r2, [pc, #8]	; (8004628 <HAL_PCD_SuspendCallback+0x1c>)
 800461e:	6913      	ldr	r3, [r2, #16]
 8004620:	f043 0306 	orr.w	r3, r3, #6
 8004624:	6113      	str	r3, [r2, #16]
 8004626:	bd10      	pop	{r4, pc}
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800462c:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8004630:	f7fe beca 	b.w	80033c8 <USBD_LL_Resume>

08004634 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8004634:	b510      	push	{r4, lr}
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004636:	4a20      	ldr	r2, [pc, #128]	; (80046b8 <USBD_LL_Init+0x84>)
{ 
 8004638:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800463a:	4820      	ldr	r0, [pc, #128]	; (80046bc <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800463c:	2308      	movs	r3, #8
 800463e:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_FS.pData = pdev;
 8004642:	f8c0 43a4 	str.w	r4, [r0, #932]	; 0x3a4
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004646:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004648:	2202      	movs	r2, #2
  pdev->pData = &hpcd_USB_FS;
 800464a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800464e:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004650:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004652:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004654:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004656:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004658:	f7fc ff0a 	bl	8001470 <HAL_PCD_Init>
 800465c:	b120      	cbz	r0, 8004668 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800465e:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8004662:	4817      	ldr	r0, [pc, #92]	; (80046c0 <USBD_LL_Init+0x8c>)
 8004664:	f7ff fde6 	bl	8004234 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004668:	2200      	movs	r2, #0
 800466a:	4611      	mov	r1, r2
 800466c:	2318      	movs	r3, #24
 800466e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004672:	f7fd fda6 	bl	80021c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004676:	2358      	movs	r3, #88	; 0x58
 8004678:	2200      	movs	r2, #0
 800467a:	2180      	movs	r1, #128	; 0x80
 800467c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004680:	f7fd fd9f 	bl	80021c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 8004684:	23c0      	movs	r3, #192	; 0xc0
 8004686:	2200      	movs	r2, #0
 8004688:	2181      	movs	r1, #129	; 0x81
 800468a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800468e:	f7fd fd98 	bl	80021c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004692:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004696:	2200      	movs	r2, #0
 8004698:	2101      	movs	r1, #1
 800469a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800469e:	f7fd fd90 	bl	80021c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 80046a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046a6:	2200      	movs	r2, #0
 80046a8:	2182      	movs	r1, #130	; 0x82
 80046aa:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80046ae:	f7fd fd88 	bl	80021c2 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 80046b2:	2000      	movs	r0, #0
 80046b4:	bd10      	pop	{r4, pc}
 80046b6:	bf00      	nop
 80046b8:	40005c00 	.word	0x40005c00
 80046bc:	20001700 	.word	0x20001700
 80046c0:	080065aa 	.word	0x080065aa

080046c4 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80046c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80046c6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80046ca:	f7fc ff25 	bl	8001518 <HAL_PCD_Start>
 80046ce:	2803      	cmp	r0, #3
 80046d0:	bf9a      	itte	ls
 80046d2:	4b02      	ldrls	r3, [pc, #8]	; (80046dc <USBD_LL_Start+0x18>)
 80046d4:	5c18      	ldrbls	r0, [r3, r0]
 80046d6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80046d8:	bd08      	pop	{r3, pc}
 80046da:	bf00      	nop
 80046dc:	080065a6 	.word	0x080065a6

080046e0 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 80046e0:	b510      	push	{r4, lr}
 80046e2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 80046e4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80046e8:	4613      	mov	r3, r2
 80046ea:	4622      	mov	r2, r4
 80046ec:	f7fc ff30 	bl	8001550 <HAL_PCD_EP_Open>
 80046f0:	2803      	cmp	r0, #3
 80046f2:	bf9a      	itte	ls
 80046f4:	4b01      	ldrls	r3, [pc, #4]	; (80046fc <USBD_LL_OpenEP+0x1c>)
 80046f6:	5c18      	ldrbls	r0, [r3, r0]
 80046f8:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80046fa:	bd10      	pop	{r4, pc}
 80046fc:	080065a6 	.word	0x080065a6

08004700 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004700:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004702:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004706:	f7fd f8a1 	bl	800184c <HAL_PCD_EP_Close>
 800470a:	2803      	cmp	r0, #3
 800470c:	bf9a      	itte	ls
 800470e:	4b02      	ldrls	r3, [pc, #8]	; (8004718 <USBD_LL_CloseEP+0x18>)
 8004710:	5c18      	ldrbls	r0, [r3, r0]
 8004712:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004714:	bd08      	pop	{r3, pc}
 8004716:	bf00      	nop
 8004718:	080065a6 	.word	0x080065a6

0800471c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800471c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800471e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004722:	f7fd fca1 	bl	8002068 <HAL_PCD_EP_SetStall>
 8004726:	2803      	cmp	r0, #3
 8004728:	bf9a      	itte	ls
 800472a:	4b02      	ldrls	r3, [pc, #8]	; (8004734 <USBD_LL_StallEP+0x18>)
 800472c:	5c18      	ldrbls	r0, [r3, r0]
 800472e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004730:	bd08      	pop	{r3, pc}
 8004732:	bf00      	nop
 8004734:	080065a6 	.word	0x080065a6

08004738 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004738:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800473a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800473e:	f7fd fce0 	bl	8002102 <HAL_PCD_EP_ClrStall>
 8004742:	2803      	cmp	r0, #3
 8004744:	bf9a      	itte	ls
 8004746:	4b02      	ldrls	r3, [pc, #8]	; (8004750 <USBD_LL_ClearStallEP+0x18>)
 8004748:	5c18      	ldrbls	r0, [r3, r0]
 800474a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800474c:	bd08      	pop	{r3, pc}
 800474e:	bf00      	nop
 8004750:	080065a6 	.word	0x080065a6

08004754 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004754:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004758:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 800475c:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004760:	bf1b      	ittet	ne
 8004762:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8004766:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800476a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800476e:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004772:	bf08      	it	eq
 8004774:	f891 01ce 	ldrbeq.w	r0, [r1, #462]	; 0x1ce
  }
}
 8004778:	4770      	bx	lr
	...

0800477c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 800477c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800477e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004782:	f7fc fecf 	bl	8001524 <HAL_PCD_SetAddress>
 8004786:	2803      	cmp	r0, #3
 8004788:	bf9a      	itte	ls
 800478a:	4b02      	ldrls	r3, [pc, #8]	; (8004794 <USBD_LL_SetUSBAddress+0x18>)
 800478c:	5c18      	ldrbls	r0, [r3, r0]
 800478e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004790:	bd08      	pop	{r3, pc}
 8004792:	bf00      	nop
 8004794:	080065a6 	.word	0x080065a6

08004798 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8004798:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800479a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800479e:	f7fd f9a3 	bl	8001ae8 <HAL_PCD_EP_Transmit>
 80047a2:	2803      	cmp	r0, #3
 80047a4:	bf9a      	itte	ls
 80047a6:	4b02      	ldrls	r3, [pc, #8]	; (80047b0 <USBD_LL_Transmit+0x18>)
 80047a8:	5c18      	ldrbls	r0, [r3, r0]
 80047aa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 80047ac:	bd08      	pop	{r3, pc}
 80047ae:	bf00      	nop
 80047b0:	080065a6 	.word	0x080065a6

080047b4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 80047b4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80047b6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80047ba:	f7fd f91f 	bl	80019fc <HAL_PCD_EP_Receive>
 80047be:	2803      	cmp	r0, #3
 80047c0:	bf9a      	itte	ls
 80047c2:	4b02      	ldrls	r3, [pc, #8]	; (80047cc <USBD_LL_PrepareReceive+0x18>)
 80047c4:	5c18      	ldrbls	r0, [r3, r0]
 80047c6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80047c8:	bd08      	pop	{r3, pc}
 80047ca:	bf00      	nop
 80047cc:	080065a6 	.word	0x080065a6

080047d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 80047d0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80047d2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80047d6:	f7fd f97f 	bl	8001ad8 <HAL_PCD_EP_GetRxCount>
}
 80047da:	bd08      	pop	{r3, pc}

080047dc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80047dc:	4800      	ldr	r0, [pc, #0]	; (80047e0 <USBD_static_malloc+0x4>)
 80047de:	4770      	bx	lr
 80047e0:	200001e4 	.word	0x200001e4

080047e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80047e4:	4770      	bx	lr

080047e6 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80047e6:	4770      	bx	lr

080047e8 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80047e8:	2312      	movs	r3, #18
 80047ea:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80047ec:	4800      	ldr	r0, [pc, #0]	; (80047f0 <USBD_FS_DeviceDescriptor+0x8>)
 80047ee:	4770      	bx	lr
 80047f0:	20000140 	.word	0x20000140

080047f4 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 80047f4:	2304      	movs	r3, #4
 80047f6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80047f8:	4800      	ldr	r0, [pc, #0]	; (80047fc <USBD_FS_LangIDStrDescriptor+0x8>)
 80047fa:	4770      	bx	lr
 80047fc:	20000154 	.word	0x20000154

08004800 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004800:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004802:	4c04      	ldr	r4, [pc, #16]	; (8004814 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004804:	4804      	ldr	r0, [pc, #16]	; (8004818 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004806:	460a      	mov	r2, r1
 8004808:	4621      	mov	r1, r4
 800480a:	f7fe ff84 	bl	8003716 <USBD_GetString>
  return USBD_StrDesc;
}
 800480e:	4620      	mov	r0, r4
 8004810:	bd10      	pop	{r4, pc}
 8004812:	bf00      	nop
 8004814:	20001aa8 	.word	0x20001aa8
 8004818:	080065d6 	.word	0x080065d6

0800481c <USBD_FS_ProductStrDescriptor>:
{
 800481c:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800481e:	4c04      	ldr	r4, [pc, #16]	; (8004830 <USBD_FS_ProductStrDescriptor+0x14>)
 8004820:	4804      	ldr	r0, [pc, #16]	; (8004834 <USBD_FS_ProductStrDescriptor+0x18>)
 8004822:	460a      	mov	r2, r1
 8004824:	4621      	mov	r1, r4
 8004826:	f7fe ff76 	bl	8003716 <USBD_GetString>
}
 800482a:	4620      	mov	r0, r4
 800482c:	bd10      	pop	{r4, pc}
 800482e:	bf00      	nop
 8004830:	20001aa8 	.word	0x20001aa8
 8004834:	080065e9 	.word	0x080065e9

08004838 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004838:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800483a:	4c04      	ldr	r4, [pc, #16]	; (800484c <USBD_FS_SerialStrDescriptor+0x14>)
 800483c:	4804      	ldr	r0, [pc, #16]	; (8004850 <USBD_FS_SerialStrDescriptor+0x18>)
 800483e:	460a      	mov	r2, r1
 8004840:	4621      	mov	r1, r4
 8004842:	f7fe ff68 	bl	8003716 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8004846:	4620      	mov	r0, r4
 8004848:	bd10      	pop	{r4, pc}
 800484a:	bf00      	nop
 800484c:	20001aa8 	.word	0x20001aa8
 8004850:	080065f6 	.word	0x080065f6

08004854 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004854:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004856:	4c04      	ldr	r4, [pc, #16]	; (8004868 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004858:	4804      	ldr	r0, [pc, #16]	; (800486c <USBD_FS_ConfigStrDescriptor+0x18>)
 800485a:	460a      	mov	r2, r1
 800485c:	4621      	mov	r1, r4
 800485e:	f7fe ff5a 	bl	8003716 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8004862:	4620      	mov	r0, r4
 8004864:	bd10      	pop	{r4, pc}
 8004866:	bf00      	nop
 8004868:	20001aa8 	.word	0x20001aa8
 800486c:	080065bd 	.word	0x080065bd

08004870 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004870:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004872:	4c04      	ldr	r4, [pc, #16]	; (8004884 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004874:	4804      	ldr	r0, [pc, #16]	; (8004888 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004876:	460a      	mov	r2, r1
 8004878:	4621      	mov	r1, r4
 800487a:	f7fe ff4c 	bl	8003716 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 800487e:	4620      	mov	r0, r4
 8004880:	bd10      	pop	{r4, pc}
 8004882:	bf00      	nop
 8004884:	20001aa8 	.word	0x20001aa8
 8004888:	080065c8 	.word	0x080065c8

0800488c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800488c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004890:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004892:	e003      	b.n	800489c <LoopCopyDataInit>

08004894 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004896:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004898:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800489a:	3104      	adds	r1, #4

0800489c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800489c:	480b      	ldr	r0, [pc, #44]	; (80048cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80048a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80048a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80048a4:	d3f6      	bcc.n	8004894 <CopyDataInit>
	ldr	r2, =_sbss
 80048a6:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80048a8:	e002      	b.n	80048b0 <LoopFillZerobss>

080048aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80048aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80048ac:	f842 3b04 	str.w	r3, [r2], #4

080048b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <LoopForever+0x16>)
	cmp	r2, r3
 80048b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80048b4:	d3f9      	bcc.n	80048aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80048b6:	f7ff fddd 	bl	8004474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048ba:	f000 f811 	bl	80048e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80048be:	f7ff fb85 	bl	8003fcc <main>

080048c2 <LoopForever>:

LoopForever:
    b LoopForever
 80048c2:	e7fe      	b.n	80048c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80048c4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80048c8:	08006698 	.word	0x08006698
	ldr	r0, =_sdata
 80048cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80048d0:	200001c0 	.word	0x200001c0
	ldr	r2, =_sbss
 80048d4:	200001c0 	.word	0x200001c0
	ldr	r3, = _ebss
 80048d8:	20001ca8 	.word	0x20001ca8

080048dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048dc:	e7fe      	b.n	80048dc <ADC1_2_IRQHandler>
	...

080048e0 <__libc_init_array>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	4e0d      	ldr	r6, [pc, #52]	; (8004918 <__libc_init_array+0x38>)
 80048e4:	4c0d      	ldr	r4, [pc, #52]	; (800491c <__libc_init_array+0x3c>)
 80048e6:	1ba4      	subs	r4, r4, r6
 80048e8:	10a4      	asrs	r4, r4, #2
 80048ea:	2500      	movs	r5, #0
 80048ec:	42a5      	cmp	r5, r4
 80048ee:	d109      	bne.n	8004904 <__libc_init_array+0x24>
 80048f0:	4e0b      	ldr	r6, [pc, #44]	; (8004920 <__libc_init_array+0x40>)
 80048f2:	4c0c      	ldr	r4, [pc, #48]	; (8004924 <__libc_init_array+0x44>)
 80048f4:	f001 fe06 	bl	8006504 <_init>
 80048f8:	1ba4      	subs	r4, r4, r6
 80048fa:	10a4      	asrs	r4, r4, #2
 80048fc:	2500      	movs	r5, #0
 80048fe:	42a5      	cmp	r5, r4
 8004900:	d105      	bne.n	800490e <__libc_init_array+0x2e>
 8004902:	bd70      	pop	{r4, r5, r6, pc}
 8004904:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004908:	4798      	blx	r3
 800490a:	3501      	adds	r5, #1
 800490c:	e7ee      	b.n	80048ec <__libc_init_array+0xc>
 800490e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004912:	4798      	blx	r3
 8004914:	3501      	adds	r5, #1
 8004916:	e7f2      	b.n	80048fe <__libc_init_array+0x1e>
 8004918:	08006690 	.word	0x08006690
 800491c:	08006690 	.word	0x08006690
 8004920:	08006690 	.word	0x08006690
 8004924:	08006694 	.word	0x08006694

08004928 <__itoa>:
 8004928:	1e93      	subs	r3, r2, #2
 800492a:	2b22      	cmp	r3, #34	; 0x22
 800492c:	b510      	push	{r4, lr}
 800492e:	460c      	mov	r4, r1
 8004930:	d904      	bls.n	800493c <__itoa+0x14>
 8004932:	2300      	movs	r3, #0
 8004934:	700b      	strb	r3, [r1, #0]
 8004936:	461c      	mov	r4, r3
 8004938:	4620      	mov	r0, r4
 800493a:	bd10      	pop	{r4, pc}
 800493c:	2a0a      	cmp	r2, #10
 800493e:	d109      	bne.n	8004954 <__itoa+0x2c>
 8004940:	2800      	cmp	r0, #0
 8004942:	da07      	bge.n	8004954 <__itoa+0x2c>
 8004944:	232d      	movs	r3, #45	; 0x2d
 8004946:	700b      	strb	r3, [r1, #0]
 8004948:	4240      	negs	r0, r0
 800494a:	2101      	movs	r1, #1
 800494c:	4421      	add	r1, r4
 800494e:	f000 f825 	bl	800499c <__utoa>
 8004952:	e7f1      	b.n	8004938 <__itoa+0x10>
 8004954:	2100      	movs	r1, #0
 8004956:	e7f9      	b.n	800494c <__itoa+0x24>

08004958 <itoa>:
 8004958:	f7ff bfe6 	b.w	8004928 <__itoa>

0800495c <memset>:
 800495c:	4402      	add	r2, r0
 800495e:	4603      	mov	r3, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	d100      	bne.n	8004966 <memset+0xa>
 8004964:	4770      	bx	lr
 8004966:	f803 1b01 	strb.w	r1, [r3], #1
 800496a:	e7f9      	b.n	8004960 <memset+0x4>

0800496c <strcat>:
 800496c:	b510      	push	{r4, lr}
 800496e:	4602      	mov	r2, r0
 8004970:	4613      	mov	r3, r2
 8004972:	3201      	adds	r2, #1
 8004974:	781c      	ldrb	r4, [r3, #0]
 8004976:	2c00      	cmp	r4, #0
 8004978:	d1fa      	bne.n	8004970 <strcat+0x4>
 800497a:	3b01      	subs	r3, #1
 800497c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004980:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004984:	2a00      	cmp	r2, #0
 8004986:	d1f9      	bne.n	800497c <strcat+0x10>
 8004988:	bd10      	pop	{r4, pc}

0800498a <strcpy>:
 800498a:	4603      	mov	r3, r0
 800498c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004990:	f803 2b01 	strb.w	r2, [r3], #1
 8004994:	2a00      	cmp	r2, #0
 8004996:	d1f9      	bne.n	800498c <strcpy+0x2>
 8004998:	4770      	bx	lr
	...

0800499c <__utoa>:
 800499c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800499e:	4c1e      	ldr	r4, [pc, #120]	; (8004a18 <__utoa+0x7c>)
 80049a0:	b08b      	sub	sp, #44	; 0x2c
 80049a2:	4603      	mov	r3, r0
 80049a4:	460f      	mov	r7, r1
 80049a6:	466d      	mov	r5, sp
 80049a8:	f104 0e20 	add.w	lr, r4, #32
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	6861      	ldr	r1, [r4, #4]
 80049b0:	462e      	mov	r6, r5
 80049b2:	c603      	stmia	r6!, {r0, r1}
 80049b4:	3408      	adds	r4, #8
 80049b6:	4574      	cmp	r4, lr
 80049b8:	4635      	mov	r5, r6
 80049ba:	d1f7      	bne.n	80049ac <__utoa+0x10>
 80049bc:	7921      	ldrb	r1, [r4, #4]
 80049be:	7131      	strb	r1, [r6, #4]
 80049c0:	1e91      	subs	r1, r2, #2
 80049c2:	6820      	ldr	r0, [r4, #0]
 80049c4:	6030      	str	r0, [r6, #0]
 80049c6:	2922      	cmp	r1, #34	; 0x22
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	d904      	bls.n	80049d8 <__utoa+0x3c>
 80049ce:	7039      	strb	r1, [r7, #0]
 80049d0:	460f      	mov	r7, r1
 80049d2:	4638      	mov	r0, r7
 80049d4:	b00b      	add	sp, #44	; 0x2c
 80049d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d8:	1e78      	subs	r0, r7, #1
 80049da:	4606      	mov	r6, r0
 80049dc:	fbb3 f5f2 	udiv	r5, r3, r2
 80049e0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80049e4:	fb02 3315 	mls	r3, r2, r5, r3
 80049e8:	4473      	add	r3, lr
 80049ea:	1c4c      	adds	r4, r1, #1
 80049ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049f0:	f806 3f01 	strb.w	r3, [r6, #1]!
 80049f4:	462b      	mov	r3, r5
 80049f6:	b965      	cbnz	r5, 8004a12 <__utoa+0x76>
 80049f8:	553d      	strb	r5, [r7, r4]
 80049fa:	187a      	adds	r2, r7, r1
 80049fc:	1acc      	subs	r4, r1, r3
 80049fe:	42a3      	cmp	r3, r4
 8004a00:	dae7      	bge.n	80049d2 <__utoa+0x36>
 8004a02:	7844      	ldrb	r4, [r0, #1]
 8004a04:	7815      	ldrb	r5, [r2, #0]
 8004a06:	f800 5f01 	strb.w	r5, [r0, #1]!
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	f802 4901 	strb.w	r4, [r2], #-1
 8004a10:	e7f4      	b.n	80049fc <__utoa+0x60>
 8004a12:	4621      	mov	r1, r4
 8004a14:	e7e2      	b.n	80049dc <__utoa+0x40>
 8004a16:	bf00      	nop
 8004a18:	08006603 	.word	0x08006603

08004a1c <pow>:
 8004a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	ed2d 8b04 	vpush	{d8-d9}
 8004a24:	b08d      	sub	sp, #52	; 0x34
 8004a26:	ec57 6b10 	vmov	r6, r7, d0
 8004a2a:	ec55 4b11 	vmov	r4, r5, d1
 8004a2e:	f000 faeb 	bl	8005008 <__ieee754_pow>
 8004a32:	4bae      	ldr	r3, [pc, #696]	; (8004cec <pow+0x2d0>)
 8004a34:	eeb0 8a40 	vmov.f32	s16, s0
 8004a38:	eef0 8a60 	vmov.f32	s17, s1
 8004a3c:	f993 9000 	ldrsb.w	r9, [r3]
 8004a40:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004a44:	4698      	mov	r8, r3
 8004a46:	d05f      	beq.n	8004b08 <pow+0xec>
 8004a48:	4622      	mov	r2, r4
 8004a4a:	462b      	mov	r3, r5
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	4629      	mov	r1, r5
 8004a50:	f7fc f814 	bl	8000a7c <__aeabi_dcmpun>
 8004a54:	4683      	mov	fp, r0
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d156      	bne.n	8004b08 <pow+0xec>
 8004a5a:	4632      	mov	r2, r6
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	4630      	mov	r0, r6
 8004a60:	4639      	mov	r1, r7
 8004a62:	f7fc f80b 	bl	8000a7c <__aeabi_dcmpun>
 8004a66:	9001      	str	r0, [sp, #4]
 8004a68:	b1e8      	cbz	r0, 8004aa6 <pow+0x8a>
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	f7fb ffd1 	bl	8000a18 <__aeabi_dcmpeq>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d046      	beq.n	8004b08 <pow+0xec>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	9302      	str	r3, [sp, #8]
 8004a7e:	4b9c      	ldr	r3, [pc, #624]	; (8004cf0 <pow+0x2d4>)
 8004a80:	9303      	str	r3, [sp, #12]
 8004a82:	4b9c      	ldr	r3, [pc, #624]	; (8004cf4 <pow+0x2d8>)
 8004a84:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f1b9 0f02 	cmp.w	r9, #2
 8004a8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a92:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004a9a:	d033      	beq.n	8004b04 <pow+0xe8>
 8004a9c:	a802      	add	r0, sp, #8
 8004a9e:	f001 fb8d 	bl	80061bc <matherr>
 8004aa2:	bb48      	cbnz	r0, 8004af8 <pow+0xdc>
 8004aa4:	e05e      	b.n	8004b64 <pow+0x148>
 8004aa6:	f04f 0a00 	mov.w	sl, #0
 8004aaa:	f04f 0b00 	mov.w	fp, #0
 8004aae:	4652      	mov	r2, sl
 8004ab0:	465b      	mov	r3, fp
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	f7fb ffaf 	bl	8000a18 <__aeabi_dcmpeq>
 8004aba:	ec4b ab19 	vmov	d9, sl, fp
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d055      	beq.n	8004b6e <pow+0x152>
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	465b      	mov	r3, fp
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	4629      	mov	r1, r5
 8004aca:	f7fb ffa5 	bl	8000a18 <__aeabi_dcmpeq>
 8004ace:	4680      	mov	r8, r0
 8004ad0:	b318      	cbz	r0, 8004b1a <pow+0xfe>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	9302      	str	r3, [sp, #8]
 8004ad6:	4b86      	ldr	r3, [pc, #536]	; (8004cf0 <pow+0x2d4>)
 8004ad8:	9303      	str	r3, [sp, #12]
 8004ada:	9b01      	ldr	r3, [sp, #4]
 8004adc:	930a      	str	r3, [sp, #40]	; 0x28
 8004ade:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ae2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004ae6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004aea:	f1b9 0f00 	cmp.w	r9, #0
 8004aee:	d0d5      	beq.n	8004a9c <pow+0x80>
 8004af0:	4b80      	ldr	r3, [pc, #512]	; (8004cf4 <pow+0x2d8>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004afa:	b11b      	cbz	r3, 8004b04 <pow+0xe8>
 8004afc:	f001 fcfc 	bl	80064f8 <__errno>
 8004b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b02:	6003      	str	r3, [r0, #0]
 8004b04:	ed9d 8b08 	vldr	d8, [sp, #32]
 8004b08:	eeb0 0a48 	vmov.f32	s0, s16
 8004b0c:	eef0 0a68 	vmov.f32	s1, s17
 8004b10:	b00d      	add	sp, #52	; 0x34
 8004b12:	ecbd 8b04 	vpop	{d8-d9}
 8004b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1a:	ec45 4b10 	vmov	d0, r4, r5
 8004b1e:	f001 fb45 	bl	80061ac <finite>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d0f0      	beq.n	8004b08 <pow+0xec>
 8004b26:	4652      	mov	r2, sl
 8004b28:	465b      	mov	r3, fp
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	f7fb ff7d 	bl	8000a2c <__aeabi_dcmplt>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d0e8      	beq.n	8004b08 <pow+0xec>
 8004b36:	2301      	movs	r3, #1
 8004b38:	9302      	str	r3, [sp, #8]
 8004b3a:	4b6d      	ldr	r3, [pc, #436]	; (8004cf0 <pow+0x2d4>)
 8004b3c:	9303      	str	r3, [sp, #12]
 8004b3e:	4b6b      	ldr	r3, [pc, #428]	; (8004cec <pow+0x2d0>)
 8004b40:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004b44:	f993 3000 	ldrsb.w	r3, [r3]
 8004b48:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004b50:	b913      	cbnz	r3, 8004b58 <pow+0x13c>
 8004b52:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004b56:	e7a1      	b.n	8004a9c <pow+0x80>
 8004b58:	4967      	ldr	r1, [pc, #412]	; (8004cf8 <pow+0x2dc>)
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d19b      	bne.n	8004a9c <pow+0x80>
 8004b64:	f001 fcc8 	bl	80064f8 <__errno>
 8004b68:	2321      	movs	r3, #33	; 0x21
 8004b6a:	6003      	str	r3, [r0, #0]
 8004b6c:	e7c4      	b.n	8004af8 <pow+0xdc>
 8004b6e:	eeb0 0a48 	vmov.f32	s0, s16
 8004b72:	eef0 0a68 	vmov.f32	s1, s17
 8004b76:	f001 fb19 	bl	80061ac <finite>
 8004b7a:	9001      	str	r0, [sp, #4]
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	f040 808a 	bne.w	8004c96 <pow+0x27a>
 8004b82:	ec47 6b10 	vmov	d0, r6, r7
 8004b86:	f001 fb11 	bl	80061ac <finite>
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	f000 8083 	beq.w	8004c96 <pow+0x27a>
 8004b90:	ec45 4b10 	vmov	d0, r4, r5
 8004b94:	f001 fb0a 	bl	80061ac <finite>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d07c      	beq.n	8004c96 <pow+0x27a>
 8004b9c:	ec53 2b18 	vmov	r2, r3, d8
 8004ba0:	ee18 0a10 	vmov	r0, s16
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f7fb ff69 	bl	8000a7c <__aeabi_dcmpun>
 8004baa:	f998 9000 	ldrsb.w	r9, [r8]
 8004bae:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <pow+0x2d4>)
 8004bb0:	b1b0      	cbz	r0, 8004be0 <pow+0x1c4>
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	9303      	str	r3, [sp, #12]
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	9202      	str	r2, [sp, #8]
 8004bba:	930a      	str	r3, [sp, #40]	; 0x28
 8004bbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004bc0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004bc4:	f1b9 0f00 	cmp.w	r9, #0
 8004bc8:	d0c3      	beq.n	8004b52 <pow+0x136>
 8004bca:	4652      	mov	r2, sl
 8004bcc:	465b      	mov	r3, fp
 8004bce:	4650      	mov	r0, sl
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	f7fb fde3 	bl	800079c <__aeabi_ddiv>
 8004bd6:	f1b9 0f02 	cmp.w	r9, #2
 8004bda:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004bde:	e7c0      	b.n	8004b62 <pow+0x146>
 8004be0:	2203      	movs	r2, #3
 8004be2:	9202      	str	r2, [sp, #8]
 8004be4:	9303      	str	r3, [sp, #12]
 8004be6:	900a      	str	r0, [sp, #40]	; 0x28
 8004be8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004bec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004bf0:	f1b9 0f00 	cmp.w	r9, #0
 8004bf4:	d12c      	bne.n	8004c50 <pow+0x234>
 8004bf6:	4b41      	ldr	r3, [pc, #260]	; (8004cfc <pow+0x2e0>)
 8004bf8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004bfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c00:	4630      	mov	r0, r6
 8004c02:	4652      	mov	r2, sl
 8004c04:	465b      	mov	r3, fp
 8004c06:	4639      	mov	r1, r7
 8004c08:	f7fb ff10 	bl	8000a2c <__aeabi_dcmplt>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d066      	beq.n	8004cde <pow+0x2c2>
 8004c10:	2200      	movs	r2, #0
 8004c12:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <pow+0x2e4>)
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7fb fc96 	bl	8000548 <__aeabi_dmul>
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	460d      	mov	r5, r1
 8004c20:	ec45 4b10 	vmov	d0, r4, r5
 8004c24:	f001 fad4 	bl	80061d0 <rint>
 8004c28:	4620      	mov	r0, r4
 8004c2a:	ec53 2b10 	vmov	r2, r3, d0
 8004c2e:	4629      	mov	r1, r5
 8004c30:	f7fb fef2 	bl	8000a18 <__aeabi_dcmpeq>
 8004c34:	b920      	cbnz	r0, 8004c40 <pow+0x224>
 8004c36:	4b33      	ldr	r3, [pc, #204]	; (8004d04 <pow+0x2e8>)
 8004c38:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004c3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c40:	f998 3000 	ldrsb.w	r3, [r8]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d14a      	bne.n	8004cde <pow+0x2c2>
 8004c48:	f001 fc56 	bl	80064f8 <__errno>
 8004c4c:	2322      	movs	r3, #34	; 0x22
 8004c4e:	e78c      	b.n	8004b6a <pow+0x14e>
 8004c50:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <pow+0x2ec>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c58:	4630      	mov	r0, r6
 8004c5a:	4652      	mov	r2, sl
 8004c5c:	465b      	mov	r3, fp
 8004c5e:	4639      	mov	r1, r7
 8004c60:	f7fb fee4 	bl	8000a2c <__aeabi_dcmplt>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d0eb      	beq.n	8004c40 <pow+0x224>
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4b25      	ldr	r3, [pc, #148]	; (8004d00 <pow+0x2e4>)
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f7fb fc6a 	bl	8000548 <__aeabi_dmul>
 8004c74:	4604      	mov	r4, r0
 8004c76:	460d      	mov	r5, r1
 8004c78:	ec45 4b10 	vmov	d0, r4, r5
 8004c7c:	f001 faa8 	bl	80061d0 <rint>
 8004c80:	4620      	mov	r0, r4
 8004c82:	ec53 2b10 	vmov	r2, r3, d0
 8004c86:	4629      	mov	r1, r5
 8004c88:	f7fb fec6 	bl	8000a18 <__aeabi_dcmpeq>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d1d7      	bne.n	8004c40 <pow+0x224>
 8004c90:	2200      	movs	r2, #0
 8004c92:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <pow+0x2dc>)
 8004c94:	e7d2      	b.n	8004c3c <pow+0x220>
 8004c96:	2200      	movs	r2, #0
 8004c98:	2300      	movs	r3, #0
 8004c9a:	ec51 0b18 	vmov	r0, r1, d8
 8004c9e:	f7fb febb 	bl	8000a18 <__aeabi_dcmpeq>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f43f af30 	beq.w	8004b08 <pow+0xec>
 8004ca8:	ec47 6b10 	vmov	d0, r6, r7
 8004cac:	f001 fa7e 	bl	80061ac <finite>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	f43f af29 	beq.w	8004b08 <pow+0xec>
 8004cb6:	ec45 4b10 	vmov	d0, r4, r5
 8004cba:	f001 fa77 	bl	80061ac <finite>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f43f af22 	beq.w	8004b08 <pow+0xec>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	9302      	str	r3, [sp, #8]
 8004cc8:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <pow+0x2d4>)
 8004cca:	9303      	str	r3, [sp, #12]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	930a      	str	r3, [sp, #40]	; 0x28
 8004cd0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004cd4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004cd8:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004cdc:	e7b0      	b.n	8004c40 <pow+0x224>
 8004cde:	a802      	add	r0, sp, #8
 8004ce0:	f001 fa6c 	bl	80061bc <matherr>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	f47f af07 	bne.w	8004af8 <pow+0xdc>
 8004cea:	e7ad      	b.n	8004c48 <pow+0x22c>
 8004cec:	20000158 	.word	0x20000158
 8004cf0:	08006628 	.word	0x08006628
 8004cf4:	3ff00000 	.word	0x3ff00000
 8004cf8:	fff00000 	.word	0xfff00000
 8004cfc:	47efffff 	.word	0x47efffff
 8004d00:	3fe00000 	.word	0x3fe00000
 8004d04:	c7efffff 	.word	0xc7efffff
 8004d08:	7ff00000 	.word	0x7ff00000

08004d0c <powf>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	ed2d 8b04 	vpush	{d8-d9}
 8004d12:	4cb5      	ldr	r4, [pc, #724]	; (8004fe8 <powf+0x2dc>)
 8004d14:	b08a      	sub	sp, #40	; 0x28
 8004d16:	eef0 8a40 	vmov.f32	s17, s0
 8004d1a:	eeb0 8a60 	vmov.f32	s16, s1
 8004d1e:	f000 ff35 	bl	8005b8c <__ieee754_powf>
 8004d22:	f994 5000 	ldrsb.w	r5, [r4]
 8004d26:	1c6b      	adds	r3, r5, #1
 8004d28:	eeb0 9a40 	vmov.f32	s18, s0
 8004d2c:	4626      	mov	r6, r4
 8004d2e:	d05d      	beq.n	8004dec <powf+0xe0>
 8004d30:	eeb4 8a48 	vcmp.f32	s16, s16
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d658      	bvs.n	8004dec <powf+0xe0>
 8004d3a:	eef4 8a68 	vcmp.f32	s17, s17
 8004d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d42:	d721      	bvc.n	8004d88 <powf+0x7c>
 8004d44:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4c:	d14e      	bne.n	8004dec <powf+0xe0>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	4ba6      	ldr	r3, [pc, #664]	; (8004fec <powf+0x2e0>)
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	ee18 0a90 	vmov	r0, s17
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9308      	str	r3, [sp, #32]
 8004d5e:	f7fb fb9f 	bl	80004a0 <__aeabi_f2d>
 8004d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d66:	ee18 0a10 	vmov	r0, s16
 8004d6a:	f7fb fb99 	bl	80004a0 <__aeabi_f2d>
 8004d6e:	4ba0      	ldr	r3, [pc, #640]	; (8004ff0 <powf+0x2e4>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	2d02      	cmp	r5, #2
 8004d74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004d7c:	d030      	beq.n	8004de0 <powf+0xd4>
 8004d7e:	4668      	mov	r0, sp
 8004d80:	f001 fa1c 	bl	80061bc <matherr>
 8004d84:	bb30      	cbnz	r0, 8004dd4 <powf+0xc8>
 8004d86:	e062      	b.n	8004e4e <powf+0x142>
 8004d88:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	d162      	bne.n	8004e58 <powf+0x14c>
 8004d92:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	d12d      	bne.n	8004df8 <powf+0xec>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	4b92      	ldr	r3, [pc, #584]	; (8004fec <powf+0x2e0>)
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	ee18 0a90 	vmov	r0, s17
 8004da8:	2300      	movs	r3, #0
 8004daa:	9308      	str	r3, [sp, #32]
 8004dac:	f7fb fb78 	bl	80004a0 <__aeabi_f2d>
 8004db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004db4:	ee18 0a10 	vmov	r0, s16
 8004db8:	f7fb fb72 	bl	80004a0 <__aeabi_f2d>
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	d0d8      	beq.n	8004d7e <powf+0x72>
 8004dcc:	4b88      	ldr	r3, [pc, #544]	; (8004ff0 <powf+0x2e4>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004dd4:	9b08      	ldr	r3, [sp, #32]
 8004dd6:	b11b      	cbz	r3, 8004de0 <powf+0xd4>
 8004dd8:	f001 fb8e 	bl	80064f8 <__errno>
 8004ddc:	9b08      	ldr	r3, [sp, #32]
 8004dde:	6003      	str	r3, [r0, #0]
 8004de0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004de4:	f7fb fe88 	bl	8000af8 <__aeabi_d2f>
 8004de8:	ee09 0a10 	vmov	s18, r0
 8004dec:	eeb0 0a49 	vmov.f32	s0, s18
 8004df0:	b00a      	add	sp, #40	; 0x28
 8004df2:	ecbd 8b04 	vpop	{d8-d9}
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	eeb0 0a48 	vmov.f32	s0, s16
 8004dfc:	f001 faf1 	bl	80063e2 <finitef>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d0f3      	beq.n	8004dec <powf+0xe0>
 8004e04:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0c:	d5ee      	bpl.n	8004dec <powf+0xe0>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	4b76      	ldr	r3, [pc, #472]	; (8004fec <powf+0x2e0>)
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	ee18 0a90 	vmov	r0, s17
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	9308      	str	r3, [sp, #32]
 8004e1e:	f7fb fb3f 	bl	80004a0 <__aeabi_f2d>
 8004e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e26:	ee18 0a10 	vmov	r0, s16
 8004e2a:	f7fb fb39 	bl	80004a0 <__aeabi_f2d>
 8004e2e:	f994 3000 	ldrsb.w	r3, [r4]
 8004e32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e36:	b923      	cbnz	r3, 8004e42 <powf+0x136>
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004e40:	e79d      	b.n	8004d7e <powf+0x72>
 8004e42:	496c      	ldr	r1, [pc, #432]	; (8004ff4 <powf+0x2e8>)
 8004e44:	2000      	movs	r0, #0
 8004e46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d197      	bne.n	8004d7e <powf+0x72>
 8004e4e:	f001 fb53 	bl	80064f8 <__errno>
 8004e52:	2321      	movs	r3, #33	; 0x21
 8004e54:	6003      	str	r3, [r0, #0]
 8004e56:	e7bd      	b.n	8004dd4 <powf+0xc8>
 8004e58:	f001 fac3 	bl	80063e2 <finitef>
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	f040 8091 	bne.w	8004f86 <powf+0x27a>
 8004e64:	eeb0 0a68 	vmov.f32	s0, s17
 8004e68:	f001 fabb 	bl	80063e2 <finitef>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	f000 808a 	beq.w	8004f86 <powf+0x27a>
 8004e72:	eeb0 0a48 	vmov.f32	s0, s16
 8004e76:	f001 fab4 	bl	80063e2 <finitef>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	f000 8083 	beq.w	8004f86 <powf+0x27a>
 8004e80:	eeb4 9a49 	vcmp.f32	s18, s18
 8004e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e88:	f994 4000 	ldrsb.w	r4, [r4]
 8004e8c:	4b57      	ldr	r3, [pc, #348]	; (8004fec <powf+0x2e0>)
 8004e8e:	d71b      	bvc.n	8004ec8 <powf+0x1bc>
 8004e90:	2201      	movs	r2, #1
 8004e92:	ee18 0a90 	vmov	r0, s17
 8004e96:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004e9a:	9508      	str	r5, [sp, #32]
 8004e9c:	f7fb fb00 	bl	80004a0 <__aeabi_f2d>
 8004ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ea4:	ee18 0a10 	vmov	r0, s16
 8004ea8:	f7fb fafa 	bl	80004a0 <__aeabi_f2d>
 8004eac:	2200      	movs	r2, #0
 8004eae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	2c00      	cmp	r4, #0
 8004eb6:	d0c1      	beq.n	8004e3c <powf+0x130>
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f7fb fc6e 	bl	800079c <__aeabi_ddiv>
 8004ec0:	2c02      	cmp	r4, #2
 8004ec2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ec6:	e7c1      	b.n	8004e4c <powf+0x140>
 8004ec8:	2203      	movs	r2, #3
 8004eca:	ee18 0a90 	vmov	r0, s17
 8004ece:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004ed2:	9508      	str	r5, [sp, #32]
 8004ed4:	f7fb fae4 	bl	80004a0 <__aeabi_f2d>
 8004ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004edc:	ee18 0a10 	vmov	r0, s16
 8004ee0:	f7fb fade 	bl	80004a0 <__aeabi_f2d>
 8004ee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ee8:	bb5c      	cbnz	r4, 8004f42 <powf+0x236>
 8004eea:	4b43      	ldr	r3, [pc, #268]	; (8004ff8 <powf+0x2ec>)
 8004eec:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8004ef0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004efc:	d56c      	bpl.n	8004fd8 <powf+0x2cc>
 8004efe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004f02:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004f06:	ee17 0a90 	vmov	r0, s15
 8004f0a:	f7fb fac9 	bl	80004a0 <__aeabi_f2d>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	460d      	mov	r5, r1
 8004f12:	ec45 4b10 	vmov	d0, r4, r5
 8004f16:	f001 f95b 	bl	80061d0 <rint>
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	ec53 2b10 	vmov	r2, r3, d0
 8004f20:	4629      	mov	r1, r5
 8004f22:	f7fb fd79 	bl	8000a18 <__aeabi_dcmpeq>
 8004f26:	b920      	cbnz	r0, 8004f32 <powf+0x226>
 8004f28:	4b34      	ldr	r3, [pc, #208]	; (8004ffc <powf+0x2f0>)
 8004f2a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004f2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f32:	f996 3000 	ldrsb.w	r3, [r6]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d14e      	bne.n	8004fd8 <powf+0x2cc>
 8004f3a:	f001 fadd 	bl	80064f8 <__errno>
 8004f3e:	2322      	movs	r3, #34	; 0x22
 8004f40:	e788      	b.n	8004e54 <powf+0x148>
 8004f42:	4b2f      	ldr	r3, [pc, #188]	; (8005000 <powf+0x2f4>)
 8004f44:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8004f48:	2200      	movs	r2, #0
 8004f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f52:	d5ee      	bpl.n	8004f32 <powf+0x226>
 8004f54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004f58:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004f5c:	ee17 0a90 	vmov	r0, s15
 8004f60:	f7fb fa9e 	bl	80004a0 <__aeabi_f2d>
 8004f64:	4604      	mov	r4, r0
 8004f66:	460d      	mov	r5, r1
 8004f68:	ec45 4b10 	vmov	d0, r4, r5
 8004f6c:	f001 f930 	bl	80061d0 <rint>
 8004f70:	4620      	mov	r0, r4
 8004f72:	ec53 2b10 	vmov	r2, r3, d0
 8004f76:	4629      	mov	r1, r5
 8004f78:	f7fb fd4e 	bl	8000a18 <__aeabi_dcmpeq>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d1d8      	bne.n	8004f32 <powf+0x226>
 8004f80:	2200      	movs	r2, #0
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <powf+0x2e8>)
 8004f84:	e7d3      	b.n	8004f2e <powf+0x222>
 8004f86:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8e:	f47f af2d 	bne.w	8004dec <powf+0xe0>
 8004f92:	eeb0 0a68 	vmov.f32	s0, s17
 8004f96:	f001 fa24 	bl	80063e2 <finitef>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	f43f af26 	beq.w	8004dec <powf+0xe0>
 8004fa0:	eeb0 0a48 	vmov.f32	s0, s16
 8004fa4:	f001 fa1d 	bl	80063e2 <finitef>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f43f af1f 	beq.w	8004dec <powf+0xe0>
 8004fae:	2304      	movs	r3, #4
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <powf+0x2e0>)
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	ee18 0a90 	vmov	r0, s17
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9308      	str	r3, [sp, #32]
 8004fbe:	f7fb fa6f 	bl	80004a0 <__aeabi_f2d>
 8004fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fc6:	ee18 0a10 	vmov	r0, s16
 8004fca:	f7fb fa69 	bl	80004a0 <__aeabi_f2d>
 8004fce:	2200      	movs	r2, #0
 8004fd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e7aa      	b.n	8004f2e <powf+0x222>
 8004fd8:	4668      	mov	r0, sp
 8004fda:	f001 f8ef 	bl	80061bc <matherr>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	f47f aef8 	bne.w	8004dd4 <powf+0xc8>
 8004fe4:	e7a9      	b.n	8004f3a <powf+0x22e>
 8004fe6:	bf00      	nop
 8004fe8:	20000158 	.word	0x20000158
 8004fec:	0800662c 	.word	0x0800662c
 8004ff0:	3ff00000 	.word	0x3ff00000
 8004ff4:	fff00000 	.word	0xfff00000
 8004ff8:	47efffff 	.word	0x47efffff
 8004ffc:	c7efffff 	.word	0xc7efffff
 8005000:	7ff00000 	.word	0x7ff00000
 8005004:	00000000 	.word	0x00000000

08005008 <__ieee754_pow>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	b091      	sub	sp, #68	; 0x44
 800500e:	ed8d 1b00 	vstr	d1, [sp]
 8005012:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8005016:	ec57 6b10 	vmov	r6, r7, d0
 800501a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800501e:	ea58 0302 	orrs.w	r3, r8, r2
 8005022:	ee10 aa10 	vmov	sl, s0
 8005026:	463d      	mov	r5, r7
 8005028:	f000 84bd 	beq.w	80059a6 <__ieee754_pow+0x99e>
 800502c:	4b78      	ldr	r3, [pc, #480]	; (8005210 <__ieee754_pow+0x208>)
 800502e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005032:	429c      	cmp	r4, r3
 8005034:	dc09      	bgt.n	800504a <__ieee754_pow+0x42>
 8005036:	d103      	bne.n	8005040 <__ieee754_pow+0x38>
 8005038:	b93e      	cbnz	r6, 800504a <__ieee754_pow+0x42>
 800503a:	45a0      	cmp	r8, r4
 800503c:	dc0d      	bgt.n	800505a <__ieee754_pow+0x52>
 800503e:	e001      	b.n	8005044 <__ieee754_pow+0x3c>
 8005040:	4598      	cmp	r8, r3
 8005042:	dc02      	bgt.n	800504a <__ieee754_pow+0x42>
 8005044:	4598      	cmp	r8, r3
 8005046:	d10e      	bne.n	8005066 <__ieee754_pow+0x5e>
 8005048:	b16a      	cbz	r2, 8005066 <__ieee754_pow+0x5e>
 800504a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800504e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005052:	ea54 030a 	orrs.w	r3, r4, sl
 8005056:	f000 84a6 	beq.w	80059a6 <__ieee754_pow+0x99e>
 800505a:	486e      	ldr	r0, [pc, #440]	; (8005214 <__ieee754_pow+0x20c>)
 800505c:	b011      	add	sp, #68	; 0x44
 800505e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005062:	f001 b8ad 	b.w	80061c0 <nan>
 8005066:	2d00      	cmp	r5, #0
 8005068:	da53      	bge.n	8005112 <__ieee754_pow+0x10a>
 800506a:	4b6b      	ldr	r3, [pc, #428]	; (8005218 <__ieee754_pow+0x210>)
 800506c:	4598      	cmp	r8, r3
 800506e:	dc4d      	bgt.n	800510c <__ieee754_pow+0x104>
 8005070:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005074:	4598      	cmp	r8, r3
 8005076:	dd4c      	ble.n	8005112 <__ieee754_pow+0x10a>
 8005078:	ea4f 5328 	mov.w	r3, r8, asr #20
 800507c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005080:	2b14      	cmp	r3, #20
 8005082:	dd26      	ble.n	80050d2 <__ieee754_pow+0xca>
 8005084:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005088:	fa22 f103 	lsr.w	r1, r2, r3
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	429a      	cmp	r2, r3
 8005092:	d13e      	bne.n	8005112 <__ieee754_pow+0x10a>
 8005094:	f001 0101 	and.w	r1, r1, #1
 8005098:	f1c1 0b02 	rsb	fp, r1, #2
 800509c:	2a00      	cmp	r2, #0
 800509e:	d15b      	bne.n	8005158 <__ieee754_pow+0x150>
 80050a0:	4b5b      	ldr	r3, [pc, #364]	; (8005210 <__ieee754_pow+0x208>)
 80050a2:	4598      	cmp	r8, r3
 80050a4:	d124      	bne.n	80050f0 <__ieee754_pow+0xe8>
 80050a6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80050aa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80050ae:	ea53 030a 	orrs.w	r3, r3, sl
 80050b2:	f000 8478 	beq.w	80059a6 <__ieee754_pow+0x99e>
 80050b6:	4b59      	ldr	r3, [pc, #356]	; (800521c <__ieee754_pow+0x214>)
 80050b8:	429c      	cmp	r4, r3
 80050ba:	dd2d      	ble.n	8005118 <__ieee754_pow+0x110>
 80050bc:	f1b9 0f00 	cmp.w	r9, #0
 80050c0:	f280 8475 	bge.w	80059ae <__ieee754_pow+0x9a6>
 80050c4:	2000      	movs	r0, #0
 80050c6:	2100      	movs	r1, #0
 80050c8:	ec41 0b10 	vmov	d0, r0, r1
 80050cc:	b011      	add	sp, #68	; 0x44
 80050ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d2:	2a00      	cmp	r2, #0
 80050d4:	d13e      	bne.n	8005154 <__ieee754_pow+0x14c>
 80050d6:	f1c3 0314 	rsb	r3, r3, #20
 80050da:	fa48 f103 	asr.w	r1, r8, r3
 80050de:	fa01 f303 	lsl.w	r3, r1, r3
 80050e2:	4598      	cmp	r8, r3
 80050e4:	f040 846b 	bne.w	80059be <__ieee754_pow+0x9b6>
 80050e8:	f001 0101 	and.w	r1, r1, #1
 80050ec:	f1c1 0b02 	rsb	fp, r1, #2
 80050f0:	4b4b      	ldr	r3, [pc, #300]	; (8005220 <__ieee754_pow+0x218>)
 80050f2:	4598      	cmp	r8, r3
 80050f4:	d118      	bne.n	8005128 <__ieee754_pow+0x120>
 80050f6:	f1b9 0f00 	cmp.w	r9, #0
 80050fa:	f280 845c 	bge.w	80059b6 <__ieee754_pow+0x9ae>
 80050fe:	4948      	ldr	r1, [pc, #288]	; (8005220 <__ieee754_pow+0x218>)
 8005100:	4632      	mov	r2, r6
 8005102:	463b      	mov	r3, r7
 8005104:	2000      	movs	r0, #0
 8005106:	f7fb fb49 	bl	800079c <__aeabi_ddiv>
 800510a:	e7dd      	b.n	80050c8 <__ieee754_pow+0xc0>
 800510c:	f04f 0b02 	mov.w	fp, #2
 8005110:	e7c4      	b.n	800509c <__ieee754_pow+0x94>
 8005112:	f04f 0b00 	mov.w	fp, #0
 8005116:	e7c1      	b.n	800509c <__ieee754_pow+0x94>
 8005118:	f1b9 0f00 	cmp.w	r9, #0
 800511c:	dad2      	bge.n	80050c4 <__ieee754_pow+0xbc>
 800511e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8005122:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005126:	e7cf      	b.n	80050c8 <__ieee754_pow+0xc0>
 8005128:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800512c:	d106      	bne.n	800513c <__ieee754_pow+0x134>
 800512e:	4632      	mov	r2, r6
 8005130:	463b      	mov	r3, r7
 8005132:	4610      	mov	r0, r2
 8005134:	4619      	mov	r1, r3
 8005136:	f7fb fa07 	bl	8000548 <__aeabi_dmul>
 800513a:	e7c5      	b.n	80050c8 <__ieee754_pow+0xc0>
 800513c:	4b39      	ldr	r3, [pc, #228]	; (8005224 <__ieee754_pow+0x21c>)
 800513e:	4599      	cmp	r9, r3
 8005140:	d10a      	bne.n	8005158 <__ieee754_pow+0x150>
 8005142:	2d00      	cmp	r5, #0
 8005144:	db08      	blt.n	8005158 <__ieee754_pow+0x150>
 8005146:	ec47 6b10 	vmov	d0, r6, r7
 800514a:	b011      	add	sp, #68	; 0x44
 800514c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005150:	f000 bc6c 	b.w	8005a2c <__ieee754_sqrt>
 8005154:	f04f 0b00 	mov.w	fp, #0
 8005158:	ec47 6b10 	vmov	d0, r6, r7
 800515c:	f001 f81f 	bl	800619e <fabs>
 8005160:	ec51 0b10 	vmov	r0, r1, d0
 8005164:	f1ba 0f00 	cmp.w	sl, #0
 8005168:	d127      	bne.n	80051ba <__ieee754_pow+0x1b2>
 800516a:	b124      	cbz	r4, 8005176 <__ieee754_pow+0x16e>
 800516c:	4b2c      	ldr	r3, [pc, #176]	; (8005220 <__ieee754_pow+0x218>)
 800516e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005172:	429a      	cmp	r2, r3
 8005174:	d121      	bne.n	80051ba <__ieee754_pow+0x1b2>
 8005176:	f1b9 0f00 	cmp.w	r9, #0
 800517a:	da05      	bge.n	8005188 <__ieee754_pow+0x180>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	2000      	movs	r0, #0
 8005182:	4927      	ldr	r1, [pc, #156]	; (8005220 <__ieee754_pow+0x218>)
 8005184:	f7fb fb0a 	bl	800079c <__aeabi_ddiv>
 8005188:	2d00      	cmp	r5, #0
 800518a:	da9d      	bge.n	80050c8 <__ieee754_pow+0xc0>
 800518c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005190:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005194:	ea54 030b 	orrs.w	r3, r4, fp
 8005198:	d108      	bne.n	80051ac <__ieee754_pow+0x1a4>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4610      	mov	r0, r2
 80051a0:	4619      	mov	r1, r3
 80051a2:	f7fb f81d 	bl	80001e0 <__aeabi_dsub>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	e7ac      	b.n	8005106 <__ieee754_pow+0xfe>
 80051ac:	f1bb 0f01 	cmp.w	fp, #1
 80051b0:	d18a      	bne.n	80050c8 <__ieee754_pow+0xc0>
 80051b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051b6:	4619      	mov	r1, r3
 80051b8:	e786      	b.n	80050c8 <__ieee754_pow+0xc0>
 80051ba:	0fed      	lsrs	r5, r5, #31
 80051bc:	1e6b      	subs	r3, r5, #1
 80051be:	930d      	str	r3, [sp, #52]	; 0x34
 80051c0:	ea5b 0303 	orrs.w	r3, fp, r3
 80051c4:	d102      	bne.n	80051cc <__ieee754_pow+0x1c4>
 80051c6:	4632      	mov	r2, r6
 80051c8:	463b      	mov	r3, r7
 80051ca:	e7e8      	b.n	800519e <__ieee754_pow+0x196>
 80051cc:	4b16      	ldr	r3, [pc, #88]	; (8005228 <__ieee754_pow+0x220>)
 80051ce:	4598      	cmp	r8, r3
 80051d0:	f340 80fe 	ble.w	80053d0 <__ieee754_pow+0x3c8>
 80051d4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80051d8:	4598      	cmp	r8, r3
 80051da:	dd0a      	ble.n	80051f2 <__ieee754_pow+0x1ea>
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <__ieee754_pow+0x214>)
 80051de:	429c      	cmp	r4, r3
 80051e0:	dc0d      	bgt.n	80051fe <__ieee754_pow+0x1f6>
 80051e2:	f1b9 0f00 	cmp.w	r9, #0
 80051e6:	f6bf af6d 	bge.w	80050c4 <__ieee754_pow+0xbc>
 80051ea:	a307      	add	r3, pc, #28	; (adr r3, 8005208 <__ieee754_pow+0x200>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	e79f      	b.n	8005132 <__ieee754_pow+0x12a>
 80051f2:	4b0e      	ldr	r3, [pc, #56]	; (800522c <__ieee754_pow+0x224>)
 80051f4:	429c      	cmp	r4, r3
 80051f6:	ddf4      	ble.n	80051e2 <__ieee754_pow+0x1da>
 80051f8:	4b09      	ldr	r3, [pc, #36]	; (8005220 <__ieee754_pow+0x218>)
 80051fa:	429c      	cmp	r4, r3
 80051fc:	dd18      	ble.n	8005230 <__ieee754_pow+0x228>
 80051fe:	f1b9 0f00 	cmp.w	r9, #0
 8005202:	dcf2      	bgt.n	80051ea <__ieee754_pow+0x1e2>
 8005204:	e75e      	b.n	80050c4 <__ieee754_pow+0xbc>
 8005206:	bf00      	nop
 8005208:	8800759c 	.word	0x8800759c
 800520c:	7e37e43c 	.word	0x7e37e43c
 8005210:	7ff00000 	.word	0x7ff00000
 8005214:	0800658a 	.word	0x0800658a
 8005218:	433fffff 	.word	0x433fffff
 800521c:	3fefffff 	.word	0x3fefffff
 8005220:	3ff00000 	.word	0x3ff00000
 8005224:	3fe00000 	.word	0x3fe00000
 8005228:	41e00000 	.word	0x41e00000
 800522c:	3feffffe 	.word	0x3feffffe
 8005230:	2200      	movs	r2, #0
 8005232:	4b63      	ldr	r3, [pc, #396]	; (80053c0 <__ieee754_pow+0x3b8>)
 8005234:	f7fa ffd4 	bl	80001e0 <__aeabi_dsub>
 8005238:	a355      	add	r3, pc, #340	; (adr r3, 8005390 <__ieee754_pow+0x388>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	4604      	mov	r4, r0
 8005240:	460d      	mov	r5, r1
 8005242:	f7fb f981 	bl	8000548 <__aeabi_dmul>
 8005246:	a354      	add	r3, pc, #336	; (adr r3, 8005398 <__ieee754_pow+0x390>)
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	4606      	mov	r6, r0
 800524e:	460f      	mov	r7, r1
 8005250:	4620      	mov	r0, r4
 8005252:	4629      	mov	r1, r5
 8005254:	f7fb f978 	bl	8000548 <__aeabi_dmul>
 8005258:	2200      	movs	r2, #0
 800525a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800525e:	4b59      	ldr	r3, [pc, #356]	; (80053c4 <__ieee754_pow+0x3bc>)
 8005260:	4620      	mov	r0, r4
 8005262:	4629      	mov	r1, r5
 8005264:	f7fb f970 	bl	8000548 <__aeabi_dmul>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	a14c      	add	r1, pc, #304	; (adr r1, 80053a0 <__ieee754_pow+0x398>)
 800526e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005272:	f7fa ffb5 	bl	80001e0 <__aeabi_dsub>
 8005276:	4622      	mov	r2, r4
 8005278:	462b      	mov	r3, r5
 800527a:	f7fb f965 	bl	8000548 <__aeabi_dmul>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	2000      	movs	r0, #0
 8005284:	4950      	ldr	r1, [pc, #320]	; (80053c8 <__ieee754_pow+0x3c0>)
 8005286:	f7fa ffab 	bl	80001e0 <__aeabi_dsub>
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	4680      	mov	r8, r0
 8005290:	4689      	mov	r9, r1
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	f7fb f957 	bl	8000548 <__aeabi_dmul>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4640      	mov	r0, r8
 80052a0:	4649      	mov	r1, r9
 80052a2:	f7fb f951 	bl	8000548 <__aeabi_dmul>
 80052a6:	a340      	add	r3, pc, #256	; (adr r3, 80053a8 <__ieee754_pow+0x3a0>)
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	f7fb f94c 	bl	8000548 <__aeabi_dmul>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052b8:	f7fa ff92 	bl	80001e0 <__aeabi_dsub>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4604      	mov	r4, r0
 80052c2:	460d      	mov	r5, r1
 80052c4:	4630      	mov	r0, r6
 80052c6:	4639      	mov	r1, r7
 80052c8:	f7fa ff8c 	bl	80001e4 <__adddf3>
 80052cc:	2000      	movs	r0, #0
 80052ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052d2:	4632      	mov	r2, r6
 80052d4:	463b      	mov	r3, r7
 80052d6:	f7fa ff83 	bl	80001e0 <__aeabi_dsub>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4620      	mov	r0, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7fa ff7d 	bl	80001e0 <__aeabi_dsub>
 80052e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052e8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80052ec:	4313      	orrs	r3, r2
 80052ee:	4606      	mov	r6, r0
 80052f0:	460f      	mov	r7, r1
 80052f2:	f040 81eb 	bne.w	80056cc <__ieee754_pow+0x6c4>
 80052f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80053b0 <__ieee754_pow+0x3a8>
 80052fa:	e9dd 4500 	ldrd	r4, r5, [sp]
 80052fe:	2400      	movs	r4, #0
 8005300:	4622      	mov	r2, r4
 8005302:	462b      	mov	r3, r5
 8005304:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005308:	ed8d 7b02 	vstr	d7, [sp, #8]
 800530c:	f7fa ff68 	bl	80001e0 <__aeabi_dsub>
 8005310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005314:	f7fb f918 	bl	8000548 <__aeabi_dmul>
 8005318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800531c:	4680      	mov	r8, r0
 800531e:	4689      	mov	r9, r1
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb f910 	bl	8000548 <__aeabi_dmul>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4640      	mov	r0, r8
 800532e:	4649      	mov	r1, r9
 8005330:	f7fa ff58 	bl	80001e4 <__adddf3>
 8005334:	4622      	mov	r2, r4
 8005336:	462b      	mov	r3, r5
 8005338:	4680      	mov	r8, r0
 800533a:	4689      	mov	r9, r1
 800533c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005340:	f7fb f902 	bl	8000548 <__aeabi_dmul>
 8005344:	460b      	mov	r3, r1
 8005346:	4604      	mov	r4, r0
 8005348:	460d      	mov	r5, r1
 800534a:	4602      	mov	r2, r0
 800534c:	4649      	mov	r1, r9
 800534e:	4640      	mov	r0, r8
 8005350:	e9cd 4500 	strd	r4, r5, [sp]
 8005354:	f7fa ff46 	bl	80001e4 <__adddf3>
 8005358:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <__ieee754_pow+0x3c4>)
 800535a:	4299      	cmp	r1, r3
 800535c:	4606      	mov	r6, r0
 800535e:	460f      	mov	r7, r1
 8005360:	468b      	mov	fp, r1
 8005362:	f340 82f7 	ble.w	8005954 <__ieee754_pow+0x94c>
 8005366:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800536a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800536e:	4303      	orrs	r3, r0
 8005370:	f000 81ea 	beq.w	8005748 <__ieee754_pow+0x740>
 8005374:	a310      	add	r3, pc, #64	; (adr r3, 80053b8 <__ieee754_pow+0x3b0>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800537e:	f7fb f8e3 	bl	8000548 <__aeabi_dmul>
 8005382:	a30d      	add	r3, pc, #52	; (adr r3, 80053b8 <__ieee754_pow+0x3b0>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	e6d5      	b.n	8005136 <__ieee754_pow+0x12e>
 800538a:	bf00      	nop
 800538c:	f3af 8000 	nop.w
 8005390:	60000000 	.word	0x60000000
 8005394:	3ff71547 	.word	0x3ff71547
 8005398:	f85ddf44 	.word	0xf85ddf44
 800539c:	3e54ae0b 	.word	0x3e54ae0b
 80053a0:	55555555 	.word	0x55555555
 80053a4:	3fd55555 	.word	0x3fd55555
 80053a8:	652b82fe 	.word	0x652b82fe
 80053ac:	3ff71547 	.word	0x3ff71547
 80053b0:	00000000 	.word	0x00000000
 80053b4:	bff00000 	.word	0xbff00000
 80053b8:	8800759c 	.word	0x8800759c
 80053bc:	7e37e43c 	.word	0x7e37e43c
 80053c0:	3ff00000 	.word	0x3ff00000
 80053c4:	3fd00000 	.word	0x3fd00000
 80053c8:	3fe00000 	.word	0x3fe00000
 80053cc:	408fffff 	.word	0x408fffff
 80053d0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	da05      	bge.n	80053e6 <__ieee754_pow+0x3de>
 80053da:	4bd3      	ldr	r3, [pc, #844]	; (8005728 <__ieee754_pow+0x720>)
 80053dc:	f7fb f8b4 	bl	8000548 <__aeabi_dmul>
 80053e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80053e4:	460c      	mov	r4, r1
 80053e6:	1523      	asrs	r3, r4, #20
 80053e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80053ec:	4413      	add	r3, r2
 80053ee:	9307      	str	r3, [sp, #28]
 80053f0:	4bce      	ldr	r3, [pc, #824]	; (800572c <__ieee754_pow+0x724>)
 80053f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80053f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80053fa:	429c      	cmp	r4, r3
 80053fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005400:	dd08      	ble.n	8005414 <__ieee754_pow+0x40c>
 8005402:	4bcb      	ldr	r3, [pc, #812]	; (8005730 <__ieee754_pow+0x728>)
 8005404:	429c      	cmp	r4, r3
 8005406:	f340 815e 	ble.w	80056c6 <__ieee754_pow+0x6be>
 800540a:	9b07      	ldr	r3, [sp, #28]
 800540c:	3301      	adds	r3, #1
 800540e:	9307      	str	r3, [sp, #28]
 8005410:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005414:	f04f 0a00 	mov.w	sl, #0
 8005418:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800541c:	930c      	str	r3, [sp, #48]	; 0x30
 800541e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005420:	4bc4      	ldr	r3, [pc, #784]	; (8005734 <__ieee754_pow+0x72c>)
 8005422:	4413      	add	r3, r2
 8005424:	ed93 7b00 	vldr	d7, [r3]
 8005428:	4629      	mov	r1, r5
 800542a:	ec53 2b17 	vmov	r2, r3, d7
 800542e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005432:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005436:	f7fa fed3 	bl	80001e0 <__aeabi_dsub>
 800543a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800543e:	4606      	mov	r6, r0
 8005440:	460f      	mov	r7, r1
 8005442:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005446:	f7fa fecd 	bl	80001e4 <__adddf3>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	2000      	movs	r0, #0
 8005450:	49b9      	ldr	r1, [pc, #740]	; (8005738 <__ieee754_pow+0x730>)
 8005452:	f7fb f9a3 	bl	800079c <__aeabi_ddiv>
 8005456:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4630      	mov	r0, r6
 8005460:	4639      	mov	r1, r7
 8005462:	f7fb f871 	bl	8000548 <__aeabi_dmul>
 8005466:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800546a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800546e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005472:	2300      	movs	r3, #0
 8005474:	9302      	str	r3, [sp, #8]
 8005476:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800547a:	106d      	asrs	r5, r5, #1
 800547c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005480:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005484:	2200      	movs	r2, #0
 8005486:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800548a:	4640      	mov	r0, r8
 800548c:	4649      	mov	r1, r9
 800548e:	4614      	mov	r4, r2
 8005490:	461d      	mov	r5, r3
 8005492:	f7fb f859 	bl	8000548 <__aeabi_dmul>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4630      	mov	r0, r6
 800549c:	4639      	mov	r1, r7
 800549e:	f7fa fe9f 	bl	80001e0 <__aeabi_dsub>
 80054a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054a6:	4606      	mov	r6, r0
 80054a8:	460f      	mov	r7, r1
 80054aa:	4620      	mov	r0, r4
 80054ac:	4629      	mov	r1, r5
 80054ae:	f7fa fe97 	bl	80001e0 <__aeabi_dsub>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054ba:	f7fa fe91 	bl	80001e0 <__aeabi_dsub>
 80054be:	4642      	mov	r2, r8
 80054c0:	464b      	mov	r3, r9
 80054c2:	f7fb f841 	bl	8000548 <__aeabi_dmul>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4630      	mov	r0, r6
 80054cc:	4639      	mov	r1, r7
 80054ce:	f7fa fe87 	bl	80001e0 <__aeabi_dsub>
 80054d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80054d6:	f7fb f837 	bl	8000548 <__aeabi_dmul>
 80054da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054e2:	4610      	mov	r0, r2
 80054e4:	4619      	mov	r1, r3
 80054e6:	f7fb f82f 	bl	8000548 <__aeabi_dmul>
 80054ea:	a37b      	add	r3, pc, #492	; (adr r3, 80056d8 <__ieee754_pow+0x6d0>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	4604      	mov	r4, r0
 80054f2:	460d      	mov	r5, r1
 80054f4:	f7fb f828 	bl	8000548 <__aeabi_dmul>
 80054f8:	a379      	add	r3, pc, #484	; (adr r3, 80056e0 <__ieee754_pow+0x6d8>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fa fe71 	bl	80001e4 <__adddf3>
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	f7fb f81f 	bl	8000548 <__aeabi_dmul>
 800550a:	a377      	add	r3, pc, #476	; (adr r3, 80056e8 <__ieee754_pow+0x6e0>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fa fe68 	bl	80001e4 <__adddf3>
 8005514:	4622      	mov	r2, r4
 8005516:	462b      	mov	r3, r5
 8005518:	f7fb f816 	bl	8000548 <__aeabi_dmul>
 800551c:	a374      	add	r3, pc, #464	; (adr r3, 80056f0 <__ieee754_pow+0x6e8>)
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	f7fa fe5f 	bl	80001e4 <__adddf3>
 8005526:	4622      	mov	r2, r4
 8005528:	462b      	mov	r3, r5
 800552a:	f7fb f80d 	bl	8000548 <__aeabi_dmul>
 800552e:	a372      	add	r3, pc, #456	; (adr r3, 80056f8 <__ieee754_pow+0x6f0>)
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f7fa fe56 	bl	80001e4 <__adddf3>
 8005538:	4622      	mov	r2, r4
 800553a:	462b      	mov	r3, r5
 800553c:	f7fb f804 	bl	8000548 <__aeabi_dmul>
 8005540:	a36f      	add	r3, pc, #444	; (adr r3, 8005700 <__ieee754_pow+0x6f8>)
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	f7fa fe4d 	bl	80001e4 <__adddf3>
 800554a:	4622      	mov	r2, r4
 800554c:	4606      	mov	r6, r0
 800554e:	460f      	mov	r7, r1
 8005550:	462b      	mov	r3, r5
 8005552:	4620      	mov	r0, r4
 8005554:	4629      	mov	r1, r5
 8005556:	f7fa fff7 	bl	8000548 <__aeabi_dmul>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4630      	mov	r0, r6
 8005560:	4639      	mov	r1, r7
 8005562:	f7fa fff1 	bl	8000548 <__aeabi_dmul>
 8005566:	4642      	mov	r2, r8
 8005568:	4604      	mov	r4, r0
 800556a:	460d      	mov	r5, r1
 800556c:	464b      	mov	r3, r9
 800556e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005572:	f7fa fe37 	bl	80001e4 <__adddf3>
 8005576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800557a:	f7fa ffe5 	bl	8000548 <__aeabi_dmul>
 800557e:	4622      	mov	r2, r4
 8005580:	462b      	mov	r3, r5
 8005582:	f7fa fe2f 	bl	80001e4 <__adddf3>
 8005586:	4642      	mov	r2, r8
 8005588:	4606      	mov	r6, r0
 800558a:	460f      	mov	r7, r1
 800558c:	464b      	mov	r3, r9
 800558e:	4640      	mov	r0, r8
 8005590:	4649      	mov	r1, r9
 8005592:	f7fa ffd9 	bl	8000548 <__aeabi_dmul>
 8005596:	2200      	movs	r2, #0
 8005598:	4b68      	ldr	r3, [pc, #416]	; (800573c <__ieee754_pow+0x734>)
 800559a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800559e:	f7fa fe21 	bl	80001e4 <__adddf3>
 80055a2:	4632      	mov	r2, r6
 80055a4:	463b      	mov	r3, r7
 80055a6:	f7fa fe1d 	bl	80001e4 <__adddf3>
 80055aa:	9802      	ldr	r0, [sp, #8]
 80055ac:	460d      	mov	r5, r1
 80055ae:	4604      	mov	r4, r0
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4640      	mov	r0, r8
 80055b6:	4649      	mov	r1, r9
 80055b8:	f7fa ffc6 	bl	8000548 <__aeabi_dmul>
 80055bc:	2200      	movs	r2, #0
 80055be:	4680      	mov	r8, r0
 80055c0:	4689      	mov	r9, r1
 80055c2:	4b5e      	ldr	r3, [pc, #376]	; (800573c <__ieee754_pow+0x734>)
 80055c4:	4620      	mov	r0, r4
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7fa fe0a 	bl	80001e0 <__aeabi_dsub>
 80055cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055d0:	f7fa fe06 	bl	80001e0 <__aeabi_dsub>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4630      	mov	r0, r6
 80055da:	4639      	mov	r1, r7
 80055dc:	f7fa fe00 	bl	80001e0 <__aeabi_dsub>
 80055e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055e4:	f7fa ffb0 	bl	8000548 <__aeabi_dmul>
 80055e8:	4622      	mov	r2, r4
 80055ea:	4606      	mov	r6, r0
 80055ec:	460f      	mov	r7, r1
 80055ee:	462b      	mov	r3, r5
 80055f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055f4:	f7fa ffa8 	bl	8000548 <__aeabi_dmul>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4630      	mov	r0, r6
 80055fe:	4639      	mov	r1, r7
 8005600:	f7fa fdf0 	bl	80001e4 <__adddf3>
 8005604:	4606      	mov	r6, r0
 8005606:	460f      	mov	r7, r1
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4640      	mov	r0, r8
 800560e:	4649      	mov	r1, r9
 8005610:	f7fa fde8 	bl	80001e4 <__adddf3>
 8005614:	9802      	ldr	r0, [sp, #8]
 8005616:	a33c      	add	r3, pc, #240	; (adr r3, 8005708 <__ieee754_pow+0x700>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	4604      	mov	r4, r0
 800561e:	460d      	mov	r5, r1
 8005620:	f7fa ff92 	bl	8000548 <__aeabi_dmul>
 8005624:	4642      	mov	r2, r8
 8005626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800562a:	464b      	mov	r3, r9
 800562c:	4620      	mov	r0, r4
 800562e:	4629      	mov	r1, r5
 8005630:	f7fa fdd6 	bl	80001e0 <__aeabi_dsub>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4630      	mov	r0, r6
 800563a:	4639      	mov	r1, r7
 800563c:	f7fa fdd0 	bl	80001e0 <__aeabi_dsub>
 8005640:	a333      	add	r3, pc, #204	; (adr r3, 8005710 <__ieee754_pow+0x708>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f7fa ff7f 	bl	8000548 <__aeabi_dmul>
 800564a:	a333      	add	r3, pc, #204	; (adr r3, 8005718 <__ieee754_pow+0x710>)
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	4606      	mov	r6, r0
 8005652:	460f      	mov	r7, r1
 8005654:	4620      	mov	r0, r4
 8005656:	4629      	mov	r1, r5
 8005658:	f7fa ff76 	bl	8000548 <__aeabi_dmul>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	f7fa fdbe 	bl	80001e4 <__adddf3>
 8005668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800566a:	4b35      	ldr	r3, [pc, #212]	; (8005740 <__ieee754_pow+0x738>)
 800566c:	4413      	add	r3, r2
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	f7fa fdb7 	bl	80001e4 <__adddf3>
 8005676:	4604      	mov	r4, r0
 8005678:	9807      	ldr	r0, [sp, #28]
 800567a:	460d      	mov	r5, r1
 800567c:	f7fa fefe 	bl	800047c <__aeabi_i2d>
 8005680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005682:	4b30      	ldr	r3, [pc, #192]	; (8005744 <__ieee754_pow+0x73c>)
 8005684:	4413      	add	r3, r2
 8005686:	e9d3 8900 	ldrd	r8, r9, [r3]
 800568a:	4606      	mov	r6, r0
 800568c:	460f      	mov	r7, r1
 800568e:	4622      	mov	r2, r4
 8005690:	462b      	mov	r3, r5
 8005692:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005696:	f7fa fda5 	bl	80001e4 <__adddf3>
 800569a:	4642      	mov	r2, r8
 800569c:	464b      	mov	r3, r9
 800569e:	f7fa fda1 	bl	80001e4 <__adddf3>
 80056a2:	4632      	mov	r2, r6
 80056a4:	463b      	mov	r3, r7
 80056a6:	f7fa fd9d 	bl	80001e4 <__adddf3>
 80056aa:	9802      	ldr	r0, [sp, #8]
 80056ac:	4632      	mov	r2, r6
 80056ae:	463b      	mov	r3, r7
 80056b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056b4:	f7fa fd94 	bl	80001e0 <__aeabi_dsub>
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	f7fa fd90 	bl	80001e0 <__aeabi_dsub>
 80056c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056c4:	e607      	b.n	80052d6 <__ieee754_pow+0x2ce>
 80056c6:	f04f 0a01 	mov.w	sl, #1
 80056ca:	e6a5      	b.n	8005418 <__ieee754_pow+0x410>
 80056cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005720 <__ieee754_pow+0x718>
 80056d0:	e613      	b.n	80052fa <__ieee754_pow+0x2f2>
 80056d2:	bf00      	nop
 80056d4:	f3af 8000 	nop.w
 80056d8:	4a454eef 	.word	0x4a454eef
 80056dc:	3fca7e28 	.word	0x3fca7e28
 80056e0:	93c9db65 	.word	0x93c9db65
 80056e4:	3fcd864a 	.word	0x3fcd864a
 80056e8:	a91d4101 	.word	0xa91d4101
 80056ec:	3fd17460 	.word	0x3fd17460
 80056f0:	518f264d 	.word	0x518f264d
 80056f4:	3fd55555 	.word	0x3fd55555
 80056f8:	db6fabff 	.word	0xdb6fabff
 80056fc:	3fdb6db6 	.word	0x3fdb6db6
 8005700:	33333303 	.word	0x33333303
 8005704:	3fe33333 	.word	0x3fe33333
 8005708:	e0000000 	.word	0xe0000000
 800570c:	3feec709 	.word	0x3feec709
 8005710:	dc3a03fd 	.word	0xdc3a03fd
 8005714:	3feec709 	.word	0x3feec709
 8005718:	145b01f5 	.word	0x145b01f5
 800571c:	be3e2fe0 	.word	0xbe3e2fe0
 8005720:	00000000 	.word	0x00000000
 8005724:	3ff00000 	.word	0x3ff00000
 8005728:	43400000 	.word	0x43400000
 800572c:	0003988e 	.word	0x0003988e
 8005730:	000bb679 	.word	0x000bb679
 8005734:	08006638 	.word	0x08006638
 8005738:	3ff00000 	.word	0x3ff00000
 800573c:	40080000 	.word	0x40080000
 8005740:	08006658 	.word	0x08006658
 8005744:	08006648 	.word	0x08006648
 8005748:	a3b6      	add	r3, pc, #728	; (adr r3, 8005a24 <__ieee754_pow+0xa1c>)
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	4640      	mov	r0, r8
 8005750:	4649      	mov	r1, r9
 8005752:	f7fa fd47 	bl	80001e4 <__adddf3>
 8005756:	4622      	mov	r2, r4
 8005758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800575c:	462b      	mov	r3, r5
 800575e:	4630      	mov	r0, r6
 8005760:	4639      	mov	r1, r7
 8005762:	f7fa fd3d 	bl	80001e0 <__aeabi_dsub>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800576e:	f7fb f97b 	bl	8000a68 <__aeabi_dcmpgt>
 8005772:	2800      	cmp	r0, #0
 8005774:	f47f adfe 	bne.w	8005374 <__ieee754_pow+0x36c>
 8005778:	4aa5      	ldr	r2, [pc, #660]	; (8005a10 <__ieee754_pow+0xa08>)
 800577a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800577e:	4293      	cmp	r3, r2
 8005780:	f340 810c 	ble.w	800599c <__ieee754_pow+0x994>
 8005784:	151b      	asrs	r3, r3, #20
 8005786:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800578a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800578e:	fa4a f303 	asr.w	r3, sl, r3
 8005792:	445b      	add	r3, fp
 8005794:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005798:	4e9e      	ldr	r6, [pc, #632]	; (8005a14 <__ieee754_pow+0xa0c>)
 800579a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800579e:	4116      	asrs	r6, r2
 80057a0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80057a4:	2000      	movs	r0, #0
 80057a6:	ea23 0106 	bic.w	r1, r3, r6
 80057aa:	f1c2 0214 	rsb	r2, r2, #20
 80057ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80057b2:	fa4a fa02 	asr.w	sl, sl, r2
 80057b6:	f1bb 0f00 	cmp.w	fp, #0
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4620      	mov	r0, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	bfb8      	it	lt
 80057c4:	f1ca 0a00 	rsblt	sl, sl, #0
 80057c8:	f7fa fd0a 	bl	80001e0 <__aeabi_dsub>
 80057cc:	e9cd 0100 	strd	r0, r1, [sp]
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057d8:	f7fa fd04 	bl	80001e4 <__adddf3>
 80057dc:	2000      	movs	r0, #0
 80057de:	a37a      	add	r3, pc, #488	; (adr r3, 80059c8 <__ieee754_pow+0x9c0>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	4604      	mov	r4, r0
 80057e6:	460d      	mov	r5, r1
 80057e8:	f7fa feae 	bl	8000548 <__aeabi_dmul>
 80057ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057f0:	4606      	mov	r6, r0
 80057f2:	460f      	mov	r7, r1
 80057f4:	4620      	mov	r0, r4
 80057f6:	4629      	mov	r1, r5
 80057f8:	f7fa fcf2 	bl	80001e0 <__aeabi_dsub>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4640      	mov	r0, r8
 8005802:	4649      	mov	r1, r9
 8005804:	f7fa fcec 	bl	80001e0 <__aeabi_dsub>
 8005808:	a371      	add	r3, pc, #452	; (adr r3, 80059d0 <__ieee754_pow+0x9c8>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fa fe9b 	bl	8000548 <__aeabi_dmul>
 8005812:	a371      	add	r3, pc, #452	; (adr r3, 80059d8 <__ieee754_pow+0x9d0>)
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	4680      	mov	r8, r0
 800581a:	4689      	mov	r9, r1
 800581c:	4620      	mov	r0, r4
 800581e:	4629      	mov	r1, r5
 8005820:	f7fa fe92 	bl	8000548 <__aeabi_dmul>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4640      	mov	r0, r8
 800582a:	4649      	mov	r1, r9
 800582c:	f7fa fcda 	bl	80001e4 <__adddf3>
 8005830:	4604      	mov	r4, r0
 8005832:	460d      	mov	r5, r1
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4630      	mov	r0, r6
 800583a:	4639      	mov	r1, r7
 800583c:	f7fa fcd2 	bl	80001e4 <__adddf3>
 8005840:	4632      	mov	r2, r6
 8005842:	463b      	mov	r3, r7
 8005844:	4680      	mov	r8, r0
 8005846:	4689      	mov	r9, r1
 8005848:	f7fa fcca 	bl	80001e0 <__aeabi_dsub>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4620      	mov	r0, r4
 8005852:	4629      	mov	r1, r5
 8005854:	f7fa fcc4 	bl	80001e0 <__aeabi_dsub>
 8005858:	4642      	mov	r2, r8
 800585a:	4606      	mov	r6, r0
 800585c:	460f      	mov	r7, r1
 800585e:	464b      	mov	r3, r9
 8005860:	4640      	mov	r0, r8
 8005862:	4649      	mov	r1, r9
 8005864:	f7fa fe70 	bl	8000548 <__aeabi_dmul>
 8005868:	a35d      	add	r3, pc, #372	; (adr r3, 80059e0 <__ieee754_pow+0x9d8>)
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	4604      	mov	r4, r0
 8005870:	460d      	mov	r5, r1
 8005872:	f7fa fe69 	bl	8000548 <__aeabi_dmul>
 8005876:	a35c      	add	r3, pc, #368	; (adr r3, 80059e8 <__ieee754_pow+0x9e0>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f7fa fcb0 	bl	80001e0 <__aeabi_dsub>
 8005880:	4622      	mov	r2, r4
 8005882:	462b      	mov	r3, r5
 8005884:	f7fa fe60 	bl	8000548 <__aeabi_dmul>
 8005888:	a359      	add	r3, pc, #356	; (adr r3, 80059f0 <__ieee754_pow+0x9e8>)
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f7fa fca9 	bl	80001e4 <__adddf3>
 8005892:	4622      	mov	r2, r4
 8005894:	462b      	mov	r3, r5
 8005896:	f7fa fe57 	bl	8000548 <__aeabi_dmul>
 800589a:	a357      	add	r3, pc, #348	; (adr r3, 80059f8 <__ieee754_pow+0x9f0>)
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f7fa fc9e 	bl	80001e0 <__aeabi_dsub>
 80058a4:	4622      	mov	r2, r4
 80058a6:	462b      	mov	r3, r5
 80058a8:	f7fa fe4e 	bl	8000548 <__aeabi_dmul>
 80058ac:	a354      	add	r3, pc, #336	; (adr r3, 8005a00 <__ieee754_pow+0x9f8>)
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	f7fa fc97 	bl	80001e4 <__adddf3>
 80058b6:	4622      	mov	r2, r4
 80058b8:	462b      	mov	r3, r5
 80058ba:	f7fa fe45 	bl	8000548 <__aeabi_dmul>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4640      	mov	r0, r8
 80058c4:	4649      	mov	r1, r9
 80058c6:	f7fa fc8b 	bl	80001e0 <__aeabi_dsub>
 80058ca:	4604      	mov	r4, r0
 80058cc:	460d      	mov	r5, r1
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4640      	mov	r0, r8
 80058d4:	4649      	mov	r1, r9
 80058d6:	f7fa fe37 	bl	8000548 <__aeabi_dmul>
 80058da:	2200      	movs	r2, #0
 80058dc:	e9cd 0100 	strd	r0, r1, [sp]
 80058e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058e4:	4620      	mov	r0, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	f7fa fc7a 	bl	80001e0 <__aeabi_dsub>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058f4:	f7fa ff52 	bl	800079c <__aeabi_ddiv>
 80058f8:	4632      	mov	r2, r6
 80058fa:	4604      	mov	r4, r0
 80058fc:	460d      	mov	r5, r1
 80058fe:	463b      	mov	r3, r7
 8005900:	4640      	mov	r0, r8
 8005902:	4649      	mov	r1, r9
 8005904:	f7fa fe20 	bl	8000548 <__aeabi_dmul>
 8005908:	4632      	mov	r2, r6
 800590a:	463b      	mov	r3, r7
 800590c:	f7fa fc6a 	bl	80001e4 <__adddf3>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4620      	mov	r0, r4
 8005916:	4629      	mov	r1, r5
 8005918:	f7fa fc62 	bl	80001e0 <__aeabi_dsub>
 800591c:	4642      	mov	r2, r8
 800591e:	464b      	mov	r3, r9
 8005920:	f7fa fc5e 	bl	80001e0 <__aeabi_dsub>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	2000      	movs	r0, #0
 800592a:	493b      	ldr	r1, [pc, #236]	; (8005a18 <__ieee754_pow+0xa10>)
 800592c:	f7fa fc58 	bl	80001e0 <__aeabi_dsub>
 8005930:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005934:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	da31      	bge.n	80059a2 <__ieee754_pow+0x99a>
 800593e:	4650      	mov	r0, sl
 8005940:	ec43 2b10 	vmov	d0, r2, r3
 8005944:	f000 fccc 	bl	80062e0 <scalbn>
 8005948:	ec51 0b10 	vmov	r0, r1, d0
 800594c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005950:	f7ff bbf1 	b.w	8005136 <__ieee754_pow+0x12e>
 8005954:	4b31      	ldr	r3, [pc, #196]	; (8005a1c <__ieee754_pow+0xa14>)
 8005956:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800595a:	429e      	cmp	r6, r3
 800595c:	f77f af0c 	ble.w	8005778 <__ieee754_pow+0x770>
 8005960:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <__ieee754_pow+0xa18>)
 8005962:	440b      	add	r3, r1
 8005964:	4303      	orrs	r3, r0
 8005966:	d00b      	beq.n	8005980 <__ieee754_pow+0x978>
 8005968:	a327      	add	r3, pc, #156	; (adr r3, 8005a08 <__ieee754_pow+0xa00>)
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005972:	f7fa fde9 	bl	8000548 <__aeabi_dmul>
 8005976:	a324      	add	r3, pc, #144	; (adr r3, 8005a08 <__ieee754_pow+0xa00>)
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f7ff bbdb 	b.w	8005136 <__ieee754_pow+0x12e>
 8005980:	4622      	mov	r2, r4
 8005982:	462b      	mov	r3, r5
 8005984:	f7fa fc2c 	bl	80001e0 <__aeabi_dsub>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4640      	mov	r0, r8
 800598e:	4649      	mov	r1, r9
 8005990:	f7fb f856 	bl	8000a40 <__aeabi_dcmple>
 8005994:	2800      	cmp	r0, #0
 8005996:	f43f aeef 	beq.w	8005778 <__ieee754_pow+0x770>
 800599a:	e7e5      	b.n	8005968 <__ieee754_pow+0x960>
 800599c:	f04f 0a00 	mov.w	sl, #0
 80059a0:	e716      	b.n	80057d0 <__ieee754_pow+0x7c8>
 80059a2:	4621      	mov	r1, r4
 80059a4:	e7d2      	b.n	800594c <__ieee754_pow+0x944>
 80059a6:	2000      	movs	r0, #0
 80059a8:	491b      	ldr	r1, [pc, #108]	; (8005a18 <__ieee754_pow+0xa10>)
 80059aa:	f7ff bb8d 	b.w	80050c8 <__ieee754_pow+0xc0>
 80059ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059b2:	f7ff bb89 	b.w	80050c8 <__ieee754_pow+0xc0>
 80059b6:	4630      	mov	r0, r6
 80059b8:	4639      	mov	r1, r7
 80059ba:	f7ff bb85 	b.w	80050c8 <__ieee754_pow+0xc0>
 80059be:	4693      	mov	fp, r2
 80059c0:	f7ff bb96 	b.w	80050f0 <__ieee754_pow+0xe8>
 80059c4:	f3af 8000 	nop.w
 80059c8:	00000000 	.word	0x00000000
 80059cc:	3fe62e43 	.word	0x3fe62e43
 80059d0:	fefa39ef 	.word	0xfefa39ef
 80059d4:	3fe62e42 	.word	0x3fe62e42
 80059d8:	0ca86c39 	.word	0x0ca86c39
 80059dc:	be205c61 	.word	0xbe205c61
 80059e0:	72bea4d0 	.word	0x72bea4d0
 80059e4:	3e663769 	.word	0x3e663769
 80059e8:	c5d26bf1 	.word	0xc5d26bf1
 80059ec:	3ebbbd41 	.word	0x3ebbbd41
 80059f0:	af25de2c 	.word	0xaf25de2c
 80059f4:	3f11566a 	.word	0x3f11566a
 80059f8:	16bebd93 	.word	0x16bebd93
 80059fc:	3f66c16c 	.word	0x3f66c16c
 8005a00:	5555553e 	.word	0x5555553e
 8005a04:	3fc55555 	.word	0x3fc55555
 8005a08:	c2f8f359 	.word	0xc2f8f359
 8005a0c:	01a56e1f 	.word	0x01a56e1f
 8005a10:	3fe00000 	.word	0x3fe00000
 8005a14:	000fffff 	.word	0x000fffff
 8005a18:	3ff00000 	.word	0x3ff00000
 8005a1c:	4090cbff 	.word	0x4090cbff
 8005a20:	3f6f3400 	.word	0x3f6f3400
 8005a24:	652b82fe 	.word	0x652b82fe
 8005a28:	3c971547 	.word	0x3c971547

08005a2c <__ieee754_sqrt>:
 8005a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	ec55 4b10 	vmov	r4, r5, d0
 8005a34:	4e54      	ldr	r6, [pc, #336]	; (8005b88 <__ieee754_sqrt+0x15c>)
 8005a36:	43ae      	bics	r6, r5
 8005a38:	ee10 0a10 	vmov	r0, s0
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	462a      	mov	r2, r5
 8005a40:	4621      	mov	r1, r4
 8005a42:	d113      	bne.n	8005a6c <__ieee754_sqrt+0x40>
 8005a44:	ee10 2a10 	vmov	r2, s0
 8005a48:	462b      	mov	r3, r5
 8005a4a:	ee10 0a10 	vmov	r0, s0
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fd7a 	bl	8000548 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fa fbc2 	bl	80001e4 <__adddf3>
 8005a60:	4604      	mov	r4, r0
 8005a62:	460d      	mov	r5, r1
 8005a64:	ec45 4b10 	vmov	d0, r4, r5
 8005a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a6c:	2d00      	cmp	r5, #0
 8005a6e:	dc10      	bgt.n	8005a92 <__ieee754_sqrt+0x66>
 8005a70:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005a74:	4330      	orrs	r0, r6
 8005a76:	d0f5      	beq.n	8005a64 <__ieee754_sqrt+0x38>
 8005a78:	b15d      	cbz	r5, 8005a92 <__ieee754_sqrt+0x66>
 8005a7a:	ee10 2a10 	vmov	r2, s0
 8005a7e:	462b      	mov	r3, r5
 8005a80:	4620      	mov	r0, r4
 8005a82:	4629      	mov	r1, r5
 8005a84:	f7fa fbac 	bl	80001e0 <__aeabi_dsub>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	f7fa fe86 	bl	800079c <__aeabi_ddiv>
 8005a90:	e7e6      	b.n	8005a60 <__ieee754_sqrt+0x34>
 8005a92:	151b      	asrs	r3, r3, #20
 8005a94:	d10c      	bne.n	8005ab0 <__ieee754_sqrt+0x84>
 8005a96:	2a00      	cmp	r2, #0
 8005a98:	d06d      	beq.n	8005b76 <__ieee754_sqrt+0x14a>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	02d6      	lsls	r6, r2, #11
 8005a9e:	d56e      	bpl.n	8005b7e <__ieee754_sqrt+0x152>
 8005aa0:	1e44      	subs	r4, r0, #1
 8005aa2:	1b1b      	subs	r3, r3, r4
 8005aa4:	f1c0 0420 	rsb	r4, r0, #32
 8005aa8:	fa21 f404 	lsr.w	r4, r1, r4
 8005aac:	4322      	orrs	r2, r4
 8005aae:	4081      	lsls	r1, r0
 8005ab0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005ab4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005ab8:	07dd      	lsls	r5, r3, #31
 8005aba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005abe:	bf42      	ittt	mi
 8005ac0:	0052      	lslmi	r2, r2, #1
 8005ac2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8005ac6:	0049      	lslmi	r1, r1, #1
 8005ac8:	1058      	asrs	r0, r3, #1
 8005aca:	2500      	movs	r5, #0
 8005acc:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8005ad0:	441a      	add	r2, r3
 8005ad2:	0049      	lsls	r1, r1, #1
 8005ad4:	2316      	movs	r3, #22
 8005ad6:	462c      	mov	r4, r5
 8005ad8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005adc:	19a7      	adds	r7, r4, r6
 8005ade:	4297      	cmp	r7, r2
 8005ae0:	bfde      	ittt	le
 8005ae2:	1bd2      	suble	r2, r2, r7
 8005ae4:	19bc      	addle	r4, r7, r6
 8005ae6:	19ad      	addle	r5, r5, r6
 8005ae8:	0052      	lsls	r2, r2, #1
 8005aea:	3b01      	subs	r3, #1
 8005aec:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005af0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005af4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005af8:	d1f0      	bne.n	8005adc <__ieee754_sqrt+0xb0>
 8005afa:	f04f 0e20 	mov.w	lr, #32
 8005afe:	469c      	mov	ip, r3
 8005b00:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005b04:	42a2      	cmp	r2, r4
 8005b06:	eb06 070c 	add.w	r7, r6, ip
 8005b0a:	dc02      	bgt.n	8005b12 <__ieee754_sqrt+0xe6>
 8005b0c:	d112      	bne.n	8005b34 <__ieee754_sqrt+0x108>
 8005b0e:	428f      	cmp	r7, r1
 8005b10:	d810      	bhi.n	8005b34 <__ieee754_sqrt+0x108>
 8005b12:	2f00      	cmp	r7, #0
 8005b14:	eb07 0c06 	add.w	ip, r7, r6
 8005b18:	da34      	bge.n	8005b84 <__ieee754_sqrt+0x158>
 8005b1a:	f1bc 0f00 	cmp.w	ip, #0
 8005b1e:	db31      	blt.n	8005b84 <__ieee754_sqrt+0x158>
 8005b20:	f104 0801 	add.w	r8, r4, #1
 8005b24:	1b12      	subs	r2, r2, r4
 8005b26:	428f      	cmp	r7, r1
 8005b28:	bf88      	it	hi
 8005b2a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005b2e:	1bc9      	subs	r1, r1, r7
 8005b30:	4433      	add	r3, r6
 8005b32:	4644      	mov	r4, r8
 8005b34:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8005b38:	f1be 0e01 	subs.w	lr, lr, #1
 8005b3c:	443a      	add	r2, r7
 8005b3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005b42:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005b46:	d1dd      	bne.n	8005b04 <__ieee754_sqrt+0xd8>
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	d006      	beq.n	8005b5a <__ieee754_sqrt+0x12e>
 8005b4c:	1c5c      	adds	r4, r3, #1
 8005b4e:	bf13      	iteet	ne
 8005b50:	3301      	addne	r3, #1
 8005b52:	3501      	addeq	r5, #1
 8005b54:	4673      	moveq	r3, lr
 8005b56:	f023 0301 	bicne.w	r3, r3, #1
 8005b5a:	106a      	asrs	r2, r5, #1
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	07e9      	lsls	r1, r5, #31
 8005b60:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005b64:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005b68:	bf48      	it	mi
 8005b6a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005b6e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005b72:	461c      	mov	r4, r3
 8005b74:	e776      	b.n	8005a64 <__ieee754_sqrt+0x38>
 8005b76:	0aca      	lsrs	r2, r1, #11
 8005b78:	3b15      	subs	r3, #21
 8005b7a:	0549      	lsls	r1, r1, #21
 8005b7c:	e78b      	b.n	8005a96 <__ieee754_sqrt+0x6a>
 8005b7e:	0052      	lsls	r2, r2, #1
 8005b80:	3001      	adds	r0, #1
 8005b82:	e78b      	b.n	8005a9c <__ieee754_sqrt+0x70>
 8005b84:	46a0      	mov	r8, r4
 8005b86:	e7cd      	b.n	8005b24 <__ieee754_sqrt+0xf8>
 8005b88:	7ff00000 	.word	0x7ff00000

08005b8c <__ieee754_powf>:
 8005b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b90:	ee10 5a90 	vmov	r5, s1
 8005b94:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8005b98:	ed2d 8b02 	vpush	{d8}
 8005b9c:	eeb0 8a40 	vmov.f32	s16, s0
 8005ba0:	eef0 8a60 	vmov.f32	s17, s1
 8005ba4:	f000 8295 	beq.w	80060d2 <__ieee754_powf+0x546>
 8005ba8:	ee10 8a10 	vmov	r8, s0
 8005bac:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8005bb0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005bb4:	dc06      	bgt.n	8005bc4 <__ieee754_powf+0x38>
 8005bb6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005bba:	dd0a      	ble.n	8005bd2 <__ieee754_powf+0x46>
 8005bbc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005bc0:	f000 8287 	beq.w	80060d2 <__ieee754_powf+0x546>
 8005bc4:	ecbd 8b02 	vpop	{d8}
 8005bc8:	48d9      	ldr	r0, [pc, #868]	; (8005f30 <__ieee754_powf+0x3a4>)
 8005bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bce:	f000 bc13 	b.w	80063f8 <nanf>
 8005bd2:	f1b8 0f00 	cmp.w	r8, #0
 8005bd6:	da1d      	bge.n	8005c14 <__ieee754_powf+0x88>
 8005bd8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8005bdc:	da2c      	bge.n	8005c38 <__ieee754_powf+0xac>
 8005bde:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005be2:	db30      	blt.n	8005c46 <__ieee754_powf+0xba>
 8005be4:	15fb      	asrs	r3, r7, #23
 8005be6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005bea:	fa47 f603 	asr.w	r6, r7, r3
 8005bee:	fa06 f303 	lsl.w	r3, r6, r3
 8005bf2:	429f      	cmp	r7, r3
 8005bf4:	d127      	bne.n	8005c46 <__ieee754_powf+0xba>
 8005bf6:	f006 0601 	and.w	r6, r6, #1
 8005bfa:	f1c6 0602 	rsb	r6, r6, #2
 8005bfe:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005c02:	d122      	bne.n	8005c4a <__ieee754_powf+0xbe>
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	f280 826a 	bge.w	80060de <__ieee754_powf+0x552>
 8005c0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005c0e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005c12:	e00d      	b.n	8005c30 <__ieee754_powf+0xa4>
 8005c14:	2600      	movs	r6, #0
 8005c16:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005c1a:	d1f0      	bne.n	8005bfe <__ieee754_powf+0x72>
 8005c1c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005c20:	f000 8257 	beq.w	80060d2 <__ieee754_powf+0x546>
 8005c24:	dd0a      	ble.n	8005c3c <__ieee754_powf+0xb0>
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	f280 8256 	bge.w	80060d8 <__ieee754_powf+0x54c>
 8005c2c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8005f34 <__ieee754_powf+0x3a8>
 8005c30:	ecbd 8b02 	vpop	{d8}
 8005c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c38:	2602      	movs	r6, #2
 8005c3a:	e7ec      	b.n	8005c16 <__ieee754_powf+0x8a>
 8005c3c:	2d00      	cmp	r5, #0
 8005c3e:	daf5      	bge.n	8005c2c <__ieee754_powf+0xa0>
 8005c40:	eeb1 0a68 	vneg.f32	s0, s17
 8005c44:	e7f4      	b.n	8005c30 <__ieee754_powf+0xa4>
 8005c46:	2600      	movs	r6, #0
 8005c48:	e7d9      	b.n	8005bfe <__ieee754_powf+0x72>
 8005c4a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8005c4e:	d102      	bne.n	8005c56 <__ieee754_powf+0xca>
 8005c50:	ee28 0a08 	vmul.f32	s0, s16, s16
 8005c54:	e7ec      	b.n	8005c30 <__ieee754_powf+0xa4>
 8005c56:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8005c5a:	eeb0 0a48 	vmov.f32	s0, s16
 8005c5e:	d108      	bne.n	8005c72 <__ieee754_powf+0xe6>
 8005c60:	f1b8 0f00 	cmp.w	r8, #0
 8005c64:	db05      	blt.n	8005c72 <__ieee754_powf+0xe6>
 8005c66:	ecbd 8b02 	vpop	{d8}
 8005c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6e:	f000 ba4f 	b.w	8006110 <__ieee754_sqrtf>
 8005c72:	f000 fbaf 	bl	80063d4 <fabsf>
 8005c76:	b124      	cbz	r4, 8005c82 <__ieee754_powf+0xf6>
 8005c78:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8005c7c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8005c80:	d117      	bne.n	8005cb2 <__ieee754_powf+0x126>
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	bfbc      	itt	lt
 8005c86:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8005c8a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005c8e:	f1b8 0f00 	cmp.w	r8, #0
 8005c92:	dacd      	bge.n	8005c30 <__ieee754_powf+0xa4>
 8005c94:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8005c98:	ea54 0306 	orrs.w	r3, r4, r6
 8005c9c:	d104      	bne.n	8005ca8 <__ieee754_powf+0x11c>
 8005c9e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005ca2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005ca6:	e7c3      	b.n	8005c30 <__ieee754_powf+0xa4>
 8005ca8:	2e01      	cmp	r6, #1
 8005caa:	d1c1      	bne.n	8005c30 <__ieee754_powf+0xa4>
 8005cac:	eeb1 0a40 	vneg.f32	s0, s0
 8005cb0:	e7be      	b.n	8005c30 <__ieee754_powf+0xa4>
 8005cb2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8005cb6:	3801      	subs	r0, #1
 8005cb8:	ea56 0300 	orrs.w	r3, r6, r0
 8005cbc:	d104      	bne.n	8005cc8 <__ieee754_powf+0x13c>
 8005cbe:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005cc2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005cc6:	e7b3      	b.n	8005c30 <__ieee754_powf+0xa4>
 8005cc8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8005ccc:	dd6d      	ble.n	8005daa <__ieee754_powf+0x21e>
 8005cce:	4b9a      	ldr	r3, [pc, #616]	; (8005f38 <__ieee754_powf+0x3ac>)
 8005cd0:	429c      	cmp	r4, r3
 8005cd2:	dc06      	bgt.n	8005ce2 <__ieee754_powf+0x156>
 8005cd4:	2d00      	cmp	r5, #0
 8005cd6:	daa9      	bge.n	8005c2c <__ieee754_powf+0xa0>
 8005cd8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8005f3c <__ieee754_powf+0x3b0>
 8005cdc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005ce0:	e7a6      	b.n	8005c30 <__ieee754_powf+0xa4>
 8005ce2:	4b97      	ldr	r3, [pc, #604]	; (8005f40 <__ieee754_powf+0x3b4>)
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	dd02      	ble.n	8005cee <__ieee754_powf+0x162>
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	dcf5      	bgt.n	8005cd8 <__ieee754_powf+0x14c>
 8005cec:	e79e      	b.n	8005c2c <__ieee754_powf+0xa0>
 8005cee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005cf2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005cf6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8005f44 <__ieee754_powf+0x3b8>
 8005cfa:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8005f48 <__ieee754_powf+0x3bc>
 8005cfe:	eef1 6a40 	vneg.f32	s13, s0
 8005d02:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005d06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005d0e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005d12:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005d16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005d1a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8005f4c <__ieee754_powf+0x3c0>
 8005d1e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005d22:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005f50 <__ieee754_powf+0x3c4>
 8005d26:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005d2a:	eeb0 7a67 	vmov.f32	s14, s15
 8005d2e:	eea0 7a06 	vfma.f32	s14, s0, s12
 8005d32:	ee17 3a10 	vmov	r3, s14
 8005d36:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005d3a:	f023 030f 	bic.w	r3, r3, #15
 8005d3e:	ee07 3a10 	vmov	s14, r3
 8005d42:	eea6 7a86 	vfma.f32	s14, s13, s12
 8005d46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d4a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8005d4e:	f025 050f 	bic.w	r5, r5, #15
 8005d52:	ee07 5a10 	vmov	s14, r5
 8005d56:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8005d5a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8005d5e:	ee07 3a10 	vmov	s14, r3
 8005d62:	ee06 5a90 	vmov	s13, r5
 8005d66:	eee7 7a28 	vfma.f32	s15, s14, s17
 8005d6a:	3e01      	subs	r6, #1
 8005d6c:	ea56 0200 	orrs.w	r2, r6, r0
 8005d70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005d74:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005d78:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005d7c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005d80:	ee16 4a90 	vmov	r4, s13
 8005d84:	bf08      	it	eq
 8005d86:	eeb0 8a40 	vmoveq.f32	s16, s0
 8005d8a:	2c00      	cmp	r4, #0
 8005d8c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005d90:	f340 8186 	ble.w	80060a0 <__ieee754_powf+0x514>
 8005d94:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8005d98:	f340 80fc 	ble.w	8005f94 <__ieee754_powf+0x408>
 8005d9c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8005f3c <__ieee754_powf+0x3b0>
 8005da0:	ee28 0a27 	vmul.f32	s0, s16, s15
 8005da4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005da8:	e742      	b.n	8005c30 <__ieee754_powf+0xa4>
 8005daa:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8005dae:	bfbf      	itttt	lt
 8005db0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8005f54 <__ieee754_powf+0x3c8>
 8005db4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005db8:	f06f 0217 	mvnlt.w	r2, #23
 8005dbc:	ee17 4a90 	vmovlt	r4, s15
 8005dc0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8005dc4:	bfa8      	it	ge
 8005dc6:	2200      	movge	r2, #0
 8005dc8:	3b7f      	subs	r3, #127	; 0x7f
 8005dca:	4413      	add	r3, r2
 8005dcc:	4a62      	ldr	r2, [pc, #392]	; (8005f58 <__ieee754_powf+0x3cc>)
 8005dce:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8005dd2:	4294      	cmp	r4, r2
 8005dd4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8005dd8:	dd06      	ble.n	8005de8 <__ieee754_powf+0x25c>
 8005dda:	4a60      	ldr	r2, [pc, #384]	; (8005f5c <__ieee754_powf+0x3d0>)
 8005ddc:	4294      	cmp	r4, r2
 8005dde:	f340 80a5 	ble.w	8005f2c <__ieee754_powf+0x3a0>
 8005de2:	3301      	adds	r3, #1
 8005de4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8005de8:	2400      	movs	r4, #0
 8005dea:	4a5d      	ldr	r2, [pc, #372]	; (8005f60 <__ieee754_powf+0x3d4>)
 8005dec:	00a7      	lsls	r7, r4, #2
 8005dee:	443a      	add	r2, r7
 8005df0:	ee07 1a90 	vmov	s15, r1
 8005df4:	ed92 7a00 	vldr	s14, [r2]
 8005df8:	4a5a      	ldr	r2, [pc, #360]	; (8005f64 <__ieee754_powf+0x3d8>)
 8005dfa:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005dfe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005e02:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 8005e06:	1049      	asrs	r1, r1, #1
 8005e08:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005e0c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8005e10:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8005e14:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8005e18:	ee06 1a90 	vmov	s13, r1
 8005e1c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005e20:	ee14 ea90 	vmov	lr, s9
 8005e24:	ea02 0e0e 	and.w	lr, r2, lr
 8005e28:	ee05 ea90 	vmov	s11, lr
 8005e2c:	eeb1 4a65 	vneg.f32	s8, s11
 8005e30:	eea4 6a26 	vfma.f32	s12, s8, s13
 8005e34:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8005e38:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8005e3c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8005e40:	eddf 7a49 	vldr	s15, [pc, #292]	; 8005f68 <__ieee754_powf+0x3dc>
 8005e44:	eea4 6a26 	vfma.f32	s12, s8, s13
 8005e48:	ee66 6a05 	vmul.f32	s13, s12, s10
 8005e4c:	ee24 6aa4 	vmul.f32	s12, s9, s9
 8005e50:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8005f6c <__ieee754_powf+0x3e0>
 8005e54:	eee6 7a05 	vfma.f32	s15, s12, s10
 8005e58:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8005f70 <__ieee754_powf+0x3e4>
 8005e5c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8005e60:	eddf 7a38 	vldr	s15, [pc, #224]	; 8005f44 <__ieee754_powf+0x3b8>
 8005e64:	eee6 7a05 	vfma.f32	s15, s12, s10
 8005e68:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8005f74 <__ieee754_powf+0x3e8>
 8005e6c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8005e70:	eddf 7a41 	vldr	s15, [pc, #260]	; 8005f78 <__ieee754_powf+0x3ec>
 8005e74:	eee6 7a05 	vfma.f32	s15, s12, s10
 8005e78:	ee66 3a06 	vmul.f32	s7, s12, s12
 8005e7c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8005e80:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005e84:	eeb0 6a45 	vmov.f32	s12, s10
 8005e88:	eea3 7aa7 	vfma.f32	s14, s7, s15
 8005e8c:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8005e90:	ee36 6a07 	vadd.f32	s12, s12, s14
 8005e94:	ee16 1a10 	vmov	r1, s12
 8005e98:	4011      	ands	r1, r2
 8005e9a:	ee06 1a10 	vmov	s12, r1
 8005e9e:	ee76 7a45 	vsub.f32	s15, s12, s10
 8005ea2:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8005f7c <__ieee754_powf+0x3f0>
 8005ea6:	eee4 7a25 	vfma.f32	s15, s8, s11
 8005eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eae:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8005eb2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005eb6:	eeb0 7a67 	vmov.f32	s14, s15
 8005eba:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005ebe:	ee17 1a10 	vmov	r1, s14
 8005ec2:	4011      	ands	r1, r2
 8005ec4:	ee07 1a10 	vmov	s14, r1
 8005ec8:	eea4 7a06 	vfma.f32	s14, s8, s12
 8005ecc:	ee05 1a90 	vmov	s11, r1
 8005ed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ed4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005f80 <__ieee754_powf+0x3f4>
 8005ed8:	492a      	ldr	r1, [pc, #168]	; (8005f84 <__ieee754_powf+0x3f8>)
 8005eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ede:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005f88 <__ieee754_powf+0x3fc>
 8005ee2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005ee6:	4439      	add	r1, r7
 8005ee8:	ed91 7a00 	vldr	s14, [r1]
 8005eec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eeb0 6a47 	vmov.f32	s12, s14
 8005ef8:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <__ieee754_powf+0x400>)
 8005efa:	eea5 6a85 	vfma.f32	s12, s11, s10
 8005efe:	443b      	add	r3, r7
 8005f00:	edd3 4a00 	vldr	s9, [r3]
 8005f04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005f08:	ee36 6a24 	vadd.f32	s12, s12, s9
 8005f0c:	ee76 7a26 	vadd.f32	s15, s12, s13
 8005f10:	ee17 3a90 	vmov	r3, s15
 8005f14:	4013      	ands	r3, r2
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f1e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005f22:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8005f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f2a:	e70e      	b.n	8005d4a <__ieee754_powf+0x1be>
 8005f2c:	2401      	movs	r4, #1
 8005f2e:	e75c      	b.n	8005dea <__ieee754_powf+0x25e>
 8005f30:	0800658a 	.word	0x0800658a
 8005f34:	00000000 	.word	0x00000000
 8005f38:	3f7ffff7 	.word	0x3f7ffff7
 8005f3c:	7149f2ca 	.word	0x7149f2ca
 8005f40:	3f800007 	.word	0x3f800007
 8005f44:	3eaaaaab 	.word	0x3eaaaaab
 8005f48:	3fb8aa00 	.word	0x3fb8aa00
 8005f4c:	3fb8aa3b 	.word	0x3fb8aa3b
 8005f50:	36eca570 	.word	0x36eca570
 8005f54:	4b800000 	.word	0x4b800000
 8005f58:	001cc471 	.word	0x001cc471
 8005f5c:	005db3d6 	.word	0x005db3d6
 8005f60:	08006668 	.word	0x08006668
 8005f64:	fffff000 	.word	0xfffff000
 8005f68:	3e6c3255 	.word	0x3e6c3255
 8005f6c:	3e53f142 	.word	0x3e53f142
 8005f70:	3e8ba305 	.word	0x3e8ba305
 8005f74:	3edb6db7 	.word	0x3edb6db7
 8005f78:	3f19999a 	.word	0x3f19999a
 8005f7c:	3f763800 	.word	0x3f763800
 8005f80:	3f76384f 	.word	0x3f76384f
 8005f84:	08006678 	.word	0x08006678
 8005f88:	369dc3a0 	.word	0x369dc3a0
 8005f8c:	08006670 	.word	0x08006670
 8005f90:	3338aa3c 	.word	0x3338aa3c
 8005f94:	f040 8094 	bne.w	80060c0 <__ieee754_powf+0x534>
 8005f98:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 8005f90 <__ieee754_powf+0x404>
 8005f9c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8005fa0:	ee37 6a86 	vadd.f32	s12, s15, s12
 8005fa4:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8005fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fac:	f73f aef6 	bgt.w	8005d9c <__ieee754_powf+0x210>
 8005fb0:	15db      	asrs	r3, r3, #23
 8005fb2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8005fb6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005fba:	4103      	asrs	r3, r0
 8005fbc:	4423      	add	r3, r4
 8005fbe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005fc2:	4948      	ldr	r1, [pc, #288]	; (80060e4 <__ieee754_powf+0x558>)
 8005fc4:	3a7f      	subs	r2, #127	; 0x7f
 8005fc6:	4111      	asrs	r1, r2
 8005fc8:	ea23 0101 	bic.w	r1, r3, r1
 8005fcc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8005fd0:	ee06 1a90 	vmov	s13, r1
 8005fd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005fd8:	f1c2 0217 	rsb	r2, r2, #23
 8005fdc:	4110      	asrs	r0, r2
 8005fde:	2c00      	cmp	r4, #0
 8005fe0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005fe4:	bfb8      	it	lt
 8005fe6:	4240      	neglt	r0, r0
 8005fe8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8005fec:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80060e8 <__ieee754_powf+0x55c>
 8005ff0:	ee16 3a90 	vmov	r3, s13
 8005ff4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005ff8:	f023 030f 	bic.w	r3, r3, #15
 8005ffc:	ee06 3a90 	vmov	s13, r3
 8006000:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006008:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80060ec <__ieee754_powf+0x560>
 800600c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006010:	eea7 7a86 	vfma.f32	s14, s15, s12
 8006014:	eef0 7a47 	vmov.f32	s15, s14
 8006018:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80060f0 <__ieee754_powf+0x564>
 800601c:	eeb0 0a67 	vmov.f32	s0, s15
 8006020:	eea6 0a87 	vfma.f32	s0, s13, s14
 8006024:	eeb0 6a40 	vmov.f32	s12, s0
 8006028:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800602c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006030:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006034:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80060f4 <__ieee754_powf+0x568>
 8006038:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80060f8 <__ieee754_powf+0x56c>
 800603c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006040:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80060fc <__ieee754_powf+0x570>
 8006044:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006048:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8006100 <__ieee754_powf+0x574>
 800604c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006050:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8006104 <__ieee754_powf+0x578>
 8006054:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006058:	eeb0 6a40 	vmov.f32	s12, s0
 800605c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006060:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006064:	eeb0 7a46 	vmov.f32	s14, s12
 8006068:	ee77 6a66 	vsub.f32	s13, s14, s13
 800606c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006070:	eee0 7a27 	vfma.f32	s15, s0, s15
 8006074:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800607c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006080:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006084:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006088:	ee10 3a10 	vmov	r3, s0
 800608c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006094:	da1a      	bge.n	80060cc <__ieee754_powf+0x540>
 8006096:	f000 f9b5 	bl	8006404 <scalbnf>
 800609a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800609e:	e5c7      	b.n	8005c30 <__ieee754_powf+0xa4>
 80060a0:	4a19      	ldr	r2, [pc, #100]	; (8006108 <__ieee754_powf+0x57c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	dd02      	ble.n	80060ac <__ieee754_powf+0x520>
 80060a6:	eddf 7a19 	vldr	s15, [pc, #100]	; 800610c <__ieee754_powf+0x580>
 80060aa:	e679      	b.n	8005da0 <__ieee754_powf+0x214>
 80060ac:	d108      	bne.n	80060c0 <__ieee754_powf+0x534>
 80060ae:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80060b2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80060b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ba:	f63f af79 	bhi.w	8005fb0 <__ieee754_powf+0x424>
 80060be:	e7f2      	b.n	80060a6 <__ieee754_powf+0x51a>
 80060c0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80060c4:	f73f af74 	bgt.w	8005fb0 <__ieee754_powf+0x424>
 80060c8:	2000      	movs	r0, #0
 80060ca:	e78d      	b.n	8005fe8 <__ieee754_powf+0x45c>
 80060cc:	ee00 3a10 	vmov	s0, r3
 80060d0:	e7e3      	b.n	800609a <__ieee754_powf+0x50e>
 80060d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80060d6:	e5ab      	b.n	8005c30 <__ieee754_powf+0xa4>
 80060d8:	eeb0 0a68 	vmov.f32	s0, s17
 80060dc:	e5a8      	b.n	8005c30 <__ieee754_powf+0xa4>
 80060de:	eeb0 0a48 	vmov.f32	s0, s16
 80060e2:	e5a5      	b.n	8005c30 <__ieee754_powf+0xa4>
 80060e4:	007fffff 	.word	0x007fffff
 80060e8:	3f317218 	.word	0x3f317218
 80060ec:	35bfbe8c 	.word	0x35bfbe8c
 80060f0:	3f317200 	.word	0x3f317200
 80060f4:	3331bb4c 	.word	0x3331bb4c
 80060f8:	b5ddea0e 	.word	0xb5ddea0e
 80060fc:	388ab355 	.word	0x388ab355
 8006100:	bb360b61 	.word	0xbb360b61
 8006104:	3e2aaaab 	.word	0x3e2aaaab
 8006108:	43160000 	.word	0x43160000
 800610c:	0da24260 	.word	0x0da24260

08006110 <__ieee754_sqrtf>:
 8006110:	ee10 2a10 	vmov	r2, s0
 8006114:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8006118:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	d302      	bcc.n	8006126 <__ieee754_sqrtf+0x16>
 8006120:	eea0 0a00 	vfma.f32	s0, s0, s0
 8006124:	bd70      	pop	{r4, r5, r6, pc}
 8006126:	b3b1      	cbz	r1, 8006196 <__ieee754_sqrtf+0x86>
 8006128:	2a00      	cmp	r2, #0
 800612a:	da04      	bge.n	8006136 <__ieee754_sqrtf+0x26>
 800612c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006130:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006134:	bd70      	pop	{r4, r5, r6, pc}
 8006136:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800613a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800613e:	d204      	bcs.n	800614a <__ieee754_sqrtf+0x3a>
 8006140:	2100      	movs	r1, #0
 8006142:	0210      	lsls	r0, r2, #8
 8006144:	d528      	bpl.n	8006198 <__ieee754_sqrtf+0x88>
 8006146:	3901      	subs	r1, #1
 8006148:	1a5b      	subs	r3, r3, r1
 800614a:	3b7f      	subs	r3, #127	; 0x7f
 800614c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006150:	07d9      	lsls	r1, r3, #31
 8006152:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006156:	bf48      	it	mi
 8006158:	0052      	lslmi	r2, r2, #1
 800615a:	1059      	asrs	r1, r3, #1
 800615c:	2300      	movs	r3, #0
 800615e:	0052      	lsls	r2, r2, #1
 8006160:	2419      	movs	r4, #25
 8006162:	461e      	mov	r6, r3
 8006164:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8006168:	1835      	adds	r5, r6, r0
 800616a:	4295      	cmp	r5, r2
 800616c:	bfde      	ittt	le
 800616e:	182e      	addle	r6, r5, r0
 8006170:	1b52      	suble	r2, r2, r5
 8006172:	181b      	addle	r3, r3, r0
 8006174:	3c01      	subs	r4, #1
 8006176:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800617a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800617e:	d1f3      	bne.n	8006168 <__ieee754_sqrtf+0x58>
 8006180:	b112      	cbz	r2, 8006188 <__ieee754_sqrtf+0x78>
 8006182:	3301      	adds	r3, #1
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	105b      	asrs	r3, r3, #1
 800618a:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800618e:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8006192:	ee00 3a10 	vmov	s0, r3
 8006196:	bd70      	pop	{r4, r5, r6, pc}
 8006198:	0052      	lsls	r2, r2, #1
 800619a:	3101      	adds	r1, #1
 800619c:	e7d1      	b.n	8006142 <__ieee754_sqrtf+0x32>

0800619e <fabs>:
 800619e:	ec53 2b10 	vmov	r2, r3, d0
 80061a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061a6:	ec43 2b10 	vmov	d0, r2, r3
 80061aa:	4770      	bx	lr

080061ac <finite>:
 80061ac:	ee10 3a90 	vmov	r3, s1
 80061b0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80061b4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80061b8:	0fc0      	lsrs	r0, r0, #31
 80061ba:	4770      	bx	lr

080061bc <matherr>:
 80061bc:	2000      	movs	r0, #0
 80061be:	4770      	bx	lr

080061c0 <nan>:
 80061c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80061c8 <nan+0x8>
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	00000000 	.word	0x00000000
 80061cc:	7ff80000 	.word	0x7ff80000

080061d0 <rint>:
 80061d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061d2:	ec51 0b10 	vmov	r0, r1, d0
 80061d6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80061da:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80061de:	2e13      	cmp	r6, #19
 80061e0:	ee10 7a10 	vmov	r7, s0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4602      	mov	r2, r0
 80061e8:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80061ec:	dc58      	bgt.n	80062a0 <rint+0xd0>
 80061ee:	2e00      	cmp	r6, #0
 80061f0:	da2b      	bge.n	800624a <rint+0x7a>
 80061f2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80061f6:	4302      	orrs	r2, r0
 80061f8:	d023      	beq.n	8006242 <rint+0x72>
 80061fa:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80061fe:	4302      	orrs	r2, r0
 8006200:	4251      	negs	r1, r2
 8006202:	4311      	orrs	r1, r2
 8006204:	0b09      	lsrs	r1, r1, #12
 8006206:	0c5b      	lsrs	r3, r3, #17
 8006208:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800620c:	045b      	lsls	r3, r3, #17
 800620e:	ea41 0703 	orr.w	r7, r1, r3
 8006212:	4b31      	ldr	r3, [pc, #196]	; (80062d8 <rint+0x108>)
 8006214:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006218:	4639      	mov	r1, r7
 800621a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800621e:	ee10 0a10 	vmov	r0, s0
 8006222:	4632      	mov	r2, r6
 8006224:	463b      	mov	r3, r7
 8006226:	f7f9 ffdd 	bl	80001e4 <__adddf3>
 800622a:	e9cd 0100 	strd	r0, r1, [sp]
 800622e:	463b      	mov	r3, r7
 8006230:	4632      	mov	r2, r6
 8006232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006236:	f7f9 ffd3 	bl	80001e0 <__aeabi_dsub>
 800623a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800623e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8006242:	ec41 0b10 	vmov	d0, r0, r1
 8006246:	b003      	add	sp, #12
 8006248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800624a:	4c24      	ldr	r4, [pc, #144]	; (80062dc <rint+0x10c>)
 800624c:	4134      	asrs	r4, r6
 800624e:	ea01 0704 	and.w	r7, r1, r4
 8006252:	4307      	orrs	r7, r0
 8006254:	d0f5      	beq.n	8006242 <rint+0x72>
 8006256:	0861      	lsrs	r1, r4, #1
 8006258:	ea03 0001 	and.w	r0, r3, r1
 800625c:	4302      	orrs	r2, r0
 800625e:	d00b      	beq.n	8006278 <rint+0xa8>
 8006260:	ea23 0101 	bic.w	r1, r3, r1
 8006264:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006268:	2e13      	cmp	r6, #19
 800626a:	fa43 f306 	asr.w	r3, r3, r6
 800626e:	bf0c      	ite	eq
 8006270:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8006274:	2200      	movne	r2, #0
 8006276:	430b      	orrs	r3, r1
 8006278:	4619      	mov	r1, r3
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <rint+0x108>)
 800627c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006280:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006284:	4610      	mov	r0, r2
 8006286:	462b      	mov	r3, r5
 8006288:	4622      	mov	r2, r4
 800628a:	f7f9 ffab 	bl	80001e4 <__adddf3>
 800628e:	e9cd 0100 	strd	r0, r1, [sp]
 8006292:	4622      	mov	r2, r4
 8006294:	462b      	mov	r3, r5
 8006296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800629a:	f7f9 ffa1 	bl	80001e0 <__aeabi_dsub>
 800629e:	e7d0      	b.n	8006242 <rint+0x72>
 80062a0:	2e33      	cmp	r6, #51	; 0x33
 80062a2:	dd08      	ble.n	80062b6 <rint+0xe6>
 80062a4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80062a8:	d1cb      	bne.n	8006242 <rint+0x72>
 80062aa:	ee10 2a10 	vmov	r2, s0
 80062ae:	460b      	mov	r3, r1
 80062b0:	f7f9 ff98 	bl	80001e4 <__adddf3>
 80062b4:	e7c5      	b.n	8006242 <rint+0x72>
 80062b6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80062ba:	f04f 34ff 	mov.w	r4, #4294967295
 80062be:	40f4      	lsrs	r4, r6
 80062c0:	4220      	tst	r0, r4
 80062c2:	d0be      	beq.n	8006242 <rint+0x72>
 80062c4:	0861      	lsrs	r1, r4, #1
 80062c6:	420f      	tst	r7, r1
 80062c8:	bf1f      	itttt	ne
 80062ca:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80062ce:	ea27 0101 	bicne.w	r1, r7, r1
 80062d2:	4132      	asrne	r2, r6
 80062d4:	430a      	orrne	r2, r1
 80062d6:	e7cf      	b.n	8006278 <rint+0xa8>
 80062d8:	08006680 	.word	0x08006680
 80062dc:	000fffff 	.word	0x000fffff

080062e0 <scalbn>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	ec55 4b10 	vmov	r4, r5, d0
 80062e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80062ea:	4606      	mov	r6, r0
 80062ec:	462b      	mov	r3, r5
 80062ee:	b9b2      	cbnz	r2, 800631e <scalbn+0x3e>
 80062f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80062f4:	4323      	orrs	r3, r4
 80062f6:	d03c      	beq.n	8006372 <scalbn+0x92>
 80062f8:	2200      	movs	r2, #0
 80062fa:	4b33      	ldr	r3, [pc, #204]	; (80063c8 <scalbn+0xe8>)
 80062fc:	4629      	mov	r1, r5
 80062fe:	ee10 0a10 	vmov	r0, s0
 8006302:	f7fa f921 	bl	8000548 <__aeabi_dmul>
 8006306:	4a31      	ldr	r2, [pc, #196]	; (80063cc <scalbn+0xec>)
 8006308:	4296      	cmp	r6, r2
 800630a:	4604      	mov	r4, r0
 800630c:	460d      	mov	r5, r1
 800630e:	460b      	mov	r3, r1
 8006310:	da13      	bge.n	800633a <scalbn+0x5a>
 8006312:	a329      	add	r3, pc, #164	; (adr r3, 80063b8 <scalbn+0xd8>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f7fa f916 	bl	8000548 <__aeabi_dmul>
 800631c:	e00a      	b.n	8006334 <scalbn+0x54>
 800631e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006322:	428a      	cmp	r2, r1
 8006324:	d10c      	bne.n	8006340 <scalbn+0x60>
 8006326:	ee10 2a10 	vmov	r2, s0
 800632a:	462b      	mov	r3, r5
 800632c:	4620      	mov	r0, r4
 800632e:	4629      	mov	r1, r5
 8006330:	f7f9 ff58 	bl	80001e4 <__adddf3>
 8006334:	4604      	mov	r4, r0
 8006336:	460d      	mov	r5, r1
 8006338:	e01b      	b.n	8006372 <scalbn+0x92>
 800633a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800633e:	3a36      	subs	r2, #54	; 0x36
 8006340:	4432      	add	r2, r6
 8006342:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006346:	428a      	cmp	r2, r1
 8006348:	dd0b      	ble.n	8006362 <scalbn+0x82>
 800634a:	ec45 4b11 	vmov	d1, r4, r5
 800634e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80063c0 <scalbn+0xe0>
 8006352:	f000 f8b7 	bl	80064c4 <copysign>
 8006356:	a31a      	add	r3, pc, #104	; (adr r3, 80063c0 <scalbn+0xe0>)
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	ec51 0b10 	vmov	r0, r1, d0
 8006360:	e7da      	b.n	8006318 <scalbn+0x38>
 8006362:	2a00      	cmp	r2, #0
 8006364:	dd08      	ble.n	8006378 <scalbn+0x98>
 8006366:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800636a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800636e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006372:	ec45 4b10 	vmov	d0, r4, r5
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800637c:	da0d      	bge.n	800639a <scalbn+0xba>
 800637e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006382:	429e      	cmp	r6, r3
 8006384:	ec45 4b11 	vmov	d1, r4, r5
 8006388:	dce1      	bgt.n	800634e <scalbn+0x6e>
 800638a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80063b8 <scalbn+0xd8>
 800638e:	f000 f899 	bl	80064c4 <copysign>
 8006392:	a309      	add	r3, pc, #36	; (adr r3, 80063b8 <scalbn+0xd8>)
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	e7e0      	b.n	800635c <scalbn+0x7c>
 800639a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800639e:	3236      	adds	r2, #54	; 0x36
 80063a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80063a8:	4620      	mov	r0, r4
 80063aa:	4629      	mov	r1, r5
 80063ac:	2200      	movs	r2, #0
 80063ae:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <scalbn+0xf0>)
 80063b0:	e7b2      	b.n	8006318 <scalbn+0x38>
 80063b2:	bf00      	nop
 80063b4:	f3af 8000 	nop.w
 80063b8:	c2f8f359 	.word	0xc2f8f359
 80063bc:	01a56e1f 	.word	0x01a56e1f
 80063c0:	8800759c 	.word	0x8800759c
 80063c4:	7e37e43c 	.word	0x7e37e43c
 80063c8:	43500000 	.word	0x43500000
 80063cc:	ffff3cb0 	.word	0xffff3cb0
 80063d0:	3c900000 	.word	0x3c900000

080063d4 <fabsf>:
 80063d4:	ee10 3a10 	vmov	r3, s0
 80063d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063dc:	ee00 3a10 	vmov	s0, r3
 80063e0:	4770      	bx	lr

080063e2 <finitef>:
 80063e2:	ee10 3a10 	vmov	r3, s0
 80063e6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80063ea:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80063ee:	bfac      	ite	ge
 80063f0:	2000      	movge	r0, #0
 80063f2:	2001      	movlt	r0, #1
 80063f4:	4770      	bx	lr
	...

080063f8 <nanf>:
 80063f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006400 <nanf+0x8>
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	7fc00000 	.word	0x7fc00000

08006404 <scalbnf>:
 8006404:	b508      	push	{r3, lr}
 8006406:	ee10 2a10 	vmov	r2, s0
 800640a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800640e:	ed2d 8b02 	vpush	{d8}
 8006412:	eef0 0a40 	vmov.f32	s1, s0
 8006416:	d004      	beq.n	8006422 <scalbnf+0x1e>
 8006418:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800641c:	d306      	bcc.n	800642c <scalbnf+0x28>
 800641e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8006422:	ecbd 8b02 	vpop	{d8}
 8006426:	eeb0 0a60 	vmov.f32	s0, s1
 800642a:	bd08      	pop	{r3, pc}
 800642c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006430:	d21c      	bcs.n	800646c <scalbnf+0x68>
 8006432:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <scalbnf+0xac>)
 8006434:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80064b4 <scalbnf+0xb0>
 8006438:	4298      	cmp	r0, r3
 800643a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800643e:	db10      	blt.n	8006462 <scalbnf+0x5e>
 8006440:	ee10 2a90 	vmov	r2, s1
 8006444:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8006448:	3b19      	subs	r3, #25
 800644a:	4403      	add	r3, r0
 800644c:	2bfe      	cmp	r3, #254	; 0xfe
 800644e:	dd0f      	ble.n	8006470 <scalbnf+0x6c>
 8006450:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80064b8 <scalbnf+0xb4>
 8006454:	eeb0 0a48 	vmov.f32	s0, s16
 8006458:	f000 f841 	bl	80064de <copysignf>
 800645c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8006460:	e7df      	b.n	8006422 <scalbnf+0x1e>
 8006462:	eddf 7a16 	vldr	s15, [pc, #88]	; 80064bc <scalbnf+0xb8>
 8006466:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800646a:	e7da      	b.n	8006422 <scalbnf+0x1e>
 800646c:	0ddb      	lsrs	r3, r3, #23
 800646e:	e7ec      	b.n	800644a <scalbnf+0x46>
 8006470:	2b00      	cmp	r3, #0
 8006472:	dd06      	ble.n	8006482 <scalbnf+0x7e>
 8006474:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006478:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800647c:	ee00 3a90 	vmov	s1, r3
 8006480:	e7cf      	b.n	8006422 <scalbnf+0x1e>
 8006482:	f113 0f16 	cmn.w	r3, #22
 8006486:	da06      	bge.n	8006496 <scalbnf+0x92>
 8006488:	f24c 3350 	movw	r3, #50000	; 0xc350
 800648c:	4298      	cmp	r0, r3
 800648e:	dcdf      	bgt.n	8006450 <scalbnf+0x4c>
 8006490:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80064bc <scalbnf+0xb8>
 8006494:	e7de      	b.n	8006454 <scalbnf+0x50>
 8006496:	3319      	adds	r3, #25
 8006498:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800649c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80064a0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80064c0 <scalbnf+0xbc>
 80064a4:	ee07 3a10 	vmov	s14, r3
 80064a8:	ee67 0a27 	vmul.f32	s1, s14, s15
 80064ac:	e7b9      	b.n	8006422 <scalbnf+0x1e>
 80064ae:	bf00      	nop
 80064b0:	ffff3cb0 	.word	0xffff3cb0
 80064b4:	4c000000 	.word	0x4c000000
 80064b8:	7149f2ca 	.word	0x7149f2ca
 80064bc:	0da24260 	.word	0x0da24260
 80064c0:	33000000 	.word	0x33000000

080064c4 <copysign>:
 80064c4:	ec53 2b10 	vmov	r2, r3, d0
 80064c8:	ee11 0a90 	vmov	r0, s3
 80064cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80064d4:	ea41 0300 	orr.w	r3, r1, r0
 80064d8:	ec43 2b10 	vmov	d0, r2, r3
 80064dc:	4770      	bx	lr

080064de <copysignf>:
 80064de:	ee10 3a10 	vmov	r3, s0
 80064e2:	ee10 2a90 	vmov	r2, s1
 80064e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80064ee:	4313      	orrs	r3, r2
 80064f0:	ee00 3a10 	vmov	s0, r3
 80064f4:	4770      	bx	lr
	...

080064f8 <__errno>:
 80064f8:	4b01      	ldr	r3, [pc, #4]	; (8006500 <__errno+0x8>)
 80064fa:	6818      	ldr	r0, [r3, #0]
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	2000015c 	.word	0x2000015c

08006504 <_init>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	bf00      	nop
 8006508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650a:	bc08      	pop	{r3}
 800650c:	469e      	mov	lr, r3
 800650e:	4770      	bx	lr

08006510 <_fini>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	bf00      	nop
 8006514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006516:	bc08      	pop	{r3}
 8006518:	469e      	mov	lr, r3
 800651a:	4770      	bx	lr
