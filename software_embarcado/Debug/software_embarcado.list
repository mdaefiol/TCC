
software_embarcado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006568  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800669c  0800669c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800669c  0800669c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800669c  0800669c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800669c  0800669c  0001669c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080066a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000010  080066b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080066b4  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5a0  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa0  00000000  00000000  0002c5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  0002f178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ed8  00000000  00000000  0002fcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfbb  00000000  00000000  00046ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829f7  00000000  00000000  00054b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d755a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003234  00000000  00000000  000d75ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800665c 	.word	0x0800665c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800665c 	.word	0x0800665c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <FRAM_ID>:

char bytes_ID[4] = {0};
char bytes_status[3] = {0} ;


void FRAM_ID(void){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2101      	movs	r1, #1
 8000990:	480a      	ldr	r0, [pc, #40]	; (80009bc <FRAM_ID+0x34>)
 8000992:	f001 fd64 	bl	800245e <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDIDI, 1, 100); //envia
 8000996:	2364      	movs	r3, #100	; 0x64
 8000998:	2201      	movs	r2, #1
 800099a:	4909      	ldr	r1, [pc, #36]	; (80009c0 <FRAM_ID+0x38>)
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <FRAM_ID+0x3c>)
 800099e:	f005 f86d 	bl	8005a7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,  (uint8_t *)bytes_ID, 4, 100); //recebe dado
 80009a2:	2364      	movs	r3, #100	; 0x64
 80009a4:	2204      	movs	r2, #4
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <FRAM_ID+0x40>)
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <FRAM_ID+0x3c>)
 80009aa:	f005 f9a3 	bl	8005cf4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2101      	movs	r1, #1
 80009b2:	4802      	ldr	r0, [pc, #8]	; (80009bc <FRAM_ID+0x34>)
 80009b4:	f001 fd53 	bl	800245e <HAL_GPIO_WritePin>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40010c00 	.word	0x40010c00
 80009c0:	20000003 	.word	0x20000003
 80009c4:	2000011c 	.word	0x2000011c
 80009c8:	2000002c 	.word	0x2000002c

080009cc <FRAM_enablewrite>:

void FRAM_enablewrite(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

	//Ativa trava de habilitação de gravação (permite operações de gravação)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2101      	movs	r1, #1
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <FRAM_enablewrite+0x28>)
 80009d6:	f001 fd42 	bl	800245e <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WREN, 1, 100);
 80009da:	2364      	movs	r3, #100	; 0x64
 80009dc:	2201      	movs	r2, #1
 80009de:	4906      	ldr	r1, [pc, #24]	; (80009f8 <FRAM_enablewrite+0x2c>)
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <FRAM_enablewrite+0x30>)
 80009e2:	f005 f84b 	bl	8005a7c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	2101      	movs	r1, #1
 80009ea:	4802      	ldr	r0, [pc, #8]	; (80009f4 <FRAM_enablewrite+0x28>)
 80009ec:	f001 fd37 	bl	800245e <HAL_GPIO_WritePin>

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40010c00 	.word	0x40010c00
 80009f8:	20000002 	.word	0x20000002
 80009fc:	2000011c 	.word	0x2000011c

08000a00 <FRAM_Write>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

}


void FRAM_Write(uint16_t address, uint8_t *data, uint16_t size){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	80fb      	strh	r3, [r7, #6]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	80bb      	strh	r3, [r7, #4]

	// write
	uint8_t addr_high = (address >> 8 ) & 0xFF;
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	0a1b      	lsrs	r3, r3, #8
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_low = address & 0xFF;
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2101      	movs	r1, #1
 8000a24:	4812      	ldr	r0, [pc, #72]	; (8000a70 <FRAM_Write+0x70>)
 8000a26:	f001 fd1a 	bl	800245e <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 100);
 8000a2a:	2364      	movs	r3, #100	; 0x64
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4911      	ldr	r1, [pc, #68]	; (8000a74 <FRAM_Write+0x74>)
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <FRAM_Write+0x78>)
 8000a32:	f005 f823 	bl	8005a7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_high, 1, 100);
 8000a36:	f107 010f 	add.w	r1, r7, #15
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	480e      	ldr	r0, [pc, #56]	; (8000a78 <FRAM_Write+0x78>)
 8000a40:	f005 f81c 	bl	8005a7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_low, 1, 100);
 8000a44:	f107 010e 	add.w	r1, r7, #14
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	480a      	ldr	r0, [pc, #40]	; (8000a78 <FRAM_Write+0x78>)
 8000a4e:	f005 f815 	bl	8005a7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, size, 100);
 8000a52:	88ba      	ldrh	r2, [r7, #4]
 8000a54:	2364      	movs	r3, #100	; 0x64
 8000a56:	6839      	ldr	r1, [r7, #0]
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <FRAM_Write+0x78>)
 8000a5a:	f005 f80f 	bl	8005a7c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2101      	movs	r1, #1
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <FRAM_Write+0x70>)
 8000a64:	f001 fcfb 	bl	800245e <HAL_GPIO_WritePin>

}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40010c00 	.word	0x40010c00
 8000a74:	20000000 	.word	0x20000000
 8000a78:	2000011c 	.word	0x2000011c

08000a7c <FRAM_Read>:

void FRAM_Read(uint16_t address, uint8_t *data_receive, uint16_t size){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	80fb      	strh	r3, [r7, #6]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	80bb      	strh	r3, [r7, #4]

	// read
	uint8_t addr_high = (address >> 8 ) & 0xFF;
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_low = address & 0xFF;
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4812      	ldr	r0, [pc, #72]	; (8000aec <FRAM_Read+0x70>)
 8000aa2:	f001 fcdc 	bl	800245e <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
 8000aa6:	2364      	movs	r3, #100	; 0x64
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4911      	ldr	r1, [pc, #68]	; (8000af0 <FRAM_Read+0x74>)
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <FRAM_Read+0x78>)
 8000aae:	f004 ffe5 	bl	8005a7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_high, 1, 100);
 8000ab2:	f107 010f 	add.w	r1, r7, #15
 8000ab6:	2364      	movs	r3, #100	; 0x64
 8000ab8:	2201      	movs	r2, #1
 8000aba:	480e      	ldr	r0, [pc, #56]	; (8000af4 <FRAM_Read+0x78>)
 8000abc:	f004 ffde 	bl	8005a7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_low, 1, 100);
 8000ac0:	f107 010e 	add.w	r1, r7, #14
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	480a      	ldr	r0, [pc, #40]	; (8000af4 <FRAM_Read+0x78>)
 8000aca:	f004 ffd7 	bl	8005a7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data_receive, size, 100); //recebe dado
 8000ace:	88ba      	ldrh	r2, [r7, #4]
 8000ad0:	2364      	movs	r3, #100	; 0x64
 8000ad2:	6839      	ldr	r1, [r7, #0]
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <FRAM_Read+0x78>)
 8000ad6:	f005 f90d 	bl	8005cf4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2101      	movs	r1, #1
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <FRAM_Read+0x70>)
 8000ae0:	f001 fcbd 	bl	800245e <HAL_GPIO_WritePin>
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	20000001 	.word	0x20000001
 8000af4:	2000011c 	.word	0x2000011c

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b5b0      	push	{r4, r5, r7, lr}
 8000afa:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8000afe:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 ff0e 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f976 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f000 fa94 	bl	8001034 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b0c:	f000 fa74 	bl	8000ff8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b10:	f000 f9b6 	bl	8000e80 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b14:	f000 f9e2 	bl	8000edc <MX_I2C2_Init>
  MX_SPI1_Init();
 8000b18:	f000 fa0e 	bl	8000f38 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b1c:	f000 fa42 	bl	8000fa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // INICIALIZA ESTADO DOS INDICADORES DE PRÉ LANÇAMENTO
	state current_state = PAUSADO;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f887 37fb 	strb.w	r3, [r7, #2043]	; 0x7fb
	data_vehicle data;

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // LED
 8000b26:	2200      	movs	r2, #0
 8000b28:	2108      	movs	r1, #8
 8000b2a:	48ac      	ldr	r0, [pc, #688]	; (8000ddc <main+0x2e4>)
 8000b2c:	f001 fc97 	bl	800245e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // BUZER
 8000b30:	2200      	movs	r2, #0
 8000b32:	2110      	movs	r1, #16
 8000b34:	48a9      	ldr	r0, [pc, #676]	; (8000ddc <main+0x2e4>)
 8000b36:	f001 fc92 	bl	800245e <HAL_GPIO_WritePin>

  // INICIALIZA OS PINOS DE ACIONAR CARGA
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // ACIONA CARGA 1 = 0
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b40:	48a6      	ldr	r0, [pc, #664]	; (8000ddc <main+0x2e4>)
 8000b42:	f001 fc8c 	bl	800245e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // ACIONA CARGA 2 = 0
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4c:	48a3      	ldr	r0, [pc, #652]	; (8000ddc <main+0x2e4>)
 8000b4e:	f001 fc86 	bl	800245e <HAL_GPIO_WritePin>

	pin_state1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // Lê o estado do pino GPIO14 para carga 1
 8000b52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b56:	48a1      	ldr	r0, [pc, #644]	; (8000ddc <main+0x2e4>)
 8000b58:	f001 fc6a 	bl	8002430 <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b9f      	ldr	r3, [pc, #636]	; (8000de0 <main+0x2e8>)
 8000b62:	701a      	strb	r2, [r3, #0]
	pin_state2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); // Lê o estado do pino GPIO15 para carga 2
 8000b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b68:	489c      	ldr	r0, [pc, #624]	; (8000ddc <main+0x2e4>)
 8000b6a:	f001 fc61 	bl	8002430 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b9c      	ldr	r3, [pc, #624]	; (8000de4 <main+0x2ec>)
 8000b74:	701a      	strb	r2, [r3, #0]

  // CONFIGURAÇÃO DE SENSORES
	MPU6050_Config();
 8000b76:	f000 fc97 	bl	80014a8 <MPU6050_Config>
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000b7a:	489b      	ldr	r0, [pc, #620]	; (8000de8 <main+0x2f0>)
 8000b7c:	f001 f994 	bl	8001ea8 <HAL_DMA_IRQHandler>

	BMP280_Config(0x02, 0x05, 0x03, 0x00, 0x04);
 8000b80:	2304      	movs	r3, #4
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2300      	movs	r3, #0
 8000b86:	2203      	movs	r2, #3
 8000b88:	2105      	movs	r1, #5
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f000 fdfc 	bl	8001788 <BMP280_Config>

  // MÉDIA MÓVEL EXPONENCIAL
    AccelData accel_data;
    float ema_x = 0.0, ema_y = 0.0, ema_z = 0.0;
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    float new_x, new_y, new_z;
    int cycle_count = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
    float memory_x[MEMORY_SIZE], memory_y[MEMORY_SIZE], memory_z[MEMORY_SIZE];
    float memory_a[MEMORY_SIZE] = {0};
 8000bae:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000bb2:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f005 fd44 	bl	800664c <memset>
    float data_receive[MEMORY_SIZE];
    //float *memory_x, *memory_y, *memory_z;
    int memory_index = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 * 	uint16_t i;
	for (i = 0; i < 6; i++) {
		memcpy(&data[i], &data_ad[i],1);
	}
*/
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1); // aciona o LED
 8000bca:	2102      	movs	r1, #2
 8000bcc:	4887      	ldr	r0, [pc, #540]	; (8000dec <main+0x2f4>)
 8000bce:	f001 fc5e 	bl	800248e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000bd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd6:	f000 ff05 	bl	80019e4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); // LED INDICAÇÃO AGUARDANDO LANÇAMENTO
 8000bda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bde:	487f      	ldr	r0, [pc, #508]	; (8000ddc <main+0x2e4>)
 8000be0:	f001 fc55 	bl	800248e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000be4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be8:	f000 fefc 	bl	80019e4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8); // LED INDICAÇÃO GRAVANDO DADOS
 8000bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf0:	487a      	ldr	r0, [pc, #488]	; (8000ddc <main+0x2e4>)
 8000bf2:	f001 fc4c 	bl	800248e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000bf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfa:	f000 fef3 	bl	80019e4 <HAL_Delay>

//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET){ // botão pressionado
 8000bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c02:	487a      	ldr	r0, [pc, #488]	; (8000dec <main+0x2f4>)
 8000c04:	f001 fc14 	bl	8002430 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d106      	bne.n	8000c1c <main+0x124>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // aciona o LED
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c14:	4875      	ldr	r0, [pc, #468]	; (8000dec <main+0x2f4>)
 8000c16:	f001 fc22 	bl	800245e <HAL_GPIO_WritePin>
 8000c1a:	e005      	b.n	8000c28 <main+0x130>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);

	}
	else // botão não pressionado
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // desliga o LED
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c22:	4872      	ldr	r0, [pc, #456]	; (8000dec <main+0x2f4>)
 8000c24:	f001 fc1b 	bl	800245e <HAL_GPIO_WritePin>
	}


	while (HAL_DMA_GetState(&hdma_i2c1_rx) != HAL_DMA_STATE_READY);
 8000c28:	bf00      	nop
 8000c2a:	486f      	ldr	r0, [pc, #444]	; (8000de8 <main+0x2f0>)
 8000c2c:	f001 fa42 	bl	80020b4 <HAL_DMA_GetState>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d1f9      	bne.n	8000c2a <main+0x132>
	{
		read_accel();
 8000c36:	f000 fc8d 	bl	8001554 <read_accel>
	}

    new_x = accel_data.Ax; // função que lê a aceleração no eixo X
 8000c3a:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8000c3e:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
    new_y = accel_data.Ay; // função que lê a aceleração no eixo Y
 8000c42:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8000c46:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
    new_z = accel_data.Az; // função que lê a aceleração no eixo Z
 8000c4a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8000c4e:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec

	// Calcular EMA para cada eixo
    ema_x = (1 - ALFA)*ema_x + ALFA *new_x;
 8000c52:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 8000c56:	f7ff fbdd 	bl	8000414 <__aeabi_f2d>
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	4b64      	ldr	r3, [pc, #400]	; (8000df0 <main+0x2f8>)
 8000c60:	f7ff fc30 	bl	80004c4 <__aeabi_dmul>
 8000c64:	4602      	mov	r2, r0
 8000c66:	460b      	mov	r3, r1
 8000c68:	4614      	mov	r4, r2
 8000c6a:	461d      	mov	r5, r3
 8000c6c:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	; 0x7f4
 8000c70:	f7ff fbd0 	bl	8000414 <__aeabi_f2d>
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	4b5d      	ldr	r3, [pc, #372]	; (8000df0 <main+0x2f8>)
 8000c7a:	f7ff fc23 	bl	80004c4 <__aeabi_dmul>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4620      	mov	r0, r4
 8000c84:	4629      	mov	r1, r5
 8000c86:	f7ff fa67 	bl	8000158 <__adddf3>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4619      	mov	r1, r3
 8000c92:	f7ff fe29 	bl	80008e8 <__aeabi_d2f>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
    ema_y = (1 - ALFA)*ema_y + ALFA *new_y;
 8000c9c:	f8d7 0808 	ldr.w	r0, [r7, #2056]	; 0x808
 8000ca0:	f7ff fbb8 	bl	8000414 <__aeabi_f2d>
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	4b51      	ldr	r3, [pc, #324]	; (8000df0 <main+0x2f8>)
 8000caa:	f7ff fc0b 	bl	80004c4 <__aeabi_dmul>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4614      	mov	r4, r2
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	f8d7 07f0 	ldr.w	r0, [r7, #2032]	; 0x7f0
 8000cba:	f7ff fbab 	bl	8000414 <__aeabi_f2d>
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	4b4b      	ldr	r3, [pc, #300]	; (8000df0 <main+0x2f8>)
 8000cc4:	f7ff fbfe 	bl	80004c4 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	f7ff fa42 	bl	8000158 <__adddf3>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4610      	mov	r0, r2
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f7ff fe04 	bl	80008e8 <__aeabi_d2f>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    ema_z = (1 - ALFA)*ema_z + ALFA *new_z;
 8000ce6:	f8d7 0804 	ldr.w	r0, [r7, #2052]	; 0x804
 8000cea:	f7ff fb93 	bl	8000414 <__aeabi_f2d>
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	4b3f      	ldr	r3, [pc, #252]	; (8000df0 <main+0x2f8>)
 8000cf4:	f7ff fbe6 	bl	80004c4 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	461d      	mov	r5, r3
 8000d00:	f8d7 07ec 	ldr.w	r0, [r7, #2028]	; 0x7ec
 8000d04:	f7ff fb86 	bl	8000414 <__aeabi_f2d>
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <main+0x2f8>)
 8000d0e:	f7ff fbd9 	bl	80004c4 <__aeabi_dmul>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4620      	mov	r0, r4
 8000d18:	4629      	mov	r1, r5
 8000d1a:	f7ff fa1d 	bl	8000158 <__adddf3>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff fddf 	bl	80008e8 <__aeabi_d2f>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    cycle_count++;
 8000d30:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8000d34:	3301      	adds	r3, #1
 8000d36:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

    if (cycle_count == CYCLES_TO_STORE) {
 8000d3a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8000d3e:	2b14      	cmp	r3, #20
 8000d40:	d13d      	bne.n	8000dbe <main+0x2c6>
    	memory_x[memory_index] = ema_x;
 8000d42:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000d46:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000d4a:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 8000d4e:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8000d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	memory_y[memory_index] = ema_y;
 8000d56:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000d5a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8000d5e:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 8000d62:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8000d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	memory_z[memory_index] = ema_z;
 8000d6a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000d6e:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8000d72:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 8000d76:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 8000d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	memory_index++;
 8000d7e:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8000d82:	3301      	adds	r3, #1
 8000d84:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
    	cycle_count = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

    	if (memory_index == MEMORY_SIZE) {
 8000d8e:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8000d92:	2b64      	cmp	r3, #100	; 0x64
 8000d94:	d113      	bne.n	8000dbe <main+0x2c6>
    		// Enviar valores armazenados na FRAM
    		FRAM_enablewrite();
 8000d96:	f7ff fe19 	bl	80009cc <FRAM_enablewrite>
    		FRAM_Write(0x6000, memory_y, MEMORY_SIZE);
 8000d9a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8000d9e:	2264      	movs	r2, #100	; 0x64
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8000da6:	f7ff fe2b 	bl	8000a00 <FRAM_Write>
    		FRAM_Read(0x6000, data_receive, MEMORY_SIZE);
 8000daa:	463b      	mov	r3, r7
 8000dac:	2264      	movs	r2, #100	; 0x64
 8000dae:	4619      	mov	r1, r3
 8000db0:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8000db4:	f7ff fe62 	bl	8000a7c <FRAM_Read>
    		memory_index = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc

    }
   // free(memory_x);
   // free(memory_y);
   // free(memory_z);
    FRAM_ID();
 8000dbe:	f7ff fde3 	bl	8000988 <FRAM_ID>
   //FRAM_enablewrite();
   // FRAM_Write(0x6000, memory_a, MEMORY_SIZE);
    FRAM_Read(0x6000, data_receive, MEMORY_SIZE);
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2264      	movs	r2, #100	; 0x64
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8000dcc:	f7ff fe56 	bl	8000a7c <FRAM_Read>
	HAL_Delay(300);
 8000dd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dd4:	f000 fe06 	bl	80019e4 <HAL_Delay>
  {
 8000dd8:	e6f7      	b.n	8000bca <main+0xd2>
 8000dda:	bf00      	nop
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	200001b8 	.word	0x200001b8
 8000de4:	200001b9 	.word	0x200001b9
 8000de8:	200000d8 	.word	0x200000d8
 8000dec:	40010800 	.word	0x40010800
 8000df0:	3fe00000 	.word	0x3fe00000

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	; 0x40
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	2228      	movs	r2, #40	; 0x28
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fc22 	bl	800664c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 f97f 	bl	8005140 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e48:	f000 f970 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e50:	2302      	movs	r3, #2
 8000e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2102      	movs	r1, #2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fbec 	bl	8005644 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e72:	f000 f95b 	bl	800112c <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3740      	adds	r7, #64	; 0x40
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e86:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <MX_I2C1_Init+0x54>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e8c:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_I2C1_Init+0x58>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000ebe:	f001 faff 	bl	80024c0 <HAL_I2C_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ec8:	f000 f930 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000030 	.word	0x20000030
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	00061a80 	.word	0x00061a80

08000edc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <MX_I2C2_Init+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_I2C2_Init+0x58>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000f1a:	f001 fad1 	bl	80024c0 <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 f902 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000084 	.word	0x20000084
 8000f30:	40005800 	.word	0x40005800
 8000f34:	00061a80 	.word	0x00061a80

08000f38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <MX_SPI1_Init+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f6c:	2218      	movs	r2, #24
 8000f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f84:	220a      	movs	r2, #10
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f8a:	f004 fcf3 	bl	8005974 <HAL_SPI_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f94:	f000 f8ca 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000011c 	.word	0x2000011c
 8000fa0:	40013000 	.word	0x40013000

08000fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_USART2_UART_Init+0x50>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	f005 fa36 	bl	800644c <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fe6:	f000 f8a1 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000174 	.word	0x20000174
 8000ff4:	40004400 	.word	0x40004400

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_DMA_Init+0x38>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <MX_DMA_Init+0x38>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_DMA_Init+0x38>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2011      	movs	r0, #17
 800101c:	f000 fddd 	bl	8001bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001020:	2011      	movs	r0, #17
 8001022:	f000 fdf6 	bl	8001c12 <HAL_NVIC_EnableIRQ>

}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001048:	4b35      	ldr	r3, [pc, #212]	; (8001120 <MX_GPIO_Init+0xec>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a34      	ldr	r2, [pc, #208]	; (8001120 <MX_GPIO_Init+0xec>)
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <MX_GPIO_Init+0xec>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0320 	and.w	r3, r3, #32
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <MX_GPIO_Init+0xec>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a2e      	ldr	r2, [pc, #184]	; (8001120 <MX_GPIO_Init+0xec>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <MX_GPIO_Init+0xec>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <MX_GPIO_Init+0xec>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a28      	ldr	r2, [pc, #160]	; (8001120 <MX_GPIO_Init+0xec>)
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <MX_GPIO_Init+0xec>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f240 5102 	movw	r1, #1282	; 0x502
 8001096:	4823      	ldr	r0, [pc, #140]	; (8001124 <MX_GPIO_Init+0xf0>)
 8001098:	f001 f9e1 	bl	800245e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8
 800109c:	2200      	movs	r2, #0
 800109e:	f243 3101 	movw	r1, #13057	; 0x3301
 80010a2:	4821      	ldr	r0, [pc, #132]	; (8001128 <MX_GPIO_Init+0xf4>)
 80010a4:	f001 f9db 	bl	800245e <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10;
 80010a8:	f240 5302 	movw	r3, #1282	; 0x502
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4619      	mov	r1, r3
 80010c0:	4818      	ldr	r0, [pc, #96]	; (8001124 <MX_GPIO_Init+0xf0>)
 80010c2:	f001 f831 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8
 80010c6:	f243 3301 	movw	r3, #13057	; 0x3301
 80010ca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4812      	ldr	r0, [pc, #72]	; (8001128 <MX_GPIO_Init+0xf4>)
 80010e0:	f001 f822 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4619      	mov	r1, r3
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <MX_GPIO_Init+0xf4>)
 80010fa:	f001 f815 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_GPIO_Init+0xf0>)
 8001114:	f001 f808 	bl	8002128 <HAL_GPIO_Init>

}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000
 8001124:	40010800 	.word	0x40010800
 8001128:	40010c00 	.word	0x40010c00

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	e7fe      	b.n	8001134 <Error_Handler+0x8>
	...

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_MspInit+0x5c>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_MspInit+0x5c>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6193      	str	r3, [r2, #24]
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_MspInit+0x5c>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_MspInit+0x5c>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_MspInit+0x5c>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_MspInit+0x5c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_MspInit+0x60>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_MspInit+0x60>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000

0800119c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <HAL_I2C_MspInit+0x134>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d152      	bne.n	8001262 <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b45      	ldr	r3, [pc, #276]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a44      	ldr	r2, [pc, #272]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b42      	ldr	r3, [pc, #264]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011d4:	23c0      	movs	r3, #192	; 0xc0
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d8:	2312      	movs	r3, #18
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4619      	mov	r1, r3
 80011e6:	483c      	ldr	r0, [pc, #240]	; (80012d8 <HAL_I2C_MspInit+0x13c>)
 80011e8:	f000 ff9e 	bl	8002128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ec:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	4a38      	ldr	r2, [pc, #224]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 80011f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f6:	61d3      	str	r3, [r2, #28]
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001204:	4b35      	ldr	r3, [pc, #212]	; (80012dc <HAL_I2C_MspInit+0x140>)
 8001206:	4a36      	ldr	r2, [pc, #216]	; (80012e0 <HAL_I2C_MspInit+0x144>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_I2C_MspInit+0x140>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_I2C_MspInit+0x140>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <HAL_I2C_MspInit+0x140>)
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_I2C_MspInit+0x140>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <HAL_I2C_MspInit+0x140>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <HAL_I2C_MspInit+0x140>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_I2C_MspInit+0x140>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001234:	4829      	ldr	r0, [pc, #164]	; (80012dc <HAL_I2C_MspInit+0x140>)
 8001236:	f000 fd07 	bl	8001c48 <HAL_DMA_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001240:	f7ff ff74 	bl	800112c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a25      	ldr	r2, [pc, #148]	; (80012dc <HAL_I2C_MspInit+0x140>)
 8001248:	639a      	str	r2, [r3, #56]	; 0x38
 800124a:	4a24      	ldr	r2, [pc, #144]	; (80012dc <HAL_I2C_MspInit+0x140>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	201f      	movs	r0, #31
 8001256:	f000 fcc0 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800125a:	201f      	movs	r0, #31
 800125c:	f000 fcd9 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001260:	e031      	b.n	80012c6 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <HAL_I2C_MspInit+0x148>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d12c      	bne.n	80012c6 <HAL_I2C_MspInit+0x12a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001284:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128a:	2312      	movs	r3, #18
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4619      	mov	r1, r3
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <HAL_I2C_MspInit+0x13c>)
 800129a:	f000 ff45 	bl	8002128 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 80012a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_I2C_MspInit+0x138>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2021      	movs	r0, #33	; 0x21
 80012bc:	f000 fc8d 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80012c0:	2021      	movs	r0, #33	; 0x21
 80012c2:	f000 fca6 	bl	8001c12 <HAL_NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010c00 	.word	0x40010c00
 80012dc:	200000d8 	.word	0x200000d8
 80012e0:	40020080 	.word	0x40020080
 80012e4:	40005800 	.word	0x40005800

080012e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <HAL_SPI_MspInit+0x88>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d12f      	bne.n	8001368 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 800130e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a13      	ldr	r2, [pc, #76]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001338:	23a0      	movs	r3, #160	; 0xa0
 800133a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <HAL_SPI_MspInit+0x90>)
 800134c:	f000 feec 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001350:	2340      	movs	r3, #64	; 0x40
 8001352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_SPI_MspInit+0x90>)
 8001364:	f000 fee0 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40013000 	.word	0x40013000
 8001374:	40021000 	.word	0x40021000
 8001378:	40010800 	.word	0x40010800

0800137c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <HAL_UART_MspInit+0x88>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d12f      	bne.n	80013fc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_UART_MspInit+0x8c>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a6:	61d3      	str	r3, [r2, #28]
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a13      	ldr	r2, [pc, #76]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013cc:	2304      	movs	r3, #4
 80013ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	480b      	ldr	r0, [pc, #44]	; (800140c <HAL_UART_MspInit+0x90>)
 80013e0:	f000 fea2 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e4:	2308      	movs	r3, #8
 80013e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0x90>)
 80013f8:	f000 fe96 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40004400 	.word	0x40004400
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 faa9 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA1_Channel7_IRQHandler+0x10>)
 8001466:	f000 fd1f 	bl	8001ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200000d8 	.word	0x200000d8

08001474 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <I2C1_EV_IRQHandler+0x10>)
 800147a:	f001 fe45 	bl	8003108 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000030 	.word	0x20000030

08001488 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <I2C2_EV_IRQHandler+0x10>)
 800148e:	f001 fe3b 	bl	8003108 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000084 	.word	0x20000084

0800149c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <MPU6050_Config>:
uint16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW, Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;
AccelData acc_data;
GyroData gy_data;

void MPU6050_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af04      	add	r7, sp, #16
	//MPU6050
	uint8_t check;
	uint8_t data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000); 	// WHO_AM_I ~ 6050
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	2301      	movs	r3, #1
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2301      	movs	r3, #1
 80014be:	2275      	movs	r2, #117	; 0x75
 80014c0:	21d0      	movs	r1, #208	; 0xd0
 80014c2:	4823      	ldr	r0, [pc, #140]	; (8001550 <MPU6050_Config+0xa8>)
 80014c4:	f001 fa3a 	bl	800293c <HAL_I2C_Mem_Read>

	if (check == 104) // devise is present
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b68      	cmp	r3, #104	; 0x68
 80014cc:	d13b      	bne.n	8001546 <MPU6050_Config+0x9e>
	{
		// power management register 0x6B we should write all 0s to wake the sensor up
		data = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2301      	movs	r3, #1
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	1dbb      	adds	r3, r7, #6
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2301      	movs	r3, #1
 80014e2:	226b      	movs	r2, #107	; 0x6b
 80014e4:	21d0      	movs	r1, #208	; 0xd0
 80014e6:	481a      	ldr	r0, [pc, #104]	; (8001550 <MPU6050_Config+0xa8>)
 80014e8:	f001 f92e 	bl	8002748 <HAL_I2C_Mem_Write>

		// set DATA RATE of 1KHz by writing SMPLRT_DIV register
		data  =  0x07;
 80014ec:	2307      	movs	r3, #7
 80014ee:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 80014f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	2301      	movs	r3, #1
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	1dbb      	adds	r3, r7, #6
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2301      	movs	r3, #1
 8001500:	2219      	movs	r2, #25
 8001502:	21d0      	movs	r1, #208	; 0xd0
 8001504:	4812      	ldr	r0, [pc, #72]	; (8001550 <MPU6050_Config+0xa8>)
 8001506:	f001 f91f 	bl	8002748 <HAL_I2C_Mem_Write>

		// set accelerometer e gyroscopic configuration in ACCEL_CONFIG and GYRO_CONFIG
		data = 0x00;
 800150a:	2300      	movs	r3, #0
 800150c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	2301      	movs	r3, #1
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	1dbb      	adds	r3, r7, #6
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	2219      	movs	r2, #25
 8001520:	21d0      	movs	r1, #208	; 0xd0
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <MPU6050_Config+0xa8>)
 8001524:	f001 f910 	bl	8002748 <HAL_I2C_Mem_Write>

		data = 0x00;
 8001528:	2300      	movs	r3, #0
 800152a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 800152c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	2301      	movs	r3, #1
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	1dbb      	adds	r3, r7, #6
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2301      	movs	r3, #1
 800153c:	221b      	movs	r2, #27
 800153e:	21d0      	movs	r1, #208	; 0xd0
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <MPU6050_Config+0xa8>)
 8001542:	f001 f901 	bl	8002748 <HAL_I2C_Mem_Write>
	}
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000030 	.word	0x20000030

08001554 <read_accel>:

void read_accel(void)
//void read_accel(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af02      	add	r7, sp, #8
	uint8_t rec_data[6];

	// Lê 6 BYTES de dados a partir do registrador ACCEL_XOUT_H [ACELERÔMETRO]
	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data, 6);
 800155a:	2306      	movs	r3, #6
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	463b      	mov	r3, r7
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	223b      	movs	r2, #59	; 0x3b
 8001566:	21d0      	movs	r1, #208	; 0xd0
 8001568:	482e      	ldr	r0, [pc, #184]	; (8001624 <read_accel+0xd0>)
 800156a:	f001 fc4f 	bl	8002e0c <HAL_I2C_Mem_Read_DMA>

	/* converter os valores RAW em aceleração em 'g'
	   dividir de acordo com o valor Full scale definido em FS_SEL
	   FS_SEL = 0. Então, deve ser dividido por 16384 */

	Accel_X_RAW = (int16_t)(rec_data[0] << 8 | rec_data [1]);
 800156e:	783b      	ldrb	r3, [r7, #0]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21b      	sxth	r3, r3
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <read_accel+0xd4>)
 8001580:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(rec_data[2] << 8 | rec_data [3]);
 8001582:	78bb      	ldrb	r3, [r7, #2]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21b      	sxth	r3, r3
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <read_accel+0xd8>)
 8001594:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(rec_data[4] << 8 | rec_data [5]);
 8001596:	793b      	ldrb	r3, [r7, #4]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	797b      	ldrb	r3, [r7, #5]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <read_accel+0xdc>)
 80015a8:	801a      	strh	r2, [r3, #0]

	acc_data.Ax = Accel_X_RAW/16384.0;  // get the float g
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <read_accel+0xd4>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff1e 	bl	80003f0 <__aeabi_i2d>
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <read_accel+0xe0>)
 80015ba:	f7ff f8ad 	bl	8000718 <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff f98f 	bl	80008e8 <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a1a      	ldr	r2, [pc, #104]	; (8001638 <read_accel+0xe4>)
 80015ce:	6013      	str	r3, [r2, #0]
	acc_data.Ay = Accel_Y_RAW/16384.0;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <read_accel+0xd8>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff0b 	bl	80003f0 <__aeabi_i2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <read_accel+0xe0>)
 80015e0:	f7ff f89a 	bl	8000718 <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff f97c 	bl	80008e8 <__aeabi_d2f>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a11      	ldr	r2, [pc, #68]	; (8001638 <read_accel+0xe4>)
 80015f4:	6053      	str	r3, [r2, #4]
	acc_data.Az = Accel_Z_RAW/16384.0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <read_accel+0xdc>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fef8 	bl	80003f0 <__aeabi_i2d>
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <read_accel+0xe0>)
 8001606:	f7ff f887 	bl	8000718 <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff f969 	bl	80008e8 <__aeabi_d2f>
 8001616:	4603      	mov	r3, r0
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <read_accel+0xe4>)
 800161a:	6093      	str	r3, [r2, #8]
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000030 	.word	0x20000030
 8001628:	200001ba 	.word	0x200001ba
 800162c:	200001bc 	.word	0x200001bc
 8001630:	200001be 	.word	0x200001be
 8001634:	40d00000 	.word	0x40d00000
 8001638:	200001c0 	.word	0x200001c0

0800163c <dataRead>:

float pressureSeaLevel = 101325;

// leitura de corte, sao dados armazenados na memoria do sensor (ja vem de fabrica) e precisam ser utilizados para calculos dos novos valores
void dataRead(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, 0x88, 1, trimdata, 25, 1000);
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	2319      	movs	r3, #25
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	463b      	mov	r3, r7
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	2288      	movs	r2, #136	; 0x88
 8001654:	21ec      	movs	r1, #236	; 0xec
 8001656:	483f      	ldr	r0, [pc, #252]	; (8001754 <dataRead+0x118>)
 8001658:	f001 f970 	bl	800293c <HAL_I2C_Mem_Read>

	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	783b      	ldrb	r3, [r7, #0]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <dataRead+0x11c>)
 800166e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21a      	sxth	r2, r3
 8001676:	78bb      	ldrb	r3, [r7, #2]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21b      	sxth	r3, r3
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b36      	ldr	r3, [pc, #216]	; (800175c <dataRead+0x120>)
 8001682:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001684:	797b      	ldrb	r3, [r7, #5]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	b21a      	sxth	r2, r3
 800168a:	793b      	ldrb	r3, [r7, #4]
 800168c:	b21b      	sxth	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b21b      	sxth	r3, r3
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <dataRead+0x124>)
 8001696:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	b21a      	sxth	r2, r3
 800169e:	797b      	ldrb	r3, [r7, #5]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <dataRead+0x128>)
 80016aa:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80016ac:	7a7b      	ldrb	r3, [r7, #9]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	79bb      	ldrb	r3, [r7, #6]
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <dataRead+0x12c>)
 80016be:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80016c0:	7afb      	ldrb	r3, [r7, #11]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	7abb      	ldrb	r3, [r7, #10]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <dataRead+0x130>)
 80016d2:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80016d4:	7b7b      	ldrb	r3, [r7, #13]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	7b3b      	ldrb	r3, [r7, #12]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <dataRead+0x134>)
 80016e6:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <dataRead+0x138>)
 80016fa:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80016fc:	7c7b      	ldrb	r3, [r7, #17]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b21a      	sxth	r2, r3
 8001702:	7c3b      	ldrb	r3, [r7, #16]
 8001704:	b21b      	sxth	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b21b      	sxth	r3, r3
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <dataRead+0x13c>)
 800170e:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001710:	7cfb      	ldrb	r3, [r7, #19]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	7cbb      	ldrb	r3, [r7, #18]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b21b      	sxth	r3, r3
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <dataRead+0x140>)
 8001722:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001724:	7d7b      	ldrb	r3, [r7, #21]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	7d3b      	ldrb	r3, [r7, #20]
 800172c:	b21b      	sxth	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b21b      	sxth	r3, r3
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <dataRead+0x144>)
 8001736:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b21a      	sxth	r2, r3
 800173e:	7dbb      	ldrb	r3, [r7, #22]
 8001740:	b21b      	sxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b21b      	sxth	r3, r3
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <dataRead+0x148>)
 800174a:	801a      	strh	r2, [r3, #0]

}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000084 	.word	0x20000084
 8001758:	200001cc 	.word	0x200001cc
 800175c:	200001d0 	.word	0x200001d0
 8001760:	200001d2 	.word	0x200001d2
 8001764:	200001ce 	.word	0x200001ce
 8001768:	200001d4 	.word	0x200001d4
 800176c:	200001d6 	.word	0x200001d6
 8001770:	200001d8 	.word	0x200001d8
 8001774:	200001da 	.word	0x200001da
 8001778:	200001dc 	.word	0x200001dc
 800177c:	200001de 	.word	0x200001de
 8001780:	200001e0 	.word	0x200001e0
 8001784:	200001e2 	.word	0x200001e2

08001788 <BMP280_Config>:

}


int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af04      	add	r7, sp, #16
 800178e:	4604      	mov	r4, r0
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4623      	mov	r3, r4
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	4603      	mov	r3, r0
 800179c:	71bb      	strb	r3, [r7, #6]
 800179e:	460b      	mov	r3, r1
 80017a0:	717b      	strb	r3, [r7, #5]
 80017a2:	4613      	mov	r3, r2
 80017a4:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	dataRead();
 80017a6:	f7ff ff49 	bl	800163c <dataRead>

	uint8_t datatowrite = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80017b2:	23b6      	movs	r3, #182	; 0xb6
 80017b4:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80017b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	2301      	movs	r3, #1
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	f107 030f 	add.w	r3, r7, #15
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2301      	movs	r3, #1
 80017c8:	22e0      	movs	r2, #224	; 0xe0
 80017ca:	21ec      	movs	r1, #236	; 0xec
 80017cc:	4840      	ldr	r0, [pc, #256]	; (80018d0 <BMP280_Config+0x148>)
 80017ce:	f000 ffbb 	bl	8002748 <HAL_I2C_Mem_Write>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <BMP280_Config+0x56>
	{
		return -1;
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
 80017dc:	e074      	b.n	80018c8 <BMP280_Config+0x140>
	}

	HAL_Delay (100);
 80017de:	2064      	movs	r0, #100	; 0x64
 80017e0:	f000 f900 	bl	80019e4 <HAL_Delay>


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80017e4:	793b      	ldrb	r3, [r7, #4]
 80017e6:	015b      	lsls	r3, r3, #5
 80017e8:	b25a      	sxtb	r2, r3
 80017ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80017fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fe:	9302      	str	r3, [sp, #8]
 8001800:	2301      	movs	r3, #1
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	f107 030f 	add.w	r3, r7, #15
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2301      	movs	r3, #1
 800180c:	22f5      	movs	r2, #245	; 0xf5
 800180e:	21ec      	movs	r1, #236	; 0xec
 8001810:	482f      	ldr	r0, [pc, #188]	; (80018d0 <BMP280_Config+0x148>)
 8001812:	f000 ff99 	bl	8002748 <HAL_I2C_Mem_Write>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <BMP280_Config+0x9a>
	{
		return -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
 8001820:	e052      	b.n	80018c8 <BMP280_Config+0x140>
	}
	HAL_Delay (100);
 8001822:	2064      	movs	r0, #100	; 0x64
 8001824:	f000 f8de 	bl	80019e4 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	2301      	movs	r3, #1
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	f107 030e 	add.w	r3, r7, #14
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2301      	movs	r3, #1
 800183a:	22f5      	movs	r2, #245	; 0xf5
 800183c:	21ec      	movs	r1, #236	; 0xec
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <BMP280_Config+0x148>)
 8001840:	f001 f87c 	bl	800293c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001844:	7bba      	ldrb	r2, [r7, #14]
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	429a      	cmp	r2, r3
 800184a:	d002      	beq.n	8001852 <BMP280_Config+0xca>
	{
		return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	e03a      	b.n	80018c8 <BMP280_Config+0x140>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	015b      	lsls	r3, r3, #5
 8001856:	b25a      	sxtb	r2, r3
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	b25b      	sxtb	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b25a      	sxtb	r2, r3
 8001862:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	9302      	str	r3, [sp, #8]
 8001874:	2301      	movs	r3, #1
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	f107 030f 	add.w	r3, r7, #15
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2301      	movs	r3, #1
 8001880:	22f4      	movs	r2, #244	; 0xf4
 8001882:	21ec      	movs	r1, #236	; 0xec
 8001884:	4812      	ldr	r0, [pc, #72]	; (80018d0 <BMP280_Config+0x148>)
 8001886:	f000 ff5f 	bl	8002748 <HAL_I2C_Mem_Write>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <BMP280_Config+0x10e>
	{
		return -1;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	e018      	b.n	80018c8 <BMP280_Config+0x140>
	}
	HAL_Delay (100);
 8001896:	2064      	movs	r0, #100	; 0x64
 8001898:	f000 f8a4 	bl	80019e4 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800189c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	2301      	movs	r3, #1
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	f107 030e 	add.w	r3, r7, #14
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2301      	movs	r3, #1
 80018ae:	22f4      	movs	r2, #244	; 0xf4
 80018b0:	21ec      	movs	r1, #236	; 0xec
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <BMP280_Config+0x148>)
 80018b4:	f001 f842 	bl	800293c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80018b8:	7bba      	ldrb	r2, [r7, #14]
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d002      	beq.n	80018c6 <BMP280_Config+0x13e>
	{
		return -1;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
 80018c4:	e000      	b.n	80018c8 <BMP280_Config+0x140>
	}

	return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	20000084 	.word	0x20000084

080018d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018fa:	f7ff fdcf 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f004 fe81 	bl	8006604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001902:	f7ff f8f9 	bl	8000af8 <main>
  bx lr
 8001906:	4770      	bx	lr
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001910:	080066a4 	.word	0x080066a4
  ldr r2, =_sbss
 8001914:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001918:	200001e8 	.word	0x200001e8

0800191c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC1_2_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_Init+0x28>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_Init+0x28>)
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 f947 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	200f      	movs	r0, #15
 8001938:	f000 f808 	bl	800194c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff fbfc 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x54>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_InitTick+0x58>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f95f 	bl	8001c2e <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d80a      	bhi.n	8001996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f000 f927 	bl	8001bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <HAL_InitTick+0x5c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000004 	.word	0x20000004
 80019a4:	2000000c 	.word	0x2000000c
 80019a8:	20000008 	.word	0x20000008

080019ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_IncTick+0x1c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_IncTick+0x20>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_IncTick+0x20>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	2000000c 	.word	0x2000000c
 80019cc:	200001e4 	.word	0x200001e4

080019d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_GetTick+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	200001e4 	.word	0x200001e4

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff fff0 	bl	80019d0 <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_Delay+0x44>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffe0 	bl	80019d0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000000c 	.word	0x2000000c

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4906      	ldr	r1, [pc, #24]	; (8001ac4 <__NVIC_EnableIRQ+0x34>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f7ff ff90 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff2d 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff42 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff90 	bl	8001b1c <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5f 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff35 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa2 	bl	8001b80 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e043      	b.n	8001ce6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_DMA_Init+0xa8>)
 8001c66:	4413      	add	r3, r2
 8001c68:	4a22      	ldr	r2, [pc, #136]	; (8001cf4 <HAL_DMA_Init+0xac>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	009a      	lsls	r2, r3, #2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_DMA_Init+0xb0>)
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	bffdfff8 	.word	0xbffdfff8
 8001cf4:	cccccccd 	.word	0xcccccccd
 8001cf8:	40020000 	.word	0x40020000

08001cfc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_DMA_Start_IT+0x20>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e04a      	b.n	8001db2 <HAL_DMA_Start_IT+0xb6>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d13a      	bne.n	8001da4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2202      	movs	r2, #2
 8001d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f9ba 	bl	80020cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 020e 	orr.w	r2, r2, #14
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e00f      	b.n	8001d92 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0204 	bic.w	r2, r2, #4
 8001d80:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 020a 	orr.w	r2, r2, #10
 8001d90:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	e005      	b.n	8001db0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
 8001dae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d005      	beq.n	8001dde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e051      	b.n	8001e82 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 020e 	bic.w	r2, r2, #14
 8001dec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_DMA_Abort_IT+0xd0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d029      	beq.n	8001e5c <HAL_DMA_Abort_IT+0xa0>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <HAL_DMA_Abort_IT+0xd4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d022      	beq.n	8001e58 <HAL_DMA_Abort_IT+0x9c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_DMA_Abort_IT+0xd8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d01a      	beq.n	8001e52 <HAL_DMA_Abort_IT+0x96>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_DMA_Abort_IT+0xdc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d012      	beq.n	8001e4c <HAL_DMA_Abort_IT+0x90>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_DMA_Abort_IT+0xe0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00a      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x8a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1a      	ldr	r2, [pc, #104]	; (8001ea0 <HAL_DMA_Abort_IT+0xe4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d102      	bne.n	8001e40 <HAL_DMA_Abort_IT+0x84>
 8001e3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e3e:	e00e      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e44:	e00b      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e4a:	e008      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	e005      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e56:	e002      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e58:	2310      	movs	r3, #16
 8001e5a:	e000      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_DMA_Abort_IT+0xe8>)
 8001e60:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
    } 
  }
  return status;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40020008 	.word	0x40020008
 8001e90:	4002001c 	.word	0x4002001c
 8001e94:	40020030 	.word	0x40020030
 8001e98:	40020044 	.word	0x40020044
 8001e9c:	40020058 	.word	0x40020058
 8001ea0:	4002006c 	.word	0x4002006c
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d04f      	beq.n	8001f70 <HAL_DMA_IRQHandler+0xc8>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d04a      	beq.n	8001f70 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0204 	bic.w	r2, r2, #4
 8001ef6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a66      	ldr	r2, [pc, #408]	; (8002098 <HAL_DMA_IRQHandler+0x1f0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d029      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xae>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a65      	ldr	r2, [pc, #404]	; (800209c <HAL_DMA_IRQHandler+0x1f4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_IRQHandler+0xaa>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a63      	ldr	r2, [pc, #396]	; (80020a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01a      	beq.n	8001f4c <HAL_DMA_IRQHandler+0xa4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a62      	ldr	r2, [pc, #392]	; (80020a4 <HAL_DMA_IRQHandler+0x1fc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d012      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x9e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_DMA_IRQHandler+0x200>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00a      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x98>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a5f      	ldr	r2, [pc, #380]	; (80020ac <HAL_DMA_IRQHandler+0x204>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d102      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x92>
 8001f34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f38:	e00e      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f3e:	e00b      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f44:	e008      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f4a:	e005      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f50:	e002      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f52:	2340      	movs	r3, #64	; 0x40
 8001f54:	e000      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f56:	2304      	movs	r3, #4
 8001f58:	4a55      	ldr	r2, [pc, #340]	; (80020b0 <HAL_DMA_IRQHandler+0x208>)
 8001f5a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8094 	beq.w	800208e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f6e:	e08e      	b.n	800208e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	2202      	movs	r2, #2
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d056      	beq.n	800202e <HAL_DMA_IRQHandler+0x186>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d051      	beq.n	800202e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10b      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 020a 	bic.w	r2, r2, #10
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a38      	ldr	r2, [pc, #224]	; (8002098 <HAL_DMA_IRQHandler+0x1f0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d029      	beq.n	800200e <HAL_DMA_IRQHandler+0x166>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a37      	ldr	r2, [pc, #220]	; (800209c <HAL_DMA_IRQHandler+0x1f4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <HAL_DMA_IRQHandler+0x162>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a35      	ldr	r2, [pc, #212]	; (80020a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01a      	beq.n	8002004 <HAL_DMA_IRQHandler+0x15c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <HAL_DMA_IRQHandler+0x1fc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d012      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x156>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a32      	ldr	r2, [pc, #200]	; (80020a8 <HAL_DMA_IRQHandler+0x200>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x150>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a31      	ldr	r2, [pc, #196]	; (80020ac <HAL_DMA_IRQHandler+0x204>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d102      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x14a>
 8001fec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ff0:	e00e      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	e00b      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 8001ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffc:	e008      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 8001ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002002:	e005      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 8002004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002008:	e002      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 800200a:	2320      	movs	r3, #32
 800200c:	e000      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 800200e:	2302      	movs	r3, #2
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_DMA_IRQHandler+0x208>)
 8002012:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	2b00      	cmp	r3, #0
 8002022:	d034      	beq.n	800208e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800202c:	e02f      	b.n	800208e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2208      	movs	r2, #8
 8002034:	409a      	lsls	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d028      	beq.n	8002090 <HAL_DMA_IRQHandler+0x1e8>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d023      	beq.n	8002090 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 020e 	bic.w	r2, r2, #14
 8002056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
    }
  }
  return;
 800208e:	bf00      	nop
 8002090:	bf00      	nop
}
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40020008 	.word	0x40020008
 800209c:	4002001c 	.word	0x4002001c
 80020a0:	40020030 	.word	0x40020030
 80020a4:	40020044 	.word	0x40020044
 80020a8:	40020058 	.word	0x40020058
 80020ac:	4002006c 	.word	0x4002006c
 80020b0:	40020000 	.word	0x40020000

080020b4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d108      	bne.n	800210c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800210a:	e007      	b.n	800211c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	60da      	str	r2, [r3, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
	...

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b08b      	sub	sp, #44	; 0x2c
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213a:	e169      	b.n	8002410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800213c:	2201      	movs	r2, #1
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8158 	bne.w	800240a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a9a      	ldr	r2, [pc, #616]	; (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d05e      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002164:	4a98      	ldr	r2, [pc, #608]	; (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d875      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800216a:	4a98      	ldr	r2, [pc, #608]	; (80023cc <HAL_GPIO_Init+0x2a4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d058      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002170:	4a96      	ldr	r2, [pc, #600]	; (80023cc <HAL_GPIO_Init+0x2a4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d86f      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002176:	4a96      	ldr	r2, [pc, #600]	; (80023d0 <HAL_GPIO_Init+0x2a8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d052      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 800217c:	4a94      	ldr	r2, [pc, #592]	; (80023d0 <HAL_GPIO_Init+0x2a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d869      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002182:	4a94      	ldr	r2, [pc, #592]	; (80023d4 <HAL_GPIO_Init+0x2ac>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d04c      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002188:	4a92      	ldr	r2, [pc, #584]	; (80023d4 <HAL_GPIO_Init+0x2ac>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d863      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800218e:	4a92      	ldr	r2, [pc, #584]	; (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d046      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002194:	4a90      	ldr	r2, [pc, #576]	; (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d85d      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800219a:	2b12      	cmp	r3, #18
 800219c:	d82a      	bhi.n	80021f4 <HAL_GPIO_Init+0xcc>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d859      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_GPIO_Init+0x80>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	08002223 	.word	0x08002223
 80021ac:	080021fd 	.word	0x080021fd
 80021b0:	0800220f 	.word	0x0800220f
 80021b4:	08002251 	.word	0x08002251
 80021b8:	08002257 	.word	0x08002257
 80021bc:	08002257 	.word	0x08002257
 80021c0:	08002257 	.word	0x08002257
 80021c4:	08002257 	.word	0x08002257
 80021c8:	08002257 	.word	0x08002257
 80021cc:	08002257 	.word	0x08002257
 80021d0:	08002257 	.word	0x08002257
 80021d4:	08002257 	.word	0x08002257
 80021d8:	08002257 	.word	0x08002257
 80021dc:	08002257 	.word	0x08002257
 80021e0:	08002257 	.word	0x08002257
 80021e4:	08002257 	.word	0x08002257
 80021e8:	08002257 	.word	0x08002257
 80021ec:	08002205 	.word	0x08002205
 80021f0:	08002219 	.word	0x08002219
 80021f4:	4a79      	ldr	r2, [pc, #484]	; (80023dc <HAL_GPIO_Init+0x2b4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021fa:	e02c      	b.n	8002256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e029      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	3304      	adds	r3, #4
 800220a:	623b      	str	r3, [r7, #32]
          break;
 800220c:	e024      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	3308      	adds	r3, #8
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e01f      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	330c      	adds	r3, #12
 800221e:	623b      	str	r3, [r7, #32]
          break;
 8002220:	e01a      	b.n	8002258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800222a:	2304      	movs	r3, #4
 800222c:	623b      	str	r3, [r7, #32]
          break;
 800222e:	e013      	b.n	8002258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002238:	2308      	movs	r3, #8
 800223a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	611a      	str	r2, [r3, #16]
          break;
 8002242:	e009      	b.n	8002258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002244:	2308      	movs	r3, #8
 8002246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	615a      	str	r2, [r3, #20]
          break;
 800224e:	e003      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
          break;
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x130>
          break;
 8002256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2bff      	cmp	r3, #255	; 0xff
 800225c:	d801      	bhi.n	8002262 <HAL_GPIO_Init+0x13a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	e001      	b.n	8002266 <HAL_GPIO_Init+0x13e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	; 0xff
 800226c:	d802      	bhi.n	8002274 <HAL_GPIO_Init+0x14c>
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x152>
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	3b08      	subs	r3, #8
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	210f      	movs	r1, #15
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	401a      	ands	r2, r3
 800228c:	6a39      	ldr	r1, [r7, #32]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	431a      	orrs	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80b1 	beq.w	800240a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022a8:	4b4d      	ldr	r3, [pc, #308]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a4c      	ldr	r2, [pc, #304]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b4a      	ldr	r3, [pc, #296]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c0:	4a48      	ldr	r2, [pc, #288]	; (80023e4 <HAL_GPIO_Init+0x2bc>)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a40      	ldr	r2, [pc, #256]	; (80023e8 <HAL_GPIO_Init+0x2c0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_GPIO_Init+0x1ec>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a3f      	ldr	r2, [pc, #252]	; (80023ec <HAL_GPIO_Init+0x2c4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00d      	beq.n	8002310 <HAL_GPIO_Init+0x1e8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3e      	ldr	r2, [pc, #248]	; (80023f0 <HAL_GPIO_Init+0x2c8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x1e4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3d      	ldr	r2, [pc, #244]	; (80023f4 <HAL_GPIO_Init+0x2cc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_GPIO_Init+0x1e0>
 8002304:	2303      	movs	r3, #3
 8002306:	e006      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002308:	2304      	movs	r3, #4
 800230a:	e004      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 800230c:	2302      	movs	r3, #2
 800230e:	e002      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002314:	2300      	movs	r3, #0
 8002316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002318:	f002 0203 	and.w	r2, r2, #3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4093      	lsls	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002326:	492f      	ldr	r1, [pc, #188]	; (80023e4 <HAL_GPIO_Init+0x2bc>)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002340:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	492c      	ldr	r1, [pc, #176]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	4928      	ldr	r1, [pc, #160]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002368:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4922      	ldr	r1, [pc, #136]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	43db      	mvns	r3, r3
 800237e:	491e      	ldr	r1, [pc, #120]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002380:	4013      	ands	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4918      	ldr	r1, [pc, #96]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4914      	ldr	r1, [pc, #80]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d021      	beq.n	80023fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	490e      	ldr	r1, [pc, #56]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
 80023c4:	e021      	b.n	800240a <HAL_GPIO_Init+0x2e2>
 80023c6:	bf00      	nop
 80023c8:	10320000 	.word	0x10320000
 80023cc:	10310000 	.word	0x10310000
 80023d0:	10220000 	.word	0x10220000
 80023d4:	10210000 	.word	0x10210000
 80023d8:	10120000 	.word	0x10120000
 80023dc:	10110000 	.word	0x10110000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40010800 	.word	0x40010800
 80023ec:	40010c00 	.word	0x40010c00
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40011400 	.word	0x40011400
 80023f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_GPIO_Init+0x304>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	43db      	mvns	r3, r3
 8002404:	4909      	ldr	r1, [pc, #36]	; (800242c <HAL_GPIO_Init+0x304>)
 8002406:	4013      	ands	r3, r2
 8002408:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	3301      	adds	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	f47f ae8e 	bne.w	800213c <HAL_GPIO_Init+0x14>
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	372c      	adds	r7, #44	; 0x2c
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e001      	b.n	8002452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	807b      	strh	r3, [r7, #2]
 800246a:	4613      	mov	r3, r2
 800246c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800246e:	787b      	ldrb	r3, [r7, #1]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002474:	887a      	ldrh	r2, [r7, #2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800247a:	e003      	b.n	8002484 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	041a      	lsls	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	611a      	str	r2, [r3, #16]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a0:	887a      	ldrh	r2, [r7, #2]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4013      	ands	r3, r2
 80024a6:	041a      	lsls	r2, r3, #16
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	400b      	ands	r3, r1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	611a      	str	r2, [r3, #16]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e12b      	b.n	800272a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe fe58 	bl	800119c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2224      	movs	r2, #36	; 0x24
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002524:	f003 f9e0 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8002528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a81      	ldr	r2, [pc, #516]	; (8002734 <HAL_I2C_Init+0x274>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d807      	bhi.n	8002544 <HAL_I2C_Init+0x84>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a80      	ldr	r2, [pc, #512]	; (8002738 <HAL_I2C_Init+0x278>)
 8002538:	4293      	cmp	r3, r2
 800253a:	bf94      	ite	ls
 800253c:	2301      	movls	r3, #1
 800253e:	2300      	movhi	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e006      	b.n	8002552 <HAL_I2C_Init+0x92>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a7d      	ldr	r2, [pc, #500]	; (800273c <HAL_I2C_Init+0x27c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	bf94      	ite	ls
 800254c:	2301      	movls	r3, #1
 800254e:	2300      	movhi	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0e7      	b.n	800272a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4a78      	ldr	r2, [pc, #480]	; (8002740 <HAL_I2C_Init+0x280>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	0c9b      	lsrs	r3, r3, #18
 8002564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a6a      	ldr	r2, [pc, #424]	; (8002734 <HAL_I2C_Init+0x274>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d802      	bhi.n	8002594 <HAL_I2C_Init+0xd4>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	3301      	adds	r3, #1
 8002592:	e009      	b.n	80025a8 <HAL_I2C_Init+0xe8>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	4a69      	ldr	r2, [pc, #420]	; (8002744 <HAL_I2C_Init+0x284>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	3301      	adds	r3, #1
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	495c      	ldr	r1, [pc, #368]	; (8002734 <HAL_I2C_Init+0x274>)
 80025c4:	428b      	cmp	r3, r1
 80025c6:	d819      	bhi.n	80025fc <HAL_I2C_Init+0x13c>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e59      	subs	r1, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d6:	1c59      	adds	r1, r3, #1
 80025d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025dc:	400b      	ands	r3, r1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_I2C_Init+0x138>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e59      	subs	r1, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f0:	3301      	adds	r3, #1
 80025f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f6:	e051      	b.n	800269c <HAL_I2C_Init+0x1dc>
 80025f8:	2304      	movs	r3, #4
 80025fa:	e04f      	b.n	800269c <HAL_I2C_Init+0x1dc>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d111      	bne.n	8002628 <HAL_I2C_Init+0x168>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1e58      	subs	r0, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	e012      	b.n	800264e <HAL_I2C_Init+0x18e>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e58      	subs	r0, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	0099      	lsls	r1, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Init+0x196>
 8002652:	2301      	movs	r3, #1
 8002654:	e022      	b.n	800269c <HAL_I2C_Init+0x1dc>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10e      	bne.n	800267c <HAL_I2C_Init+0x1bc>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e58      	subs	r0, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	440b      	add	r3, r1
 800266c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002670:	3301      	adds	r3, #1
 8002672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800267a:	e00f      	b.n	800269c <HAL_I2C_Init+0x1dc>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e58      	subs	r0, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	0099      	lsls	r1, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	6809      	ldr	r1, [r1, #0]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69da      	ldr	r2, [r3, #28]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6911      	ldr	r1, [r2, #16]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68d2      	ldr	r2, [r2, #12]
 80026d6:	4311      	orrs	r1, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	430b      	orrs	r3, r1
 80026de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	000186a0 	.word	0x000186a0
 8002738:	001e847f 	.word	0x001e847f
 800273c:	003d08ff 	.word	0x003d08ff
 8002740:	431bde83 	.word	0x431bde83
 8002744:	10624dd3 	.word	0x10624dd3

08002748 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	4608      	mov	r0, r1
 8002752:	4611      	mov	r1, r2
 8002754:	461a      	mov	r2, r3
 8002756:	4603      	mov	r3, r0
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	460b      	mov	r3, r1
 800275c:	813b      	strh	r3, [r7, #8]
 800275e:	4613      	mov	r3, r2
 8002760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002762:	f7ff f935 	bl	80019d0 <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b20      	cmp	r3, #32
 8002772:	f040 80d9 	bne.w	8002928 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2319      	movs	r3, #25
 800277c:	2201      	movs	r2, #1
 800277e:	496d      	ldr	r1, [pc, #436]	; (8002934 <HAL_I2C_Mem_Write+0x1ec>)
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f002 fab5 	bl	8004cf0 <I2C_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
 800278e:	e0cc      	b.n	800292a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_I2C_Mem_Write+0x56>
 800279a:	2302      	movs	r3, #2
 800279c:	e0c5      	b.n	800292a <HAL_I2C_Mem_Write+0x1e2>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d007      	beq.n	80027c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2221      	movs	r2, #33	; 0x21
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a4d      	ldr	r2, [pc, #308]	; (8002938 <HAL_I2C_Mem_Write+0x1f0>)
 8002804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002806:	88f8      	ldrh	r0, [r7, #6]
 8002808:	893a      	ldrh	r2, [r7, #8]
 800280a:	8979      	ldrh	r1, [r7, #10]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	4603      	mov	r3, r0
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f001 ff38 	bl	800468c <I2C_RequestMemoryWrite>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d052      	beq.n	80028c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e081      	b.n	800292a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f002 fb36 	bl	8004e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00d      	beq.n	8002852 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b04      	cmp	r3, #4
 800283c:	d107      	bne.n	800284e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e06b      	b.n	800292a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b04      	cmp	r3, #4
 800288e:	d11b      	bne.n	80028c8 <HAL_I2C_Mem_Write+0x180>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d017      	beq.n	80028c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1aa      	bne.n	8002826 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f002 fb22 	bl	8004f1e <I2C_WaitOnBTFFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d107      	bne.n	80028f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e016      	b.n	800292a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	e000      	b.n	800292a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002928:	2302      	movs	r3, #2
  }
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	00100002 	.word	0x00100002
 8002938:	ffff0000 	.word	0xffff0000

0800293c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08c      	sub	sp, #48	; 0x30
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	4608      	mov	r0, r1
 8002946:	4611      	mov	r1, r2
 8002948:	461a      	mov	r2, r3
 800294a:	4603      	mov	r3, r0
 800294c:	817b      	strh	r3, [r7, #10]
 800294e:	460b      	mov	r3, r1
 8002950:	813b      	strh	r3, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800295a:	f7ff f839 	bl	80019d0 <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b20      	cmp	r3, #32
 800296a:	f040 8244 	bne.w	8002df6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2319      	movs	r3, #25
 8002974:	2201      	movs	r2, #1
 8002976:	4982      	ldr	r1, [pc, #520]	; (8002b80 <HAL_I2C_Mem_Read+0x244>)
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f002 f9b9 	bl	8004cf0 <I2C_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	e237      	b.n	8002df8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_I2C_Mem_Read+0x5a>
 8002992:	2302      	movs	r3, #2
 8002994:	e230      	b.n	8002df8 <HAL_I2C_Mem_Read+0x4bc>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d007      	beq.n	80029bc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2222      	movs	r2, #34	; 0x22
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a62      	ldr	r2, [pc, #392]	; (8002b84 <HAL_I2C_Mem_Read+0x248>)
 80029fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029fe:	88f8      	ldrh	r0, [r7, #6]
 8002a00:	893a      	ldrh	r2, [r7, #8]
 8002a02:	8979      	ldrh	r1, [r7, #10]
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f001 fed2 	bl	80047b8 <I2C_RequestMemoryRead>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1ec      	b.n	8002df8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d113      	bne.n	8002a4e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e1c0      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d11e      	bne.n	8002a94 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a66:	b672      	cpsid	i
}
 8002a68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a90:	b662      	cpsie	i
}
 8002a92:	e035      	b.n	8002b00 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d11e      	bne.n	8002ada <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aac:	b672      	cpsid	i
}
 8002aae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ad6:	b662      	cpsie	i
}
 8002ad8:	e012      	b.n	8002b00 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b00:	e166      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	f200 811f 	bhi.w	8002d4a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d123      	bne.n	8002b5c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f002 fa73 	bl	8005004 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e167      	b.n	8002df8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b5a:	e139      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d152      	bne.n	8002c0a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	4906      	ldr	r1, [pc, #24]	; (8002b88 <HAL_I2C_Mem_Read+0x24c>)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f002 f8be 	bl	8004cf0 <I2C_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e13c      	b.n	8002df8 <HAL_I2C_Mem_Read+0x4bc>
 8002b7e:	bf00      	nop
 8002b80:	00100002 	.word	0x00100002
 8002b84:	ffff0000 	.word	0xffff0000
 8002b88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b8c:	b672      	cpsid	i
}
 8002b8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bd2:	b662      	cpsie	i
}
 8002bd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c08:	e0e2      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	2200      	movs	r2, #0
 8002c12:	497b      	ldr	r1, [pc, #492]	; (8002e00 <HAL_I2C_Mem_Read+0x4c4>)
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f002 f86b 	bl	8004cf0 <I2C_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0e9      	b.n	8002df8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c34:	b672      	cpsid	i
}
 8002c36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c6a:	4b66      	ldr	r3, [pc, #408]	; (8002e04 <HAL_I2C_Mem_Read+0x4c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	08db      	lsrs	r3, r3, #3
 8002c70:	4a65      	ldr	r2, [pc, #404]	; (8002e08 <HAL_I2C_Mem_Read+0x4cc>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0a1a      	lsrs	r2, r3, #8
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00da      	lsls	r2, r3, #3
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d118      	bne.n	8002cc2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cb2:	b662      	cpsie	i
}
 8002cb4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e09a      	b.n	8002df8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d1d9      	bne.n	8002c84 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d12:	b662      	cpsie	i
}
 8002d14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d48:	e042      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f002 f958 	bl	8005004 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e04c      	b.n	8002df8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d118      	bne.n	8002dd0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f47f ae94 	bne.w	8002b02 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00010004 	.word	0x00010004
 8002e04:	20000004 	.word	0x20000004
 8002e08:	14f8b589 	.word	0x14f8b589

08002e0c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	; 0x30
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	817b      	strh	r3, [r7, #10]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	813b      	strh	r3, [r7, #8]
 8002e22:	4613      	mov	r3, r2
 8002e24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e26:	f7fe fdd3 	bl	80019d0 <HAL_GetTick>
 8002e2a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	f040 8160 	bne.w	80030fe <HAL_I2C_Mem_Read_DMA+0x2f2>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e3e:	4b9c      	ldr	r3, [pc, #624]	; (80030b0 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	08db      	lsrs	r3, r3, #3
 8002e44:	4a9b      	ldr	r2, [pc, #620]	; (80030b4 <HAL_I2C_Mem_Read_DMA+0x2a8>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0a1a      	lsrs	r2, r3, #8
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009a      	lsls	r2, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d116      	bne.n	8002e92 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e136      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d0db      	beq.n	8002e58 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_I2C_Mem_Read_DMA+0xa2>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e128      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x2f4>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d007      	beq.n	8002ed4 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2222      	movs	r2, #34	; 0x22
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a69      	ldr	r2, [pc, #420]	; (80030b8 <HAL_I2C_Mem_Read_DMA+0x2ac>)
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80b8 	beq.w	8003090 <HAL_I2C_Mem_Read_DMA+0x284>
    {
      if (hi2c->hdmarx != NULL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d024      	beq.n	8002f72 <HAL_I2C_Mem_Read_DMA+0x166>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	4a63      	ldr	r2, [pc, #396]	; (80030bc <HAL_I2C_Mem_Read_DMA+0x2b0>)
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	4a62      	ldr	r2, [pc, #392]	; (80030c0 <HAL_I2C_Mem_Read_DMA+0x2b4>)
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	2200      	movs	r2, #0
 8002f46:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3310      	adds	r3, #16
 8002f52:	4619      	mov	r1, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	f7fe fecd 	bl	8001cfc <HAL_DMA_Start_IT>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d17b      	bne.n	8003068 <HAL_I2C_Mem_Read_DMA+0x25c>
 8002f70:	e013      	b.n	8002f9a <HAL_I2C_Mem_Read_DMA+0x18e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0b2      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x2f4>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002f9a:	88f8      	ldrh	r0, [r7, #6]
 8002f9c:	893a      	ldrh	r2, [r7, #8]
 8002f9e:	8979      	ldrh	r1, [r7, #10]
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	2323      	movs	r3, #35	; 0x23
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4603      	mov	r3, r0
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f001 fc04 	bl	80047b8 <I2C_RequestMemoryRead>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d023      	beq.n	8002ffe <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fefe 	bl	8001dbc <HAL_DMA_Abort_IT>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	2200      	movs	r2, #0
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fdc:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e080      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x2f4>
        }

        if (hi2c->XferSize == 1U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003002:	2b01      	cmp	r3, #1
 8003004:	d108      	bne.n	8003018 <HAL_I2C_Mem_Read_DMA+0x20c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e007      	b.n	8003028 <HAL_I2C_Mem_Read_DMA+0x21c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003026:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003054:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	e048      	b.n	80030fa <HAL_I2C_Mem_Read_DMA+0x2ee>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f043 0210 	orr.w	r2, r3, #16
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e037      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003090:	88f8      	ldrh	r0, [r7, #6]
 8003092:	893a      	ldrh	r2, [r7, #8]
 8003094:	8979      	ldrh	r1, [r7, #10]
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	2323      	movs	r3, #35	; 0x23
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	4603      	mov	r3, r0
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f001 fb89 	bl	80047b8 <I2C_RequestMemoryRead>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <HAL_I2C_Mem_Read_DMA+0x2b8>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e027      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x2f4>
 80030b0:	20000004 	.word	0x20000004
 80030b4:	14f8b589 	.word	0x14f8b589
 80030b8:	ffff0000 	.word	0xffff0000
 80030bc:	08004989 	.word	0x08004989
 80030c0:	08004b33 	.word	0x08004b33
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_I2C_Mem_Read_DMA+0x2f4>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003128:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b10      	cmp	r3, #16
 8003136:	d003      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0x38>
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	f040 80c1 	bne.w	80032c2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <HAL_I2C_EV_IRQHandler+0x6e>
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003160:	d003      	beq.n	800316a <HAL_I2C_EV_IRQHandler+0x62>
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003168:	d101      	bne.n	800316e <HAL_I2C_EV_IRQHandler+0x66>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_I2C_EV_IRQHandler+0x68>
 800316e:	2300      	movs	r3, #0
 8003170:	2b01      	cmp	r3, #1
 8003172:	f000 8132 	beq.w	80033da <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00c      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x92>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	0a5b      	lsrs	r3, r3, #9
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d006      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f001 ffbd 	bl	800510c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fcc8 	bl	8003b28 <I2C_Master_SB>
 8003198:	e092      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0xb2>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	0a5b      	lsrs	r3, r3, #9
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fd3d 	bl	8003c32 <I2C_Master_ADD10>
 80031b8:	e082      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0xd2>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	0a5b      	lsrs	r3, r3, #9
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fd56 	bl	8003c84 <I2C_Master_ADDR>
 80031d8:	e072      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d03b      	beq.n	800325e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	f000 80f3 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	09db      	lsrs	r3, r3, #7
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00f      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x11c>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x11c>
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f942 	bl	80034a6 <I2C_MasterTransmit_TXE>
 8003222:	e04d      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80d6 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80cf 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	2b21      	cmp	r3, #33	; 0x21
 8003244:	d103      	bne.n	800324e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f9c9 	bl	80035de <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800324c:	e0c7      	b.n	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	f040 80c4 	bne.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fa37 	bl	80036ca <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800325c:	e0bf      	b.n	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326c:	f000 80b7 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00f      	beq.n	800329c <HAL_I2C_EV_IRQHandler+0x194>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_I2C_EV_IRQHandler+0x194>
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d103      	bne.n	800329c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 faac 	bl	80037f2 <I2C_MasterReceive_RXNE>
 800329a:	e011      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 809a 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	0a5b      	lsrs	r3, r3, #9
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8093 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fb4b 	bl	8003954 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032be:	e08e      	b.n	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
 80032c0:	e08d      	b.n	80033de <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	e007      	b.n	80032e4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0x20e>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	0a5b      	lsrs	r3, r3, #9
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00c      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800330c:	69b9      	ldr	r1, [r7, #24]
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 ff0f 	bl	8004132 <I2C_Slave_ADDR>
 8003314:	e066      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0x22e>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	0a5b      	lsrs	r3, r3, #9
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 ff4a 	bl	80041c8 <I2C_Slave_STOPF>
 8003334:	e056      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003336:	7bbb      	ldrb	r3, [r7, #14]
 8003338:	2b21      	cmp	r3, #33	; 0x21
 800333a:	d002      	beq.n	8003342 <HAL_I2C_EV_IRQHandler+0x23a>
 800333c:	7bbb      	ldrb	r3, [r7, #14]
 800333e:	2b29      	cmp	r3, #41	; 0x29
 8003340:	d125      	bne.n	800338e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	09db      	lsrs	r3, r3, #7
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00f      	beq.n	800336e <HAL_I2C_EV_IRQHandler+0x266>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	0a9b      	lsrs	r3, r3, #10
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_I2C_EV_IRQHandler+0x266>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fe27 	bl	8003fba <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800336c:	e039      	b.n	80033e2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d033      	beq.n	80033e2 <HAL_I2C_EV_IRQHandler+0x2da>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	0a5b      	lsrs	r3, r3, #9
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d02d      	beq.n	80033e2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fe54 	bl	8004034 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800338c:	e029      	b.n	80033e2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00f      	beq.n	80033ba <HAL_I2C_EV_IRQHandler+0x2b2>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	0a9b      	lsrs	r3, r3, #10
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_I2C_EV_IRQHandler+0x2b2>
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d103      	bne.n	80033ba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fe5e 	bl	8004074 <I2C_SlaveReceive_RXNE>
 80033b8:	e014      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00e      	beq.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	0a5b      	lsrs	r3, r3, #9
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fe8c 	bl	80040f0 <I2C_SlaveReceive_BTF>
 80033d8:	e004      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033e2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	70fb      	strb	r3, [r7, #3]
 800343e:	4613      	mov	r3, r2
 8003440:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034bc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d150      	bne.n	800356e <I2C_MasterTransmit_TXE+0xc8>
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b21      	cmp	r3, #33	; 0x21
 80034d0:	d14d      	bne.n	800356e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d01d      	beq.n	8003514 <I2C_MasterTransmit_TXE+0x6e>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d01a      	beq.n	8003514 <I2C_MasterTransmit_TXE+0x6e>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e4:	d016      	beq.n	8003514 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034f4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2211      	movs	r2, #17
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff6c 	bl	80033ea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003512:	e060      	b.n	80035d6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003522:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003532:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d107      	bne.n	800355e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ff81 	bl	800345e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800355c:	e03b      	b.n	80035d6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ff3f 	bl	80033ea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800356c:	e033      	b.n	80035d6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b21      	cmp	r3, #33	; 0x21
 8003572:	d005      	beq.n	8003580 <I2C_MasterTransmit_TXE+0xda>
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d12d      	bne.n	80035d6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b22      	cmp	r3, #34	; 0x22
 800357e:	d12a      	bne.n	80035d6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d108      	bne.n	800359c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003598:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800359a:	e01c      	b.n	80035d6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d103      	bne.n	80035b0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f88e 	bl	80036ca <I2C_MemoryTransmit_TXE_BTF>
}
 80035ae:	e012      	b.n	80035d6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035d4:	e7ff      	b.n	80035d6 <I2C_MasterTransmit_TXE+0x130>
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b21      	cmp	r3, #33	; 0x21
 80035f6:	d164      	bne.n	80036c2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d012      	beq.n	8003628 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003626:	e04c      	b.n	80036c2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b08      	cmp	r3, #8
 800362c:	d01d      	beq.n	800366a <I2C_MasterTransmit_BTF+0x8c>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b20      	cmp	r3, #32
 8003632:	d01a      	beq.n	800366a <I2C_MasterTransmit_BTF+0x8c>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800363a:	d016      	beq.n	800366a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800364a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2211      	movs	r2, #17
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fec1 	bl	80033ea <HAL_I2C_MasterTxCpltCallback>
}
 8003668:	e02b      	b.n	80036c2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003678:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003688:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d107      	bne.n	80036b4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff fed6 	bl	800345e <HAL_I2C_MemTxCpltCallback>
}
 80036b2:	e006      	b.n	80036c2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff fe94 	bl	80033ea <HAL_I2C_MasterTxCpltCallback>
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11d      	bne.n	800371e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10b      	bne.n	8003702 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fa:	1c9a      	adds	r2, r3, #2
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003700:	e073      	b.n	80037ea <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003706:	b29b      	uxth	r3, r3
 8003708:	121b      	asrs	r3, r3, #8
 800370a:	b2da      	uxtb	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800371c:	e065      	b.n	80037ea <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	2b01      	cmp	r3, #1
 8003724:	d10b      	bne.n	800373e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372a:	b2da      	uxtb	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800373c:	e055      	b.n	80037ea <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003742:	2b02      	cmp	r3, #2
 8003744:	d151      	bne.n	80037ea <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b22      	cmp	r3, #34	; 0x22
 800374a:	d10d      	bne.n	8003768 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800375a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003766:	e040      	b.n	80037ea <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d015      	beq.n	800379e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b21      	cmp	r3, #33	; 0x21
 8003776:	d112      	bne.n	800379e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800379c:	e025      	b.n	80037ea <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d120      	bne.n	80037ea <I2C_MemoryTransmit_TXE_BTF+0x120>
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b21      	cmp	r3, #33	; 0x21
 80037ac:	d11d      	bne.n	80037ea <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037bc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037cc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fe3a 	bl	800345e <HAL_I2C_MemTxCpltCallback>
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b22      	cmp	r3, #34	; 0x22
 8003804:	f040 80a2 	bne.w	800394c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d921      	bls.n	800385a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b03      	cmp	r3, #3
 8003844:	f040 8082 	bne.w	800394c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003856:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003858:	e078      	b.n	800394c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	2b02      	cmp	r3, #2
 8003860:	d074      	beq.n	800394c <I2C_MasterReceive_RXNE+0x15a>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d002      	beq.n	800386e <I2C_MasterReceive_RXNE+0x7c>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d16e      	bne.n	800394c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f001 fb96 	bl	8004fa0 <I2C_WaitOnSTOPRequestThroughIT>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d142      	bne.n	8003900 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003888:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003898:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d10a      	bne.n	80038ea <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fdc4 	bl	8003470 <HAL_I2C_MemRxCpltCallback>
}
 80038e8:	e030      	b.n	800394c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2212      	movs	r2, #18
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fd7f 	bl	80033fc <HAL_I2C_MasterRxCpltCallback>
}
 80038fe:	e025      	b.n	800394c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800390e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fd9b 	bl	8003482 <HAL_I2C_ErrorCallback>
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b04      	cmp	r3, #4
 800396a:	d11b      	bne.n	80039a4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039a2:	e0bd      	b.n	8003b20 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d129      	bne.n	8003a02 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039bc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d00a      	beq.n	80039da <I2C_MasterReceive_BTF+0x86>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d007      	beq.n	80039da <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a00:	e08e      	b.n	8003b20 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d176      	bne.n	8003afa <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d002      	beq.n	8003a18 <I2C_MasterReceive_BTF+0xc4>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d108      	bne.n	8003a2a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e019      	b.n	8003a5e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d002      	beq.n	8003a36 <I2C_MasterReceive_BTF+0xe2>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d108      	bne.n	8003a48 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	e00a      	b.n	8003a5e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b10      	cmp	r3, #16
 8003a4c:	d007      	beq.n	8003a5e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ab8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d10a      	bne.n	8003ae4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fcc7 	bl	8003470 <HAL_I2C_MemRxCpltCallback>
}
 8003ae2:	e01d      	b.n	8003b20 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2212      	movs	r2, #18
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fc82 	bl	80033fc <HAL_I2C_MasterRxCpltCallback>
}
 8003af8:	e012      	b.n	8003b20 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d117      	bne.n	8003b6c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b54:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b56:	e067      	b.n	8003c28 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	611a      	str	r2, [r3, #16]
}
 8003b6a:	e05d      	b.n	8003c28 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b74:	d133      	bne.n	8003bde <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b21      	cmp	r3, #33	; 0x21
 8003b80:	d109      	bne.n	8003b96 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b92:	611a      	str	r2, [r3, #16]
 8003b94:	e008      	b.n	8003ba8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d004      	beq.n	8003bba <I2C_Master_SB+0x92>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d108      	bne.n	8003bcc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d032      	beq.n	8003c28 <I2C_Master_SB+0x100>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02d      	beq.n	8003c28 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bda:	605a      	str	r2, [r3, #4]
}
 8003bdc:	e024      	b.n	8003c28 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10e      	bne.n	8003c04 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	11db      	asrs	r3, r3, #7
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 0306 	and.w	r3, r3, #6
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f063 030f 	orn	r3, r3, #15
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	611a      	str	r2, [r3, #16]
}
 8003c02:	e011      	b.n	8003c28 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10d      	bne.n	8003c28 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	11db      	asrs	r3, r3, #7
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f003 0306 	and.w	r3, r3, #6
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f063 030e 	orn	r3, r3, #14
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <I2C_Master_ADD10+0x26>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d108      	bne.n	8003c6a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00c      	beq.n	8003c7a <I2C_Master_ADD10+0x48>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c78:	605a      	str	r2, [r3, #4]
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b091      	sub	sp, #68	; 0x44
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b22      	cmp	r3, #34	; 0x22
 8003cac:	f040 8174 	bne.w	8003f98 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10f      	bne.n	8003cd8 <I2C_Master_ADDR+0x54>
 8003cb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d10b      	bne.n	8003cd8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	e16b      	b.n	8003fb0 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d11d      	bne.n	8003d1c <I2C_Master_ADDR+0x98>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ce8:	d118      	bne.n	8003d1c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cea:	2300      	movs	r3, #0
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d0e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	651a      	str	r2, [r3, #80]	; 0x50
 8003d1a:	e149      	b.n	8003fb0 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d113      	bne.n	8003d4e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e120      	b.n	8003f90 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	f040 808a 	bne.w	8003e6e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d60:	d137      	bne.n	8003dd2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d70:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d80:	d113      	bne.n	8003daa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d90:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	e0f2      	b.n	8003f90 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e0de      	b.n	8003f90 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d02e      	beq.n	8003e36 <I2C_Master_ADDR+0x1b2>
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d02b      	beq.n	8003e36 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	2b12      	cmp	r3, #18
 8003de2:	d102      	bne.n	8003dea <I2C_Master_ADDR+0x166>
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d125      	bne.n	8003e36 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d00e      	beq.n	8003e0e <I2C_Master_ADDR+0x18a>
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d00b      	beq.n	8003e0e <I2C_Master_ADDR+0x18a>
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d008      	beq.n	8003e0e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e007      	b.n	8003e1e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	e0ac      	b.n	8003f90 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e44:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e090      	b.n	8003f90 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d158      	bne.n	8003f2a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d021      	beq.n	8003ec2 <I2C_Master_ADDR+0x23e>
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d01e      	beq.n	8003ec2 <I2C_Master_ADDR+0x23e>
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d01b      	beq.n	8003ec2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e98:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e012      	b.n	8003ee8 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef6:	d14b      	bne.n	8003f90 <I2C_Master_ADDR+0x30c>
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003efe:	d00b      	beq.n	8003f18 <I2C_Master_ADDR+0x294>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d008      	beq.n	8003f18 <I2C_Master_ADDR+0x294>
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d005      	beq.n	8003f18 <I2C_Master_ADDR+0x294>
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d002      	beq.n	8003f18 <I2C_Master_ADDR+0x294>
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d13b      	bne.n	8003f90 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	e032      	b.n	8003f90 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f38:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d117      	bne.n	8003f7a <I2C_Master_ADDR+0x2f6>
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f50:	d00b      	beq.n	8003f6a <I2C_Master_ADDR+0x2e6>
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d008      	beq.n	8003f6a <I2C_Master_ADDR+0x2e6>
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d005      	beq.n	8003f6a <I2C_Master_ADDR+0x2e6>
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d002      	beq.n	8003f6a <I2C_Master_ADDR+0x2e6>
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d107      	bne.n	8003f7a <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f96:	e00b      	b.n	8003fb0 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
}
 8003fae:	e7ff      	b.n	8003fb0 <I2C_Master_ADDR+0x32c>
 8003fb0:	bf00      	nop
 8003fb2:	3744      	adds	r7, #68	; 0x44
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02b      	beq.n	800402c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	781a      	ldrb	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d114      	bne.n	800402c <I2C_SlaveTransmit_TXE+0x72>
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	2b29      	cmp	r3, #41	; 0x29
 8004006:	d111      	bne.n	800402c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004016:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2221      	movs	r2, #33	; 0x21
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2228      	movs	r2, #40	; 0x28
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff f9f1 	bl	800340e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d011      	beq.n	800406a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004082:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d02c      	beq.n	80040e8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d114      	bne.n	80040e8 <I2C_SlaveReceive_RXNE+0x74>
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	2b2a      	cmp	r3, #42	; 0x2a
 80040c2:	d111      	bne.n	80040e8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2222      	movs	r2, #34	; 0x22
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2228      	movs	r2, #40	; 0x28
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff f99c 	bl	8003420 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d012      	beq.n	8004128 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800414c:	2b28      	cmp	r3, #40	; 0x28
 800414e:	d127      	bne.n	80041a0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	09db      	lsrs	r3, r3, #7
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	81bb      	strh	r3, [r7, #12]
 8004182:	e002      	b.n	800418a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004192:	89ba      	ldrh	r2, [r7, #12]
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff f94a 	bl	8003432 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800419e:	e00e      	b.n	80041be <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a0:	2300      	movs	r3, #0
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041e8:	2300      	movs	r3, #0
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004214:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004224:	d172      	bne.n	800430c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b22      	cmp	r3, #34	; 0x22
 800422a:	d002      	beq.n	8004232 <I2C_Slave_STOPF+0x6a>
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b2a      	cmp	r3, #42	; 0x2a
 8004230:	d135      	bne.n	800429e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f043 0204 	orr.w	r2, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004264:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd ff22 	bl	80020b4 <HAL_DMA_GetState>
 8004270:	4603      	mov	r3, r0
 8004272:	2b01      	cmp	r3, #1
 8004274:	d049      	beq.n	800430a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	4a69      	ldr	r2, [pc, #420]	; (8004420 <I2C_Slave_STOPF+0x258>)
 800427c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	4618      	mov	r0, r3
 8004284:	f7fd fd9a 	bl	8001dbc <HAL_DMA_Abort_IT>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d03d      	beq.n	800430a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004298:	4610      	mov	r0, r2
 800429a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800429c:	e035      	b.n	800430a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f043 0204 	orr.w	r2, r3, #4
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd feec 	bl	80020b4 <HAL_DMA_GetState>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d014      	beq.n	800430c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	4a4e      	ldr	r2, [pc, #312]	; (8004420 <I2C_Slave_STOPF+0x258>)
 80042e8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fd fd64 	bl	8001dbc <HAL_DMA_Abort_IT>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004304:	4610      	mov	r0, r2
 8004306:	4798      	blx	r3
 8004308:	e000      	b.n	800430c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800430a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d03e      	beq.n	8004394 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d112      	bne.n	800434a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d112      	bne.n	800437e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	f043 0204 	orr.w	r2, r3, #4
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f843 	bl	8004428 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043a2:	e039      	b.n	8004418 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b2a      	cmp	r3, #42	; 0x2a
 80043a8:	d109      	bne.n	80043be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2228      	movs	r2, #40	; 0x28
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff f831 	bl	8003420 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b28      	cmp	r3, #40	; 0x28
 80043c8:	d111      	bne.n	80043ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a15      	ldr	r2, [pc, #84]	; (8004424 <I2C_Slave_STOPF+0x25c>)
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff f830 	bl	800344c <HAL_I2C_ListenCpltCallback>
}
 80043ec:	e014      	b.n	8004418 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	2b22      	cmp	r3, #34	; 0x22
 80043f4:	d002      	beq.n	80043fc <I2C_Slave_STOPF+0x234>
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b22      	cmp	r3, #34	; 0x22
 80043fa:	d10d      	bne.n	8004418 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff f804 	bl	8003420 <HAL_I2C_SlaveRxCpltCallback>
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	08004ba1 	.word	0x08004ba1
 8004424:	ffff0000 	.word	0xffff0000

08004428 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004436:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800443e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004440:	7bbb      	ldrb	r3, [r7, #14]
 8004442:	2b10      	cmp	r3, #16
 8004444:	d002      	beq.n	800444c <I2C_ITError+0x24>
 8004446:	7bbb      	ldrb	r3, [r7, #14]
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d10a      	bne.n	8004462 <I2C_ITError+0x3a>
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b22      	cmp	r3, #34	; 0x22
 8004450:	d107      	bne.n	8004462 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004460:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004468:	2b28      	cmp	r3, #40	; 0x28
 800446a:	d107      	bne.n	800447c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2228      	movs	r2, #40	; 0x28
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800447a:	e015      	b.n	80044a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448a:	d00a      	beq.n	80044a2 <I2C_ITError+0x7a>
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b60      	cmp	r3, #96	; 0x60
 8004490:	d007      	beq.n	80044a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b6:	d161      	bne.n	800457c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d020      	beq.n	8004516 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	4a6a      	ldr	r2, [pc, #424]	; (8004684 <I2C_ITError+0x25c>)
 80044da:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fd fc6b 	bl	8001dbc <HAL_DMA_Abort_IT>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8089 	beq.w	8004600 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004510:	4610      	mov	r0, r2
 8004512:	4798      	blx	r3
 8004514:	e074      	b.n	8004600 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	4a5a      	ldr	r2, [pc, #360]	; (8004684 <I2C_ITError+0x25c>)
 800451c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	4618      	mov	r0, r3
 8004524:	f7fd fc4a 	bl	8001dbc <HAL_DMA_Abort_IT>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d068      	beq.n	8004600 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d10b      	bne.n	8004554 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004576:	4610      	mov	r0, r2
 8004578:	4798      	blx	r3
 800457a:	e041      	b.n	8004600 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b60      	cmp	r3, #96	; 0x60
 8004586:	d125      	bne.n	80045d4 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d10b      	bne.n	80045bc <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fe ff61 	bl	8003494 <HAL_I2C_AbortCpltCallback>
 80045d2:	e015      	b.n	8004600 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d10b      	bne.n	80045fa <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fe ff41 	bl	8003482 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10e      	bne.n	800462e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800463c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b04      	cmp	r3, #4
 8004650:	d113      	bne.n	800467a <I2C_ITError+0x252>
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b28      	cmp	r3, #40	; 0x28
 8004656:	d110      	bne.n	800467a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a0b      	ldr	r2, [pc, #44]	; (8004688 <I2C_ITError+0x260>)
 800465c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7fe fee9 	bl	800344c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	08004ba1 	.word	0x08004ba1
 8004688:	ffff0000 	.word	0xffff0000

0800468c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	4608      	mov	r0, r1
 8004696:	4611      	mov	r1, r2
 8004698:	461a      	mov	r2, r3
 800469a:	4603      	mov	r3, r0
 800469c:	817b      	strh	r3, [r7, #10]
 800469e:	460b      	mov	r3, r1
 80046a0:	813b      	strh	r3, [r7, #8]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	2200      	movs	r2, #0
 80046be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fb14 	bl	8004cf0 <I2C_WaitOnFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00d      	beq.n	80046ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046dc:	d103      	bne.n	80046e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e05f      	b.n	80047aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ea:	897b      	ldrh	r3, [r7, #10]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	6a3a      	ldr	r2, [r7, #32]
 80046fe:	492d      	ldr	r1, [pc, #180]	; (80047b4 <I2C_RequestMemoryWrite+0x128>)
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fb4c 	bl	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e04c      	b.n	80047aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004728:	6a39      	ldr	r1, [r7, #32]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fbb6 	bl	8004e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	2b04      	cmp	r3, #4
 800473c:	d107      	bne.n	800474e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e02b      	b.n	80047aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d105      	bne.n	8004764 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004758:	893b      	ldrh	r3, [r7, #8]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	611a      	str	r2, [r3, #16]
 8004762:	e021      	b.n	80047a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004764:	893b      	ldrh	r3, [r7, #8]
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	b29b      	uxth	r3, r3
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004774:	6a39      	ldr	r1, [r7, #32]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fb90 	bl	8004e9c <I2C_WaitOnTXEFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00d      	beq.n	800479e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	2b04      	cmp	r3, #4
 8004788:	d107      	bne.n	800479a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004798:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e005      	b.n	80047aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479e:	893b      	ldrh	r3, [r7, #8]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	00010002 	.word	0x00010002

080047b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	4608      	mov	r0, r1
 80047c2:	4611      	mov	r1, r2
 80047c4:	461a      	mov	r2, r3
 80047c6:	4603      	mov	r3, r0
 80047c8:	817b      	strh	r3, [r7, #10]
 80047ca:	460b      	mov	r3, r1
 80047cc:	813b      	strh	r3, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fa76 	bl	8004cf0 <I2C_WaitOnFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00d      	beq.n	8004826 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004818:	d103      	bne.n	8004822 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e0aa      	b.n	800497c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004834:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	6a3a      	ldr	r2, [r7, #32]
 800483a:	4952      	ldr	r1, [pc, #328]	; (8004984 <I2C_RequestMemoryRead+0x1cc>)
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 faae 	bl	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e097      	b.n	800497c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004864:	6a39      	ldr	r1, [r7, #32]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fb18 	bl	8004e9c <I2C_WaitOnTXEFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b04      	cmp	r3, #4
 8004878:	d107      	bne.n	800488a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004888:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e076      	b.n	800497c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d105      	bne.n	80048a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004894:	893b      	ldrh	r3, [r7, #8]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	611a      	str	r2, [r3, #16]
 800489e:	e021      	b.n	80048e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048a0:	893b      	ldrh	r3, [r7, #8]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	6a39      	ldr	r1, [r7, #32]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 faf2 	bl	8004e9c <I2C_WaitOnTXEFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d107      	bne.n	80048d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e050      	b.n	800497c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048da:	893b      	ldrh	r3, [r7, #8]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e6:	6a39      	ldr	r1, [r7, #32]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fad7 	bl	8004e9c <I2C_WaitOnTXEFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00d      	beq.n	8004910 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d107      	bne.n	800490c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e035      	b.n	800497c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	2200      	movs	r2, #0
 8004928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f9df 	bl	8004cf0 <I2C_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004946:	d103      	bne.n	8004950 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800494e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e013      	b.n	800497c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004954:	897b      	ldrh	r3, [r7, #10]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	6a3a      	ldr	r2, [r7, #32]
 8004968:	4906      	ldr	r1, [pc, #24]	; (8004984 <I2C_RequestMemoryRead+0x1cc>)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fa17 	bl	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	00010002 	.word	0x00010002

08004988 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049ba:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c8:	2200      	movs	r2, #0
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	2200      	movs	r2, #0
 80049da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80049e2:	2b21      	cmp	r3, #33	; 0x21
 80049e4:	d007      	beq.n	80049f6 <I2C_DMAXferCplt+0x6e>
 80049e6:	7cfb      	ldrb	r3, [r7, #19]
 80049e8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80049ec:	2b22      	cmp	r3, #34	; 0x22
 80049ee:	d131      	bne.n	8004a54 <I2C_DMAXferCplt+0xcc>
 80049f0:	7cbb      	ldrb	r3, [r7, #18]
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d12e      	bne.n	8004a54 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a04:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	2b29      	cmp	r3, #41	; 0x29
 8004a10:	d10a      	bne.n	8004a28 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2221      	movs	r2, #33	; 0x21
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2228      	movs	r2, #40	; 0x28
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a20:	6978      	ldr	r0, [r7, #20]
 8004a22:	f7fe fcf4 	bl	800340e <HAL_I2C_SlaveTxCpltCallback>
 8004a26:	e00c      	b.n	8004a42 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
 8004a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a2c:	d109      	bne.n	8004a42 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2222      	movs	r2, #34	; 0x22
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2228      	movs	r2, #40	; 0x28
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a3c:	6978      	ldr	r0, [r7, #20]
 8004a3e:	f7fe fcef 	bl	8003420 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004a50:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a52:	e06a      	b.n	8004b2a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d064      	beq.n	8004b2a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d107      	bne.n	8004a7a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a78:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a90:	d009      	beq.n	8004aa6 <I2C_DMAXferCplt+0x11e>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d006      	beq.n	8004aa6 <I2C_DMAXferCplt+0x11e>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a9e:	d002      	beq.n	8004aa6 <I2C_DMAXferCplt+0x11e>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	d107      	bne.n	8004ab6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ac4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004ae4:	6978      	ldr	r0, [r7, #20]
 8004ae6:	f7fe fccc 	bl	8003482 <HAL_I2C_ErrorCallback>
}
 8004aea:	e01e      	b.n	8004b2a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d10a      	bne.n	8004b16 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004b0e:	6978      	ldr	r0, [r7, #20]
 8004b10:	f7fe fcae 	bl	8003470 <HAL_I2C_MemRxCpltCallback>
}
 8004b14:	e009      	b.n	8004b2a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2212      	movs	r2, #18
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b24:	6978      	ldr	r0, [r7, #20]
 8004b26:	f7fe fc69 	bl	80033fc <HAL_I2C_MasterRxCpltCallback>
}
 8004b2a:	bf00      	nop
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b6e:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f043 0210 	orr.w	r2, r3, #16
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7fe fc75 	bl	8003482 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bba:	4b4b      	ldr	r3, [pc, #300]	; (8004ce8 <I2C_DMAAbort+0x148>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	08db      	lsrs	r3, r3, #3
 8004bc0:	4a4a      	ldr	r2, [pc, #296]	; (8004cec <I2C_DMAAbort+0x14c>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	0a1a      	lsrs	r2, r3, #8
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	00da      	lsls	r2, r3, #3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f043 0220 	orr.w	r2, r3, #32
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004be6:	e00a      	b.n	8004bfe <I2C_DMAAbort+0x5e>
    }
    count--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bfc:	d0ea      	beq.n	8004bd4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c40:	2200      	movs	r2, #0
 8004c42:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	2200      	movs	r2, #0
 8004c52:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b60      	cmp	r3, #96	; 0x60
 8004c6e:	d10e      	bne.n	8004c8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2200      	movs	r2, #0
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c86:	6978      	ldr	r0, [r7, #20]
 8004c88:	f7fe fc04 	bl	8003494 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c8c:	e027      	b.n	8004cde <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c8e:	7cfb      	ldrb	r3, [r7, #19]
 8004c90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c94:	2b28      	cmp	r3, #40	; 0x28
 8004c96:	d117      	bne.n	8004cc8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cb6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2228      	movs	r2, #40	; 0x28
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cc6:	e007      	b.n	8004cd8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004cd8:	6978      	ldr	r0, [r7, #20]
 8004cda:	f7fe fbd2 	bl	8003482 <HAL_I2C_ErrorCallback>
}
 8004cde:	bf00      	nop
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000004 	.word	0x20000004
 8004cec:	14f8b589 	.word	0x14f8b589

08004cf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d00:	e025      	b.n	8004d4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d021      	beq.n	8004d4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0a:	f7fc fe61 	bl	80019d0 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d302      	bcc.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d116      	bne.n	8004d4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f043 0220 	orr.w	r2, r3, #32
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e023      	b.n	8004d96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d10d      	bne.n	8004d74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4013      	ands	r3, r2
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf0c      	ite	eq
 8004d6a:	2301      	moveq	r3, #1
 8004d6c:	2300      	movne	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	e00c      	b.n	8004d8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	43da      	mvns	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf0c      	ite	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2300      	movne	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d0b6      	beq.n	8004d02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dac:	e051      	b.n	8004e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbc:	d123      	bne.n	8004e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f043 0204 	orr.w	r2, r3, #4
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e046      	b.n	8004e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d021      	beq.n	8004e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fc fddf 	bl	80019d0 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d116      	bne.n	8004e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e020      	b.n	8004e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	0c1b      	lsrs	r3, r3, #16
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d10c      	bne.n	8004e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	43da      	mvns	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4013      	ands	r3, r2
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bf14      	ite	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	2300      	moveq	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e00b      	b.n	8004e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	43da      	mvns	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d18d      	bne.n	8004dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea8:	e02d      	b.n	8004f06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f900 	bl	80050b0 <I2C_IsAcknowledgeFailed>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e02d      	b.n	8004f16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d021      	beq.n	8004f06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	f7fc fd85 	bl	80019d0 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d116      	bne.n	8004f06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f043 0220 	orr.w	r2, r3, #32
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e007      	b.n	8004f16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f10:	2b80      	cmp	r3, #128	; 0x80
 8004f12:	d1ca      	bne.n	8004eaa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f2a:	e02d      	b.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f8bf 	bl	80050b0 <I2C_IsAcknowledgeFailed>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e02d      	b.n	8004f98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f42:	d021      	beq.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f44:	f7fc fd44 	bl	80019d0 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d302      	bcc.n	8004f5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d116      	bne.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e007      	b.n	8004f98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d1ca      	bne.n	8004f2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fac:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	08db      	lsrs	r3, r3, #3
 8004fb2:	4a13      	ldr	r2, [pc, #76]	; (8005000 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	0a1a      	lsrs	r2, r3, #8
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d107      	bne.n	8004fde <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f043 0220 	orr.w	r2, r3, #32
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e008      	b.n	8004ff0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fec:	d0e9      	beq.n	8004fc2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000004 	.word	0x20000004
 8005000:	14f8b589 	.word	0x14f8b589

08005004 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005010:	e042      	b.n	8005098 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b10      	cmp	r3, #16
 800501e:	d119      	bne.n	8005054 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0210 	mvn.w	r2, #16
 8005028:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e029      	b.n	80050a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005054:	f7fc fcbc 	bl	80019d0 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	d302      	bcc.n	800506a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d116      	bne.n	8005098 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e007      	b.n	80050a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d1b5      	bne.n	8005012 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c6:	d11b      	bne.n	8005100 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	f043 0204 	orr.w	r2, r3, #4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800511c:	d103      	bne.n	8005126 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005124:	e007      	b.n	8005136 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800512e:	d102      	bne.n	8005136 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2208      	movs	r2, #8
 8005134:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e272      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8087 	beq.w	800526e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005160:	4b92      	ldr	r3, [pc, #584]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b04      	cmp	r3, #4
 800516a:	d00c      	beq.n	8005186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800516c:	4b8f      	ldr	r3, [pc, #572]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 030c 	and.w	r3, r3, #12
 8005174:	2b08      	cmp	r3, #8
 8005176:	d112      	bne.n	800519e <HAL_RCC_OscConfig+0x5e>
 8005178:	4b8c      	ldr	r3, [pc, #560]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005184:	d10b      	bne.n	800519e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005186:	4b89      	ldr	r3, [pc, #548]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d06c      	beq.n	800526c <HAL_RCC_OscConfig+0x12c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d168      	bne.n	800526c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e24c      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a6:	d106      	bne.n	80051b6 <HAL_RCC_OscConfig+0x76>
 80051a8:	4b80      	ldr	r3, [pc, #512]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a7f      	ldr	r2, [pc, #508]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	e02e      	b.n	8005214 <HAL_RCC_OscConfig+0xd4>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCC_OscConfig+0x98>
 80051be:	4b7b      	ldr	r3, [pc, #492]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a7a      	ldr	r2, [pc, #488]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	4b78      	ldr	r3, [pc, #480]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a77      	ldr	r2, [pc, #476]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e01d      	b.n	8005214 <HAL_RCC_OscConfig+0xd4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051e0:	d10c      	bne.n	80051fc <HAL_RCC_OscConfig+0xbc>
 80051e2:	4b72      	ldr	r3, [pc, #456]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a71      	ldr	r2, [pc, #452]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	4b6f      	ldr	r3, [pc, #444]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a6e      	ldr	r2, [pc, #440]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	e00b      	b.n	8005214 <HAL_RCC_OscConfig+0xd4>
 80051fc:	4b6b      	ldr	r3, [pc, #428]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a6a      	ldr	r2, [pc, #424]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	4b68      	ldr	r3, [pc, #416]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a67      	ldr	r2, [pc, #412]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 800520e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d013      	beq.n	8005244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521c:	f7fc fbd8 	bl	80019d0 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005224:	f7fc fbd4 	bl	80019d0 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	; 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e200      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005236:	4b5d      	ldr	r3, [pc, #372]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0xe4>
 8005242:	e014      	b.n	800526e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7fc fbc4 	bl	80019d0 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800524c:	f7fc fbc0 	bl	80019d0 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b64      	cmp	r3, #100	; 0x64
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e1ec      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800525e:	4b53      	ldr	r3, [pc, #332]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x10c>
 800526a:	e000      	b.n	800526e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800526c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d063      	beq.n	8005342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800527a:	4b4c      	ldr	r3, [pc, #304]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005286:	4b49      	ldr	r3, [pc, #292]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b08      	cmp	r3, #8
 8005290:	d11c      	bne.n	80052cc <HAL_RCC_OscConfig+0x18c>
 8005292:	4b46      	ldr	r3, [pc, #280]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d116      	bne.n	80052cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529e:	4b43      	ldr	r3, [pc, #268]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_RCC_OscConfig+0x176>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d001      	beq.n	80052b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e1c0      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b6:	4b3d      	ldr	r3, [pc, #244]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4939      	ldr	r1, [pc, #228]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ca:	e03a      	b.n	8005342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d020      	beq.n	8005316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052d4:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <HAL_RCC_OscConfig+0x270>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052da:	f7fc fb79 	bl	80019d0 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e2:	f7fc fb75 	bl	80019d0 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e1a1      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f4:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005300:	4b2a      	ldr	r3, [pc, #168]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4927      	ldr	r1, [pc, #156]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005310:	4313      	orrs	r3, r2
 8005312:	600b      	str	r3, [r1, #0]
 8005314:	e015      	b.n	8005342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005316:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <HAL_RCC_OscConfig+0x270>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531c:	f7fc fb58 	bl	80019d0 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005324:	f7fc fb54 	bl	80019d0 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e180      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d03a      	beq.n	80053c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d019      	beq.n	800538a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005356:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <HAL_RCC_OscConfig+0x274>)
 8005358:	2201      	movs	r2, #1
 800535a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535c:	f7fc fb38 	bl	80019d0 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005364:	f7fc fb34 	bl	80019d0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e160      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005376:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <HAL_RCC_OscConfig+0x26c>)
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005382:	2001      	movs	r0, #1
 8005384:	f000 fad8 	bl	8005938 <RCC_Delay>
 8005388:	e01c      	b.n	80053c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <HAL_RCC_OscConfig+0x274>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005390:	f7fc fb1e 	bl	80019d0 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005396:	e00f      	b.n	80053b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005398:	f7fc fb1a 	bl	80019d0 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d908      	bls.n	80053b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e146      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000
 80053b0:	42420000 	.word	0x42420000
 80053b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b8:	4b92      	ldr	r3, [pc, #584]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e9      	bne.n	8005398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80a6 	beq.w	800551e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053d2:	2300      	movs	r3, #0
 80053d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053d6:	4b8b      	ldr	r3, [pc, #556]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10d      	bne.n	80053fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e2:	4b88      	ldr	r3, [pc, #544]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	4a87      	ldr	r2, [pc, #540]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 80053e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ec:	61d3      	str	r3, [r2, #28]
 80053ee:	4b85      	ldr	r3, [pc, #532]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f6:	60bb      	str	r3, [r7, #8]
 80053f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053fa:	2301      	movs	r3, #1
 80053fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fe:	4b82      	ldr	r3, [pc, #520]	; (8005608 <HAL_RCC_OscConfig+0x4c8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d118      	bne.n	800543c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800540a:	4b7f      	ldr	r3, [pc, #508]	; (8005608 <HAL_RCC_OscConfig+0x4c8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a7e      	ldr	r2, [pc, #504]	; (8005608 <HAL_RCC_OscConfig+0x4c8>)
 8005410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005416:	f7fc fadb 	bl	80019d0 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800541e:	f7fc fad7 	bl	80019d0 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b64      	cmp	r3, #100	; 0x64
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e103      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005430:	4b75      	ldr	r3, [pc, #468]	; (8005608 <HAL_RCC_OscConfig+0x4c8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d106      	bne.n	8005452 <HAL_RCC_OscConfig+0x312>
 8005444:	4b6f      	ldr	r3, [pc, #444]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	4a6e      	ldr	r2, [pc, #440]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	6213      	str	r3, [r2, #32]
 8005450:	e02d      	b.n	80054ae <HAL_RCC_OscConfig+0x36e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10c      	bne.n	8005474 <HAL_RCC_OscConfig+0x334>
 800545a:	4b6a      	ldr	r3, [pc, #424]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	4a69      	ldr	r2, [pc, #420]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	6213      	str	r3, [r2, #32]
 8005466:	4b67      	ldr	r3, [pc, #412]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	4a66      	ldr	r2, [pc, #408]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 800546c:	f023 0304 	bic.w	r3, r3, #4
 8005470:	6213      	str	r3, [r2, #32]
 8005472:	e01c      	b.n	80054ae <HAL_RCC_OscConfig+0x36e>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b05      	cmp	r3, #5
 800547a:	d10c      	bne.n	8005496 <HAL_RCC_OscConfig+0x356>
 800547c:	4b61      	ldr	r3, [pc, #388]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	4a60      	ldr	r2, [pc, #384]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005482:	f043 0304 	orr.w	r3, r3, #4
 8005486:	6213      	str	r3, [r2, #32]
 8005488:	4b5e      	ldr	r3, [pc, #376]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	4a5d      	ldr	r2, [pc, #372]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	6213      	str	r3, [r2, #32]
 8005494:	e00b      	b.n	80054ae <HAL_RCC_OscConfig+0x36e>
 8005496:	4b5b      	ldr	r3, [pc, #364]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	4a5a      	ldr	r2, [pc, #360]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	6213      	str	r3, [r2, #32]
 80054a2:	4b58      	ldr	r3, [pc, #352]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	4a57      	ldr	r2, [pc, #348]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 80054a8:	f023 0304 	bic.w	r3, r3, #4
 80054ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d015      	beq.n	80054e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b6:	f7fc fa8b 	bl	80019d0 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054bc:	e00a      	b.n	80054d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054be:	f7fc fa87 	bl	80019d0 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e0b1      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d4:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0ee      	beq.n	80054be <HAL_RCC_OscConfig+0x37e>
 80054e0:	e014      	b.n	800550c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e2:	f7fc fa75 	bl	80019d0 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e8:	e00a      	b.n	8005500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ea:	f7fc fa71 	bl	80019d0 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e09b      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005500:	4b40      	ldr	r3, [pc, #256]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1ee      	bne.n	80054ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d105      	bne.n	800551e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005512:	4b3c      	ldr	r3, [pc, #240]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	4a3b      	ldr	r2, [pc, #236]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800551c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 8087 	beq.w	8005636 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005528:	4b36      	ldr	r3, [pc, #216]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 030c 	and.w	r3, r3, #12
 8005530:	2b08      	cmp	r3, #8
 8005532:	d061      	beq.n	80055f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d146      	bne.n	80055ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800553c:	4b33      	ldr	r3, [pc, #204]	; (800560c <HAL_RCC_OscConfig+0x4cc>)
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005542:	f7fc fa45 	bl	80019d0 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554a:	f7fc fa41 	bl	80019d0 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e06d      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800555c:	4b29      	ldr	r3, [pc, #164]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f0      	bne.n	800554a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005570:	d108      	bne.n	8005584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005572:	4b24      	ldr	r3, [pc, #144]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	4921      	ldr	r1, [pc, #132]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005580:	4313      	orrs	r3, r2
 8005582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a19      	ldr	r1, [r3, #32]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	430b      	orrs	r3, r1
 8005596:	491b      	ldr	r1, [pc, #108]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 8005598:	4313      	orrs	r3, r2
 800559a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <HAL_RCC_OscConfig+0x4cc>)
 800559e:	2201      	movs	r2, #1
 80055a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a2:	f7fc fa15 	bl	80019d0 <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055aa:	f7fc fa11 	bl	80019d0 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e03d      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055bc:	4b11      	ldr	r3, [pc, #68]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0f0      	beq.n	80055aa <HAL_RCC_OscConfig+0x46a>
 80055c8:	e035      	b.n	8005636 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ca:	4b10      	ldr	r3, [pc, #64]	; (800560c <HAL_RCC_OscConfig+0x4cc>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fc f9fe 	bl	80019d0 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fc f9fa 	bl	80019d0 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e026      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ea:	4b06      	ldr	r3, [pc, #24]	; (8005604 <HAL_RCC_OscConfig+0x4c4>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x498>
 80055f6:	e01e      	b.n	8005636 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d107      	bne.n	8005610 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e019      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
 8005604:	40021000 	.word	0x40021000
 8005608:	40007000 	.word	0x40007000
 800560c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_RCC_OscConfig+0x500>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	429a      	cmp	r2, r3
 8005622:	d106      	bne.n	8005632 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40021000 	.word	0x40021000

08005644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0d0      	b.n	80057fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005658:	4b6a      	ldr	r3, [pc, #424]	; (8005804 <HAL_RCC_ClockConfig+0x1c0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d910      	bls.n	8005688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005666:	4b67      	ldr	r3, [pc, #412]	; (8005804 <HAL_RCC_ClockConfig+0x1c0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f023 0207 	bic.w	r2, r3, #7
 800566e:	4965      	ldr	r1, [pc, #404]	; (8005804 <HAL_RCC_ClockConfig+0x1c0>)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b63      	ldr	r3, [pc, #396]	; (8005804 <HAL_RCC_ClockConfig+0x1c0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0b8      	b.n	80057fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d020      	beq.n	80056d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056a0:	4b59      	ldr	r3, [pc, #356]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a58      	ldr	r2, [pc, #352]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80056a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d005      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056b8:	4b53      	ldr	r3, [pc, #332]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4a52      	ldr	r2, [pc, #328]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80056be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80056c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c4:	4b50      	ldr	r3, [pc, #320]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	494d      	ldr	r1, [pc, #308]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d040      	beq.n	8005764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d107      	bne.n	80056fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ea:	4b47      	ldr	r3, [pc, #284]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d115      	bne.n	8005722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e07f      	b.n	80057fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d107      	bne.n	8005712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005702:	4b41      	ldr	r3, [pc, #260]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e073      	b.n	80057fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005712:	4b3d      	ldr	r3, [pc, #244]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e06b      	b.n	80057fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005722:	4b39      	ldr	r3, [pc, #228]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f023 0203 	bic.w	r2, r3, #3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4936      	ldr	r1, [pc, #216]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 8005730:	4313      	orrs	r3, r2
 8005732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005734:	f7fc f94c 	bl	80019d0 <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800573a:	e00a      	b.n	8005752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800573c:	f7fc f948 	bl	80019d0 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f241 3288 	movw	r2, #5000	; 0x1388
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e053      	b.n	80057fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005752:	4b2d      	ldr	r3, [pc, #180]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f003 020c 	and.w	r2, r3, #12
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	429a      	cmp	r2, r3
 8005762:	d1eb      	bne.n	800573c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005764:	4b27      	ldr	r3, [pc, #156]	; (8005804 <HAL_RCC_ClockConfig+0x1c0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d210      	bcs.n	8005794 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005772:	4b24      	ldr	r3, [pc, #144]	; (8005804 <HAL_RCC_ClockConfig+0x1c0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 0207 	bic.w	r2, r3, #7
 800577a:	4922      	ldr	r1, [pc, #136]	; (8005804 <HAL_RCC_ClockConfig+0x1c0>)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	4313      	orrs	r3, r2
 8005780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005782:	4b20      	ldr	r3, [pc, #128]	; (8005804 <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e032      	b.n	80057fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057a0:	4b19      	ldr	r3, [pc, #100]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4916      	ldr	r1, [pc, #88]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	490e      	ldr	r1, [pc, #56]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057d2:	f000 f821 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 80057d6:	4602      	mov	r2, r0
 80057d8:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	490a      	ldr	r1, [pc, #40]	; (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80057e4:	5ccb      	ldrb	r3, [r1, r3]
 80057e6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ea:	4a09      	ldr	r2, [pc, #36]	; (8005810 <HAL_RCC_ClockConfig+0x1cc>)
 80057ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057ee:	4b09      	ldr	r3, [pc, #36]	; (8005814 <HAL_RCC_ClockConfig+0x1d0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fc f8aa 	bl	800194c <HAL_InitTick>

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40022000 	.word	0x40022000
 8005808:	40021000 	.word	0x40021000
 800580c:	08006684 	.word	0x08006684
 8005810:	20000004 	.word	0x20000004
 8005814:	20000008 	.word	0x20000008

08005818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005818:	b490      	push	{r4, r7}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800581e:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8005820:	1d3c      	adds	r4, r7, #4
 8005822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005828:	f240 2301 	movw	r3, #513	; 0x201
 800582c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	2300      	movs	r3, #0
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	2300      	movs	r3, #0
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005842:	4b21      	ldr	r3, [pc, #132]	; (80058c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f003 030c 	and.w	r3, r3, #12
 800584e:	2b04      	cmp	r3, #4
 8005850:	d002      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0x40>
 8005852:	2b08      	cmp	r3, #8
 8005854:	d003      	beq.n	800585e <HAL_RCC_GetSysClockFreq+0x46>
 8005856:	e02b      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005858:	4b1c      	ldr	r3, [pc, #112]	; (80058cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800585a:	623b      	str	r3, [r7, #32]
      break;
 800585c:	e02b      	b.n	80058b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	0c9b      	lsrs	r3, r3, #18
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	3328      	adds	r3, #40	; 0x28
 8005868:	443b      	add	r3, r7
 800586a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800586e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d012      	beq.n	80058a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800587a:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	0c5b      	lsrs	r3, r3, #17
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	3328      	adds	r3, #40	; 0x28
 8005886:	443b      	add	r3, r7
 8005888:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800588c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	4a0e      	ldr	r2, [pc, #56]	; (80058cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005892:	fb03 f202 	mul.w	r2, r3, r2
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
 800589e:	e004      	b.n	80058aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4a0b      	ldr	r2, [pc, #44]	; (80058d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a4:	fb02 f303 	mul.w	r3, r2, r3
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	623b      	str	r3, [r7, #32]
      break;
 80058ae:	e002      	b.n	80058b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058b0:	4b06      	ldr	r3, [pc, #24]	; (80058cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80058b2:	623b      	str	r3, [r7, #32]
      break;
 80058b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058b6:	6a3b      	ldr	r3, [r7, #32]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3728      	adds	r7, #40	; 0x28
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc90      	pop	{r4, r7}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	08006674 	.word	0x08006674
 80058c8:	40021000 	.word	0x40021000
 80058cc:	007a1200 	.word	0x007a1200
 80058d0:	003d0900 	.word	0x003d0900

080058d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058d8:	4b02      	ldr	r3, [pc, #8]	; (80058e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80058da:	681b      	ldr	r3, [r3, #0]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr
 80058e4:	20000004 	.word	0x20000004

080058e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058ec:	f7ff fff2 	bl	80058d4 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4903      	ldr	r1, [pc, #12]	; (800590c <HAL_RCC_GetPCLK1Freq+0x24>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40021000 	.word	0x40021000
 800590c:	08006694 	.word	0x08006694

08005910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005914:	f7ff ffde 	bl	80058d4 <HAL_RCC_GetHCLKFreq>
 8005918:	4602      	mov	r2, r0
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	0adb      	lsrs	r3, r3, #11
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	4903      	ldr	r1, [pc, #12]	; (8005934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005926:	5ccb      	ldrb	r3, [r1, r3]
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800592c:	4618      	mov	r0, r3
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40021000 	.word	0x40021000
 8005934:	08006694 	.word	0x08006694

08005938 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005940:	4b0a      	ldr	r3, [pc, #40]	; (800596c <RCC_Delay+0x34>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a0a      	ldr	r2, [pc, #40]	; (8005970 <RCC_Delay+0x38>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	0a5b      	lsrs	r3, r3, #9
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005954:	bf00      	nop
  }
  while (Delay --);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1e5a      	subs	r2, r3, #1
 800595a:	60fa      	str	r2, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1f9      	bne.n	8005954 <RCC_Delay+0x1c>
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr
 800596c:	20000004 	.word	0x20000004
 8005970:	10624dd3 	.word	0x10624dd3

08005974 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e076      	b.n	8005a74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d108      	bne.n	80059a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005996:	d009      	beq.n	80059ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	61da      	str	r2, [r3, #28]
 800599e:	e005      	b.n	80059ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fb fc8e 	bl	80012e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a30:	ea42 0103 	orr.w	r1, r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	0c1a      	lsrs	r2, r3, #16
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f002 0204 	and.w	r2, r2, #4
 8005a52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_SPI_Transmit+0x22>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e126      	b.n	8005cec <HAL_SPI_Transmit+0x270>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aa6:	f7fb ff93 	bl	80019d0 <HAL_GetTick>
 8005aaa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005abc:	2302      	movs	r3, #2
 8005abe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ac0:	e10b      	b.n	8005cda <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <HAL_SPI_Transmit+0x52>
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d102      	bne.n	8005ad4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ad2:	e102      	b.n	8005cda <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	88fa      	ldrh	r2, [r7, #6]
 8005af2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1a:	d10f      	bne.n	8005b3c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d007      	beq.n	8005b5a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b62:	d14b      	bne.n	8005bfc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <HAL_SPI_Transmit+0xf6>
 8005b6c:	8afb      	ldrh	r3, [r7, #22]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d13e      	bne.n	8005bf0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	881a      	ldrh	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	1c9a      	adds	r2, r3, #2
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b96:	e02b      	b.n	8005bf0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d112      	bne.n	8005bcc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	881a      	ldrh	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	1c9a      	adds	r2, r3, #2
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bca:	e011      	b.n	8005bf0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bcc:	f7fb ff00 	bl	80019d0 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d803      	bhi.n	8005be4 <HAL_SPI_Transmit+0x168>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d102      	bne.n	8005bea <HAL_SPI_Transmit+0x16e>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d102      	bne.n	8005bf0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bee:	e074      	b.n	8005cda <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1ce      	bne.n	8005b98 <HAL_SPI_Transmit+0x11c>
 8005bfa:	e04c      	b.n	8005c96 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_Transmit+0x18e>
 8005c04:	8afb      	ldrh	r3, [r7, #22]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d140      	bne.n	8005c8c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c30:	e02c      	b.n	8005c8c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d113      	bne.n	8005c68 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c66:	e011      	b.n	8005c8c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c68:	f7fb feb2 	bl	80019d0 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d803      	bhi.n	8005c80 <HAL_SPI_Transmit+0x204>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d102      	bne.n	8005c86 <HAL_SPI_Transmit+0x20a>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c8a:	e026      	b.n	8005cda <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1cd      	bne.n	8005c32 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fbb8 	bl	8006410 <SPI_EndRxTxTransaction>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10a      	bne.n	8005cca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	613b      	str	r3, [r7, #16]
 8005cc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	77fb      	strb	r3, [r7, #31]
 8005cd6:	e000      	b.n	8005cda <HAL_SPI_Transmit+0x25e>
  }

error:
 8005cd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3720      	adds	r7, #32
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	4613      	mov	r3, r2
 8005d02:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d10:	d112      	bne.n	8005d38 <HAL_SPI_Receive+0x44>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10e      	bne.n	8005d38 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d22:	88fa      	ldrh	r2, [r7, #6]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f8f1 	bl	8005f16 <HAL_SPI_TransmitReceive>
 8005d34:	4603      	mov	r3, r0
 8005d36:	e0ea      	b.n	8005f0e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_SPI_Receive+0x52>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e0e3      	b.n	8005f0e <HAL_SPI_Receive+0x21a>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d4e:	f7fb fe3f 	bl	80019d0 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d002      	beq.n	8005d66 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
 8005d62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d64:	e0ca      	b.n	8005efc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_SPI_Receive+0x7e>
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d76:	e0c1      	b.n	8005efc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	88fa      	ldrh	r2, [r7, #6]
 8005d96:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dbe:	d10f      	bne.n	8005de0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dde:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d007      	beq.n	8005dfe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d162      	bne.n	8005ecc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e06:	e02e      	b.n	8005e66 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d115      	bne.n	8005e42 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f103 020c 	add.w	r2, r3, #12
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	7812      	ldrb	r2, [r2, #0]
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e40:	e011      	b.n	8005e66 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e42:	f7fb fdc5 	bl	80019d0 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d803      	bhi.n	8005e5a <HAL_SPI_Receive+0x166>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d102      	bne.n	8005e60 <HAL_SPI_Receive+0x16c>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e64:	e04a      	b.n	8005efc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1cb      	bne.n	8005e08 <HAL_SPI_Receive+0x114>
 8005e70:	e031      	b.n	8005ed6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d113      	bne.n	8005ea8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	b292      	uxth	r2, r2
 8005e8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	1c9a      	adds	r2, r3, #2
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ea6:	e011      	b.n	8005ecc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ea8:	f7fb fd92 	bl	80019d0 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d803      	bhi.n	8005ec0 <HAL_SPI_Receive+0x1cc>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d102      	bne.n	8005ec6 <HAL_SPI_Receive+0x1d2>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005eca:	e017      	b.n	8005efc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1cd      	bne.n	8005e72 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fa46 	bl	800636c <SPI_EndRxTransaction>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	75fb      	strb	r3, [r7, #23]
 8005ef8:	e000      	b.n	8005efc <HAL_SPI_Receive+0x208>
  }

error :
 8005efa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b08c      	sub	sp, #48	; 0x30
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
 8005f22:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f24:	2301      	movs	r3, #1
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_SPI_TransmitReceive+0x26>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e18a      	b.n	8006252 <HAL_SPI_TransmitReceive+0x33c>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f44:	f7fb fd44 	bl	80019d0 <HAL_GetTick>
 8005f48:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005f5a:	887b      	ldrh	r3, [r7, #2]
 8005f5c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d00f      	beq.n	8005f86 <HAL_SPI_TransmitReceive+0x70>
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f6c:	d107      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d103      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x68>
 8005f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d003      	beq.n	8005f86 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f84:	e15b      	b.n	800623e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_SPI_TransmitReceive+0x82>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <HAL_SPI_TransmitReceive+0x82>
 8005f92:	887b      	ldrh	r3, [r7, #2]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d103      	bne.n	8005fa0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f9e:	e14e      	b.n	800623e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d003      	beq.n	8005fb4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2205      	movs	r2, #5
 8005fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	887a      	ldrh	r2, [r7, #2]
 8005fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	887a      	ldrh	r2, [r7, #2]
 8005fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	887a      	ldrh	r2, [r7, #2]
 8005fd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	887a      	ldrh	r2, [r7, #2]
 8005fdc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d007      	beq.n	8006008 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006006:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006010:	d178      	bne.n	8006104 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <HAL_SPI_TransmitReceive+0x10a>
 800601a:	8b7b      	ldrh	r3, [r7, #26]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d166      	bne.n	80060ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	881a      	ldrh	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	1c9a      	adds	r2, r3, #2
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006044:	e053      	b.n	80060ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b02      	cmp	r3, #2
 8006052:	d11b      	bne.n	800608c <HAL_SPI_TransmitReceive+0x176>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d016      	beq.n	800608c <HAL_SPI_TransmitReceive+0x176>
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d113      	bne.n	800608c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	881a      	ldrh	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	1c9a      	adds	r2, r3, #2
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	d119      	bne.n	80060ce <HAL_SPI_TransmitReceive+0x1b8>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d014      	beq.n	80060ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	b292      	uxth	r2, r2
 80060b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	1c9a      	adds	r2, r3, #2
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060ca:	2301      	movs	r3, #1
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060ce:	f7fb fc7f 	bl	80019d0 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060da:	429a      	cmp	r2, r3
 80060dc:	d807      	bhi.n	80060ee <HAL_SPI_TransmitReceive+0x1d8>
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d003      	beq.n	80060ee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060ec:	e0a7      	b.n	800623e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1a6      	bne.n	8006046 <HAL_SPI_TransmitReceive+0x130>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1a1      	bne.n	8006046 <HAL_SPI_TransmitReceive+0x130>
 8006102:	e07c      	b.n	80061fe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x1fc>
 800610c:	8b7b      	ldrh	r3, [r7, #26]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d16b      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006138:	e057      	b.n	80061ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b02      	cmp	r3, #2
 8006146:	d11c      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x26c>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d017      	beq.n	8006182 <HAL_SPI_TransmitReceive+0x26c>
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2b01      	cmp	r3, #1
 8006156:	d114      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b01      	cmp	r3, #1
 800618e:	d119      	bne.n	80061c4 <HAL_SPI_TransmitReceive+0x2ae>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d014      	beq.n	80061c4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061c0:	2301      	movs	r3, #1
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061c4:	f7fb fc04 	bl	80019d0 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d803      	bhi.n	80061dc <HAL_SPI_TransmitReceive+0x2c6>
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061da:	d102      	bne.n	80061e2 <HAL_SPI_TransmitReceive+0x2cc>
 80061dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80061e8:	e029      	b.n	800623e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1a2      	bne.n	800613a <HAL_SPI_TransmitReceive+0x224>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d19d      	bne.n	800613a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006200:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 f904 	bl	8006410 <SPI_EndRxTxTransaction>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d006      	beq.n	800621c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800621a:	e010      	b.n	800623e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006224:	2300      	movs	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	e000      	b.n	800623e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800623c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800624e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006252:	4618      	mov	r0, r3
 8006254:	3730      	adds	r7, #48	; 0x30
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800626c:	f7fb fbb0 	bl	80019d0 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	4413      	add	r3, r2
 800627a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800627c:	f7fb fba8 	bl	80019d0 <HAL_GetTick>
 8006280:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006282:	4b39      	ldr	r3, [pc, #228]	; (8006368 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	015b      	lsls	r3, r3, #5
 8006288:	0d1b      	lsrs	r3, r3, #20
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	fb02 f303 	mul.w	r3, r2, r3
 8006290:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006292:	e054      	b.n	800633e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629a:	d050      	beq.n	800633e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800629c:	f7fb fb98 	bl	80019d0 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d902      	bls.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d13d      	bne.n	800632e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ca:	d111      	bne.n	80062f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d4:	d004      	beq.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062de:	d107      	bne.n	80062f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f8:	d10f      	bne.n	800631a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006318:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e017      	b.n	800635e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	3b01      	subs	r3, #1
 800633c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4013      	ands	r3, r2
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	429a      	cmp	r2, r3
 800634c:	bf0c      	ite	eq
 800634e:	2301      	moveq	r3, #1
 8006350:	2300      	movne	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	429a      	cmp	r2, r3
 800635a:	d19b      	bne.n	8006294 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3720      	adds	r7, #32
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000004 	.word	0x20000004

0800636c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006380:	d111      	bne.n	80063a6 <SPI_EndRxTransaction+0x3a>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638a:	d004      	beq.n	8006396 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006394:	d107      	bne.n	80063a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ae:	d117      	bne.n	80063e0 <SPI_EndRxTransaction+0x74>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b8:	d112      	bne.n	80063e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2200      	movs	r2, #0
 80063c2:	2101      	movs	r1, #1
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff ff49 	bl	800625c <SPI_WaitFlagStateUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01a      	beq.n	8006406 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d4:	f043 0220 	orr.w	r2, r3, #32
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e013      	b.n	8006408 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2200      	movs	r2, #0
 80063e8:	2180      	movs	r1, #128	; 0x80
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff ff36 	bl	800625c <SPI_WaitFlagStateUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fa:	f043 0220 	orr.w	r2, r3, #32
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e000      	b.n	8006408 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af02      	add	r7, sp, #8
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2200      	movs	r2, #0
 8006424:	2180      	movs	r1, #128	; 0x80
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff ff18 	bl	800625c <SPI_WaitFlagStateUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006436:	f043 0220 	orr.w	r2, r3, #32
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e000      	b.n	8006444 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e03f      	b.n	80064de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fa ff82 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2224      	movs	r2, #36	; 0x24
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800648e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f829 	bl	80064e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695a      	ldr	r2, [r3, #20]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006522:	f023 030c 	bic.w	r3, r3, #12
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	430b      	orrs	r3, r1
 800652e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a2c      	ldr	r2, [pc, #176]	; (80065fc <UART_SetConfig+0x114>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d103      	bne.n	8006558 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006550:	f7ff f9de 	bl	8005910 <HAL_RCC_GetPCLK2Freq>
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	e002      	b.n	800655e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006558:	f7ff f9c6 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 800655c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009a      	lsls	r2, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	fbb2 f3f3 	udiv	r3, r2, r3
 8006574:	4a22      	ldr	r2, [pc, #136]	; (8006600 <UART_SetConfig+0x118>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	0119      	lsls	r1, r3, #4
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009a      	lsls	r2, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	fbb2 f2f3 	udiv	r2, r2, r3
 8006594:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <UART_SetConfig+0x118>)
 8006596:	fba3 0302 	umull	r0, r3, r3, r2
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	2064      	movs	r0, #100	; 0x64
 800659e:	fb00 f303 	mul.w	r3, r0, r3
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	3332      	adds	r3, #50	; 0x32
 80065a8:	4a15      	ldr	r2, [pc, #84]	; (8006600 <UART_SetConfig+0x118>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065b4:	4419      	add	r1, r3
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009a      	lsls	r2, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80065cc:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <UART_SetConfig+0x118>)
 80065ce:	fba3 0302 	umull	r0, r3, r3, r2
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	2064      	movs	r0, #100	; 0x64
 80065d6:	fb00 f303 	mul.w	r3, r0, r3
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	3332      	adds	r3, #50	; 0x32
 80065e0:	4a07      	ldr	r2, [pc, #28]	; (8006600 <UART_SetConfig+0x118>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	f003 020f 	and.w	r2, r3, #15
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	440a      	add	r2, r1
 80065f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80065f4:	bf00      	nop
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40013800 	.word	0x40013800
 8006600:	51eb851f 	.word	0x51eb851f

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	2600      	movs	r6, #0
 8006608:	4d0c      	ldr	r5, [pc, #48]	; (800663c <__libc_init_array+0x38>)
 800660a:	4c0d      	ldr	r4, [pc, #52]	; (8006640 <__libc_init_array+0x3c>)
 800660c:	1b64      	subs	r4, r4, r5
 800660e:	10a4      	asrs	r4, r4, #2
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	f000 f822 	bl	800665c <_init>
 8006618:	2600      	movs	r6, #0
 800661a:	4d0a      	ldr	r5, [pc, #40]	; (8006644 <__libc_init_array+0x40>)
 800661c:	4c0a      	ldr	r4, [pc, #40]	; (8006648 <__libc_init_array+0x44>)
 800661e:	1b64      	subs	r4, r4, r5
 8006620:	10a4      	asrs	r4, r4, #2
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	f855 3b04 	ldr.w	r3, [r5], #4
 800662c:	4798      	blx	r3
 800662e:	3601      	adds	r6, #1
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	f855 3b04 	ldr.w	r3, [r5], #4
 8006636:	4798      	blx	r3
 8006638:	3601      	adds	r6, #1
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	0800669c 	.word	0x0800669c
 8006640:	0800669c 	.word	0x0800669c
 8006644:	0800669c 	.word	0x0800669c
 8006648:	080066a0 	.word	0x080066a0

0800664c <memset>:
 800664c:	4603      	mov	r3, r0
 800664e:	4402      	add	r2, r0
 8006650:	4293      	cmp	r3, r2
 8006652:	d100      	bne.n	8006656 <memset+0xa>
 8006654:	4770      	bx	lr
 8006656:	f803 1b01 	strb.w	r1, [r3], #1
 800665a:	e7f9      	b.n	8006650 <memset+0x4>

0800665c <_init>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr

08006668 <_fini>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	bf00      	nop
 800666c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666e:	bc08      	pop	{r3}
 8006670:	469e      	mov	lr, r3
 8006672:	4770      	bx	lr
