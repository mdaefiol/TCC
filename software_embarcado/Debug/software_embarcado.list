
software_embarcado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006088  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080061c0  080061c0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061c0  080061c0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080061c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000018  080061e0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080061e0  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba44  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dfb  00000000  00000000  0002ba85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  0002e428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bf0  00000000  00000000  0002ef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5b9  00000000  00000000  00045b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826fe  00000000  00000000  000530e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d57e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003108  00000000  00000000  000d5838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08006180 	.word	0x08006180

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08006180 	.word	0x08006180

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <FRAM_ID>:
char bytes_ID[4] = {0};
char bytes_status[3] = {0} ;

uint8_t wip;

void FRAM_ID(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2101      	movs	r1, #1
 8000994:	480a      	ldr	r0, [pc, #40]	; (80009c0 <FRAM_ID+0x34>)
 8000996:	f001 fb0d 	bl	8001fb4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDIDI, 1, 100); //envia
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	2201      	movs	r2, #1
 800099e:	4909      	ldr	r1, [pc, #36]	; (80009c4 <FRAM_ID+0x38>)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <FRAM_ID+0x3c>)
 80009a2:	f004 fdfd 	bl	80055a0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,  (uint8_t *)bytes_ID, 4, 100); //recebe dado
 80009a6:	2364      	movs	r3, #100	; 0x64
 80009a8:	2204      	movs	r2, #4
 80009aa:	4908      	ldr	r1, [pc, #32]	; (80009cc <FRAM_ID+0x40>)
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <FRAM_ID+0x3c>)
 80009ae:	f004 ff33 	bl	8005818 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2101      	movs	r1, #1
 80009b6:	4802      	ldr	r0, [pc, #8]	; (80009c0 <FRAM_ID+0x34>)
 80009b8:	f001 fafc 	bl	8001fb4 <HAL_GPIO_WritePin>
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40010c00 	.word	0x40010c00
 80009c4:	20000003 	.word	0x20000003
 80009c8:	20000124 	.word	0x20000124
 80009cc:	20000034 	.word	0x20000034

080009d0 <FRAM_enablewrite>:

void FRAM_enablewrite(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

	//Ativa trava de habilitação de gravação (permite operações de gravação)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <FRAM_enablewrite+0x28>)
 80009da:	f001 faeb 	bl	8001fb4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WREN, 1, 100);
 80009de:	2364      	movs	r3, #100	; 0x64
 80009e0:	2201      	movs	r2, #1
 80009e2:	4906      	ldr	r1, [pc, #24]	; (80009fc <FRAM_enablewrite+0x2c>)
 80009e4:	4806      	ldr	r0, [pc, #24]	; (8000a00 <FRAM_enablewrite+0x30>)
 80009e6:	f004 fddb 	bl	80055a0 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2101      	movs	r1, #1
 80009ee:	4802      	ldr	r0, [pc, #8]	; (80009f8 <FRAM_enablewrite+0x28>)
 80009f0:	f001 fae0 	bl	8001fb4 <HAL_GPIO_WritePin>

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40010c00 	.word	0x40010c00
 80009fc:	20000002 	.word	0x20000002
 8000a00:	20000124 	.word	0x20000124

08000a04 <FRAM_Write>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

}


void FRAM_Write(uint16_t address, uint8_t *data, uint16_t size){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	80fb      	strh	r3, [r7, #6]
 8000a10:	4613      	mov	r3, r2
 8000a12:	80bb      	strh	r3, [r7, #4]

	// write
	uint8_t addr_high = (address >> 8 ) & 0xFF;
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	0a1b      	lsrs	r3, r3, #8
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_low = address & 0xFF;
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2101      	movs	r1, #1
 8000a28:	4812      	ldr	r0, [pc, #72]	; (8000a74 <FRAM_Write+0x70>)
 8000a2a:	f001 fac3 	bl	8001fb4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 100);
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	2201      	movs	r2, #1
 8000a32:	4911      	ldr	r1, [pc, #68]	; (8000a78 <FRAM_Write+0x74>)
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <FRAM_Write+0x78>)
 8000a36:	f004 fdb3 	bl	80055a0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_high, 1, 100);
 8000a3a:	f107 010f 	add.w	r1, r7, #15
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	2201      	movs	r2, #1
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <FRAM_Write+0x78>)
 8000a44:	f004 fdac 	bl	80055a0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_low, 1, 100);
 8000a48:	f107 010e 	add.w	r1, r7, #14
 8000a4c:	2364      	movs	r3, #100	; 0x64
 8000a4e:	2201      	movs	r2, #1
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <FRAM_Write+0x78>)
 8000a52:	f004 fda5 	bl	80055a0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, size, 100);
 8000a56:	88ba      	ldrh	r2, [r7, #4]
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	6839      	ldr	r1, [r7, #0]
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <FRAM_Write+0x78>)
 8000a5e:	f004 fd9f 	bl	80055a0 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2101      	movs	r1, #1
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <FRAM_Write+0x70>)
 8000a68:	f001 faa4 	bl	8001fb4 <HAL_GPIO_WritePin>

}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000124 	.word	0x20000124

08000a80 <FRAM_Read>:

void FRAM_Read(uint16_t address, uint8_t *data_receive, uint16_t size){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	80fb      	strh	r3, [r7, #6]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	80bb      	strh	r3, [r7, #4]

	// read
	uint8_t addr_high = (address >> 8 ) & 0xFF;
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_low = address & 0xFF;
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <FRAM_Read+0x70>)
 8000aa6:	f001 fa85 	bl	8001fb4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
 8000aaa:	2364      	movs	r3, #100	; 0x64
 8000aac:	2201      	movs	r2, #1
 8000aae:	4911      	ldr	r1, [pc, #68]	; (8000af4 <FRAM_Read+0x74>)
 8000ab0:	4811      	ldr	r0, [pc, #68]	; (8000af8 <FRAM_Read+0x78>)
 8000ab2:	f004 fd75 	bl	80055a0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_high, 1, 100);
 8000ab6:	f107 010f 	add.w	r1, r7, #15
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	2201      	movs	r2, #1
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <FRAM_Read+0x78>)
 8000ac0:	f004 fd6e 	bl	80055a0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_low, 1, 100);
 8000ac4:	f107 010e 	add.w	r1, r7, #14
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	2201      	movs	r2, #1
 8000acc:	480a      	ldr	r0, [pc, #40]	; (8000af8 <FRAM_Read+0x78>)
 8000ace:	f004 fd67 	bl	80055a0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data_receive, size, 100); //recebe dado
 8000ad2:	88ba      	ldrh	r2, [r7, #4]
 8000ad4:	2364      	movs	r3, #100	; 0x64
 8000ad6:	6839      	ldr	r1, [r7, #0]
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <FRAM_Read+0x78>)
 8000ada:	f004 fe9d 	bl	8005818 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <FRAM_Read+0x70>)
 8000ae4:	f001 fa66 	bl	8001fb4 <HAL_GPIO_WritePin>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	20000001 	.word	0x20000001
 8000af8:	20000124 	.word	0x20000124

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b02:	f000 fccf 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b06:	f000 f865 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0a:	f000 f98b 	bl	8000e24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b0e:	f000 f963 	bl	8000dd8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b12:	f000 f8a5 	bl	8000c60 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b16:	f000 f8d1 	bl	8000cbc <MX_I2C2_Init>
  MX_SPI1_Init();
 8000b1a:	f000 f8fd 	bl	8000d18 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b1e:	f000 f931 	bl	8000d84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  accel_Init();
 8000b22:	f000 fb9b 	bl	800125c <accel_Init>

  //pin_state1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // Lê o estado do pino GPIO14 para carga 1
  //pin_state2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); // Lê o estado do pino GPIO15 para carga 2

  // INICIALIZA ESTADO DOS INDICADORES DE PRÉ LANÇAMENTO
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); //LED
 8000b26:	2200      	movs	r2, #0
 8000b28:	2108      	movs	r1, #8
 8000b2a:	4824      	ldr	r0, [pc, #144]	; (8000bbc <main+0xc0>)
 8000b2c:	f001 fa42 	bl	8001fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //BUZER
 8000b30:	2200      	movs	r2, #0
 8000b32:	2110      	movs	r1, #16
 8000b34:	4821      	ldr	r0, [pc, #132]	; (8000bbc <main+0xc0>)
 8000b36:	f001 fa3d 	bl	8001fb4 <HAL_GPIO_WritePin>

  // INICIALIZA OS PINOS DE ACIONAR CARGA
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // ACIONA CARGA 1 = 0
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b40:	481e      	ldr	r0, [pc, #120]	; (8000bbc <main+0xc0>)
 8000b42:	f001 fa37 	bl	8001fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); //ACIONA CARGA 2 = 0
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4c:	481b      	ldr	r0, [pc, #108]	; (8000bbc <main+0xc0>)
 8000b4e:	f001 fa31 	bl	8001fb4 <HAL_GPIO_WritePin>
  while (1)
  {
	uint16_t i;
	uint8_t data[6];

	for (i = 0; i < 6; i++) {
 8000b52:	2300      	movs	r3, #0
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	e00a      	b.n	8000b6e <main+0x72>
		memcpy(&data[i], &data_ad[i],1);
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	463a      	mov	r2, r7
 8000b5c:	4413      	add	r3, r2
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	4917      	ldr	r1, [pc, #92]	; (8000bc0 <main+0xc4>)
 8000b62:	440a      	add	r2, r1
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 6; i++) {
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	80fb      	strh	r3, [r7, #6]
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d9f1      	bls.n	8000b58 <main+0x5c>
	}

	FRAM_ID();
 8000b74:	f7ff ff0a 	bl	800098c <FRAM_ID>
	FRAM_enablewrite();
 8000b78:	f7ff ff2a 	bl	80009d0 <FRAM_enablewrite>
	FRAM_Write(0x6000, data, 6);
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2206      	movs	r2, #6
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8000b86:	f7ff ff3d 	bl	8000a04 <FRAM_Write>
	FRAM_Read(0x6000, datareceive, 6);
 8000b8a:	2206      	movs	r2, #6
 8000b8c:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <main+0xc8>)
 8000b8e:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8000b92:	f7ff ff75 	bl	8000a80 <FRAM_Read>

	while (HAL_DMA_GetState(&hdma_i2c1_rx) != HAL_DMA_STATE_READY);
 8000b96:	bf00      	nop
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <main+0xcc>)
 8000b9a:	f001 f84d 	bl	8001c38 <HAL_DMA_GetState>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d1f9      	bne.n	8000b98 <main+0x9c>
	{
		read_accel(data_ac);
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <main+0xd0>)
 8000ba6:	f000 fbaf 	bl	8001308 <read_accel>
		read_gyro(data_gy);
 8000baa:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <main+0xd4>)
 8000bac:	f000 fc00 	bl	80013b0 <read_gyro>
	}

	//BMP280_Measure(temp, press);

	//altitude = (float)(44330 * (1 - pow((pressure / pressureSeaLevel), (1 / 5.255))));
	HAL_Delay(500);
 8000bb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb4:	f000 fcd8 	bl	8001568 <HAL_Delay>
  {
 8000bb8:	e7cb      	b.n	8000b52 <main+0x56>
 8000bba:	bf00      	nop
 8000bbc:	40010c00 	.word	0x40010c00
 8000bc0:	20000004 	.word	0x20000004
 8000bc4:	200001c0 	.word	0x200001c0
 8000bc8:	200000e0 	.word	0x200000e0
 8000bcc:	200001c8 	.word	0x200001c8
 8000bd0:	200001d4 	.word	0x200001d4

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b090      	sub	sp, #64	; 0x40
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	2228      	movs	r2, #40	; 0x28
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f005 fac4 	bl	8006170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 f821 	bl	8004c64 <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c28:	f000 f96c 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c30:	2302      	movs	r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2102      	movs	r1, #2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f004 fa8e 	bl	8005168 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c52:	f000 f957 	bl	8000f04 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3740      	adds	r7, #64	; 0x40
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <MX_I2C1_Init+0x54>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_I2C1_Init+0x58>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c9e:	f001 f9a1 	bl	8001fe4 <HAL_I2C_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca8:	f000 f92c 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000038 	.word	0x20000038
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	00061a80 	.word	0x00061a80

08000cbc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <MX_I2C2_Init+0x54>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <MX_I2C2_Init+0x58>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cde:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cfa:	f001 f973 	bl	8001fe4 <HAL_I2C_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d04:	f000 f8fe 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000008c 	.word	0x2000008c
 8000d10:	40005800 	.word	0x40005800
 8000d14:	00061a80 	.word	0x00061a80

08000d18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d1e:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d4c:	2218      	movs	r2, #24
 8000d4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d64:	220a      	movs	r2, #10
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d6a:	f004 fb95 	bl	8005498 <HAL_SPI_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d74:	f000 f8c6 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000124 	.word	0x20000124
 8000d80:	40013000 	.word	0x40013000

08000d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <MX_USART2_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f005 f8d8 	bl	8005f70 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f000 f89d 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000017c 	.word	0x2000017c
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_DMA_Init+0x48>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <MX_DMA_Init+0x48>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6153      	str	r3, [r2, #20]
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <MX_DMA_Init+0x48>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	200f      	movs	r0, #15
 8000dfc:	f000 fcaf 	bl	800175e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e00:	200f      	movs	r0, #15
 8000e02:	f000 fcc8 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2011      	movs	r0, #17
 8000e0c:	f000 fca7 	bl	800175e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e10:	2011      	movs	r0, #17
 8000e12:	f000 fcc0 	bl	8001796 <HAL_NVIC_EnableIRQ>

}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a2e      	ldr	r2, [pc, #184]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e3e:	f043 0320 	orr.w	r3, r3, #32
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8000e80:	2200      	movs	r2, #0
 8000e82:	f243 0119 	movw	r1, #12313	; 0x3019
 8000e86:	481d      	ldr	r0, [pc, #116]	; (8000efc <MX_GPIO_Init+0xd8>)
 8000e88:	f001 f894 	bl	8001fb4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e92:	481b      	ldr	r0, [pc, #108]	; (8000f00 <MX_GPIO_Init+0xdc>)
 8000e94:	f001 f88e 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB12 PB13 PB3
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8000e98:	f243 0319 	movw	r3, #12313	; 0x3019
 8000e9c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4812      	ldr	r0, [pc, #72]	; (8000efc <MX_GPIO_Init+0xd8>)
 8000eb2:	f000 fefb 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000eb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_GPIO_Init+0xd8>)
 8000ecc:	f000 feee 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_GPIO_Init+0xdc>)
 8000eea:	f000 fedf 	bl	8001cac <HAL_GPIO_Init>

}
 8000eee:	bf00      	nop
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010c00 	.word	0x40010c00
 8000f00:	40010800 	.word	0x40010800

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6193      	str	r3, [r2, #24]
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	61d3      	str	r3, [r2, #28]
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_MspInit+0x60>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_MspInit+0x60>)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010000 	.word	0x40010000

08000f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a42      	ldr	r2, [pc, #264]	; (8001098 <HAL_I2C_MspInit+0x124>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d152      	bne.n	800103a <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b41      	ldr	r3, [pc, #260]	; (800109c <HAL_I2C_MspInit+0x128>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a40      	ldr	r2, [pc, #256]	; (800109c <HAL_I2C_MspInit+0x128>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	; (800109c <HAL_I2C_MspInit+0x128>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fac:	23c0      	movs	r3, #192	; 0xc0
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb0:	2312      	movs	r3, #18
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 0318 	add.w	r3, r7, #24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4838      	ldr	r0, [pc, #224]	; (80010a0 <HAL_I2C_MspInit+0x12c>)
 8000fc0:	f000 fe74 	bl	8001cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <HAL_I2C_MspInit+0x128>)
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	4a34      	ldr	r2, [pc, #208]	; (800109c <HAL_I2C_MspInit+0x128>)
 8000fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fce:	61d3      	str	r3, [r2, #28]
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <HAL_I2C_MspInit+0x128>)
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 8000fde:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <HAL_I2C_MspInit+0x134>)
 8000fe0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe2:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001000:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001006:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800100c:	4825      	ldr	r0, [pc, #148]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 800100e:	f000 fbdd 	bl	80017cc <HAL_DMA_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001018:	f7ff ff74 	bl	8000f04 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 8001020:	639a      	str	r2, [r3, #56]	; 0x38
 8001022:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <HAL_I2C_MspInit+0x130>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	201f      	movs	r0, #31
 800102e:	f000 fb96 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001032:	201f      	movs	r0, #31
 8001034:	f000 fbaf 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001038:	e029      	b.n	800108e <HAL_I2C_MspInit+0x11a>
  else if(hi2c->Instance==I2C2)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d124      	bne.n	800108e <HAL_I2C_MspInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_I2C_MspInit+0x128>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_I2C_MspInit+0x128>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_I2C_MspInit+0x128>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800105c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001062:	2312      	movs	r3, #18
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	4619      	mov	r1, r3
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <HAL_I2C_MspInit+0x12c>)
 8001072:	f000 fe1b 	bl	8001cac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_I2C_MspInit+0x128>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_I2C_MspInit+0x128>)
 800107c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_I2C_MspInit+0x128>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40005400 	.word	0x40005400
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	200000e0 	.word	0x200000e0
 80010a8:	40020080 	.word	0x40020080
 80010ac:	40005800 	.word	0x40005800

080010b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d12f      	bne.n	8001130 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_SPI_MspInit+0x8c>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_SPI_MspInit+0x8c>)
 80010d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_SPI_MspInit+0x8c>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_SPI_MspInit+0x8c>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a13      	ldr	r2, [pc, #76]	; (800113c <HAL_SPI_MspInit+0x8c>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_SPI_MspInit+0x8c>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001100:	23a0      	movs	r3, #160	; 0xa0
 8001102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	480b      	ldr	r0, [pc, #44]	; (8001140 <HAL_SPI_MspInit+0x90>)
 8001114:	f000 fdca 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001118:	2340      	movs	r3, #64	; 0x40
 800111a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <HAL_SPI_MspInit+0x90>)
 800112c:	f000 fdbe 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40013000 	.word	0x40013000
 800113c:	40021000 	.word	0x40021000
 8001140:	40010800 	.word	0x40010800

08001144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_UART_MspInit+0x88>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d12f      	bne.n	80011c4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_UART_MspInit+0x8c>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_UART_MspInit+0x8c>)
 800116a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116e:	61d3      	str	r3, [r2, #28]
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_UART_MspInit+0x8c>)
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_UART_MspInit+0x8c>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <HAL_UART_MspInit+0x8c>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_UART_MspInit+0x8c>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001194:	2304      	movs	r3, #4
 8001196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4619      	mov	r1, r3
 80011a6:	480b      	ldr	r0, [pc, #44]	; (80011d4 <HAL_UART_MspInit+0x90>)
 80011a8:	f000 fd80 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ac:	2308      	movs	r3, #8
 80011ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_UART_MspInit+0x90>)
 80011c0:	f000 fd74 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40004400 	.word	0x40004400
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <NMI_Handler+0x4>

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121e:	f000 f987 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <DMA1_Channel7_IRQHandler+0x10>)
 800122e:	f000 fbfd 	bl	8001a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200000e0 	.word	0x200000e0

0800123c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <I2C1_EV_IRQHandler+0x10>)
 8001242:	f001 fcf3 	bl	8002c2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000038 	.word	0x20000038

08001250 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <accel_Init>:
int16_t  Accel_RAW[3], Gyro_RAW[3];
float Accel_data[3], Gyro_data[3];


void accel_Init (void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af04      	add	r7, sp, #16
	//MPU6050

	uint8_t check;
	uint8_t data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000); 	// WHO_AM_I ~ 6050
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	2301      	movs	r3, #1
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2301      	movs	r3, #1
 8001272:	2275      	movs	r2, #117	; 0x75
 8001274:	21d0      	movs	r1, #208	; 0xd0
 8001276:	4823      	ldr	r0, [pc, #140]	; (8001304 <accel_Init+0xa8>)
 8001278:	f001 f8f2 	bl	8002460 <HAL_I2C_Mem_Read>
	//HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1);

	if (check == 104) // devise is present
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b68      	cmp	r3, #104	; 0x68
 8001280:	d13b      	bne.n	80012fa <accel_Init+0x9e>
	{
		// power management register 0x6B we should write all 0s to wake the sensor up
		data = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	1dbb      	adds	r3, r7, #6
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	226b      	movs	r2, #107	; 0x6b
 8001298:	21d0      	movs	r1, #208	; 0xd0
 800129a:	481a      	ldr	r0, [pc, #104]	; (8001304 <accel_Init+0xa8>)
 800129c:	f000 ffe6 	bl	800226c <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1);

		// set DATA RATE of 1KHz by writing SMPLRT_DIV register
		data  =  0x07;
 80012a0:	2307      	movs	r3, #7
 80012a2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 80012a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	1dbb      	adds	r3, r7, #6
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	2219      	movs	r2, #25
 80012b6:	21d0      	movs	r1, #208	; 0xd0
 80012b8:	4812      	ldr	r0, [pc, #72]	; (8001304 <accel_Init+0xa8>)
 80012ba:	f000 ffd7 	bl	800226c <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1);

		// set accelerometer e gyroscopic configuration in ACCEL_CONFIG and GYRO_CONFIG
		data = 0x00;
 80012be:	2300      	movs	r3, #0
 80012c0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	1dbb      	adds	r3, r7, #6
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	2219      	movs	r2, #25
 80012d4:	21d0      	movs	r1, #208	; 0xd0
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <accel_Init+0xa8>)
 80012d8:	f000 ffc8 	bl	800226c <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1);

		data = 0x00;
 80012dc:	2300      	movs	r3, #0
 80012de:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 80012e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	1dbb      	adds	r3, r7, #6
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	221b      	movs	r2, #27
 80012f2:	21d0      	movs	r1, #208	; 0xd0
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <accel_Init+0xa8>)
 80012f6:	f000 ffb9 	bl	800226c <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1);
	}
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000038 	.word	0x20000038

08001308 <read_accel>:

void read_accel(float *Accel_data)
//void read_accel(void)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af02      	add	r7, sp, #8
 800130e:	6078      	str	r0, [r7, #4]
	uint8_t rec_data[6];

	// Lê 6 BYTES de dados a partir do registrador ACCEL_XOUT_H [ACELERÔMETRO]
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data, 6, 1000);
	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data, 6);
 8001310:	2306      	movs	r3, #6
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	223b      	movs	r2, #59	; 0x3b
 800131e:	21d0      	movs	r1, #208	; 0xd0
 8001320:	481f      	ldr	r0, [pc, #124]	; (80013a0 <read_accel+0x98>)
 8001322:	f001 fb05 	bl	8002930 <HAL_I2C_Mem_Read_DMA>

	/* converter os valores RAW em aceleração em 'g'
	   dividir de acordo com o valor Full scale definido em FS_SEL
	   FS_SEL = 0. Então, deve ser dividido por 16384 */

	for (int i = 0; i < 3 ; i++ ){
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e030      	b.n	800138e <read_accel+0x86>
		Accel_RAW[i] = (int16_t)(rec_data[i*2] << 8 | rec_data [(i*2)+1]);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	3318      	adds	r3, #24
 8001332:	443b      	add	r3, r7
 8001334:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21a      	sxth	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	3301      	adds	r3, #1
 8001342:	3318      	adds	r3, #24
 8001344:	443b      	add	r3, r7
 8001346:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b219      	sxth	r1, r3
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <read_accel+0x9c>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Accel_data[i] = (Accel_RAW[i])/16384.0;   // obtém o float g
 8001358:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <read_accel+0x9c>)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f847 	bl	80003f4 <__aeabi_i2d>
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <read_accel+0xa0>)
 800136c:	f7ff f9d6 	bl	800071c <__aeabi_ddiv>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	18d4      	adds	r4, r2, r3
 8001380:	f7ff fab4 	bl	80008ec <__aeabi_d2f>
 8001384:	4603      	mov	r3, r0
 8001386:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3 ; i++ ){
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b02      	cmp	r3, #2
 8001392:	ddcb      	ble.n	800132c <read_accel+0x24>
		//memcpy(&data[i*2], &Accel_data[i], 2);
	}
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000038 	.word	0x20000038
 80013a4:	200001e0 	.word	0x200001e0
 80013a8:	40d00000 	.word	0x40d00000
 80013ac:	00000000 	.word	0x00000000

080013b0 <read_gyro>:

void read_gyro(float *Gyro_data)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
	uint8_t rec_data2[6];

	// Lê 6 BYTES de dados a partir do registrador GYRO_XOUT_H [GIROSCÓPIO]
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, rec_data2, 6, 1000);
	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, rec_data2, 6);
 80013b8:	2306      	movs	r3, #6
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	2243      	movs	r2, #67	; 0x43
 80013c6:	21d0      	movs	r1, #208	; 0xd0
 80013c8:	4821      	ldr	r0, [pc, #132]	; (8001450 <read_gyro+0xa0>)
 80013ca:	f001 fab1 	bl	8002930 <HAL_I2C_Mem_Read_DMA>
	/* converter os valores RAW em dps (°/s)
	   dividir de acordo com o valor Full scale definido em FS_SEL
	   FS_SEL = 0. Então, deve ser dividido por 131.0  */

	for (int i = 0; i < 3 ; i++ ){
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e030      	b.n	8001436 <read_gyro+0x86>
		Gyro_RAW[i] = (int16_t)(rec_data2[i*2] << 8 | rec_data2 [(i*2)+1]);
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	3318      	adds	r3, #24
 80013da:	443b      	add	r3, r7
 80013dc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	3301      	adds	r3, #1
 80013ea:	3318      	adds	r3, #24
 80013ec:	443b      	add	r3, r7
 80013ee:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b219      	sxth	r1, r3
 80013f8:	4a16      	ldr	r2, [pc, #88]	; (8001454 <read_gyro+0xa4>)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Gyro_data[i] = (Gyro_RAW[i])/131.0;
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <read_gyro+0xa4>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001408:	4618      	mov	r0, r3
 800140a:	f7fe fff3 	bl	80003f4 <__aeabi_i2d>
 800140e:	a30e      	add	r3, pc, #56	; (adr r3, 8001448 <read_gyro+0x98>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7ff f982 	bl	800071c <__aeabi_ddiv>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	18d4      	adds	r4, r2, r3
 8001428:	f7ff fa60 	bl	80008ec <__aeabi_d2f>
 800142c:	4603      	mov	r3, r0
 800142e:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3 ; i++ ){
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b02      	cmp	r3, #2
 800143a:	ddcb      	ble.n	80013d4 <read_gyro+0x24>
		//memcpy(&data[i*2], &Gyro_data[i], 2);
	}
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd90      	pop	{r4, r7, pc}
 8001446:	bf00      	nop
 8001448:	00000000 	.word	0x00000000
 800144c:	40606000 	.word	0x40606000
 8001450:	20000038 	.word	0x20000038
 8001454:	200001e8 	.word	0x200001e8

08001458 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	; (8001490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	; (800149c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800147e:	f7ff fee7 	bl	8001250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001482:	f004 fe51 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001486:	f7ff fb39 	bl	8000afc <main>
  bx lr
 800148a:	4770      	bx	lr
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001494:	080061c8 	.word	0x080061c8
  ldr r2, =_sbss
 8001498:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800149c:	200001f4 	.word	0x200001f4

080014a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_2_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_Init+0x28>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_Init+0x28>)
 80014ae:	f043 0310 	orr.w	r3, r3, #16
 80014b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f947 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ba:	200f      	movs	r0, #15
 80014bc:	f000 f808 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff fd26 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40022000 	.word	0x40022000

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x54>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f95f 	bl	80017b2 <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f927 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_InitTick+0x5c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000000c 	.word	0x2000000c
 8001528:	20000014 	.word	0x20000014
 800152c:	20000010 	.word	0x20000010

08001530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x1c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x20>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a03      	ldr	r2, [pc, #12]	; (8001550 <HAL_IncTick+0x20>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	20000014 	.word	0x20000014
 8001550:	200001f0 	.word	0x200001f0

08001554 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b02      	ldr	r3, [pc, #8]	; (8001564 <HAL_GetTick+0x10>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	200001f0 	.word	0x200001f0

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff fff0 	bl	8001554 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffe0 	bl	8001554 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000014 	.word	0x20000014

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4906      	ldr	r1, [pc, #24]	; (8001648 <__NVIC_EnableIRQ+0x34>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f7ff ff90 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff2d 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff42 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff90 	bl	80016a0 <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5f 	bl	800164c <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff35 	bl	8001614 <__NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffa2 	bl	8001704 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e043      	b.n	800186a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_DMA_Init+0xa8>)
 80017ea:	4413      	add	r3, r2
 80017ec:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_DMA_Init+0xac>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	009a      	lsls	r2, r3, #2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1f      	ldr	r2, [pc, #124]	; (800187c <HAL_DMA_Init+0xb0>)
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2202      	movs	r2, #2
 8001804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001816:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800181a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	bffdfff8 	.word	0xbffdfff8
 8001878:	cccccccd 	.word	0xcccccccd
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_DMA_Start_IT+0x20>
 800189c:	2302      	movs	r3, #2
 800189e:	e04a      	b.n	8001936 <HAL_DMA_Start_IT+0xb6>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d13a      	bne.n	8001928 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2202      	movs	r2, #2
 80018b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 f9ba 	bl	8001c50 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 020e 	orr.w	r2, r2, #14
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e00f      	b.n	8001916 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0204 	bic.w	r2, r2, #4
 8001904:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 020a 	orr.w	r2, r2, #10
 8001914:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e005      	b.n	8001934 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001930:	2302      	movs	r3, #2
 8001932:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001934:	7dfb      	ldrb	r3, [r7, #23]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001952:	2b02      	cmp	r3, #2
 8001954:	d005      	beq.n	8001962 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2204      	movs	r2, #4
 800195a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e051      	b.n	8001a06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 020e 	bic.w	r2, r2, #14
 8001970:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <HAL_DMA_Abort_IT+0xd0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d029      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xa0>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a20      	ldr	r2, [pc, #128]	; (8001a14 <HAL_DMA_Abort_IT+0xd4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d022      	beq.n	80019dc <HAL_DMA_Abort_IT+0x9c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <HAL_DMA_Abort_IT+0xd8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d01a      	beq.n	80019d6 <HAL_DMA_Abort_IT+0x96>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <HAL_DMA_Abort_IT+0xdc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d012      	beq.n	80019d0 <HAL_DMA_Abort_IT+0x90>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <HAL_DMA_Abort_IT+0xe0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d00a      	beq.n	80019ca <HAL_DMA_Abort_IT+0x8a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <HAL_DMA_Abort_IT+0xe4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d102      	bne.n	80019c4 <HAL_DMA_Abort_IT+0x84>
 80019be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019c2:	e00e      	b.n	80019e2 <HAL_DMA_Abort_IT+0xa2>
 80019c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c8:	e00b      	b.n	80019e2 <HAL_DMA_Abort_IT+0xa2>
 80019ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ce:	e008      	b.n	80019e2 <HAL_DMA_Abort_IT+0xa2>
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	e005      	b.n	80019e2 <HAL_DMA_Abort_IT+0xa2>
 80019d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019da:	e002      	b.n	80019e2 <HAL_DMA_Abort_IT+0xa2>
 80019dc:	2310      	movs	r3, #16
 80019de:	e000      	b.n	80019e2 <HAL_DMA_Abort_IT+0xa2>
 80019e0:	2301      	movs	r3, #1
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_DMA_Abort_IT+0xe8>)
 80019e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
    } 
  }
  return status;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40020008 	.word	0x40020008
 8001a14:	4002001c 	.word	0x4002001c
 8001a18:	40020030 	.word	0x40020030
 8001a1c:	40020044 	.word	0x40020044
 8001a20:	40020058 	.word	0x40020058
 8001a24:	4002006c 	.word	0x4002006c
 8001a28:	40020000 	.word	0x40020000

08001a2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	2204      	movs	r2, #4
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d04f      	beq.n	8001af4 <HAL_DMA_IRQHandler+0xc8>
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d04a      	beq.n	8001af4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0204 	bic.w	r2, r2, #4
 8001a7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a66      	ldr	r2, [pc, #408]	; (8001c1c <HAL_DMA_IRQHandler+0x1f0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d029      	beq.n	8001ada <HAL_DMA_IRQHandler+0xae>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <HAL_DMA_IRQHandler+0x1f4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d022      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0xaa>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <HAL_DMA_IRQHandler+0x1f8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01a      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xa4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a62      	ldr	r2, [pc, #392]	; (8001c28 <HAL_DMA_IRQHandler+0x1fc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d012      	beq.n	8001aca <HAL_DMA_IRQHandler+0x9e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a60      	ldr	r2, [pc, #384]	; (8001c2c <HAL_DMA_IRQHandler+0x200>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00a      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x98>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a5f      	ldr	r2, [pc, #380]	; (8001c30 <HAL_DMA_IRQHandler+0x204>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d102      	bne.n	8001abe <HAL_DMA_IRQHandler+0x92>
 8001ab8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001abc:	e00e      	b.n	8001adc <HAL_DMA_IRQHandler+0xb0>
 8001abe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ac2:	e00b      	b.n	8001adc <HAL_DMA_IRQHandler+0xb0>
 8001ac4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ac8:	e008      	b.n	8001adc <HAL_DMA_IRQHandler+0xb0>
 8001aca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ace:	e005      	b.n	8001adc <HAL_DMA_IRQHandler+0xb0>
 8001ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad4:	e002      	b.n	8001adc <HAL_DMA_IRQHandler+0xb0>
 8001ad6:	2340      	movs	r3, #64	; 0x40
 8001ad8:	e000      	b.n	8001adc <HAL_DMA_IRQHandler+0xb0>
 8001ada:	2304      	movs	r3, #4
 8001adc:	4a55      	ldr	r2, [pc, #340]	; (8001c34 <HAL_DMA_IRQHandler+0x208>)
 8001ade:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8094 	beq.w	8001c12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001af2:	e08e      	b.n	8001c12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	2202      	movs	r2, #2
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d056      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x186>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d051      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10b      	bne.n	8001b34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 020a 	bic.w	r2, r2, #10
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a38      	ldr	r2, [pc, #224]	; (8001c1c <HAL_DMA_IRQHandler+0x1f0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d029      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x166>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a37      	ldr	r2, [pc, #220]	; (8001c20 <HAL_DMA_IRQHandler+0x1f4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d022      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x162>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a35      	ldr	r2, [pc, #212]	; (8001c24 <HAL_DMA_IRQHandler+0x1f8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d01a      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x15c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a34      	ldr	r2, [pc, #208]	; (8001c28 <HAL_DMA_IRQHandler+0x1fc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d012      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x156>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <HAL_DMA_IRQHandler+0x200>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00a      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x150>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <HAL_DMA_IRQHandler+0x204>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d102      	bne.n	8001b76 <HAL_DMA_IRQHandler+0x14a>
 8001b70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b74:	e00e      	b.n	8001b94 <HAL_DMA_IRQHandler+0x168>
 8001b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7a:	e00b      	b.n	8001b94 <HAL_DMA_IRQHandler+0x168>
 8001b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b80:	e008      	b.n	8001b94 <HAL_DMA_IRQHandler+0x168>
 8001b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b86:	e005      	b.n	8001b94 <HAL_DMA_IRQHandler+0x168>
 8001b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b8c:	e002      	b.n	8001b94 <HAL_DMA_IRQHandler+0x168>
 8001b8e:	2320      	movs	r3, #32
 8001b90:	e000      	b.n	8001b94 <HAL_DMA_IRQHandler+0x168>
 8001b92:	2302      	movs	r3, #2
 8001b94:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <HAL_DMA_IRQHandler+0x208>)
 8001b96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d034      	beq.n	8001c12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bb0:	e02f      	b.n	8001c12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d028      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x1e8>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 020e 	bic.w	r2, r2, #14
 8001bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
    }
  }
  return;
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
}
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40020008 	.word	0x40020008
 8001c20:	4002001c 	.word	0x4002001c
 8001c24:	40020030 	.word	0x40020030
 8001c28:	40020044 	.word	0x40020044
 8001c2c:	40020058 	.word	0x40020058
 8001c30:	4002006c 	.word	0x4002006c
 8001c34:	40020000 	.word	0x40020000

08001c38 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d108      	bne.n	8001c90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c8e:	e007      	b.n	8001ca0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	60da      	str	r2, [r3, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b08b      	sub	sp, #44	; 0x2c
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e169      	b.n	8001f94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8158 	bne.w	8001f8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a9a      	ldr	r2, [pc, #616]	; (8001f4c <HAL_GPIO_Init+0x2a0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d05e      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a98      	ldr	r2, [pc, #608]	; (8001f4c <HAL_GPIO_Init+0x2a0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d875      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cee:	4a98      	ldr	r2, [pc, #608]	; (8001f50 <HAL_GPIO_Init+0x2a4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d058      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a96      	ldr	r2, [pc, #600]	; (8001f50 <HAL_GPIO_Init+0x2a4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d86f      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cfa:	4a96      	ldr	r2, [pc, #600]	; (8001f54 <HAL_GPIO_Init+0x2a8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d052      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d00:	4a94      	ldr	r2, [pc, #592]	; (8001f54 <HAL_GPIO_Init+0x2a8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d869      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d06:	4a94      	ldr	r2, [pc, #592]	; (8001f58 <HAL_GPIO_Init+0x2ac>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d04c      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d0c:	4a92      	ldr	r2, [pc, #584]	; (8001f58 <HAL_GPIO_Init+0x2ac>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d863      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d12:	4a92      	ldr	r2, [pc, #584]	; (8001f5c <HAL_GPIO_Init+0x2b0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d046      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a90      	ldr	r2, [pc, #576]	; (8001f5c <HAL_GPIO_Init+0x2b0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d85d      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d1e:	2b12      	cmp	r3, #18
 8001d20:	d82a      	bhi.n	8001d78 <HAL_GPIO_Init+0xcc>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d859      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d26:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_GPIO_Init+0x80>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001da7 	.word	0x08001da7
 8001d30:	08001d81 	.word	0x08001d81
 8001d34:	08001d93 	.word	0x08001d93
 8001d38:	08001dd5 	.word	0x08001dd5
 8001d3c:	08001ddb 	.word	0x08001ddb
 8001d40:	08001ddb 	.word	0x08001ddb
 8001d44:	08001ddb 	.word	0x08001ddb
 8001d48:	08001ddb 	.word	0x08001ddb
 8001d4c:	08001ddb 	.word	0x08001ddb
 8001d50:	08001ddb 	.word	0x08001ddb
 8001d54:	08001ddb 	.word	0x08001ddb
 8001d58:	08001ddb 	.word	0x08001ddb
 8001d5c:	08001ddb 	.word	0x08001ddb
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001ddb 	.word	0x08001ddb
 8001d68:	08001ddb 	.word	0x08001ddb
 8001d6c:	08001ddb 	.word	0x08001ddb
 8001d70:	08001d89 	.word	0x08001d89
 8001d74:	08001d9d 	.word	0x08001d9d
 8001d78:	4a79      	ldr	r2, [pc, #484]	; (8001f60 <HAL_GPIO_Init+0x2b4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d7e:	e02c      	b.n	8001dda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e029      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	623b      	str	r3, [r7, #32]
          break;
 8001d90:	e024      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	3308      	adds	r3, #8
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e01f      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	330c      	adds	r3, #12
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e01a      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dae:	2304      	movs	r3, #4
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e013      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	611a      	str	r2, [r3, #16]
          break;
 8001dc6:	e009      	b.n	8001ddc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	615a      	str	r2, [r3, #20]
          break;
 8001dd2:	e003      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          break;
 8001dda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2bff      	cmp	r3, #255	; 0xff
 8001de0:	d801      	bhi.n	8001de6 <HAL_GPIO_Init+0x13a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_Init+0x13e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2bff      	cmp	r3, #255	; 0xff
 8001df0:	d802      	bhi.n	8001df8 <HAL_GPIO_Init+0x14c>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x152>
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	3b08      	subs	r3, #8
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	210f      	movs	r1, #15
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	6a39      	ldr	r1, [r7, #32]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80b1 	beq.w	8001f8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	; (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e44:	4a48      	ldr	r2, [pc, #288]	; (8001f68 <HAL_GPIO_Init+0x2bc>)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a40      	ldr	r2, [pc, #256]	; (8001f6c <HAL_GPIO_Init+0x2c0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3f      	ldr	r2, [pc, #252]	; (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00d      	beq.n	8001e94 <HAL_GPIO_Init+0x1e8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3e      	ldr	r2, [pc, #248]	; (8001f74 <HAL_GPIO_Init+0x2c8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d007      	beq.n	8001e90 <HAL_GPIO_Init+0x1e4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3d      	ldr	r2, [pc, #244]	; (8001f78 <HAL_GPIO_Init+0x2cc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <HAL_GPIO_Init+0x1e0>
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e006      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	e004      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9c:	f002 0203 	and.w	r2, r2, #3
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eaa:	492f      	ldr	r1, [pc, #188]	; (8001f68 <HAL_GPIO_Init+0x2bc>)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	492c      	ldr	r1, [pc, #176]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	4928      	ldr	r1, [pc, #160]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eec:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4922      	ldr	r1, [pc, #136]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	491e      	ldr	r1, [pc, #120]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	4918      	ldr	r1, [pc, #96]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4914      	ldr	r1, [pc, #80]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d021      	beq.n	8001f80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
 8001f48:	e021      	b.n	8001f8e <HAL_GPIO_Init+0x2e2>
 8001f4a:	bf00      	nop
 8001f4c:	10320000 	.word	0x10320000
 8001f50:	10310000 	.word	0x10310000
 8001f54:	10220000 	.word	0x10220000
 8001f58:	10210000 	.word	0x10210000
 8001f5c:	10120000 	.word	0x10120000
 8001f60:	10110000 	.word	0x10110000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40010800 	.word	0x40010800
 8001f70:	40010c00 	.word	0x40010c00
 8001f74:	40011000 	.word	0x40011000
 8001f78:	40011400 	.word	0x40011400
 8001f7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	4909      	ldr	r1, [pc, #36]	; (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f47f ae8e 	bne.w	8001cc0 <HAL_GPIO_Init+0x14>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	372c      	adds	r7, #44	; 0x2c
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e12b      	b.n	800224e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe ffb2 	bl	8000f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2224      	movs	r2, #36	; 0x24
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002048:	f003 f9e0 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 800204c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a81      	ldr	r2, [pc, #516]	; (8002258 <HAL_I2C_Init+0x274>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d807      	bhi.n	8002068 <HAL_I2C_Init+0x84>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a80      	ldr	r2, [pc, #512]	; (800225c <HAL_I2C_Init+0x278>)
 800205c:	4293      	cmp	r3, r2
 800205e:	bf94      	ite	ls
 8002060:	2301      	movls	r3, #1
 8002062:	2300      	movhi	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	e006      	b.n	8002076 <HAL_I2C_Init+0x92>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4a7d      	ldr	r2, [pc, #500]	; (8002260 <HAL_I2C_Init+0x27c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	bf94      	ite	ls
 8002070:	2301      	movls	r3, #1
 8002072:	2300      	movhi	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0e7      	b.n	800224e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4a78      	ldr	r2, [pc, #480]	; (8002264 <HAL_I2C_Init+0x280>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0c9b      	lsrs	r3, r3, #18
 8002088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	430a      	orrs	r2, r1
 800209c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4a6a      	ldr	r2, [pc, #424]	; (8002258 <HAL_I2C_Init+0x274>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d802      	bhi.n	80020b8 <HAL_I2C_Init+0xd4>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3301      	adds	r3, #1
 80020b6:	e009      	b.n	80020cc <HAL_I2C_Init+0xe8>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	4a69      	ldr	r2, [pc, #420]	; (8002268 <HAL_I2C_Init+0x284>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	3301      	adds	r3, #1
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	495c      	ldr	r1, [pc, #368]	; (8002258 <HAL_I2C_Init+0x274>)
 80020e8:	428b      	cmp	r3, r1
 80020ea:	d819      	bhi.n	8002120 <HAL_I2C_Init+0x13c>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1e59      	subs	r1, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020fa:	1c59      	adds	r1, r3, #1
 80020fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002100:	400b      	ands	r3, r1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_I2C_Init+0x138>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1e59      	subs	r1, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fbb1 f3f3 	udiv	r3, r1, r3
 8002114:	3301      	adds	r3, #1
 8002116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211a:	e051      	b.n	80021c0 <HAL_I2C_Init+0x1dc>
 800211c:	2304      	movs	r3, #4
 800211e:	e04f      	b.n	80021c0 <HAL_I2C_Init+0x1dc>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d111      	bne.n	800214c <HAL_I2C_Init+0x168>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1e58      	subs	r0, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	440b      	add	r3, r1
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e012      	b.n	8002172 <HAL_I2C_Init+0x18e>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e58      	subs	r0, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	0099      	lsls	r1, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002162:	3301      	adds	r3, #1
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Init+0x196>
 8002176:	2301      	movs	r3, #1
 8002178:	e022      	b.n	80021c0 <HAL_I2C_Init+0x1dc>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10e      	bne.n	80021a0 <HAL_I2C_Init+0x1bc>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1e58      	subs	r0, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	440b      	add	r3, r1
 8002190:	fbb0 f3f3 	udiv	r3, r0, r3
 8002194:	3301      	adds	r3, #1
 8002196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219e:	e00f      	b.n	80021c0 <HAL_I2C_Init+0x1dc>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1e58      	subs	r0, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	0099      	lsls	r1, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b6:	3301      	adds	r3, #1
 80021b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	6809      	ldr	r1, [r1, #0]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6911      	ldr	r1, [r2, #16]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68d2      	ldr	r2, [r2, #12]
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	430b      	orrs	r3, r1
 8002202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	000186a0 	.word	0x000186a0
 800225c:	001e847f 	.word	0x001e847f
 8002260:	003d08ff 	.word	0x003d08ff
 8002264:	431bde83 	.word	0x431bde83
 8002268:	10624dd3 	.word	0x10624dd3

0800226c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	461a      	mov	r2, r3
 800227a:	4603      	mov	r3, r0
 800227c:	817b      	strh	r3, [r7, #10]
 800227e:	460b      	mov	r3, r1
 8002280:	813b      	strh	r3, [r7, #8]
 8002282:	4613      	mov	r3, r2
 8002284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002286:	f7ff f965 	bl	8001554 <HAL_GetTick>
 800228a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b20      	cmp	r3, #32
 8002296:	f040 80d9 	bne.w	800244c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2319      	movs	r3, #25
 80022a0:	2201      	movs	r2, #1
 80022a2:	496d      	ldr	r1, [pc, #436]	; (8002458 <HAL_I2C_Mem_Write+0x1ec>)
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f002 fab5 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
 80022b2:	e0cc      	b.n	800244e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_Mem_Write+0x56>
 80022be:	2302      	movs	r3, #2
 80022c0:	e0c5      	b.n	800244e <HAL_I2C_Mem_Write+0x1e2>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d007      	beq.n	80022e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2221      	movs	r2, #33	; 0x21
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2240      	movs	r2, #64	; 0x40
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a3a      	ldr	r2, [r7, #32]
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a4d      	ldr	r2, [pc, #308]	; (800245c <HAL_I2C_Mem_Write+0x1f0>)
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800232a:	88f8      	ldrh	r0, [r7, #6]
 800232c:	893a      	ldrh	r2, [r7, #8]
 800232e:	8979      	ldrh	r1, [r7, #10]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4603      	mov	r3, r0
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f001 ff38 	bl	80041b0 <I2C_RequestMemoryWrite>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d052      	beq.n	80023ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e081      	b.n	800244e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f002 fb36 	bl	80049c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00d      	beq.n	8002376 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2b04      	cmp	r3, #4
 8002360:	d107      	bne.n	8002372 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06b      	b.n	800244e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d11b      	bne.n	80023ec <HAL_I2C_Mem_Write+0x180>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d017      	beq.n	80023ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1aa      	bne.n	800234a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f002 fb22 	bl	8004a42 <I2C_WaitOnBTFFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00d      	beq.n	8002420 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	2b04      	cmp	r3, #4
 800240a:	d107      	bne.n	800241c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e016      	b.n	800244e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	00100002 	.word	0x00100002
 800245c:	ffff0000 	.word	0xffff0000

08002460 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08c      	sub	sp, #48	; 0x30
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	461a      	mov	r2, r3
 800246e:	4603      	mov	r3, r0
 8002470:	817b      	strh	r3, [r7, #10]
 8002472:	460b      	mov	r3, r1
 8002474:	813b      	strh	r3, [r7, #8]
 8002476:	4613      	mov	r3, r2
 8002478:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800247e:	f7ff f869 	bl	8001554 <HAL_GetTick>
 8002482:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b20      	cmp	r3, #32
 800248e:	f040 8244 	bne.w	800291a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2319      	movs	r3, #25
 8002498:	2201      	movs	r2, #1
 800249a:	4982      	ldr	r1, [pc, #520]	; (80026a4 <HAL_I2C_Mem_Read+0x244>)
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f002 f9b9 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
 80024aa:	e237      	b.n	800291c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_I2C_Mem_Read+0x5a>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e230      	b.n	800291c <HAL_I2C_Mem_Read+0x4bc>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d007      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2222      	movs	r2, #34	; 0x22
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2240      	movs	r2, #64	; 0x40
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002510:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a62      	ldr	r2, [pc, #392]	; (80026a8 <HAL_I2C_Mem_Read+0x248>)
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002522:	88f8      	ldrh	r0, [r7, #6]
 8002524:	893a      	ldrh	r2, [r7, #8]
 8002526:	8979      	ldrh	r1, [r7, #10]
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	4603      	mov	r3, r0
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f001 fed2 	bl	80042dc <I2C_RequestMemoryRead>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1ec      	b.n	800291c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	2b00      	cmp	r3, #0
 8002548:	d113      	bne.n	8002572 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e1c0      	b.n	80028f4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002576:	2b01      	cmp	r3, #1
 8002578:	d11e      	bne.n	80025b8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002588:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800258a:	b672      	cpsid	i
}
 800258c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025b4:	b662      	cpsie	i
}
 80025b6:	e035      	b.n	8002624 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d11e      	bne.n	80025fe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025d0:	b672      	cpsid	i
}
 80025d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025fa:	b662      	cpsie	i
}
 80025fc:	e012      	b.n	8002624 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800260c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002624:	e166      	b.n	80028f4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	2b03      	cmp	r3, #3
 800262c:	f200 811f 	bhi.w	800286e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	2b01      	cmp	r3, #1
 8002636:	d123      	bne.n	8002680 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f002 fa73 	bl	8004b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e167      	b.n	800291c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800267e:	e139      	b.n	80028f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	2b02      	cmp	r3, #2
 8002686:	d152      	bne.n	800272e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268e:	2200      	movs	r2, #0
 8002690:	4906      	ldr	r1, [pc, #24]	; (80026ac <HAL_I2C_Mem_Read+0x24c>)
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f002 f8be 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e13c      	b.n	800291c <HAL_I2C_Mem_Read+0x4bc>
 80026a2:	bf00      	nop
 80026a4:	00100002 	.word	0x00100002
 80026a8:	ffff0000 	.word	0xffff0000
 80026ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026b0:	b672      	cpsid	i
}
 80026b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026f6:	b662      	cpsie	i
}
 80026f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800272c:	e0e2      	b.n	80028f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	2200      	movs	r2, #0
 8002736:	497b      	ldr	r1, [pc, #492]	; (8002924 <HAL_I2C_Mem_Read+0x4c4>)
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f002 f86b 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0e9      	b.n	800291c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002756:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800278e:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_I2C_Mem_Read+0x4c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	08db      	lsrs	r3, r3, #3
 8002794:	4a65      	ldr	r2, [pc, #404]	; (800292c <HAL_I2C_Mem_Read+0x4cc>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	0a1a      	lsrs	r2, r3, #8
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	00da      	lsls	r2, r3, #3
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d118      	bne.n	80027e6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f043 0220 	orr.w	r2, r3, #32
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027d6:	b662      	cpsie	i
}
 80027d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e09a      	b.n	800291c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d1d9      	bne.n	80027a8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002836:	b662      	cpsie	i
}
 8002838:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800286c:	e042      	b.n	80028f4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f002 f958 	bl	8004b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e04c      	b.n	800291c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d118      	bne.n	80028f4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f47f ae94 	bne.w	8002626 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3728      	adds	r7, #40	; 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	00010004 	.word	0x00010004
 8002928:	2000000c 	.word	0x2000000c
 800292c:	14f8b589 	.word	0x14f8b589

08002930 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08c      	sub	sp, #48	; 0x30
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	460b      	mov	r3, r1
 8002944:	813b      	strh	r3, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800294a:	f7fe fe03 	bl	8001554 <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	f040 8160 	bne.w	8002c22 <HAL_I2C_Mem_Read_DMA+0x2f2>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002962:	4b9c      	ldr	r3, [pc, #624]	; (8002bd4 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	4a9b      	ldr	r2, [pc, #620]	; (8002bd8 <HAL_I2C_Mem_Read_DMA+0x2a8>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0a1a      	lsrs	r2, r3, #8
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009a      	lsls	r2, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3b01      	subs	r3, #1
 8002980:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d116      	bne.n	80029b6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f043 0220 	orr.w	r2, r3, #32
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e136      	b.n	8002c24 <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d0db      	beq.n	800297c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_I2C_Mem_Read_DMA+0xa2>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e128      	b.n	8002c24 <HAL_I2C_Mem_Read_DMA+0x2f4>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d007      	beq.n	80029f8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2222      	movs	r2, #34	; 0x22
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a69      	ldr	r2, [pc, #420]	; (8002bdc <HAL_I2C_Mem_Read_DMA+0x2ac>)
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80b8 	beq.w	8002bb4 <HAL_I2C_Mem_Read_DMA+0x284>
    {
      if (hi2c->hdmarx != NULL)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d024      	beq.n	8002a96 <HAL_I2C_Mem_Read_DMA+0x166>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	4a63      	ldr	r2, [pc, #396]	; (8002be0 <HAL_I2C_Mem_Read_DMA+0x2b0>)
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	4a62      	ldr	r2, [pc, #392]	; (8002be4 <HAL_I2C_Mem_Read_DMA+0x2b4>)
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	2200      	movs	r2, #0
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	2200      	movs	r2, #0
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3310      	adds	r3, #16
 8002a76:	4619      	mov	r1, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	f7fe fefd 	bl	8001880 <HAL_DMA_Start_IT>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d17b      	bne.n	8002b8c <HAL_I2C_Mem_Read_DMA+0x25c>
 8002a94:	e013      	b.n	8002abe <HAL_I2C_Mem_Read_DMA+0x18e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0b2      	b.n	8002c24 <HAL_I2C_Mem_Read_DMA+0x2f4>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002abe:	88f8      	ldrh	r0, [r7, #6]
 8002ac0:	893a      	ldrh	r2, [r7, #8]
 8002ac2:	8979      	ldrh	r1, [r7, #10]
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	2323      	movs	r3, #35	; 0x23
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4603      	mov	r3, r0
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f001 fc04 	bl	80042dc <I2C_RequestMemoryRead>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d023      	beq.n	8002b22 <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe ff2e 	bl	8001940 <HAL_DMA_Abort_IT>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	2200      	movs	r2, #0
 8002af0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b00:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e080      	b.n	8002c24 <HAL_I2C_Mem_Read_DMA+0x2f4>
        }

        if (hi2c->XferSize == 1U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d108      	bne.n	8002b3c <HAL_I2C_Mem_Read_DMA+0x20c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e007      	b.n	8002b4c <HAL_I2C_Mem_Read_DMA+0x21c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b4a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b78:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	e048      	b.n	8002c1e <HAL_I2C_Mem_Read_DMA+0x2ee>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0210 	orr.w	r2, r3, #16
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e037      	b.n	8002c24 <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002bb4:	88f8      	ldrh	r0, [r7, #6]
 8002bb6:	893a      	ldrh	r2, [r7, #8]
 8002bb8:	8979      	ldrh	r1, [r7, #10]
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	2323      	movs	r3, #35	; 0x23
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f001 fb89 	bl	80042dc <I2C_RequestMemoryRead>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00b      	beq.n	8002be8 <HAL_I2C_Mem_Read_DMA+0x2b8>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e027      	b.n	8002c24 <HAL_I2C_Mem_Read_DMA+0x2f4>
 8002bd4:	2000000c 	.word	0x2000000c
 8002bd8:	14f8b589 	.word	0x14f8b589
 8002bdc:	ffff0000 	.word	0xffff0000
 8002be0:	080044ad 	.word	0x080044ad
 8002be4:	08004657 	.word	0x08004657
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e000      	b.n	8002c24 <HAL_I2C_Mem_Read_DMA+0x2f4>
  }
  else
  {
    return HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
  }
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d003      	beq.n	8002c64 <HAL_I2C_EV_IRQHandler+0x38>
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	f040 80c1 	bne.w	8002de6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10d      	bne.n	8002c9a <HAL_I2C_EV_IRQHandler+0x6e>
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c84:	d003      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x62>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_EV_IRQHandler+0x66>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_I2C_EV_IRQHandler+0x68>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f000 8132 	beq.w	8002efe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <HAL_I2C_EV_IRQHandler+0x92>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	0a5b      	lsrs	r3, r3, #9
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f001 ffbd 	bl	8004c30 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fcc8 	bl	800364c <I2C_Master_SB>
 8002cbc:	e092      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_I2C_EV_IRQHandler+0xb2>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	0a5b      	lsrs	r3, r3, #9
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fd3d 	bl	8003756 <I2C_Master_ADD10>
 8002cdc:	e082      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_I2C_EV_IRQHandler+0xd2>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	0a5b      	lsrs	r3, r3, #9
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fd56 	bl	80037a8 <I2C_Master_ADDR>
 8002cfc:	e072      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d03b      	beq.n	8002d82 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d18:	f000 80f3 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	09db      	lsrs	r3, r3, #7
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00f      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	0a9b      	lsrs	r3, r3, #10
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f942 	bl	8002fca <I2C_MasterTransmit_TXE>
 8002d46:	e04d      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80d6 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	0a5b      	lsrs	r3, r3, #9
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80cf 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d64:	7bbb      	ldrb	r3, [r7, #14]
 8002d66:	2b21      	cmp	r3, #33	; 0x21
 8002d68:	d103      	bne.n	8002d72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f9c9 	bl	8003102 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d70:	e0c7      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	f040 80c4 	bne.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa37 	bl	80031ee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d80:	e0bf      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d90:	f000 80b7 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00f      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x194>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	0a9b      	lsrs	r3, r3, #10
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x194>
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d103      	bne.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 faac 	bl	8003316 <I2C_MasterReceive_RXNE>
 8002dbe:	e011      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 809a 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0a5b      	lsrs	r3, r3, #9
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8093 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fb4b 	bl	8003478 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de2:	e08e      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002de4:	e08d      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e007      	b.n	8002e08 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <HAL_I2C_EV_IRQHandler+0x20e>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	0a5b      	lsrs	r3, r3, #9
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e30:	69b9      	ldr	r1, [r7, #24]
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 ff0f 	bl	8003c56 <I2C_Slave_ADDR>
 8002e38:	e066      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_I2C_EV_IRQHandler+0x22e>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	0a5b      	lsrs	r3, r3, #9
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 ff4a 	bl	8003cec <I2C_Slave_STOPF>
 8002e58:	e056      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e5a:	7bbb      	ldrb	r3, [r7, #14]
 8002e5c:	2b21      	cmp	r3, #33	; 0x21
 8002e5e:	d002      	beq.n	8002e66 <HAL_I2C_EV_IRQHandler+0x23a>
 8002e60:	7bbb      	ldrb	r3, [r7, #14]
 8002e62:	2b29      	cmp	r3, #41	; 0x29
 8002e64:	d125      	bne.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	09db      	lsrs	r3, r3, #7
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00f      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0x266>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	0a9b      	lsrs	r3, r3, #10
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0x266>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fe27 	bl	8003ade <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e90:	e039      	b.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d033      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	0a5b      	lsrs	r3, r3, #9
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d02d      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fe54 	bl	8003b58 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002eb0:	e029      	b.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00f      	beq.n	8002ede <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	0a9b      	lsrs	r3, r3, #10
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_I2C_EV_IRQHandler+0x2b2>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fe5e 	bl	8003b98 <I2C_SlaveReceive_RXNE>
 8002edc:	e014      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00e      	beq.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	0a5b      	lsrs	r3, r3, #9
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fe8c 	bl	8003c14 <I2C_SlaveReceive_BTF>
 8002efc:	e004      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002efe:	bf00      	nop
 8002f00:	e002      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
 8002f62:	4613      	mov	r3, r2
 8002f64:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d150      	bne.n	8003092 <I2C_MasterTransmit_TXE+0xc8>
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b21      	cmp	r3, #33	; 0x21
 8002ff4:	d14d      	bne.n	8003092 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d01d      	beq.n	8003038 <I2C_MasterTransmit_TXE+0x6e>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d01a      	beq.n	8003038 <I2C_MasterTransmit_TXE+0x6e>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003008:	d016      	beq.n	8003038 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003018:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2211      	movs	r2, #17
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff6c 	bl	8002f0e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003036:	e060      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003046:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003056:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d107      	bne.n	8003082 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff81 	bl	8002f82 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003080:	e03b      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ff3f 	bl	8002f0e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003090:	e033      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b21      	cmp	r3, #33	; 0x21
 8003096:	d005      	beq.n	80030a4 <I2C_MasterTransmit_TXE+0xda>
 8003098:	7bbb      	ldrb	r3, [r7, #14]
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d12d      	bne.n	80030fa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b22      	cmp	r3, #34	; 0x22
 80030a2:	d12a      	bne.n	80030fa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d108      	bne.n	80030c0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030bc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80030be:	e01c      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d103      	bne.n	80030d4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f88e 	bl	80031ee <I2C_MemoryTransmit_TXE_BTF>
}
 80030d2:	e012      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030f8:	e7ff      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b21      	cmp	r3, #33	; 0x21
 800311a:	d164      	bne.n	80031e6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d012      	beq.n	800314c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800314a:	e04c      	b.n	80031e6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b08      	cmp	r3, #8
 8003150:	d01d      	beq.n	800318e <I2C_MasterTransmit_BTF+0x8c>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b20      	cmp	r3, #32
 8003156:	d01a      	beq.n	800318e <I2C_MasterTransmit_BTF+0x8c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800315e:	d016      	beq.n	800318e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800316e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2211      	movs	r2, #17
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fec1 	bl	8002f0e <HAL_I2C_MasterTxCpltCallback>
}
 800318c:	e02b      	b.n	80031e6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800319c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ac:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d107      	bne.n	80031d8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fed6 	bl	8002f82 <HAL_I2C_MemTxCpltCallback>
}
 80031d6:	e006      	b.n	80031e6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff fe94 	bl	8002f0e <HAL_I2C_MasterTxCpltCallback>
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11d      	bne.n	8003242 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10b      	bne.n	8003226 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003212:	b2da      	uxtb	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003224:	e073      	b.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322a:	b29b      	uxth	r3, r3
 800322c:	121b      	asrs	r3, r3, #8
 800322e:	b2da      	uxtb	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003240:	e065      	b.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10b      	bne.n	8003262 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324e:	b2da      	uxtb	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003260:	e055      	b.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003266:	2b02      	cmp	r3, #2
 8003268:	d151      	bne.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	2b22      	cmp	r3, #34	; 0x22
 800326e:	d10d      	bne.n	800328c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800327e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	651a      	str	r2, [r3, #80]	; 0x50
}
 800328a:	e040      	b.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d015      	beq.n	80032c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b21      	cmp	r3, #33	; 0x21
 800329a:	d112      	bne.n	80032c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032c0:	e025      	b.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d120      	bne.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b21      	cmp	r3, #33	; 0x21
 80032d0:	d11d      	bne.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032e0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fe3a 	bl	8002f82 <HAL_I2C_MemTxCpltCallback>
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b22      	cmp	r3, #34	; 0x22
 8003328:	f040 80a2 	bne.w	8003470 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d921      	bls.n	800337e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b03      	cmp	r3, #3
 8003368:	f040 8082 	bne.w	8003470 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800337c:	e078      	b.n	8003470 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	2b02      	cmp	r3, #2
 8003384:	d074      	beq.n	8003470 <I2C_MasterReceive_RXNE+0x15a>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d002      	beq.n	8003392 <I2C_MasterReceive_RXNE+0x7c>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d16e      	bne.n	8003470 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f001 fb96 	bl	8004ac4 <I2C_WaitOnSTOPRequestThroughIT>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d142      	bne.n	8003424 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d10a      	bne.n	800340e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fdc4 	bl	8002f94 <HAL_I2C_MemRxCpltCallback>
}
 800340c:	e030      	b.n	8003470 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2212      	movs	r2, #18
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fd7f 	bl	8002f20 <HAL_I2C_MasterRxCpltCallback>
}
 8003422:	e025      	b.n	8003470 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003432:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fd9b 	bl	8002fa6 <HAL_I2C_ErrorCallback>
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b04      	cmp	r3, #4
 800348e:	d11b      	bne.n	80034c8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80034c6:	e0bd      	b.n	8003644 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d129      	bne.n	8003526 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d00a      	beq.n	80034fe <I2C_MasterReceive_BTF+0x86>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d007      	beq.n	80034fe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003524:	e08e      	b.n	8003644 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d176      	bne.n	800361e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d002      	beq.n	800353c <I2C_MasterReceive_BTF+0xc4>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b10      	cmp	r3, #16
 800353a:	d108      	bne.n	800354e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e019      	b.n	8003582 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d002      	beq.n	800355a <I2C_MasterReceive_BTF+0xe2>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d108      	bne.n	800356c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e00a      	b.n	8003582 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b10      	cmp	r3, #16
 8003570:	d007      	beq.n	8003582 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003580:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80035dc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d10a      	bne.n	8003608 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fcc7 	bl	8002f94 <HAL_I2C_MemRxCpltCallback>
}
 8003606:	e01d      	b.n	8003644 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2212      	movs	r2, #18
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fc82 	bl	8002f20 <HAL_I2C_MasterRxCpltCallback>
}
 800361c:	e012      	b.n	8003644 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d117      	bne.n	8003690 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003678:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800367a:	e067      	b.n	800374c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	611a      	str	r2, [r3, #16]
}
 800368e:	e05d      	b.n	800374c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003698:	d133      	bne.n	8003702 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b21      	cmp	r3, #33	; 0x21
 80036a4:	d109      	bne.n	80036ba <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036b6:	611a      	str	r2, [r3, #16]
 80036b8:	e008      	b.n	80036cc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <I2C_Master_SB+0x92>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d032      	beq.n	800374c <I2C_Master_SB+0x100>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02d      	beq.n	800374c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fe:	605a      	str	r2, [r3, #4]
}
 8003700:	e024      	b.n	800374c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10e      	bne.n	8003728 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	b29b      	uxth	r3, r3
 8003710:	11db      	asrs	r3, r3, #7
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f003 0306 	and.w	r3, r3, #6
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f063 030f 	orn	r3, r3, #15
 800371e:	b2da      	uxtb	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
}
 8003726:	e011      	b.n	800374c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10d      	bne.n	800374c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	b29b      	uxth	r3, r3
 8003736:	11db      	asrs	r3, r3, #7
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f063 030e 	orn	r3, r3, #14
 8003744:	b2da      	uxtb	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	611a      	str	r2, [r3, #16]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	b2da      	uxtb	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376e:	2b00      	cmp	r3, #0
 8003770:	d004      	beq.n	800377c <I2C_Master_ADD10+0x26>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d108      	bne.n	800378e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00c      	beq.n	800379e <I2C_Master_ADD10+0x48>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800379c:	605a      	str	r2, [r3, #4]
  }
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b091      	sub	sp, #68	; 0x44
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b22      	cmp	r3, #34	; 0x22
 80037d0:	f040 8174 	bne.w	8003abc <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10f      	bne.n	80037fc <I2C_Master_ADDR+0x54>
 80037dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d10b      	bne.n	80037fc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e4:	2300      	movs	r3, #0
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	e16b      	b.n	8003ad4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	2b00      	cmp	r3, #0
 8003802:	d11d      	bne.n	8003840 <I2C_Master_ADDR+0x98>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800380c:	d118      	bne.n	8003840 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800380e:	2300      	movs	r3, #0
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003832:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	651a      	str	r2, [r3, #80]	; 0x50
 800383e:	e149      	b.n	8003ad4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d113      	bne.n	8003872 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384a:	2300      	movs	r3, #0
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e120      	b.n	8003ab4 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	f040 808a 	bne.w	8003992 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003884:	d137      	bne.n	80038f6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003894:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a4:	d113      	bne.n	80038ce <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	e0f2      	b.n	8003ab4 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ce:	2300      	movs	r3, #0
 80038d0:	623b      	str	r3, [r7, #32]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	623b      	str	r3, [r7, #32]
 80038e2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	e0de      	b.n	8003ab4 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d02e      	beq.n	800395a <I2C_Master_ADDR+0x1b2>
 80038fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d02b      	beq.n	800395a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	2b12      	cmp	r3, #18
 8003906:	d102      	bne.n	800390e <I2C_Master_ADDR+0x166>
 8003908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390a:	2b01      	cmp	r3, #1
 800390c:	d125      	bne.n	800395a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	2b04      	cmp	r3, #4
 8003912:	d00e      	beq.n	8003932 <I2C_Master_ADDR+0x18a>
 8003914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003916:	2b02      	cmp	r3, #2
 8003918:	d00b      	beq.n	8003932 <I2C_Master_ADDR+0x18a>
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	2b10      	cmp	r3, #16
 800391e:	d008      	beq.n	8003932 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e007      	b.n	8003942 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003940:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	e0ac      	b.n	8003ab4 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003968:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e090      	b.n	8003ab4 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d158      	bne.n	8003a4e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d021      	beq.n	80039e6 <I2C_Master_ADDR+0x23e>
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d01e      	beq.n	80039e6 <I2C_Master_ADDR+0x23e>
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d01b      	beq.n	80039e6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039bc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	e012      	b.n	8003a0c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039f4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1a:	d14b      	bne.n	8003ab4 <I2C_Master_ADDR+0x30c>
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a22:	d00b      	beq.n	8003a3c <I2C_Master_ADDR+0x294>
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d008      	beq.n	8003a3c <I2C_Master_ADDR+0x294>
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d005      	beq.n	8003a3c <I2C_Master_ADDR+0x294>
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d002      	beq.n	8003a3c <I2C_Master_ADDR+0x294>
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d13b      	bne.n	8003ab4 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	e032      	b.n	8003ab4 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a5c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6c:	d117      	bne.n	8003a9e <I2C_Master_ADDR+0x2f6>
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a74:	d00b      	beq.n	8003a8e <I2C_Master_ADDR+0x2e6>
 8003a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d008      	beq.n	8003a8e <I2C_Master_ADDR+0x2e6>
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d005      	beq.n	8003a8e <I2C_Master_ADDR+0x2e6>
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d002      	beq.n	8003a8e <I2C_Master_ADDR+0x2e6>
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d107      	bne.n	8003a9e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003aba:	e00b      	b.n	8003ad4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abc:	2300      	movs	r3, #0
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
}
 8003ad2:	e7ff      	b.n	8003ad4 <I2C_Master_ADDR+0x32c>
 8003ad4:	bf00      	nop
 8003ad6:	3744      	adds	r7, #68	; 0x44
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02b      	beq.n	8003b50 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	781a      	ldrb	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d114      	bne.n	8003b50 <I2C_SlaveTransmit_TXE+0x72>
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b29      	cmp	r3, #41	; 0x29
 8003b2a:	d111      	bne.n	8003b50 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2228      	movs	r2, #40	; 0x28
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff f9f1 	bl	8002f32 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d011      	beq.n	8003b8e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d02c      	beq.n	8003c0c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d114      	bne.n	8003c0c <I2C_SlaveReceive_RXNE+0x74>
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b2a      	cmp	r3, #42	; 0x2a
 8003be6:	d111      	bne.n	8003c0c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2222      	movs	r2, #34	; 0x22
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2228      	movs	r2, #40	; 0x28
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff f99c 	bl	8002f44 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d012      	beq.n	8003c4c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c70:	2b28      	cmp	r3, #40	; 0x28
 8003c72:	d127      	bne.n	8003cc4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c82:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	09db      	lsrs	r3, r3, #7
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	81bb      	strh	r3, [r7, #12]
 8003ca6:	e002      	b.n	8003cae <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003cb6:	89ba      	ldrh	r2, [r7, #12]
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff f94a 	bl	8002f56 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003cc2:	e00e      	b.n	8003ce2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d48:	d172      	bne.n	8003e30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b22      	cmp	r3, #34	; 0x22
 8003d4e:	d002      	beq.n	8003d56 <I2C_Slave_STOPF+0x6a>
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	2b2a      	cmp	r3, #42	; 0x2a
 8003d54:	d135      	bne.n	8003dc2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f043 0204 	orr.w	r2, r3, #4
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fd ff52 	bl	8001c38 <HAL_DMA_GetState>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d049      	beq.n	8003e2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	4a69      	ldr	r2, [pc, #420]	; (8003f44 <I2C_Slave_STOPF+0x258>)
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd fdca 	bl	8001940 <HAL_DMA_Abort_IT>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d03d      	beq.n	8003e2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dc0:	e035      	b.n	8003e2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f043 0204 	orr.w	r2, r3, #4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fd ff1c 	bl	8001c38 <HAL_DMA_GetState>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d014      	beq.n	8003e30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	4a4e      	ldr	r2, [pc, #312]	; (8003f44 <I2C_Slave_STOPF+0x258>)
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd fd94 	bl	8001940 <HAL_DMA_Abort_IT>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4798      	blx	r3
 8003e2c:	e000      	b.n	8003e30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d03e      	beq.n	8003eb8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d112      	bne.n	8003e6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d112      	bne.n	8003ea2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	f043 0204 	orr.w	r2, r3, #4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f843 	bl	8003f4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003ec6:	e039      	b.n	8003f3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b2a      	cmp	r3, #42	; 0x2a
 8003ecc:	d109      	bne.n	8003ee2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2228      	movs	r2, #40	; 0x28
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff f831 	bl	8002f44 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b28      	cmp	r3, #40	; 0x28
 8003eec:	d111      	bne.n	8003f12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <I2C_Slave_STOPF+0x25c>)
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff f830 	bl	8002f70 <HAL_I2C_ListenCpltCallback>
}
 8003f10:	e014      	b.n	8003f3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	2b22      	cmp	r3, #34	; 0x22
 8003f18:	d002      	beq.n	8003f20 <I2C_Slave_STOPF+0x234>
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b22      	cmp	r3, #34	; 0x22
 8003f1e:	d10d      	bne.n	8003f3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff f804 	bl	8002f44 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	080046c5 	.word	0x080046c5
 8003f48:	ffff0000 	.word	0xffff0000

08003f4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f64:	7bbb      	ldrb	r3, [r7, #14]
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d002      	beq.n	8003f70 <I2C_ITError+0x24>
 8003f6a:	7bbb      	ldrb	r3, [r7, #14]
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d10a      	bne.n	8003f86 <I2C_ITError+0x3a>
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b22      	cmp	r3, #34	; 0x22
 8003f74:	d107      	bne.n	8003f86 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f8c:	2b28      	cmp	r3, #40	; 0x28
 8003f8e:	d107      	bne.n	8003fa0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2228      	movs	r2, #40	; 0x28
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f9e:	e015      	b.n	8003fcc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fae:	d00a      	beq.n	8003fc6 <I2C_ITError+0x7a>
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b60      	cmp	r3, #96	; 0x60
 8003fb4:	d007      	beq.n	8003fc6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fda:	d161      	bne.n	80040a0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d020      	beq.n	800403a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffc:	4a6a      	ldr	r2, [pc, #424]	; (80041a8 <I2C_ITError+0x25c>)
 8003ffe:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004004:	4618      	mov	r0, r3
 8004006:	f7fd fc9b 	bl	8001940 <HAL_DMA_Abort_IT>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8089 	beq.w	8004124 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0201 	bic.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004034:	4610      	mov	r0, r2
 8004036:	4798      	blx	r3
 8004038:	e074      	b.n	8004124 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	4a5a      	ldr	r2, [pc, #360]	; (80041a8 <I2C_ITError+0x25c>)
 8004040:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	4618      	mov	r0, r3
 8004048:	f7fd fc7a 	bl	8001940 <HAL_DMA_Abort_IT>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d068      	beq.n	8004124 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d10b      	bne.n	8004078 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800409a:	4610      	mov	r0, r2
 800409c:	4798      	blx	r3
 800409e:	e041      	b.n	8004124 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b60      	cmp	r3, #96	; 0x60
 80040aa:	d125      	bne.n	80040f8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d10b      	bne.n	80040e0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fe ff61 	bl	8002fb8 <HAL_I2C_AbortCpltCallback>
 80040f6:	e015      	b.n	8004124 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d10b      	bne.n	800411e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fe ff41 	bl	8002fa6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10e      	bne.n	8004152 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004144:	2b00      	cmp	r3, #0
 8004146:	d104      	bne.n	8004152 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004160:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004168:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d113      	bne.n	800419e <I2C_ITError+0x252>
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b28      	cmp	r3, #40	; 0x28
 800417a:	d110      	bne.n	800419e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a0b      	ldr	r2, [pc, #44]	; (80041ac <I2C_ITError+0x260>)
 8004180:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fe fee9 	bl	8002f70 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	080046c5 	.word	0x080046c5
 80041ac:	ffff0000 	.word	0xffff0000

080041b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	4608      	mov	r0, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	461a      	mov	r2, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	817b      	strh	r3, [r7, #10]
 80041c2:	460b      	mov	r3, r1
 80041c4:	813b      	strh	r3, [r7, #8]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fb14 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004200:	d103      	bne.n	800420a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e05f      	b.n	80042ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800420e:	897b      	ldrh	r3, [r7, #10]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800421c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	6a3a      	ldr	r2, [r7, #32]
 8004222:	492d      	ldr	r1, [pc, #180]	; (80042d8 <I2C_RequestMemoryWrite+0x128>)
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fb4c 	bl	80048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e04c      	b.n	80042ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	6a39      	ldr	r1, [r7, #32]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fbb6 	bl	80049c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b04      	cmp	r3, #4
 8004260:	d107      	bne.n	8004272 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004270:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e02b      	b.n	80042ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d105      	bne.n	8004288 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800427c:	893b      	ldrh	r3, [r7, #8]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	611a      	str	r2, [r3, #16]
 8004286:	e021      	b.n	80042cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004288:	893b      	ldrh	r3, [r7, #8]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	b29b      	uxth	r3, r3
 800428e:	b2da      	uxtb	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004298:	6a39      	ldr	r1, [r7, #32]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fb90 	bl	80049c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d107      	bne.n	80042be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e005      	b.n	80042ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c2:	893b      	ldrh	r3, [r7, #8]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	00010002 	.word	0x00010002

080042dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	4608      	mov	r0, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	461a      	mov	r2, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	817b      	strh	r3, [r7, #10]
 80042ee:	460b      	mov	r3, r1
 80042f0:	813b      	strh	r3, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004304:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004314:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2200      	movs	r2, #0
 800431e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fa76 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00d      	beq.n	800434a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433c:	d103      	bne.n	8004346 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004344:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0aa      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004358:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	4952      	ldr	r1, [pc, #328]	; (80044a8 <I2C_RequestMemoryRead+0x1cc>)
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 faae 	bl	80048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e097      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004388:	6a39      	ldr	r1, [r7, #32]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fb18 	bl	80049c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00d      	beq.n	80043b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b04      	cmp	r3, #4
 800439c:	d107      	bne.n	80043ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e076      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043b8:	893b      	ldrh	r3, [r7, #8]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]
 80043c2:	e021      	b.n	8004408 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043c4:	893b      	ldrh	r3, [r7, #8]
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d4:	6a39      	ldr	r1, [r7, #32]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 faf2 	bl	80049c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d107      	bne.n	80043fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e050      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043fe:	893b      	ldrh	r3, [r7, #8]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440a:	6a39      	ldr	r1, [r7, #32]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fad7 	bl	80049c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	2b04      	cmp	r3, #4
 800441e:	d107      	bne.n	8004430 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e035      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004442:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2200      	movs	r2, #0
 800444c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f9df 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00d      	beq.n	8004478 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446a:	d103      	bne.n	8004474 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e013      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004478:	897b      	ldrh	r3, [r7, #10]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	6a3a      	ldr	r2, [r7, #32]
 800448c:	4906      	ldr	r1, [pc, #24]	; (80044a8 <I2C_RequestMemoryRead+0x1cc>)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fa17 	bl	80048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	00010002 	.word	0x00010002

080044ac <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80044de:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ec:	2200      	movs	r2, #0
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	2200      	movs	r2, #0
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004506:	2b21      	cmp	r3, #33	; 0x21
 8004508:	d007      	beq.n	800451a <I2C_DMAXferCplt+0x6e>
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004510:	2b22      	cmp	r3, #34	; 0x22
 8004512:	d131      	bne.n	8004578 <I2C_DMAXferCplt+0xcc>
 8004514:	7cbb      	ldrb	r3, [r7, #18]
 8004516:	2b20      	cmp	r3, #32
 8004518:	d12e      	bne.n	8004578 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004528:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2200      	movs	r2, #0
 800452e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	2b29      	cmp	r3, #41	; 0x29
 8004534:	d10a      	bne.n	800454c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2221      	movs	r2, #33	; 0x21
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2228      	movs	r2, #40	; 0x28
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004544:	6978      	ldr	r0, [r7, #20]
 8004546:	f7fe fcf4 	bl	8002f32 <HAL_I2C_SlaveTxCpltCallback>
 800454a:	e00c      	b.n	8004566 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	2b2a      	cmp	r3, #42	; 0x2a
 8004550:	d109      	bne.n	8004566 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2222      	movs	r2, #34	; 0x22
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2228      	movs	r2, #40	; 0x28
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004560:	6978      	ldr	r0, [r7, #20]
 8004562:	f7fe fcef 	bl	8002f44 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004574:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004576:	e06a      	b.n	800464e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d064      	beq.n	800464e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b4:	d009      	beq.n	80045ca <I2C_DMAXferCplt+0x11e>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d006      	beq.n	80045ca <I2C_DMAXferCplt+0x11e>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045c2:	d002      	beq.n	80045ca <I2C_DMAXferCplt+0x11e>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d107      	bne.n	80045da <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045e8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004608:	6978      	ldr	r0, [r7, #20]
 800460a:	f7fe fccc 	bl	8002fa6 <HAL_I2C_ErrorCallback>
}
 800460e:	e01e      	b.n	800464e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d10a      	bne.n	800463a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004632:	6978      	ldr	r0, [r7, #20]
 8004634:	f7fe fcae 	bl	8002f94 <HAL_I2C_MemRxCpltCallback>
}
 8004638:	e009      	b.n	800464e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2212      	movs	r2, #18
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004648:	6978      	ldr	r0, [r7, #20]
 800464a:	f7fe fc69 	bl	8002f20 <HAL_I2C_MasterRxCpltCallback>
}
 800464e:	bf00      	nop
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	2200      	movs	r2, #0
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	2200      	movs	r2, #0
 8004682:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004692:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f043 0210 	orr.w	r2, r3, #16
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7fe fc75 	bl	8002fa6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046de:	4b4b      	ldr	r3, [pc, #300]	; (800480c <I2C_DMAAbort+0x148>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	08db      	lsrs	r3, r3, #3
 80046e4:	4a4a      	ldr	r2, [pc, #296]	; (8004810 <I2C_DMAAbort+0x14c>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	0a1a      	lsrs	r2, r3, #8
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	00da      	lsls	r2, r3, #3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f043 0220 	orr.w	r2, r3, #32
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800470a:	e00a      	b.n	8004722 <I2C_DMAAbort+0x5e>
    }
    count--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3b01      	subs	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004720:	d0ea      	beq.n	80046f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472e:	2200      	movs	r2, #0
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	2200      	movs	r2, #0
 8004740:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004750:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	2200      	movs	r2, #0
 8004766:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	2200      	movs	r2, #0
 8004776:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b60      	cmp	r3, #96	; 0x60
 8004792:	d10e      	bne.n	80047b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2200      	movs	r2, #0
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	f7fe fc04 	bl	8002fb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047b0:	e027      	b.n	8004802 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047b8:	2b28      	cmp	r3, #40	; 0x28
 80047ba:	d117      	bne.n	80047ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2228      	movs	r2, #40	; 0x28
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047ea:	e007      	b.n	80047fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80047fc:	6978      	ldr	r0, [r7, #20]
 80047fe:	f7fe fbd2 	bl	8002fa6 <HAL_I2C_ErrorCallback>
}
 8004802:	bf00      	nop
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	2000000c 	.word	0x2000000c
 8004810:	14f8b589 	.word	0x14f8b589

08004814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004824:	e025      	b.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d021      	beq.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482e:	f7fc fe91 	bl	8001554 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d302      	bcc.n	8004844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d116      	bne.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f043 0220 	orr.w	r2, r3, #32
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e023      	b.n	80048ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10d      	bne.n	8004898 <I2C_WaitOnFlagUntilTimeout+0x84>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	43da      	mvns	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4013      	ands	r3, r2
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	e00c      	b.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	43da      	mvns	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4013      	ands	r3, r2
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf0c      	ite	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	2300      	movne	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d0b6      	beq.n	8004826 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048d0:	e051      	b.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e0:	d123      	bne.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f043 0204 	orr.w	r2, r3, #4
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e046      	b.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d021      	beq.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fc fe0f 	bl	8001554 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d116      	bne.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e020      	b.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10c      	bne.n	800499a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	43da      	mvns	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4013      	ands	r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf14      	ite	ne
 8004992:	2301      	movne	r3, #1
 8004994:	2300      	moveq	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	e00b      	b.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	43da      	mvns	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4013      	ands	r3, r2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d18d      	bne.n	80048d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049cc:	e02d      	b.n	8004a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f900 	bl	8004bd4 <I2C_IsAcknowledgeFailed>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e02d      	b.n	8004a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d021      	beq.n	8004a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fc fdb5 	bl	8001554 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d116      	bne.n	8004a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e007      	b.n	8004a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a34:	2b80      	cmp	r3, #128	; 0x80
 8004a36:	d1ca      	bne.n	80049ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a4e:	e02d      	b.n	8004aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f8bf 	bl	8004bd4 <I2C_IsAcknowledgeFailed>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e02d      	b.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d021      	beq.n	8004aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a68:	f7fc fd74 	bl	8001554 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d302      	bcc.n	8004a7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d116      	bne.n	8004aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	f043 0220 	orr.w	r2, r3, #32
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e007      	b.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d1ca      	bne.n	8004a50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ad0:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	08db      	lsrs	r3, r3, #3
 8004ad6:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	0a1a      	lsrs	r2, r3, #8
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f043 0220 	orr.w	r2, r3, #32
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e008      	b.n	8004b14 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b10:	d0e9      	beq.n	8004ae6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	2000000c 	.word	0x2000000c
 8004b24:	14f8b589 	.word	0x14f8b589

08004b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b34:	e042      	b.n	8004bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d119      	bne.n	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0210 	mvn.w	r2, #16
 8004b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e029      	b.n	8004bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fc fcec 	bl	8001554 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d116      	bne.n	8004bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f043 0220 	orr.w	r2, r3, #32
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e007      	b.n	8004bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d1b5      	bne.n	8004b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bea:	d11b      	bne.n	8004c24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	f043 0204 	orr.w	r2, r3, #4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c40:	d103      	bne.n	8004c4a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c48:	e007      	b.n	8004c5a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c52:	d102      	bne.n	8004c5a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2208      	movs	r2, #8
 8004c58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e272      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8087 	beq.w	8004d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c84:	4b92      	ldr	r3, [pc, #584]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d00c      	beq.n	8004caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c90:	4b8f      	ldr	r3, [pc, #572]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d112      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x5e>
 8004c9c:	4b8c      	ldr	r3, [pc, #560]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d10b      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004caa:	4b89      	ldr	r3, [pc, #548]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d06c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x12c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d168      	bne.n	8004d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e24c      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x76>
 8004ccc:	4b80      	ldr	r3, [pc, #512]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a7f      	ldr	r2, [pc, #508]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e02e      	b.n	8004d38 <HAL_RCC_OscConfig+0xd4>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x98>
 8004ce2:	4b7b      	ldr	r3, [pc, #492]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a7a      	ldr	r2, [pc, #488]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b78      	ldr	r3, [pc, #480]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a77      	ldr	r2, [pc, #476]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xd4>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0xbc>
 8004d06:	4b72      	ldr	r3, [pc, #456]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a71      	ldr	r2, [pc, #452]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b6f      	ldr	r3, [pc, #444]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6e      	ldr	r2, [pc, #440]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xd4>
 8004d20:	4b6b      	ldr	r3, [pc, #428]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6a      	ldr	r2, [pc, #424]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b68      	ldr	r3, [pc, #416]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a67      	ldr	r2, [pc, #412]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d40:	f7fc fc08 	bl	8001554 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fc fc04 	bl	8001554 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e200      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b5d      	ldr	r3, [pc, #372]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xe4>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fc fbf4 	bl	8001554 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fc fbf0 	bl	8001554 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e1ec      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	4b53      	ldr	r3, [pc, #332]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x10c>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d063      	beq.n	8004e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d9e:	4b4c      	ldr	r3, [pc, #304]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004daa:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d11c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x18c>
 8004db6:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	4b43      	ldr	r3, [pc, #268]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x176>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e1c0      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b3d      	ldr	r3, [pc, #244]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4939      	ldr	r1, [pc, #228]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	e03a      	b.n	8004e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d020      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df8:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfe:	f7fc fba9 	bl	8001554 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e06:	f7fc fba5 	bl	8001554 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e1a1      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4927      	ldr	r1, [pc, #156]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
 8004e38:	e015      	b.n	8004e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3a:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fc fb88 	bl	8001554 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e48:	f7fc fb84 	bl	8001554 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e180      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d03a      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d019      	beq.n	8004eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7a:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e80:	f7fc fb68 	bl	8001554 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fc fb64 	bl	8001554 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e160      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	f000 fad8 	bl	800545c <RCC_Delay>
 8004eac:	e01c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <HAL_RCC_OscConfig+0x274>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb4:	f7fc fb4e 	bl	8001554 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eba:	e00f      	b.n	8004edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebc:	f7fc fb4a 	bl	8001554 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d908      	bls.n	8004edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e146      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	42420000 	.word	0x42420000
 8004ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004edc:	4b92      	ldr	r3, [pc, #584]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e9      	bne.n	8004ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80a6 	beq.w	8005042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efa:	4b8b      	ldr	r3, [pc, #556]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10d      	bne.n	8004f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f06:	4b88      	ldr	r3, [pc, #544]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	4a87      	ldr	r2, [pc, #540]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f10:	61d3      	str	r3, [r2, #28]
 8004f12:	4b85      	ldr	r3, [pc, #532]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b82      	ldr	r3, [pc, #520]	; (800512c <HAL_RCC_OscConfig+0x4c8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4b7f      	ldr	r3, [pc, #508]	; (800512c <HAL_RCC_OscConfig+0x4c8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a7e      	ldr	r2, [pc, #504]	; (800512c <HAL_RCC_OscConfig+0x4c8>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fc fb0b 	bl	8001554 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fc fb07 	bl	8001554 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b64      	cmp	r3, #100	; 0x64
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e103      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b75      	ldr	r3, [pc, #468]	; (800512c <HAL_RCC_OscConfig+0x4c8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x312>
 8004f68:	4b6f      	ldr	r3, [pc, #444]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	4a6e      	ldr	r2, [pc, #440]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6213      	str	r3, [r2, #32]
 8004f74:	e02d      	b.n	8004fd2 <HAL_RCC_OscConfig+0x36e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x334>
 8004f7e:	4b6a      	ldr	r3, [pc, #424]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	4a69      	ldr	r2, [pc, #420]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	6213      	str	r3, [r2, #32]
 8004f8a:	4b67      	ldr	r3, [pc, #412]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	4a66      	ldr	r2, [pc, #408]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f90:	f023 0304 	bic.w	r3, r3, #4
 8004f94:	6213      	str	r3, [r2, #32]
 8004f96:	e01c      	b.n	8004fd2 <HAL_RCC_OscConfig+0x36e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b05      	cmp	r3, #5
 8004f9e:	d10c      	bne.n	8004fba <HAL_RCC_OscConfig+0x356>
 8004fa0:	4b61      	ldr	r3, [pc, #388]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	4a60      	ldr	r2, [pc, #384]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	f043 0304 	orr.w	r3, r3, #4
 8004faa:	6213      	str	r3, [r2, #32]
 8004fac:	4b5e      	ldr	r3, [pc, #376]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4a5d      	ldr	r2, [pc, #372]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	6213      	str	r3, [r2, #32]
 8004fb8:	e00b      	b.n	8004fd2 <HAL_RCC_OscConfig+0x36e>
 8004fba:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4a5a      	ldr	r2, [pc, #360]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	6213      	str	r3, [r2, #32]
 8004fc6:	4b58      	ldr	r3, [pc, #352]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	4a57      	ldr	r2, [pc, #348]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	f023 0304 	bic.w	r3, r3, #4
 8004fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d015      	beq.n	8005006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fda:	f7fc fabb 	bl	8001554 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe0:	e00a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe2:	f7fc fab7 	bl	8001554 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0b1      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ee      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x37e>
 8005004:	e014      	b.n	8005030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005006:	f7fc faa5 	bl	8001554 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800500c:	e00a      	b.n	8005024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fc faa1 	bl	8001554 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e09b      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005024:	4b40      	ldr	r3, [pc, #256]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1ee      	bne.n	800500e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005030:	7dfb      	ldrb	r3, [r7, #23]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d105      	bne.n	8005042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005036:	4b3c      	ldr	r3, [pc, #240]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	4a3b      	ldr	r2, [pc, #236]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 800503c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8087 	beq.w	800515a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800504c:	4b36      	ldr	r3, [pc, #216]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f003 030c 	and.w	r3, r3, #12
 8005054:	2b08      	cmp	r3, #8
 8005056:	d061      	beq.n	800511c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d146      	bne.n	80050ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005060:	4b33      	ldr	r3, [pc, #204]	; (8005130 <HAL_RCC_OscConfig+0x4cc>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005066:	f7fc fa75 	bl	8001554 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506e:	f7fc fa71 	bl	8001554 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e06d      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005080:	4b29      	ldr	r3, [pc, #164]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f0      	bne.n	800506e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d108      	bne.n	80050a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4921      	ldr	r1, [pc, #132]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050a8:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a19      	ldr	r1, [r3, #32]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	430b      	orrs	r3, r1
 80050ba:	491b      	ldr	r1, [pc, #108]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <HAL_RCC_OscConfig+0x4cc>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c6:	f7fc fa45 	bl	8001554 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ce:	f7fc fa41 	bl	8001554 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e03d      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050e0:	4b11      	ldr	r3, [pc, #68]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x46a>
 80050ec:	e035      	b.n	800515a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <HAL_RCC_OscConfig+0x4cc>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fc fa2e 	bl	8001554 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fc fa2a 	bl	8001554 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e026      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x498>
 800511a:	e01e      	b.n	800515a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d107      	bne.n	8005134 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e019      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
 8005128:	40021000 	.word	0x40021000
 800512c:	40007000 	.word	0x40007000
 8005130:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_RCC_OscConfig+0x500>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	429a      	cmp	r2, r3
 8005146:	d106      	bne.n	8005156 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005152:	429a      	cmp	r2, r3
 8005154:	d001      	beq.n	800515a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000

08005168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0d0      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800517c:	4b6a      	ldr	r3, [pc, #424]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d910      	bls.n	80051ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b67      	ldr	r3, [pc, #412]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 0207 	bic.w	r2, r3, #7
 8005192:	4965      	ldr	r1, [pc, #404]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b63      	ldr	r3, [pc, #396]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0b8      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d020      	beq.n	80051fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051c4:	4b59      	ldr	r3, [pc, #356]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4a58      	ldr	r2, [pc, #352]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051dc:	4b53      	ldr	r3, [pc, #332]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a52      	ldr	r2, [pc, #328]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80051e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e8:	4b50      	ldr	r3, [pc, #320]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	494d      	ldr	r1, [pc, #308]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d040      	beq.n	8005288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520e:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d115      	bne.n	8005246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e07f      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d107      	bne.n	8005236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005226:	4b41      	ldr	r3, [pc, #260]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e073      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005236:	4b3d      	ldr	r3, [pc, #244]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e06b      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005246:	4b39      	ldr	r3, [pc, #228]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f023 0203 	bic.w	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4936      	ldr	r1, [pc, #216]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005254:	4313      	orrs	r3, r2
 8005256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005258:	f7fc f97c 	bl	8001554 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	e00a      	b.n	8005276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005260:	f7fc f978 	bl	8001554 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	; 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e053      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005276:	4b2d      	ldr	r3, [pc, #180]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f003 020c 	and.w	r2, r3, #12
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	429a      	cmp	r2, r3
 8005286:	d1eb      	bne.n	8005260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005288:	4b27      	ldr	r3, [pc, #156]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d210      	bcs.n	80052b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005296:	4b24      	ldr	r3, [pc, #144]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 0207 	bic.w	r2, r3, #7
 800529e:	4922      	ldr	r1, [pc, #136]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a6:	4b20      	ldr	r3, [pc, #128]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e032      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c4:	4b19      	ldr	r3, [pc, #100]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4916      	ldr	r1, [pc, #88]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052e2:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	490e      	ldr	r1, [pc, #56]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052f6:	f000 f821 	bl	800533c <HAL_RCC_GetSysClockFreq>
 80052fa:	4602      	mov	r2, r0
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	490a      	ldr	r1, [pc, #40]	; (8005330 <HAL_RCC_ClockConfig+0x1c8>)
 8005308:	5ccb      	ldrb	r3, [r1, r3]
 800530a:	fa22 f303 	lsr.w	r3, r2, r3
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <HAL_RCC_ClockConfig+0x1cc>)
 8005310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <HAL_RCC_ClockConfig+0x1d0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fc f8da 	bl	80014d0 <HAL_InitTick>

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40022000 	.word	0x40022000
 800532c:	40021000 	.word	0x40021000
 8005330:	080061a8 	.word	0x080061a8
 8005334:	2000000c 	.word	0x2000000c
 8005338:	20000010 	.word	0x20000010

0800533c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800533c:	b490      	push	{r4, r7}
 800533e:	b08a      	sub	sp, #40	; 0x28
 8005340:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005342:	4b29      	ldr	r3, [pc, #164]	; (80053e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005344:	1d3c      	adds	r4, r7, #4
 8005346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800534c:	f240 2301 	movw	r3, #513	; 0x201
 8005350:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	2300      	movs	r3, #0
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005366:	4b21      	ldr	r3, [pc, #132]	; (80053ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b04      	cmp	r3, #4
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x40>
 8005376:	2b08      	cmp	r3, #8
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x46>
 800537a:	e02b      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800537c:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800537e:	623b      	str	r3, [r7, #32]
      break;
 8005380:	e02b      	b.n	80053da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	0c9b      	lsrs	r3, r3, #18
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	3328      	adds	r3, #40	; 0x28
 800538c:	443b      	add	r3, r7
 800538e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005392:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d012      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	0c5b      	lsrs	r3, r3, #17
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	3328      	adds	r3, #40	; 0x28
 80053aa:	443b      	add	r3, r7
 80053ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4a0e      	ldr	r2, [pc, #56]	; (80053f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053b6:	fb03 f202 	mul.w	r2, r3, r2
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
 80053c2:	e004      	b.n	80053ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4a0b      	ldr	r2, [pc, #44]	; (80053f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c8:	fb02 f303 	mul.w	r3, r2, r3
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	623b      	str	r3, [r7, #32]
      break;
 80053d2:	e002      	b.n	80053da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053d6:	623b      	str	r3, [r7, #32]
      break;
 80053d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053da:	6a3b      	ldr	r3, [r7, #32]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3728      	adds	r7, #40	; 0x28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc90      	pop	{r4, r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	08006198 	.word	0x08006198
 80053ec:	40021000 	.word	0x40021000
 80053f0:	007a1200 	.word	0x007a1200
 80053f4:	003d0900 	.word	0x003d0900

080053f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053fc:	4b02      	ldr	r3, [pc, #8]	; (8005408 <HAL_RCC_GetHCLKFreq+0x10>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	2000000c 	.word	0x2000000c

0800540c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005410:	f7ff fff2 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4903      	ldr	r1, [pc, #12]	; (8005430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40021000 	.word	0x40021000
 8005430:	080061b8 	.word	0x080061b8

08005434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005438:	f7ff ffde 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 800543c:	4602      	mov	r2, r0
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	0adb      	lsrs	r3, r3, #11
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	4903      	ldr	r1, [pc, #12]	; (8005458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800544a:	5ccb      	ldrb	r3, [r1, r3]
 800544c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005450:	4618      	mov	r0, r3
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000
 8005458:	080061b8 	.word	0x080061b8

0800545c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <RCC_Delay+0x34>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <RCC_Delay+0x38>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	0a5b      	lsrs	r3, r3, #9
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005478:	bf00      	nop
  }
  while (Delay --);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1e5a      	subs	r2, r3, #1
 800547e:	60fa      	str	r2, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1f9      	bne.n	8005478 <RCC_Delay+0x1c>
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr
 8005490:	2000000c 	.word	0x2000000c
 8005494:	10624dd3 	.word	0x10624dd3

08005498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e076      	b.n	8005598 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d108      	bne.n	80054c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ba:	d009      	beq.n	80054d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	61da      	str	r2, [r3, #28]
 80054c2:	e005      	b.n	80054d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fb fde0 	bl	80010b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005506:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005554:	ea42 0103 	orr.w	r1, r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	0c1a      	lsrs	r2, r3, #16
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f002 0204 	and.w	r2, r2, #4
 8005576:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005586:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_SPI_Transmit+0x22>
 80055be:	2302      	movs	r3, #2
 80055c0:	e126      	b.n	8005810 <HAL_SPI_Transmit+0x270>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ca:	f7fb ffc3 	bl	8001554 <HAL_GetTick>
 80055ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d002      	beq.n	80055e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055e0:	2302      	movs	r3, #2
 80055e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055e4:	e10b      	b.n	80057fe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_SPI_Transmit+0x52>
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d102      	bne.n	80055f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055f6:	e102      	b.n	80057fe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2203      	movs	r2, #3
 80055fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	88fa      	ldrh	r2, [r7, #6]
 8005616:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563e:	d10f      	bne.n	8005660 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800565e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b40      	cmp	r3, #64	; 0x40
 800566c:	d007      	beq.n	800567e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800567c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005686:	d14b      	bne.n	8005720 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_SPI_Transmit+0xf6>
 8005690:	8afb      	ldrh	r3, [r7, #22]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d13e      	bne.n	8005714 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	881a      	ldrh	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	1c9a      	adds	r2, r3, #2
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056ba:	e02b      	b.n	8005714 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d112      	bne.n	80056f0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	881a      	ldrh	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	1c9a      	adds	r2, r3, #2
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80056ee:	e011      	b.n	8005714 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f0:	f7fb ff30 	bl	8001554 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d803      	bhi.n	8005708 <HAL_SPI_Transmit+0x168>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d102      	bne.n	800570e <HAL_SPI_Transmit+0x16e>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d102      	bne.n	8005714 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005712:	e074      	b.n	80057fe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1ce      	bne.n	80056bc <HAL_SPI_Transmit+0x11c>
 800571e:	e04c      	b.n	80057ba <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_SPI_Transmit+0x18e>
 8005728:	8afb      	ldrh	r3, [r7, #22]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d140      	bne.n	80057b0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	7812      	ldrb	r2, [r2, #0]
 800573a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005754:	e02c      	b.n	80057b0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b02      	cmp	r3, #2
 8005762:	d113      	bne.n	800578c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	7812      	ldrb	r2, [r2, #0]
 8005770:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	86da      	strh	r2, [r3, #54]	; 0x36
 800578a:	e011      	b.n	80057b0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800578c:	f7fb fee2 	bl	8001554 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d803      	bhi.n	80057a4 <HAL_SPI_Transmit+0x204>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a2:	d102      	bne.n	80057aa <HAL_SPI_Transmit+0x20a>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d102      	bne.n	80057b0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057ae:	e026      	b.n	80057fe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1cd      	bne.n	8005756 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fbb8 	bl	8005f34 <SPI_EndRxTxTransaction>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	77fb      	strb	r3, [r7, #31]
 80057fa:	e000      	b.n	80057fe <HAL_SPI_Transmit+0x25e>
  }

error:
 80057fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800580e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	4613      	mov	r3, r2
 8005826:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005834:	d112      	bne.n	800585c <HAL_SPI_Receive+0x44>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10e      	bne.n	800585c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2204      	movs	r2, #4
 8005842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005846:	88fa      	ldrh	r2, [r7, #6]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f8f1 	bl	8005a3a <HAL_SPI_TransmitReceive>
 8005858:	4603      	mov	r3, r0
 800585a:	e0ea      	b.n	8005a32 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_SPI_Receive+0x52>
 8005866:	2302      	movs	r3, #2
 8005868:	e0e3      	b.n	8005a32 <HAL_SPI_Receive+0x21a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005872:	f7fb fe6f 	bl	8001554 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	d002      	beq.n	800588a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005884:	2302      	movs	r3, #2
 8005886:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005888:	e0ca      	b.n	8005a20 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_SPI_Receive+0x7e>
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d102      	bne.n	800589c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
    goto error;
 800589a:	e0c1      	b.n	8005a20 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2204      	movs	r2, #4
 80058a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e2:	d10f      	bne.n	8005904 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005902:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590e:	2b40      	cmp	r3, #64	; 0x40
 8005910:	d007      	beq.n	8005922 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005920:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d162      	bne.n	80059f0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800592a:	e02e      	b.n	800598a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b01      	cmp	r3, #1
 8005938:	d115      	bne.n	8005966 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f103 020c 	add.w	r2, r3, #12
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	7812      	ldrb	r2, [r2, #0]
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005964:	e011      	b.n	800598a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005966:	f7fb fdf5 	bl	8001554 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d803      	bhi.n	800597e <HAL_SPI_Receive+0x166>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597c:	d102      	bne.n	8005984 <HAL_SPI_Receive+0x16c>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005988:	e04a      	b.n	8005a20 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1cb      	bne.n	800592c <HAL_SPI_Receive+0x114>
 8005994:	e031      	b.n	80059fa <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d113      	bne.n	80059cc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	b292      	uxth	r2, r2
 80059b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	1c9a      	adds	r2, r3, #2
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ca:	e011      	b.n	80059f0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059cc:	f7fb fdc2 	bl	8001554 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d803      	bhi.n	80059e4 <HAL_SPI_Receive+0x1cc>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	d102      	bne.n	80059ea <HAL_SPI_Receive+0x1d2>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059ee:	e017      	b.n	8005a20 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1cd      	bne.n	8005996 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fa46 	bl	8005e90 <SPI_EndRxTransaction>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	75fb      	strb	r3, [r7, #23]
 8005a1c:	e000      	b.n	8005a20 <HAL_SPI_Receive+0x208>
  }

error :
 8005a1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b08c      	sub	sp, #48	; 0x30
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_SPI_TransmitReceive+0x26>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e18a      	b.n	8005d76 <HAL_SPI_TransmitReceive+0x33c>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a68:	f7fb fd74 	bl	8001554 <HAL_GetTick>
 8005a6c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a7e:	887b      	ldrh	r3, [r7, #2]
 8005a80:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d00f      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x70>
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a90:	d107      	bne.n	8005aa2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <HAL_SPI_TransmitReceive+0x68>
 8005a9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d003      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005aa8:	e15b      	b.n	8005d62 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x82>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x82>
 8005ab6:	887b      	ldrh	r3, [r7, #2]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d103      	bne.n	8005ac4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ac2:	e14e      	b.n	8005d62 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d003      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2205      	movs	r2, #5
 8005ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	887a      	ldrh	r2, [r7, #2]
 8005ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	887a      	ldrh	r2, [r7, #2]
 8005aee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	887a      	ldrh	r2, [r7, #2]
 8005afa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	887a      	ldrh	r2, [r7, #2]
 8005b00:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b18:	2b40      	cmp	r3, #64	; 0x40
 8005b1a:	d007      	beq.n	8005b2c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b34:	d178      	bne.n	8005c28 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x10a>
 8005b3e:	8b7b      	ldrh	r3, [r7, #26]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d166      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	881a      	ldrh	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	1c9a      	adds	r2, r3, #2
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b68:	e053      	b.n	8005c12 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d11b      	bne.n	8005bb0 <HAL_SPI_TransmitReceive+0x176>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <HAL_SPI_TransmitReceive+0x176>
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d113      	bne.n	8005bb0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	881a      	ldrh	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	1c9a      	adds	r2, r3, #2
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d119      	bne.n	8005bf2 <HAL_SPI_TransmitReceive+0x1b8>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d014      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	b292      	uxth	r2, r2
 8005bd4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	1c9a      	adds	r2, r3, #2
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bf2:	f7fb fcaf 	bl	8001554 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d807      	bhi.n	8005c12 <HAL_SPI_TransmitReceive+0x1d8>
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d003      	beq.n	8005c12 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c10:	e0a7      	b.n	8005d62 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1a6      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x130>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1a1      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x130>
 8005c26:	e07c      	b.n	8005d22 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_SPI_TransmitReceive+0x1fc>
 8005c30:	8b7b      	ldrh	r3, [r7, #26]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d16b      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c5c:	e057      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d11c      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x26c>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d017      	beq.n	8005ca6 <HAL_SPI_TransmitReceive+0x26c>
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d114      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	330c      	adds	r3, #12
 8005c86:	7812      	ldrb	r2, [r2, #0]
 8005c88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d119      	bne.n	8005ce8 <HAL_SPI_TransmitReceive+0x2ae>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d014      	beq.n	8005ce8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ce8:	f7fb fc34 	bl	8001554 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d803      	bhi.n	8005d00 <HAL_SPI_TransmitReceive+0x2c6>
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	d102      	bne.n	8005d06 <HAL_SPI_TransmitReceive+0x2cc>
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d0c:	e029      	b.n	8005d62 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1a2      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x224>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d19d      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f904 	bl	8005f34 <SPI_EndRxTxTransaction>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d006      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d3e:	e010      	b.n	8005d62 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	e000      	b.n	8005d62 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3730      	adds	r7, #48	; 0x30
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d90:	f7fb fbe0 	bl	8001554 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005da0:	f7fb fbd8 	bl	8001554 <HAL_GetTick>
 8005da4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005da6:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	015b      	lsls	r3, r3, #5
 8005dac:	0d1b      	lsrs	r3, r3, #20
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005db6:	e054      	b.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d050      	beq.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dc0:	f7fb fbc8 	bl	8001554 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d902      	bls.n	8005dd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d13d      	bne.n	8005e52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005de4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dee:	d111      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df8:	d004      	beq.n	8005e04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e02:	d107      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1c:	d10f      	bne.n	8005e3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e017      	b.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d19b      	bne.n	8005db8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3720      	adds	r7, #32
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	2000000c 	.word	0x2000000c

08005e90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea4:	d111      	bne.n	8005eca <SPI_EndRxTransaction+0x3a>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eae:	d004      	beq.n	8005eba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb8:	d107      	bne.n	8005eca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed2:	d117      	bne.n	8005f04 <SPI_EndRxTransaction+0x74>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005edc:	d112      	bne.n	8005f04 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f7ff ff49 	bl	8005d80 <SPI_WaitFlagStateUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01a      	beq.n	8005f2a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e013      	b.n	8005f2c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2180      	movs	r1, #128	; 0x80
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7ff ff36 	bl	8005d80 <SPI_WaitFlagStateUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1e:	f043 0220 	orr.w	r2, r3, #32
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e000      	b.n	8005f2c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2200      	movs	r2, #0
 8005f48:	2180      	movs	r1, #128	; 0x80
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff ff18 	bl	8005d80 <SPI_WaitFlagStateUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	f043 0220 	orr.w	r2, r3, #32
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e000      	b.n	8005f68 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e03f      	b.n	8006002 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fb f8d4 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2224      	movs	r2, #36	; 0x24
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f829 	bl	800600c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695a      	ldr	r2, [r3, #20]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006046:	f023 030c 	bic.w	r3, r3, #12
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	430b      	orrs	r3, r1
 8006052:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a2c      	ldr	r2, [pc, #176]	; (8006120 <UART_SetConfig+0x114>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d103      	bne.n	800607c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006074:	f7ff f9de 	bl	8005434 <HAL_RCC_GetPCLK2Freq>
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	e002      	b.n	8006082 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800607c:	f7ff f9c6 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 8006080:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	009a      	lsls	r2, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	4a22      	ldr	r2, [pc, #136]	; (8006124 <UART_SetConfig+0x118>)
 800609a:	fba2 2303 	umull	r2, r3, r2, r3
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	0119      	lsls	r1, r3, #4
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009a      	lsls	r2, r3, #2
 80060ac:	441a      	add	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060b8:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <UART_SetConfig+0x118>)
 80060ba:	fba3 0302 	umull	r0, r3, r3, r2
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	2064      	movs	r0, #100	; 0x64
 80060c2:	fb00 f303 	mul.w	r3, r0, r3
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	3332      	adds	r3, #50	; 0x32
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <UART_SetConfig+0x118>)
 80060ce:	fba2 2303 	umull	r2, r3, r2, r3
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d8:	4419      	add	r1, r3
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	009a      	lsls	r2, r3, #2
 80060e4:	441a      	add	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80060f0:	4b0c      	ldr	r3, [pc, #48]	; (8006124 <UART_SetConfig+0x118>)
 80060f2:	fba3 0302 	umull	r0, r3, r3, r2
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	2064      	movs	r0, #100	; 0x64
 80060fa:	fb00 f303 	mul.w	r3, r0, r3
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	3332      	adds	r3, #50	; 0x32
 8006104:	4a07      	ldr	r2, [pc, #28]	; (8006124 <UART_SetConfig+0x118>)
 8006106:	fba2 2303 	umull	r2, r3, r2, r3
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	f003 020f 	and.w	r2, r3, #15
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	440a      	add	r2, r1
 8006116:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40013800 	.word	0x40013800
 8006124:	51eb851f 	.word	0x51eb851f

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	2600      	movs	r6, #0
 800612c:	4d0c      	ldr	r5, [pc, #48]	; (8006160 <__libc_init_array+0x38>)
 800612e:	4c0d      	ldr	r4, [pc, #52]	; (8006164 <__libc_init_array+0x3c>)
 8006130:	1b64      	subs	r4, r4, r5
 8006132:	10a4      	asrs	r4, r4, #2
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	f000 f822 	bl	8006180 <_init>
 800613c:	2600      	movs	r6, #0
 800613e:	4d0a      	ldr	r5, [pc, #40]	; (8006168 <__libc_init_array+0x40>)
 8006140:	4c0a      	ldr	r4, [pc, #40]	; (800616c <__libc_init_array+0x44>)
 8006142:	1b64      	subs	r4, r4, r5
 8006144:	10a4      	asrs	r4, r4, #2
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	f855 3b04 	ldr.w	r3, [r5], #4
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	080061c0 	.word	0x080061c0
 8006164:	080061c0 	.word	0x080061c0
 8006168:	080061c0 	.word	0x080061c0
 800616c:	080061c4 	.word	0x080061c4

08006170 <memset>:
 8006170:	4603      	mov	r3, r0
 8006172:	4402      	add	r2, r0
 8006174:	4293      	cmp	r3, r2
 8006176:	d100      	bne.n	800617a <memset+0xa>
 8006178:	4770      	bx	lr
 800617a:	f803 1b01 	strb.w	r1, [r3], #1
 800617e:	e7f9      	b.n	8006174 <memset+0x4>

08006180 <_init>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr

0800618c <_fini>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr
