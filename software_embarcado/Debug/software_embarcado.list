
software_embarcado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080086f8  080086f8  000186f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008750  08008750  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008758  08008758  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800875c  0800875c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000074  080087d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080087d4  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5ef  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc9  00000000  00000000  0002c68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002e658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  0002f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d9e  00000000  00000000  0002fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0cb  00000000  00000000  00046b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008296f  00000000  00000000  00054c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003790  00000000  00000000  000d75e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080086e0 	.word	0x080086e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080086e0 	.word	0x080086e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_ldivmod>:
 8001070:	b97b      	cbnz	r3, 8001092 <__aeabi_ldivmod+0x22>
 8001072:	b972      	cbnz	r2, 8001092 <__aeabi_ldivmod+0x22>
 8001074:	2900      	cmp	r1, #0
 8001076:	bfbe      	ittt	lt
 8001078:	2000      	movlt	r0, #0
 800107a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800107e:	e006      	blt.n	800108e <__aeabi_ldivmod+0x1e>
 8001080:	bf08      	it	eq
 8001082:	2800      	cmpeq	r0, #0
 8001084:	bf1c      	itt	ne
 8001086:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800108a:	f04f 30ff 	movne.w	r0, #4294967295
 800108e:	f000 b9a9 	b.w	80013e4 <__aeabi_idiv0>
 8001092:	f1ad 0c08 	sub.w	ip, sp, #8
 8001096:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800109a:	2900      	cmp	r1, #0
 800109c:	db09      	blt.n	80010b2 <__aeabi_ldivmod+0x42>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db1a      	blt.n	80010d8 <__aeabi_ldivmod+0x68>
 80010a2:	f000 f835 	bl	8001110 <__udivmoddi4>
 80010a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ae:	b004      	add	sp, #16
 80010b0:	4770      	bx	lr
 80010b2:	4240      	negs	r0, r0
 80010b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db1b      	blt.n	80010f4 <__aeabi_ldivmod+0x84>
 80010bc:	f000 f828 	bl	8001110 <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4240      	negs	r0, r0
 80010cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010d0:	4252      	negs	r2, r2
 80010d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010d6:	4770      	bx	lr
 80010d8:	4252      	negs	r2, r2
 80010da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010de:	f000 f817 	bl	8001110 <__udivmoddi4>
 80010e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ea:	b004      	add	sp, #16
 80010ec:	4240      	negs	r0, r0
 80010ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f2:	4770      	bx	lr
 80010f4:	4252      	negs	r2, r2
 80010f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010fa:	f000 f809 	bl	8001110 <__udivmoddi4>
 80010fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001106:	b004      	add	sp, #16
 8001108:	4252      	negs	r2, r2
 800110a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800110e:	4770      	bx	lr

08001110 <__udivmoddi4>:
 8001110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001114:	9e08      	ldr	r6, [sp, #32]
 8001116:	460d      	mov	r5, r1
 8001118:	4604      	mov	r4, r0
 800111a:	4688      	mov	r8, r1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d14d      	bne.n	80011bc <__udivmoddi4+0xac>
 8001120:	428a      	cmp	r2, r1
 8001122:	4694      	mov	ip, r2
 8001124:	d968      	bls.n	80011f8 <__udivmoddi4+0xe8>
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b152      	cbz	r2, 8001142 <__udivmoddi4+0x32>
 800112c:	fa01 f302 	lsl.w	r3, r1, r2
 8001130:	f1c2 0120 	rsb	r1, r2, #32
 8001134:	fa20 f101 	lsr.w	r1, r0, r1
 8001138:	fa0c fc02 	lsl.w	ip, ip, r2
 800113c:	ea41 0803 	orr.w	r8, r1, r3
 8001140:	4094      	lsls	r4, r2
 8001142:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001146:	fbb8 f7f1 	udiv	r7, r8, r1
 800114a:	fa1f fe8c 	uxth.w	lr, ip
 800114e:	fb01 8817 	mls	r8, r1, r7, r8
 8001152:	fb07 f00e 	mul.w	r0, r7, lr
 8001156:	0c23      	lsrs	r3, r4, #16
 8001158:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800115c:	4298      	cmp	r0, r3
 800115e:	d90a      	bls.n	8001176 <__udivmoddi4+0x66>
 8001160:	eb1c 0303 	adds.w	r3, ip, r3
 8001164:	f107 35ff 	add.w	r5, r7, #4294967295
 8001168:	f080 811e 	bcs.w	80013a8 <__udivmoddi4+0x298>
 800116c:	4298      	cmp	r0, r3
 800116e:	f240 811b 	bls.w	80013a8 <__udivmoddi4+0x298>
 8001172:	3f02      	subs	r7, #2
 8001174:	4463      	add	r3, ip
 8001176:	1a1b      	subs	r3, r3, r0
 8001178:	fbb3 f0f1 	udiv	r0, r3, r1
 800117c:	fb01 3310 	mls	r3, r1, r0, r3
 8001180:	fb00 fe0e 	mul.w	lr, r0, lr
 8001184:	b2a4      	uxth	r4, r4
 8001186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800118a:	45a6      	cmp	lr, r4
 800118c:	d90a      	bls.n	80011a4 <__udivmoddi4+0x94>
 800118e:	eb1c 0404 	adds.w	r4, ip, r4
 8001192:	f100 33ff 	add.w	r3, r0, #4294967295
 8001196:	f080 8109 	bcs.w	80013ac <__udivmoddi4+0x29c>
 800119a:	45a6      	cmp	lr, r4
 800119c:	f240 8106 	bls.w	80013ac <__udivmoddi4+0x29c>
 80011a0:	4464      	add	r4, ip
 80011a2:	3802      	subs	r0, #2
 80011a4:	2100      	movs	r1, #0
 80011a6:	eba4 040e 	sub.w	r4, r4, lr
 80011aa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011ae:	b11e      	cbz	r6, 80011b8 <__udivmoddi4+0xa8>
 80011b0:	2300      	movs	r3, #0
 80011b2:	40d4      	lsrs	r4, r2
 80011b4:	e9c6 4300 	strd	r4, r3, [r6]
 80011b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011bc:	428b      	cmp	r3, r1
 80011be:	d908      	bls.n	80011d2 <__udivmoddi4+0xc2>
 80011c0:	2e00      	cmp	r6, #0
 80011c2:	f000 80ee 	beq.w	80013a2 <__udivmoddi4+0x292>
 80011c6:	2100      	movs	r1, #0
 80011c8:	e9c6 0500 	strd	r0, r5, [r6]
 80011cc:	4608      	mov	r0, r1
 80011ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d2:	fab3 f183 	clz	r1, r3
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d14a      	bne.n	8001270 <__udivmoddi4+0x160>
 80011da:	42ab      	cmp	r3, r5
 80011dc:	d302      	bcc.n	80011e4 <__udivmoddi4+0xd4>
 80011de:	4282      	cmp	r2, r0
 80011e0:	f200 80fc 	bhi.w	80013dc <__udivmoddi4+0x2cc>
 80011e4:	1a84      	subs	r4, r0, r2
 80011e6:	eb65 0303 	sbc.w	r3, r5, r3
 80011ea:	2001      	movs	r0, #1
 80011ec:	4698      	mov	r8, r3
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	d0e2      	beq.n	80011b8 <__udivmoddi4+0xa8>
 80011f2:	e9c6 4800 	strd	r4, r8, [r6]
 80011f6:	e7df      	b.n	80011b8 <__udivmoddi4+0xa8>
 80011f8:	b902      	cbnz	r2, 80011fc <__udivmoddi4+0xec>
 80011fa:	deff      	udf	#255	; 0xff
 80011fc:	fab2 f282 	clz	r2, r2
 8001200:	2a00      	cmp	r2, #0
 8001202:	f040 8091 	bne.w	8001328 <__udivmoddi4+0x218>
 8001206:	eba1 000c 	sub.w	r0, r1, ip
 800120a:	2101      	movs	r1, #1
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb0 f3f7 	udiv	r3, r0, r7
 8001218:	fb07 0013 	mls	r0, r7, r3, r0
 800121c:	0c25      	lsrs	r5, r4, #16
 800121e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001222:	fb0e f003 	mul.w	r0, lr, r3
 8001226:	42a8      	cmp	r0, r5
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x12c>
 800122a:	eb1c 0505 	adds.w	r5, ip, r5
 800122e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001232:	d202      	bcs.n	800123a <__udivmoddi4+0x12a>
 8001234:	42a8      	cmp	r0, r5
 8001236:	f200 80ce 	bhi.w	80013d6 <__udivmoddi4+0x2c6>
 800123a:	4643      	mov	r3, r8
 800123c:	1a2d      	subs	r5, r5, r0
 800123e:	fbb5 f0f7 	udiv	r0, r5, r7
 8001242:	fb07 5510 	mls	r5, r7, r0, r5
 8001246:	fb0e fe00 	mul.w	lr, lr, r0
 800124a:	b2a4      	uxth	r4, r4
 800124c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001250:	45a6      	cmp	lr, r4
 8001252:	d908      	bls.n	8001266 <__udivmoddi4+0x156>
 8001254:	eb1c 0404 	adds.w	r4, ip, r4
 8001258:	f100 35ff 	add.w	r5, r0, #4294967295
 800125c:	d202      	bcs.n	8001264 <__udivmoddi4+0x154>
 800125e:	45a6      	cmp	lr, r4
 8001260:	f200 80b6 	bhi.w	80013d0 <__udivmoddi4+0x2c0>
 8001264:	4628      	mov	r0, r5
 8001266:	eba4 040e 	sub.w	r4, r4, lr
 800126a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800126e:	e79e      	b.n	80011ae <__udivmoddi4+0x9e>
 8001270:	f1c1 0720 	rsb	r7, r1, #32
 8001274:	408b      	lsls	r3, r1
 8001276:	fa22 fc07 	lsr.w	ip, r2, r7
 800127a:	ea4c 0c03 	orr.w	ip, ip, r3
 800127e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001282:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001286:	fbba f8f9 	udiv	r8, sl, r9
 800128a:	fa20 f307 	lsr.w	r3, r0, r7
 800128e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001292:	408d      	lsls	r5, r1
 8001294:	fa1f fe8c 	uxth.w	lr, ip
 8001298:	431d      	orrs	r5, r3
 800129a:	fa00 f301 	lsl.w	r3, r0, r1
 800129e:	fb08 f00e 	mul.w	r0, r8, lr
 80012a2:	0c2c      	lsrs	r4, r5, #16
 80012a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012a8:	42a0      	cmp	r0, r4
 80012aa:	fa02 f201 	lsl.w	r2, r2, r1
 80012ae:	d90b      	bls.n	80012c8 <__udivmoddi4+0x1b8>
 80012b0:	eb1c 0404 	adds.w	r4, ip, r4
 80012b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80012b8:	f080 8088 	bcs.w	80013cc <__udivmoddi4+0x2bc>
 80012bc:	42a0      	cmp	r0, r4
 80012be:	f240 8085 	bls.w	80013cc <__udivmoddi4+0x2bc>
 80012c2:	f1a8 0802 	sub.w	r8, r8, #2
 80012c6:	4464      	add	r4, ip
 80012c8:	1a24      	subs	r4, r4, r0
 80012ca:	fbb4 f0f9 	udiv	r0, r4, r9
 80012ce:	fb09 4410 	mls	r4, r9, r0, r4
 80012d2:	fb00 fe0e 	mul.w	lr, r0, lr
 80012d6:	b2ad      	uxth	r5, r5
 80012d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012dc:	45a6      	cmp	lr, r4
 80012de:	d908      	bls.n	80012f2 <__udivmoddi4+0x1e2>
 80012e0:	eb1c 0404 	adds.w	r4, ip, r4
 80012e4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012e8:	d26c      	bcs.n	80013c4 <__udivmoddi4+0x2b4>
 80012ea:	45a6      	cmp	lr, r4
 80012ec:	d96a      	bls.n	80013c4 <__udivmoddi4+0x2b4>
 80012ee:	3802      	subs	r0, #2
 80012f0:	4464      	add	r4, ip
 80012f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012f6:	fba0 9502 	umull	r9, r5, r0, r2
 80012fa:	eba4 040e 	sub.w	r4, r4, lr
 80012fe:	42ac      	cmp	r4, r5
 8001300:	46c8      	mov	r8, r9
 8001302:	46ae      	mov	lr, r5
 8001304:	d356      	bcc.n	80013b4 <__udivmoddi4+0x2a4>
 8001306:	d053      	beq.n	80013b0 <__udivmoddi4+0x2a0>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d069      	beq.n	80013e0 <__udivmoddi4+0x2d0>
 800130c:	ebb3 0208 	subs.w	r2, r3, r8
 8001310:	eb64 040e 	sbc.w	r4, r4, lr
 8001314:	fa22 f301 	lsr.w	r3, r2, r1
 8001318:	fa04 f707 	lsl.w	r7, r4, r7
 800131c:	431f      	orrs	r7, r3
 800131e:	40cc      	lsrs	r4, r1
 8001320:	e9c6 7400 	strd	r7, r4, [r6]
 8001324:	2100      	movs	r1, #0
 8001326:	e747      	b.n	80011b8 <__udivmoddi4+0xa8>
 8001328:	fa0c fc02 	lsl.w	ip, ip, r2
 800132c:	f1c2 0120 	rsb	r1, r2, #32
 8001330:	fa25 f301 	lsr.w	r3, r5, r1
 8001334:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001338:	fa20 f101 	lsr.w	r1, r0, r1
 800133c:	4095      	lsls	r5, r2
 800133e:	430d      	orrs	r5, r1
 8001340:	fbb3 f1f7 	udiv	r1, r3, r7
 8001344:	fb07 3311 	mls	r3, r7, r1, r3
 8001348:	fa1f fe8c 	uxth.w	lr, ip
 800134c:	0c28      	lsrs	r0, r5, #16
 800134e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001352:	fb01 f30e 	mul.w	r3, r1, lr
 8001356:	4283      	cmp	r3, r0
 8001358:	fa04 f402 	lsl.w	r4, r4, r2
 800135c:	d908      	bls.n	8001370 <__udivmoddi4+0x260>
 800135e:	eb1c 0000 	adds.w	r0, ip, r0
 8001362:	f101 38ff 	add.w	r8, r1, #4294967295
 8001366:	d22f      	bcs.n	80013c8 <__udivmoddi4+0x2b8>
 8001368:	4283      	cmp	r3, r0
 800136a:	d92d      	bls.n	80013c8 <__udivmoddi4+0x2b8>
 800136c:	3902      	subs	r1, #2
 800136e:	4460      	add	r0, ip
 8001370:	1ac0      	subs	r0, r0, r3
 8001372:	fbb0 f3f7 	udiv	r3, r0, r7
 8001376:	fb07 0013 	mls	r0, r7, r3, r0
 800137a:	b2ad      	uxth	r5, r5
 800137c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001380:	fb03 f00e 	mul.w	r0, r3, lr
 8001384:	42a8      	cmp	r0, r5
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x28a>
 8001388:	eb1c 0505 	adds.w	r5, ip, r5
 800138c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001390:	d216      	bcs.n	80013c0 <__udivmoddi4+0x2b0>
 8001392:	42a8      	cmp	r0, r5
 8001394:	d914      	bls.n	80013c0 <__udivmoddi4+0x2b0>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	1a28      	subs	r0, r5, r0
 800139c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013a0:	e738      	b.n	8001214 <__udivmoddi4+0x104>
 80013a2:	4631      	mov	r1, r6
 80013a4:	4630      	mov	r0, r6
 80013a6:	e707      	b.n	80011b8 <__udivmoddi4+0xa8>
 80013a8:	462f      	mov	r7, r5
 80013aa:	e6e4      	b.n	8001176 <__udivmoddi4+0x66>
 80013ac:	4618      	mov	r0, r3
 80013ae:	e6f9      	b.n	80011a4 <__udivmoddi4+0x94>
 80013b0:	454b      	cmp	r3, r9
 80013b2:	d2a9      	bcs.n	8001308 <__udivmoddi4+0x1f8>
 80013b4:	ebb9 0802 	subs.w	r8, r9, r2
 80013b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013bc:	3801      	subs	r0, #1
 80013be:	e7a3      	b.n	8001308 <__udivmoddi4+0x1f8>
 80013c0:	4643      	mov	r3, r8
 80013c2:	e7ea      	b.n	800139a <__udivmoddi4+0x28a>
 80013c4:	4628      	mov	r0, r5
 80013c6:	e794      	b.n	80012f2 <__udivmoddi4+0x1e2>
 80013c8:	4641      	mov	r1, r8
 80013ca:	e7d1      	b.n	8001370 <__udivmoddi4+0x260>
 80013cc:	46d0      	mov	r8, sl
 80013ce:	e77b      	b.n	80012c8 <__udivmoddi4+0x1b8>
 80013d0:	4464      	add	r4, ip
 80013d2:	3802      	subs	r0, #2
 80013d4:	e747      	b.n	8001266 <__udivmoddi4+0x156>
 80013d6:	3b02      	subs	r3, #2
 80013d8:	4465      	add	r5, ip
 80013da:	e72f      	b.n	800123c <__udivmoddi4+0x12c>
 80013dc:	4608      	mov	r0, r1
 80013de:	e706      	b.n	80011ee <__udivmoddi4+0xde>
 80013e0:	4631      	mov	r1, r6
 80013e2:	e6e9      	b.n	80011b8 <__udivmoddi4+0xa8>

080013e4 <__aeabi_idiv0>:
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <FRAM_ID>:
char bytes_ID[4] = {0};
char bytes_status[3] = {0} ;

uint8_t wip;

void FRAM_ID(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2101      	movs	r1, #1
 80013f0:	480a      	ldr	r0, [pc, #40]	; (800141c <FRAM_ID+0x34>)
 80013f2:	f002 f98e 	bl	8003712 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDIDI, 1, 100); //envia
 80013f6:	2364      	movs	r3, #100	; 0x64
 80013f8:	2201      	movs	r2, #1
 80013fa:	4909      	ldr	r1, [pc, #36]	; (8001420 <FRAM_ID+0x38>)
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <FRAM_ID+0x3c>)
 80013fe:	f005 fc97 	bl	8006d30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,  (uint8_t *)bytes_ID, 4, 100); //recebe dado
 8001402:	2364      	movs	r3, #100	; 0x64
 8001404:	2204      	movs	r2, #4
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <FRAM_ID+0x40>)
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <FRAM_ID+0x3c>)
 800140a:	f005 fdcd 	bl	8006fa8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	2101      	movs	r1, #1
 8001412:	4802      	ldr	r0, [pc, #8]	; (800141c <FRAM_ID+0x34>)
 8001414:	f002 f97d 	bl	8003712 <HAL_GPIO_WritePin>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40010c00 	.word	0x40010c00
 8001420:	20000003 	.word	0x20000003
 8001424:	20000180 	.word	0x20000180
 8001428:	20000090 	.word	0x20000090

0800142c <FRAM_enablewrite>:

void FRAM_enablewrite(void){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

	//Ativa trava de habilitação de gravação (permite operações de gravação)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2101      	movs	r1, #1
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <FRAM_enablewrite+0x28>)
 8001436:	f002 f96c 	bl	8003712 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WREN, 1, 100);
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2201      	movs	r2, #1
 800143e:	4906      	ldr	r1, [pc, #24]	; (8001458 <FRAM_enablewrite+0x2c>)
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <FRAM_enablewrite+0x30>)
 8001442:	f005 fc75 	bl	8006d30 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2101      	movs	r1, #1
 800144a:	4802      	ldr	r0, [pc, #8]	; (8001454 <FRAM_enablewrite+0x28>)
 800144c:	f002 f961 	bl	8003712 <HAL_GPIO_WritePin>

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010c00 	.word	0x40010c00
 8001458:	20000002 	.word	0x20000002
 800145c:	20000180 	.word	0x20000180

08001460 <FRAM_Write>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

}


void FRAM_Write(uint16_t address, uint8_t *data, uint16_t size){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	4613      	mov	r3, r2
 800146e:	80bb      	strh	r3, [r7, #4]

	// write
	uint8_t addr_high = (address >> 8 ) & 0xFF;
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_low = address & 0xFF;
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2101      	movs	r1, #1
 8001484:	4812      	ldr	r0, [pc, #72]	; (80014d0 <FRAM_Write+0x70>)
 8001486:	f002 f944 	bl	8003712 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 100);
 800148a:	2364      	movs	r3, #100	; 0x64
 800148c:	2201      	movs	r2, #1
 800148e:	4911      	ldr	r1, [pc, #68]	; (80014d4 <FRAM_Write+0x74>)
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <FRAM_Write+0x78>)
 8001492:	f005 fc4d 	bl	8006d30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_high, 1, 100);
 8001496:	f107 010f 	add.w	r1, r7, #15
 800149a:	2364      	movs	r3, #100	; 0x64
 800149c:	2201      	movs	r2, #1
 800149e:	480e      	ldr	r0, [pc, #56]	; (80014d8 <FRAM_Write+0x78>)
 80014a0:	f005 fc46 	bl	8006d30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_low, 1, 100);
 80014a4:	f107 010e 	add.w	r1, r7, #14
 80014a8:	2364      	movs	r3, #100	; 0x64
 80014aa:	2201      	movs	r2, #1
 80014ac:	480a      	ldr	r0, [pc, #40]	; (80014d8 <FRAM_Write+0x78>)
 80014ae:	f005 fc3f 	bl	8006d30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, size, 100);
 80014b2:	88ba      	ldrh	r2, [r7, #4]
 80014b4:	2364      	movs	r3, #100	; 0x64
 80014b6:	6839      	ldr	r1, [r7, #0]
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <FRAM_Write+0x78>)
 80014ba:	f005 fc39 	bl	8006d30 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2101      	movs	r1, #1
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <FRAM_Write+0x70>)
 80014c4:	f002 f925 	bl	8003712 <HAL_GPIO_WritePin>

}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40010c00 	.word	0x40010c00
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000180 	.word	0x20000180

080014dc <FRAM_Read>:

void FRAM_Read(uint16_t address, uint8_t *data_receive, uint16_t size){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4613      	mov	r3, r2
 80014ea:	80bb      	strh	r3, [r7, #4]

	// read
	uint8_t addr_high = (address >> 8 ) & 0xFF;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_low = address & 0xFF;
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2101      	movs	r1, #1
 8001500:	4812      	ldr	r0, [pc, #72]	; (800154c <FRAM_Read+0x70>)
 8001502:	f002 f906 	bl	8003712 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	2201      	movs	r2, #1
 800150a:	4911      	ldr	r1, [pc, #68]	; (8001550 <FRAM_Read+0x74>)
 800150c:	4811      	ldr	r0, [pc, #68]	; (8001554 <FRAM_Read+0x78>)
 800150e:	f005 fc0f 	bl	8006d30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_high, 1, 100);
 8001512:	f107 010f 	add.w	r1, r7, #15
 8001516:	2364      	movs	r3, #100	; 0x64
 8001518:	2201      	movs	r2, #1
 800151a:	480e      	ldr	r0, [pc, #56]	; (8001554 <FRAM_Read+0x78>)
 800151c:	f005 fc08 	bl	8006d30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_low, 1, 100);
 8001520:	f107 010e 	add.w	r1, r7, #14
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	2201      	movs	r2, #1
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <FRAM_Read+0x78>)
 800152a:	f005 fc01 	bl	8006d30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data_receive, size, 100); //recebe dado
 800152e:	88ba      	ldrh	r2, [r7, #4]
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	4807      	ldr	r0, [pc, #28]	; (8001554 <FRAM_Read+0x78>)
 8001536:	f005 fd37 	bl	8006fa8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2101      	movs	r1, #1
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <FRAM_Read+0x70>)
 8001540:	f002 f8e7 	bl	8003712 <HAL_GPIO_WritePin>
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40010c00 	.word	0x40010c00
 8001550:	20000001 	.word	0x20000001
 8001554:	20000180 	.word	0x20000180

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155e:	f001 fb39 	bl	8002bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001562:	f000 f995 	bl	8001890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001566:	f000 fab3 	bl	8001ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 800156a:	f000 fa93 	bl	8001a94 <MX_DMA_Init>
  MX_I2C1_Init();
 800156e:	f000 f9d5 	bl	800191c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001572:	f000 fa01 	bl	8001978 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001576:	f000 fa2d 	bl	80019d4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800157a:	f000 fa61 	bl	8001a40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  accel_Init();
 800157e:	f000 fcd5 	bl	8001f2c <accel_Init>
  BMP280_Config(0x02, 0x05, 0x03, 0x00, 0x04);
 8001582:	2304      	movs	r3, #4
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	2203      	movs	r2, #3
 800158a:	2105      	movs	r1, #5
 800158c:	2002      	movs	r0, #2
 800158e:	f001 f9b1 	bl	80028f4 <BMP280_Config>
  estado_t estado_atual = PAUSADO;
 8001592:	2300      	movs	r3, #0
 8001594:	75fb      	strb	r3, [r7, #23]

  pin_state1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // Lê o estado do pino GPIO14 para carga 1
 8001596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159a:	48b1      	ldr	r0, [pc, #708]	; (8001860 <main+0x308>)
 800159c:	f002 f8a2 	bl	80036e4 <HAL_GPIO_ReadPin>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	4baf      	ldr	r3, [pc, #700]	; (8001864 <main+0x30c>)
 80015a6:	601a      	str	r2, [r3, #0]
  pin_state2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); // Lê o estado do pino GPIO15 para carga 2
 80015a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ac:	48ac      	ldr	r0, [pc, #688]	; (8001860 <main+0x308>)
 80015ae:	f002 f899 	bl	80036e4 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	4bac      	ldr	r3, [pc, #688]	; (8001868 <main+0x310>)
 80015b8:	601a      	str	r2, [r3, #0]

  // INICIALIZA ESTADO DOS INDICADORES DE PRÉ LANÇAMENTO
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // LED
 80015ba:	2200      	movs	r2, #0
 80015bc:	2108      	movs	r1, #8
 80015be:	48a8      	ldr	r0, [pc, #672]	; (8001860 <main+0x308>)
 80015c0:	f002 f8a7 	bl	8003712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //  BUZER
 80015c4:	2200      	movs	r2, #0
 80015c6:	2110      	movs	r1, #16
 80015c8:	48a5      	ldr	r0, [pc, #660]	; (8001860 <main+0x308>)
 80015ca:	f002 f8a2 	bl	8003712 <HAL_GPIO_WritePin>

  // INICIALIZA OS PINOS DE ACIONAR CARGA
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // ACIONA CARGA 1 = 0
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d4:	48a2      	ldr	r0, [pc, #648]	; (8001860 <main+0x308>)
 80015d6:	f002 f89c 	bl	8003712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // ACIONA CARGA 2 = 0
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e0:	489f      	ldr	r0, [pc, #636]	; (8001860 <main+0x308>)
 80015e2:	f002 f896 	bl	8003712 <HAL_GPIO_WritePin>
/*
	for (i = 0; i < 6; i++) {
		memcpy(&data[i], &data_ad[i],1);
	}
*/
	FRAM_ID();
 80015e6:	f7ff feff 	bl	80013e8 <FRAM_ID>
	FRAM_enablewrite();
 80015ea:	f7ff ff1f 	bl	800142c <FRAM_enablewrite>
	FRAM_Write(0x6000, dado, 6);
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2206      	movs	r2, #6
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 80015fa:	f7ff ff31 	bl	8001460 <FRAM_Write>
	FRAM_Read(0x6000, datareceive, 6);
 80015fe:	2206      	movs	r2, #6
 8001600:	499a      	ldr	r1, [pc, #616]	; (800186c <main+0x314>)
 8001602:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8001606:	f7ff ff69 	bl	80014dc <FRAM_Read>

	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800160a:	4899      	ldr	r0, [pc, #612]	; (8001870 <main+0x318>)
 800160c:	f001 fda6 	bl	800315c <HAL_DMA_IRQHandler>

	BMP280_Measure(temp, press);
 8001610:	4998      	ldr	r1, [pc, #608]	; (8001874 <main+0x31c>)
 8001612:	4899      	ldr	r0, [pc, #612]	; (8001878 <main+0x320>)
 8001614:	f001 fa14 	bl	8002a40 <BMP280_Measure>
	Measure_alt(altitude);
 8001618:	4898      	ldr	r0, [pc, #608]	; (800187c <main+0x324>)
 800161a:	f001 fa6d 	bl	8002af8 <Measure_alt>

	while (HAL_DMA_GetState(&hdma_i2c1_rx) != HAL_DMA_STATE_READY);
 800161e:	bf00      	nop
 8001620:	4893      	ldr	r0, [pc, #588]	; (8001870 <main+0x318>)
 8001622:	f001 fea1 	bl	8003368 <HAL_DMA_GetState>
 8001626:	4603      	mov	r3, r0
 8001628:	2b01      	cmp	r3, #1
 800162a:	d1f9      	bne.n	8001620 <main+0xc8>
	{
		read_accel(data_ac);
 800162c:	4894      	ldr	r0, [pc, #592]	; (8001880 <main+0x328>)
 800162e:	f000 fcd3 	bl	8001fd8 <read_accel>
		read_gyro(data_gy);
 8001632:	4894      	ldr	r0, [pc, #592]	; (8001884 <main+0x32c>)
 8001634:	f000 fd24 	bl	8002080 <read_gyro>

	}

	HAL_Delay(500);
 8001638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800163c:	f001 fb2c 	bl	8002c98 <HAL_Delay>
    // Obter os dados do veículo
    //Veiculo data = obterDadosDoVeiculo();

    // Verificar o estado atual e atualizar o estado da máquina de estados

	data.altitude_data = altitude[1];
 8001640:	4b8e      	ldr	r3, [pc, #568]	; (800187c <main+0x324>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	607b      	str	r3, [r7, #4]
	data.altitude_inicial = altitude[1];
 8001646:	4b8d      	ldr	r3, [pc, #564]	; (800187c <main+0x324>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60bb      	str	r3, [r7, #8]
	data.ultima_altitude = altitude[1];
 800164c:	4b8b      	ldr	r3, [pc, #556]	; (800187c <main+0x324>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]


	switch (estado_atual) {
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	2b05      	cmp	r3, #5
 8001656:	d8c6      	bhi.n	80015e6 <main+0x8e>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <main+0x108>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001679 	.word	0x08001679
 8001664:	080016a7 	.word	0x080016a7
 8001668:	08001717 	.word	0x08001717
 800166c:	08001731 	.word	0x08001731
 8001670:	08001769 	.word	0x08001769
 8001674:	080017c3 	.word	0x080017c3
      case PAUSADO:
        if (botao == 1 && pin_state1 == GPIO_PIN_RESET &&  pin_state2 == GPIO_PIN_RESET)
 8001678:	4b83      	ldr	r3, [pc, #524]	; (8001888 <main+0x330>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d10d      	bne.n	800169c <main+0x144>
 8001680:	4b78      	ldr	r3, [pc, #480]	; (8001864 <main+0x30c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d109      	bne.n	800169c <main+0x144>
 8001688:	4b77      	ldr	r3, [pc, #476]	; (8001868 <main+0x310>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <main+0x144>
        {
        	// as duas cargas estao conectadas e entra em aguardar lançamento
           data.altitude_inicial = altitude[1];
 8001690:	4b7a      	ldr	r3, [pc, #488]	; (800187c <main+0x324>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	60bb      	str	r3, [r7, #8]
           estado_atual = AGUARDANDO_LANCAMENTO;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
 800169a:	e004      	b.n	80016a6 <main+0x14e>
        }
        else
        {
           gravacao_de_dados = 0;
 800169c:	4b7b      	ldr	r3, [pc, #492]	; (800188c <main+0x334>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
           estado_atual = PAUSADO;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]
        }

      case AGUARDANDO_LANCAMENTO:
        if(data.aceleracao > 0 && data.altitude_data != data.altitude_inicial)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f04f 0100 	mov.w	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fcd5 	bl	800105c <__aeabi_fcmpgt>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <main+0x178>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fca4 	bl	800100c <__aeabi_fcmpeq>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <main+0x178>
        {
        	estado_atual = LANCADO;
 80016ca:	2302      	movs	r3, #2
 80016cc:	75fb      	strb	r3, [r7, #23]
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//BUZER

        	gravacao_de_dados = 1;
        	estado_atual = AGUARDANDO_LANCAMENTO;
        }
        break;
 80016ce:	e0bc      	b.n	800184a <main+0x2f2>
        else if (data.aceleracao == 0 && data.altitude_data == data.altitude_inicial)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fc98 	bl	800100c <__aeabi_fcmpeq>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d100      	bne.n	80016e4 <main+0x18c>
        break;
 80016e2:	e0b2      	b.n	800184a <main+0x2f2>
        else if (data.aceleracao == 0 && data.altitude_data == data.altitude_inicial)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fc8e 	bl	800100c <__aeabi_fcmpeq>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d100      	bne.n	80016f8 <main+0x1a0>
        break;
 80016f6:	e0a8      	b.n	800184a <main+0x2f2>
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //LED
 80016f8:	2108      	movs	r1, #8
 80016fa:	4859      	ldr	r0, [pc, #356]	; (8001860 <main+0x308>)
 80016fc:	f002 f821 	bl	8003742 <HAL_GPIO_TogglePin>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//BUZER
 8001700:	2201      	movs	r2, #1
 8001702:	2110      	movs	r1, #16
 8001704:	4856      	ldr	r0, [pc, #344]	; (8001860 <main+0x308>)
 8001706:	f002 f804 	bl	8003712 <HAL_GPIO_WritePin>
        	gravacao_de_dados = 1;
 800170a:	4b60      	ldr	r3, [pc, #384]	; (800188c <main+0x334>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
        	estado_atual = AGUARDANDO_LANCAMENTO;
 8001710:	2301      	movs	r3, #1
 8001712:	75fb      	strb	r3, [r7, #23]
        break;
 8001714:	e099      	b.n	800184a <main+0x2f2>

      case LANCADO:
        if (data.aceleracao > 0)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f04f 0100 	mov.w	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fc9d 	bl	800105c <__aeabi_fcmpgt>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d100      	bne.n	800172a <main+0x1d2>
        {
        	estado_atual = VOANDO_ACELERADO;
        }
        break;
 8001728:	e08f      	b.n	800184a <main+0x2f2>
        	estado_atual = VOANDO_ACELERADO;
 800172a:	2303      	movs	r3, #3
 800172c:	75fb      	strb	r3, [r7, #23]
        break;
 800172e:	e08c      	b.n	800184a <main+0x2f2>

      case VOANDO_ACELERADO:
        if (data.aceleracao < -9.8)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fe70 	bl	8000418 <__aeabi_f2d>
 8001738:	a347      	add	r3, pc, #284	; (adr r3, 8001858 <main+0x300>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7ff f935 	bl	80009ac <__aeabi_dcmplt>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <main+0x1f6>
        {
        	estado_atual = VOANDO_RETARDADO;
 8001748:	2304      	movs	r3, #4
 800174a:	75fb      	strb	r3, [r7, #23]
        }
        else if (data.aceleracao > 0)
        {
        	estado_atual = VOANDO_ACELERADO;
        }
        break;
 800174c:	e07d      	b.n	800184a <main+0x2f2>
        else if (data.aceleracao > 0)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f04f 0100 	mov.w	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fc81 	bl	800105c <__aeabi_fcmpgt>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d100      	bne.n	8001762 <main+0x20a>
        break;
 8001760:	e073      	b.n	800184a <main+0x2f2>
        	estado_atual = VOANDO_ACELERADO;
 8001762:	2303      	movs	r3, #3
 8001764:	75fb      	strb	r3, [r7, #23]
        break;
 8001766:	e070      	b.n	800184a <main+0x2f2>

      case VOANDO_RETARDADO:
        if (data.aceleracao > -9.8) {
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fe54 	bl	8000418 <__aeabi_f2d>
 8001770:	a339      	add	r3, pc, #228	; (adr r3, 8001858 <main+0x300>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7ff f937 	bl	80009e8 <__aeabi_dcmpgt>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <main+0x232>
        	estado_atual = VOANDO_ACELERADO;
 8001780:	2303      	movs	r3, #3
 8001782:	75fb      	strb	r3, [r7, #23]
			data.ultima_altitude = data.altitude_data;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	60fb      	str	r3, [r7, #12]
        }
        else if (data.aceleracao < 0)
        {
        	estado_atual = PARAQUEDAS_ACIONADO;
        }
        break;
 8001788:	e05f      	b.n	800184a <main+0x2f2>
        else if (data.aceleracao < -9.8)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe43 	bl	8000418 <__aeabi_f2d>
 8001792:	a331      	add	r3, pc, #196	; (adr r3, 8001858 <main+0x300>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7ff f908 	bl	80009ac <__aeabi_dcmplt>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <main+0x250>
        	estado_atual = VOANDO_RETARDADO;
 80017a2:	2304      	movs	r3, #4
 80017a4:	75fb      	strb	r3, [r7, #23]
        break;
 80017a6:	e050      	b.n	800184a <main+0x2f2>
        else if (data.aceleracao < 0)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fc36 	bl	8001020 <__aeabi_fcmplt>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d100      	bne.n	80017bc <main+0x264>
        break;
 80017ba:	e046      	b.n	800184a <main+0x2f2>
        	estado_atual = PARAQUEDAS_ACIONADO;
 80017bc:	2305      	movs	r3, #5
 80017be:	75fb      	strb	r3, [r7, #23]
        break;
 80017c0:	e043      	b.n	800184a <main+0x2f2>

      case PARAQUEDAS_ACIONADO:
        if (data.aceleracao < -9.8 && data.aceleracao < 0)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe27 	bl	8000418 <__aeabi_f2d>
 80017ca:	a323      	add	r3, pc, #140	; (adr r3, 8001858 <main+0x300>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7ff f8ec 	bl	80009ac <__aeabi_dcmplt>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d017      	beq.n	800180a <main+0x2b2>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f04f 0100 	mov.w	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fc1d 	bl	8001020 <__aeabi_fcmplt>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00e      	beq.n	800180a <main+0x2b2>
        {
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // ACIONA CARGA 1 = 1;
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f2:	481b      	ldr	r0, [pc, #108]	; (8001860 <main+0x308>)
 80017f4:	f001 ff8d 	bl	8003712 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); //ACIONA CARGA 2 = 1; paraquedas on
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <main+0x308>)
 8001800:	f001 ff87 	bl	8003712 <HAL_GPIO_WritePin>
        	estado_atual = PARAQUEDAS_ACIONADO;
 8001804:	2305      	movs	r3, #5
 8001806:	75fb      	strb	r3, [r7, #23]
 8001808:	e01e      	b.n	8001848 <main+0x2f0>
        }
        //revisar esse elseif
        else if (data.altitude_data == data.altitude_inicial && data.aceleracao == 0 && pin_state1 == GPIO_PIN_SET &&  pin_state2 == GPIO_PIN_SET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fbfb 	bl	800100c <__aeabi_fcmpeq>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <main+0x2ec>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fbf2 	bl	800100c <__aeabi_fcmpeq>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00a      	beq.n	8001844 <main+0x2ec>
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <main+0x30c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d106      	bne.n	8001844 <main+0x2ec>
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <main+0x310>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <main+0x2ec>
        {
        	estado_atual = PAUSADO;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]
 8001842:	e001      	b.n	8001848 <main+0x2f0>
        }
        else
        {
        //  printf("O paraquedas foi acionado a uma altitude de %.2f metros.\n", veiculo.ultima_altitude);
        	return 0;
 8001844:	2300      	movs	r3, #0
 8001846:	e001      	b.n	800184c <main+0x2f4>
        }
        break;
 8001848:	bf00      	nop
  {
 800184a:	e6cc      	b.n	80015e6 <main+0x8e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	f3af 8000 	nop.w
 8001858:	9999999a 	.word	0x9999999a
 800185c:	c0239999 	.word	0xc0239999
 8001860:	40010c00 	.word	0x40010c00
 8001864:	20000250 	.word	0x20000250
 8001868:	20000254 	.word	0x20000254
 800186c:	2000021c 	.word	0x2000021c
 8001870:	2000013c 	.word	0x2000013c
 8001874:	20000228 	.word	0x20000228
 8001878:	20000224 	.word	0x20000224
 800187c:	2000022c 	.word	0x2000022c
 8001880:	20000230 	.word	0x20000230
 8001884:	2000023c 	.word	0x2000023c
 8001888:	20000248 	.word	0x20000248
 800188c:	2000024c 	.word	0x2000024c

08001890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b090      	sub	sp, #64	; 0x40
 8001894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001896:	f107 0318 	add.w	r3, r7, #24
 800189a:	2228      	movs	r2, #40	; 0x28
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f006 ff16 	bl	80086d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c0:	2301      	movs	r3, #1
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c4:	2302      	movs	r3, #2
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	4618      	mov	r0, r3
 80018da:	f004 fd8b 	bl	80063f4 <HAL_RCC_OscConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80018e4:	f000 f964 	bl	8001bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e8:	230f      	movs	r3, #15
 80018ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ec:	2302      	movs	r3, #2
 80018ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2102      	movs	r1, #2
 8001902:	4618      	mov	r0, r3
 8001904:	f004 fff8 	bl	80068f8 <HAL_RCC_ClockConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800190e:	f000 f94f 	bl	8001bb0 <Error_Handler>
  }
}
 8001912:	bf00      	nop
 8001914:	3740      	adds	r7, #64	; 0x40
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_I2C1_Init+0x50>)
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <MX_I2C1_Init+0x54>)
 8001924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_I2C1_Init+0x50>)
 8001928:	4a12      	ldr	r2, [pc, #72]	; (8001974 <MX_I2C1_Init+0x58>)
 800192a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_I2C1_Init+0x50>)
 800193a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800193e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <MX_I2C1_Init+0x50>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_I2C1_Init+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <MX_I2C1_Init+0x50>)
 800195a:	f001 ff0b 	bl	8003774 <HAL_I2C_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001964:	f000 f924 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000094 	.word	0x20000094
 8001970:	40005400 	.word	0x40005400
 8001974:	00061a80 	.word	0x00061a80

08001978 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_I2C2_Init+0x50>)
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <MX_I2C2_Init+0x54>)
 8001980:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_I2C2_Init+0x50>)
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <MX_I2C2_Init+0x58>)
 8001986:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_I2C2_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_I2C2_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_I2C2_Init+0x50>)
 8001996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <MX_I2C2_Init+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_I2C2_Init+0x50>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <MX_I2C2_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_I2C2_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_I2C2_Init+0x50>)
 80019b6:	f001 fedd 	bl	8003774 <HAL_I2C_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019c0:	f000 f8f6 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200000e8 	.word	0x200000e8
 80019cc:	40005800 	.word	0x40005800
 80019d0:	00061a80 	.word	0x00061a80

080019d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <MX_SPI1_Init+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a08:	2218      	movs	r2, #24
 8001a0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a20:	220a      	movs	r2, #10
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a26:	f005 f8ff 	bl	8006c28 <HAL_SPI_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a30:	f000 f8be 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000180 	.word	0x20000180
 8001a3c:	40013000 	.word	0x40013000

08001a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <MX_USART2_UART_Init+0x50>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_USART2_UART_Init+0x4c>)
 8001a78:	f005 fe42 	bl	8007700 <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a82:	f000 f895 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200001d8 	.word	0x200001d8
 8001a90:	40004400 	.word	0x40004400

08001a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_DMA_Init+0x38>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <MX_DMA_Init+0x38>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_DMA_Init+0x38>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2011      	movs	r0, #17
 8001ab8:	f001 f9e9 	bl	8002e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001abc:	2011      	movs	r0, #17
 8001abe:	f001 fa02 	bl	8002ec6 <HAL_NVIC_EnableIRQ>

}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a2e      	ldr	r2, [pc, #184]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001aea:	f043 0320 	orr.w	r3, r3, #32
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a28      	ldr	r2, [pc, #160]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f243 0119 	movw	r1, #12313	; 0x3019
 8001b32:	481d      	ldr	r0, [pc, #116]	; (8001ba8 <MX_GPIO_Init+0xd8>)
 8001b34:	f001 fded 	bl	8003712 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b3e:	481b      	ldr	r0, [pc, #108]	; (8001bac <MX_GPIO_Init+0xdc>)
 8001b40:	f001 fde7 	bl	8003712 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB12 PB13 PB3
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8001b44:	f243 0319 	movw	r3, #12313	; 0x3019
 8001b48:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <MX_GPIO_Init+0xd8>)
 8001b5e:	f001 fc3d 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b62:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	4619      	mov	r1, r3
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <MX_GPIO_Init+0xd8>)
 8001b78:	f001 fc30 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_GPIO_Init+0xdc>)
 8001b96:	f001 fc21 	bl	80033dc <HAL_GPIO_Init>

}
 8001b9a:	bf00      	nop
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010c00 	.word	0x40010c00
 8001bac:	40010800 	.word	0x40010800

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <Error_Handler+0x8>
	...

08001bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_MspInit+0x5c>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <HAL_MspInit+0x5c>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6193      	str	r3, [r2, #24]
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_MspInit+0x5c>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_MspInit+0x5c>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_MspInit+0x5c>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_MspInit+0x5c>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_MspInit+0x60>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_MspInit+0x60>)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000

08001c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a46      	ldr	r2, [pc, #280]	; (8001d54 <HAL_I2C_MspInit+0x134>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d152      	bne.n	8001ce6 <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b45      	ldr	r3, [pc, #276]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a44      	ldr	r2, [pc, #272]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c58:	23c0      	movs	r3, #192	; 0xc0
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5c:	2312      	movs	r3, #18
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	483c      	ldr	r0, [pc, #240]	; (8001d5c <HAL_I2C_MspInit+0x13c>)
 8001c6c:	f001 fbb6 	bl	80033dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c70:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	4a38      	ldr	r2, [pc, #224]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c7a:	61d3      	str	r3, [r2, #28]
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001c8a:	4a36      	ldr	r2, [pc, #216]	; (8001d64 <HAL_I2C_MspInit+0x144>)
 8001c8c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c9a:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001c9c:	2280      	movs	r2, #128	; 0x80
 8001c9e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001cac:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001cb8:	4829      	ldr	r0, [pc, #164]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001cba:	f001 f91f 	bl	8002efc <HAL_DMA_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001cc4:	f7ff ff74 	bl	8001bb0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8001cce:	4a24      	ldr	r2, [pc, #144]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	201f      	movs	r0, #31
 8001cda:	f001 f8d8 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cde:	201f      	movs	r0, #31
 8001ce0:	f001 f8f1 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ce4:	e031      	b.n	8001d4a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_I2C_MspInit+0x148>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d12c      	bne.n	8001d4a <HAL_I2C_MspInit+0x12a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0e:	2312      	movs	r3, #18
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 0318 	add.w	r3, r7, #24
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480f      	ldr	r0, [pc, #60]	; (8001d5c <HAL_I2C_MspInit+0x13c>)
 8001d1e:	f001 fb5d 	bl	80033dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2021      	movs	r0, #33	; 0x21
 8001d40:	f001 f8a5 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d44:	2021      	movs	r0, #33	; 0x21
 8001d46:	f001 f8be 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40005400 	.word	0x40005400
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010c00 	.word	0x40010c00
 8001d60:	2000013c 	.word	0x2000013c
 8001d64:	40020080 	.word	0x40020080
 8001d68:	40005800 	.word	0x40005800

08001d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_SPI_MspInit+0x88>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d12f      	bne.n	8001dec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_SPI_MspInit+0x8c>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <HAL_SPI_MspInit+0x8c>)
 8001d92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_SPI_MspInit+0x8c>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_SPI_MspInit+0x8c>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <HAL_SPI_MspInit+0x8c>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_SPI_MspInit+0x8c>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dbc:	23a0      	movs	r3, #160	; 0xa0
 8001dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480b      	ldr	r0, [pc, #44]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001dd0:	f001 fb04 	bl	80033dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dd4:	2340      	movs	r3, #64	; 0x40
 8001dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001de8:	f001 faf8 	bl	80033dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013000 	.word	0x40013000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010800 	.word	0x40010800

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d12f      	bne.n	8001e80 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_UART_MspInit+0x8c>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_UART_MspInit+0x8c>)
 8001e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2a:	61d3      	str	r3, [r2, #28]
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_UART_MspInit+0x8c>)
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_UART_MspInit+0x8c>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a13      	ldr	r2, [pc, #76]	; (8001e8c <HAL_UART_MspInit+0x8c>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_UART_MspInit+0x8c>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e50:	2304      	movs	r3, #4
 8001e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	4619      	mov	r1, r3
 8001e62:	480b      	ldr	r0, [pc, #44]	; (8001e90 <HAL_UART_MspInit+0x90>)
 8001e64:	f001 faba 	bl	80033dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e68:	2308      	movs	r3, #8
 8001e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <HAL_UART_MspInit+0x90>)
 8001e7c:	f001 faae 	bl	80033dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e80:	bf00      	nop
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40004400 	.word	0x40004400
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010800 	.word	0x40010800

08001e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <NMI_Handler+0x4>

08001e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <HardFault_Handler+0x4>

08001ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <MemManage_Handler+0x4>

08001ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <BusFault_Handler+0x4>

08001eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <UsageFault_Handler+0x4>

08001eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eda:	f000 fec1 	bl	8002c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <DMA1_Channel7_IRQHandler+0x10>)
 8001eea:	f001 f937 	bl	800315c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000013c 	.word	0x2000013c

08001ef8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <I2C1_EV_IRQHandler+0x10>)
 8001efe:	f002 fa5d 	bl	80043bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000094 	.word	0x20000094

08001f0c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <I2C2_EV_IRQHandler+0x10>)
 8001f12:	f002 fa53 	bl	80043bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200000e8 	.word	0x200000e8

08001f20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <accel_Init>:
int16_t  Accel_RAW[3], Gyro_RAW[3];
float Accel_data[3], Gyro_data[3];


void accel_Init (void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af04      	add	r7, sp, #16
	//MPU6050

	uint8_t check;
	uint8_t data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000); 	// WHO_AM_I ~ 6050
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	9302      	str	r3, [sp, #8]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	1dfb      	adds	r3, r7, #7
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2301      	movs	r3, #1
 8001f42:	2275      	movs	r2, #117	; 0x75
 8001f44:	21d0      	movs	r1, #208	; 0xd0
 8001f46:	4823      	ldr	r0, [pc, #140]	; (8001fd4 <accel_Init+0xa8>)
 8001f48:	f001 fe52 	bl	8003bf0 <HAL_I2C_Mem_Read>
	//HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1);

	if (check == 104) // devise is present
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	2b68      	cmp	r3, #104	; 0x68
 8001f50:	d13b      	bne.n	8001fca <accel_Init+0x9e>
	{
		// power management register 0x6B we should write all 0s to wake the sensor up
		data = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	9302      	str	r3, [sp, #8]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	1dbb      	adds	r3, r7, #6
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2301      	movs	r3, #1
 8001f66:	226b      	movs	r2, #107	; 0x6b
 8001f68:	21d0      	movs	r1, #208	; 0xd0
 8001f6a:	481a      	ldr	r0, [pc, #104]	; (8001fd4 <accel_Init+0xa8>)
 8001f6c:	f001 fd46 	bl	80039fc <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1);

		// set DATA RATE of 1KHz by writing SMPLRT_DIV register
		data  =  0x07;
 8001f70:	2307      	movs	r3, #7
 8001f72:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	1dbb      	adds	r3, r7, #6
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2301      	movs	r3, #1
 8001f84:	2219      	movs	r2, #25
 8001f86:	21d0      	movs	r1, #208	; 0xd0
 8001f88:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <accel_Init+0xa8>)
 8001f8a:	f001 fd37 	bl	80039fc <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1);

		// set accelerometer e gyroscopic configuration in ACCEL_CONFIG and GYRO_CONFIG
		data = 0x00;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	1dbb      	adds	r3, r7, #6
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	2219      	movs	r2, #25
 8001fa4:	21d0      	movs	r1, #208	; 0xd0
 8001fa6:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <accel_Init+0xa8>)
 8001fa8:	f001 fd28 	bl	80039fc <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1);

		data = 0x00;
 8001fac:	2300      	movs	r3, #0
 8001fae:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8001fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb4:	9302      	str	r3, [sp, #8]
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	1dbb      	adds	r3, r7, #6
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	221b      	movs	r2, #27
 8001fc2:	21d0      	movs	r1, #208	; 0xd0
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <accel_Init+0xa8>)
 8001fc6:	f001 fd19 	bl	80039fc <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1);
	}
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000094 	.word	0x20000094

08001fd8 <read_accel>:

void read_accel(float *Accel_data)
//void read_accel(void)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	6078      	str	r0, [r7, #4]
	uint8_t rec_data[6];

	// Lê 6 BYTES de dados a partir do registrador ACCEL_XOUT_H [ACELERÔMETRO]
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data, 6, 1000);
	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data, 6);
 8001fe0:	2306      	movs	r3, #6
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	223b      	movs	r2, #59	; 0x3b
 8001fee:	21d0      	movs	r1, #208	; 0xd0
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <read_accel+0x98>)
 8001ff2:	f002 f865 	bl	80040c0 <HAL_I2C_Mem_Read_DMA>

	/* converter os valores RAW em aceleração em 'g'
	   dividir de acordo com o valor Full scale definido em FS_SEL
	   FS_SEL = 0. Então, deve ser dividido por 16384 */

	for (int i = 0; i < 3 ; i++ ){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e030      	b.n	800205e <read_accel+0x86>
		Accel_RAW[i] = (int16_t)(rec_data[i*2] << 8 | rec_data [(i*2)+1]);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	3318      	adds	r3, #24
 8002002:	443b      	add	r3, r7
 8002004:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21a      	sxth	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	3301      	adds	r3, #1
 8002012:	3318      	adds	r3, #24
 8002014:	443b      	add	r3, r7
 8002016:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800201a:	b21b      	sxth	r3, r3
 800201c:	4313      	orrs	r3, r2
 800201e:	b219      	sxth	r1, r3
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <read_accel+0x9c>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Accel_data[i] = (Accel_RAW[i])/16384.0;   // obtém o float g
 8002028:	4a12      	ldr	r2, [pc, #72]	; (8002074 <read_accel+0x9c>)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f9df 	bl	80003f4 <__aeabi_i2d>
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <read_accel+0xa0>)
 800203c:	f7fe fb6e 	bl	800071c <__aeabi_ddiv>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	18d4      	adds	r4, r2, r3
 8002050:	f7fe fcea 	bl	8000a28 <__aeabi_d2f>
 8002054:	4603      	mov	r3, r0
 8002056:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3 ; i++ ){
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b02      	cmp	r3, #2
 8002062:	ddcb      	ble.n	8001ffc <read_accel+0x24>
		//memcpy(&data[i*2], &Accel_data[i], 2);
	}
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	bf00      	nop
 8002070:	20000094 	.word	0x20000094
 8002074:	20000258 	.word	0x20000258
 8002078:	40d00000 	.word	0x40d00000
 800207c:	00000000 	.word	0x00000000

08002080 <read_gyro>:

void read_gyro(float *Gyro_data)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af02      	add	r7, sp, #8
 8002086:	6078      	str	r0, [r7, #4]
	uint8_t rec_data2[6];

	// Lê 6 BYTES de dados a partir do registrador GYRO_XOUT_H [GIROSCÓPIO]
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, rec_data2, 6, 1000);
	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, rec_data2, 6);
 8002088:	2306      	movs	r3, #6
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	2243      	movs	r2, #67	; 0x43
 8002096:	21d0      	movs	r1, #208	; 0xd0
 8002098:	4821      	ldr	r0, [pc, #132]	; (8002120 <read_gyro+0xa0>)
 800209a:	f002 f811 	bl	80040c0 <HAL_I2C_Mem_Read_DMA>
	/* converter os valores RAW em dps (°/s)
	   dividir de acordo com o valor Full scale definido em FS_SEL
	   FS_SEL = 0. Então, deve ser dividido por 131.0  */

	for (int i = 0; i < 3 ; i++ ){
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e030      	b.n	8002106 <read_gyro+0x86>
		Gyro_RAW[i] = (int16_t)(rec_data2[i*2] << 8 | rec_data2 [(i*2)+1]);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	3318      	adds	r3, #24
 80020aa:	443b      	add	r3, r7
 80020ac:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	3301      	adds	r3, #1
 80020ba:	3318      	adds	r3, #24
 80020bc:	443b      	add	r3, r7
 80020be:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b219      	sxth	r1, r3
 80020c8:	4a16      	ldr	r2, [pc, #88]	; (8002124 <read_gyro+0xa4>)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Gyro_data[i] = (Gyro_RAW[i])/131.0;
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <read_gyro+0xa4>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe f98b 	bl	80003f4 <__aeabi_i2d>
 80020de:	a30e      	add	r3, pc, #56	; (adr r3, 8002118 <read_gyro+0x98>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	f7fe fb1a 	bl	800071c <__aeabi_ddiv>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	18d4      	adds	r4, r2, r3
 80020f8:	f7fe fc96 	bl	8000a28 <__aeabi_d2f>
 80020fc:	4603      	mov	r3, r0
 80020fe:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3 ; i++ ){
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b02      	cmp	r3, #2
 800210a:	ddcb      	ble.n	80020a4 <read_gyro+0x24>
		//memcpy(&data[i*2], &Gyro_data[i], 2);
	}
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	bf00      	nop
 8002118:	00000000 	.word	0x00000000
 800211c:	40606000 	.word	0x40606000
 8002120:	20000094 	.word	0x20000094
 8002124:	20000260 	.word	0x20000260

08002128 <dataRead>:


// leitura de corte, sao dados armazenados na memoria do sensor (ja vem de fabrica) e precisam ser utilizados para calculos dos novos valores

void dataRead(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, 0x88, 1, trimdata, 25, 1000);
 800212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2319      	movs	r3, #25
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	463b      	mov	r3, r7
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2301      	movs	r3, #1
 800213e:	2288      	movs	r2, #136	; 0x88
 8002140:	21ec      	movs	r1, #236	; 0xec
 8002142:	483a      	ldr	r0, [pc, #232]	; (800222c <dataRead+0x104>)
 8002144:	f001 fd54 	bl	8003bf0 <HAL_I2C_Mem_Read>

	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b21a      	sxth	r2, r3
 800214e:	783b      	ldrb	r3, [r7, #0]
 8002150:	b21b      	sxth	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b21b      	sxth	r3, r3
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b35      	ldr	r3, [pc, #212]	; (8002230 <dataRead+0x108>)
 800215a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b21a      	sxth	r2, r3
 8002162:	78bb      	ldrb	r3, [r7, #2]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21a      	sxth	r2, r3
 800216a:	4b32      	ldr	r3, [pc, #200]	; (8002234 <dataRead+0x10c>)
 800216c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800216e:	797b      	ldrb	r3, [r7, #5]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	b21a      	sxth	r2, r3
 8002174:	793b      	ldrb	r3, [r7, #4]
 8002176:	b21b      	sxth	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b21a      	sxth	r2, r3
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <dataRead+0x110>)
 800217e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	797b      	ldrb	r3, [r7, #5]
 8002188:	b21b      	sxth	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b21b      	sxth	r3, r3
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <dataRead+0x114>)
 8002192:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8002194:	7a7b      	ldrb	r3, [r7, #9]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	79bb      	ldrb	r3, [r7, #6]
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	4b27      	ldr	r3, [pc, #156]	; (8002240 <dataRead+0x118>)
 80021a4:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80021a6:	7afb      	ldrb	r3, [r7, #11]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	7abb      	ldrb	r3, [r7, #10]
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b21a      	sxth	r2, r3
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <dataRead+0x11c>)
 80021b6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80021b8:	7b7b      	ldrb	r3, [r7, #13]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	b21a      	sxth	r2, r3
 80021be:	7b3b      	ldrb	r3, [r7, #12]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <dataRead+0x120>)
 80021c8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	7bbb      	ldrb	r3, [r7, #14]
 80021d2:	b21b      	sxth	r3, r3
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b21a      	sxth	r2, r3
 80021d8:	4b1c      	ldr	r3, [pc, #112]	; (800224c <dataRead+0x124>)
 80021da:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80021dc:	7c7b      	ldrb	r3, [r7, #17]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	7c3b      	ldrb	r3, [r7, #16]
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <dataRead+0x128>)
 80021ec:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80021ee:	7cfb      	ldrb	r3, [r7, #19]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	7cbb      	ldrb	r3, [r7, #18]
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <dataRead+0x12c>)
 80021fe:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8002200:	7d7b      	ldrb	r3, [r7, #21]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	b21a      	sxth	r2, r3
 8002206:	7d3b      	ldrb	r3, [r7, #20]
 8002208:	b21b      	sxth	r3, r3
 800220a:	4313      	orrs	r3, r2
 800220c:	b21a      	sxth	r2, r3
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <dataRead+0x130>)
 8002210:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	b21a      	sxth	r2, r3
 8002218:	7dbb      	ldrb	r3, [r7, #22]
 800221a:	b21b      	sxth	r3, r3
 800221c:	4313      	orrs	r3, r2
 800221e:	b21a      	sxth	r2, r3
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <dataRead+0x134>)
 8002222:	801a      	strh	r2, [r3, #0]

}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200000e8 	.word	0x200000e8
 8002230:	20000270 	.word	0x20000270
 8002234:	20000274 	.word	0x20000274
 8002238:	20000276 	.word	0x20000276
 800223c:	20000272 	.word	0x20000272
 8002240:	20000278 	.word	0x20000278
 8002244:	2000027a 	.word	0x2000027a
 8002248:	2000027c 	.word	0x2000027c
 800224c:	2000027e 	.word	0x2000027e
 8002250:	20000280 	.word	0x20000280
 8002254:	20000282 	.word	0x20000282
 8002258:	20000284 	.word	0x20000284
 800225c:	20000286 	.word	0x20000286

08002260 <BMPReadRaw>:

int BMPReadRaw(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af04      	add	r7, sp, #16
	uint8_t Data[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BMP280_ADD, ID_REG, 1, &chipID, 1, 1000);
 8002266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	2301      	movs	r3, #1
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <BMPReadRaw+0x80>)
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2301      	movs	r3, #1
 8002276:	22d0      	movs	r2, #208	; 0xd0
 8002278:	21ec      	movs	r1, #236	; 0xec
 800227a:	481a      	ldr	r0, [pc, #104]	; (80022e4 <BMPReadRaw+0x84>)
 800227c:	f001 fcb8 	bl	8003bf0 <HAL_I2C_Mem_Read>

	if (chipID == 0x58) //“id” register contains the chip identification number chip_id[7:0], which is 0x58
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <BMPReadRaw+0x80>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b58      	cmp	r3, #88	; 0x58
 8002286:	d124      	bne.n	80022d2 <BMPReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFC
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, PRESS_MSB_REG, 1, Data, 6, 1000);
 8002288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228c:	9302      	str	r3, [sp, #8]
 800228e:	2306      	movs	r3, #6
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	463b      	mov	r3, r7
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2301      	movs	r3, #1
 8002298:	22f7      	movs	r2, #247	; 0xf7
 800229a:	21ec      	movs	r1, #236	; 0xec
 800229c:	4811      	ldr	r0, [pc, #68]	; (80022e4 <BMPReadRaw+0x84>)
 800229e:	f001 fca7 	bl	8003bf0 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (Data[0]<<12)|(Data[1]<<4)|(Data[2]>>4);
 80022a2:	783b      	ldrb	r3, [r7, #0]
 80022a4:	031a      	lsls	r2, r3, #12
 80022a6:	787b      	ldrb	r3, [r7, #1]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	4313      	orrs	r3, r2
 80022ac:	78ba      	ldrb	r2, [r7, #2]
 80022ae:	0912      	lsrs	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	4313      	orrs	r3, r2
 80022b4:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <BMPReadRaw+0x88>)
 80022b6:	6013      	str	r3, [r2, #0]
		tRaw = (Data[3]<<12)|(Data[4]<<4)|(Data[5]>>4);
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	031a      	lsls	r2, r3, #12
 80022bc:	793b      	ldrb	r3, [r7, #4]
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	4313      	orrs	r3, r2
 80022c2:	797a      	ldrb	r2, [r7, #5]
 80022c4:	0912      	lsrs	r2, r2, #4
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	4313      	orrs	r3, r2
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <BMPReadRaw+0x8c>)
 80022cc:	6013      	str	r3, [r2, #0]

		return 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e001      	b.n	80022d6 <BMPReadRaw+0x76>
	}

	else return -1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000266 	.word	0x20000266
 80022e4:	200000e8 	.word	0x200000e8
 80022e8:	2000026c 	.word	0x2000026c
 80022ec:	20000268 	.word	0x20000268

080022f0 <bmp280_compensate_T_int32>:

int32_t t_fine;
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2)) >> 11;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	10da      	asrs	r2, r3, #3
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <bmp280_compensate_T_int32+0x70>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	4a17      	ldr	r2, [pc, #92]	; (8002364 <bmp280_compensate_T_int32+0x74>)
 8002306:	f9b2 2000 	ldrsh.w	r2, [r2]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	12db      	asrs	r3, r3, #11
 8002310:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1))) >> 12)*((int32_t)dig_T3)) >> 14;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	111b      	asrs	r3, r3, #4
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <bmp280_compensate_T_int32+0x70>)
 8002318:	8812      	ldrh	r2, [r2, #0]
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	1112      	asrs	r2, r2, #4
 8002320:	490f      	ldr	r1, [pc, #60]	; (8002360 <bmp280_compensate_T_int32+0x70>)
 8002322:	8809      	ldrh	r1, [r1, #0]
 8002324:	1a52      	subs	r2, r2, r1
 8002326:	fb02 f303 	mul.w	r3, r2, r3
 800232a:	131b      	asrs	r3, r3, #12
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <bmp280_compensate_T_int32+0x78>)
 800232e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	139b      	asrs	r3, r3, #14
 8002338:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <bmp280_compensate_T_int32+0x7c>)
 8002342:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <bmp280_compensate_T_int32+0x7c>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	3380      	adds	r3, #128	; 0x80
 8002350:	121b      	asrs	r3, r3, #8
 8002352:	60fb      	str	r3, [r7, #12]
	return T;
 8002354:	68fb      	ldr	r3, [r7, #12]
}
 8002356:	4618      	mov	r0, r3
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000270 	.word	0x20000270
 8002364:	20000274 	.word	0x20000274
 8002368:	20000276 	.word	0x20000276
 800236c:	20000288 	.word	0x20000288

08002370 <bmp280_compensate_P_int32>:


int32_t bmp280_compensate_P_int32(int32_t adc_P)
{
 8002370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002374:	b0ca      	sub	sp, #296	; 0x128
 8002376:	af00      	add	r7, sp, #0
 8002378:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine)-128000;
 800237c:	4bae      	ldr	r3, [pc, #696]	; (8002638 <bmp280_compensate_P_int32+0x2c8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	17da      	asrs	r2, r3, #31
 8002382:	461c      	mov	r4, r3
 8002384:	4615      	mov	r5, r2
 8002386:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800238a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800238e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8002392:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002396:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800239a:	fb03 f102 	mul.w	r1, r3, r2
 800239e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80023a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	18ca      	adds	r2, r1, r3
 80023ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023b0:	fba3 8903 	umull	r8, r9, r3, r3
 80023b4:	eb02 0309 	add.w	r3, r2, r9
 80023b8:	4699      	mov	r9, r3
 80023ba:	4ba0      	ldr	r3, [pc, #640]	; (800263c <bmp280_compensate_P_int32+0x2cc>)
 80023bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	17da      	asrs	r2, r3, #31
 80023c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80023cc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80023d0:	4603      	mov	r3, r0
 80023d2:	fb03 f209 	mul.w	r2, r3, r9
 80023d6:	460b      	mov	r3, r1
 80023d8:	fb08 f303 	mul.w	r3, r8, r3
 80023dc:	4413      	add	r3, r2
 80023de:	4602      	mov	r2, r0
 80023e0:	fba8 2102 	umull	r2, r1, r8, r2
 80023e4:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80023e8:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80023ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80023f0:	4413      	add	r3, r2
 80023f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80023f6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80023fa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80023fe:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 +((var1*(int64_t)dig_P5) << 17);
 8002402:	4b8f      	ldr	r3, [pc, #572]	; (8002640 <bmp280_compensate_P_int32+0x2d0>)
 8002404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002408:	b21b      	sxth	r3, r3
 800240a:	17da      	asrs	r2, r3, #31
 800240c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002410:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002414:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002418:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800241c:	462a      	mov	r2, r5
 800241e:	fb02 f203 	mul.w	r2, r2, r3
 8002422:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002426:	4621      	mov	r1, r4
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	441a      	add	r2, r3
 800242e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002432:	4621      	mov	r1, r4
 8002434:	fba3 3101 	umull	r3, r1, r3, r1
 8002438:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800243c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002444:	18d3      	adds	r3, r2, r3
 8002446:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800244a:	f04f 0000 	mov.w	r0, #0
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8002456:	462b      	mov	r3, r5
 8002458:	0459      	lsls	r1, r3, #17
 800245a:	4622      	mov	r2, r4
 800245c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8002460:	4623      	mov	r3, r4
 8002462:	0458      	lsls	r0, r3, #17
 8002464:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002468:	1814      	adds	r4, r2, r0
 800246a:	643c      	str	r4, [r7, #64]	; 0x40
 800246c:	414b      	adcs	r3, r1
 800246e:	647b      	str	r3, [r7, #68]	; 0x44
 8002470:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002474:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4) << 35);
 8002478:	4b72      	ldr	r3, [pc, #456]	; (8002644 <bmp280_compensate_P_int32+0x2d4>)
 800247a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247e:	b21b      	sxth	r3, r3
 8002480:	17da      	asrs	r2, r3, #31
 8002482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002486:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002496:	00d9      	lsls	r1, r3, #3
 8002498:	2000      	movs	r0, #0
 800249a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800249e:	1814      	adds	r4, r2, r0
 80024a0:	63bc      	str	r4, [r7, #56]	; 0x38
 80024a2:	414b      	adcs	r3, r1
 80024a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80024aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3) >>8) + ((var1 * (int64_t)dig_P2) <<12);
 80024ae:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80024b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024b6:	fb03 f102 	mul.w	r1, r3, r2
 80024ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80024be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	18ca      	adds	r2, r1, r3
 80024c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024cc:	fba3 3103 	umull	r3, r1, r3, r3
 80024d0:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80024d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80024d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024dc:	18d3      	adds	r3, r2, r3
 80024de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80024e2:	4b59      	ldr	r3, [pc, #356]	; (8002648 <bmp280_compensate_P_int32+0x2d8>)
 80024e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	17da      	asrs	r2, r3, #31
 80024ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024f0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024f4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80024f8:	4622      	mov	r2, r4
 80024fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024fe:	4641      	mov	r1, r8
 8002500:	fb01 f202 	mul.w	r2, r1, r2
 8002504:	464d      	mov	r5, r9
 8002506:	4618      	mov	r0, r3
 8002508:	4621      	mov	r1, r4
 800250a:	4603      	mov	r3, r0
 800250c:	fb03 f305 	mul.w	r3, r3, r5
 8002510:	4413      	add	r3, r2
 8002512:	4602      	mov	r2, r0
 8002514:	4641      	mov	r1, r8
 8002516:	fba2 2101 	umull	r2, r1, r2, r1
 800251a:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800251e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8002522:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002526:	4413      	add	r3, r2
 8002528:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800252c:	f04f 0000 	mov.w	r0, #0
 8002530:	f04f 0100 	mov.w	r1, #0
 8002534:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8002538:	4623      	mov	r3, r4
 800253a:	0a18      	lsrs	r0, r3, #8
 800253c:	462a      	mov	r2, r5
 800253e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8002542:	462b      	mov	r3, r5
 8002544:	1219      	asrs	r1, r3, #8
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <bmp280_compensate_P_int32+0x2dc>)
 8002548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254c:	b21b      	sxth	r3, r3
 800254e:	17da      	asrs	r2, r3, #31
 8002550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002554:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002558:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800255c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8002560:	464a      	mov	r2, r9
 8002562:	fb02 f203 	mul.w	r2, r2, r3
 8002566:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800256a:	4644      	mov	r4, r8
 800256c:	fb04 f303 	mul.w	r3, r4, r3
 8002570:	441a      	add	r2, r3
 8002572:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002576:	4644      	mov	r4, r8
 8002578:	fba3 3404 	umull	r3, r4, r3, r4
 800257c:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8002580:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002584:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002588:	18d3      	adds	r3, r2, r3
 800258a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800259a:	464c      	mov	r4, r9
 800259c:	0323      	lsls	r3, r4, #12
 800259e:	46c4      	mov	ip, r8
 80025a0:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80025a4:	4644      	mov	r4, r8
 80025a6:	0322      	lsls	r2, r4, #12
 80025a8:	1884      	adds	r4, r0, r2
 80025aa:	633c      	str	r4, [r7, #48]	; 0x30
 80025ac:	eb41 0303 	adc.w	r3, r1, r3
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
 80025b2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80025b6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) <<47)+var1))*((int64_t)dig_P1) >>33;
 80025ba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80025be:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80025c2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80025c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80025ca:	4b21      	ldr	r3, [pc, #132]	; (8002650 <bmp280_compensate_P_int32+0x2e0>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025d6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025da:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80025de:	4622      	mov	r2, r4
 80025e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80025e4:	4641      	mov	r1, r8
 80025e6:	fb01 f202 	mul.w	r2, r1, r2
 80025ea:	464d      	mov	r5, r9
 80025ec:	4618      	mov	r0, r3
 80025ee:	4621      	mov	r1, r4
 80025f0:	4603      	mov	r3, r0
 80025f2:	fb03 f305 	mul.w	r3, r3, r5
 80025f6:	4413      	add	r3, r2
 80025f8:	4602      	mov	r2, r0
 80025fa:	4641      	mov	r1, r8
 80025fc:	fba2 2101 	umull	r2, r1, r2, r1
 8002600:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8002604:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002608:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800260c:	4413      	add	r3, r2
 800260e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800261e:	4629      	mov	r1, r5
 8002620:	104a      	asrs	r2, r1, #1
 8002622:	4629      	mov	r1, r5
 8002624:	17cb      	asrs	r3, r1, #31
 8002626:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 800262a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800262e:	4313      	orrs	r3, r2
 8002630:	d110      	bne.n	8002654 <bmp280_compensate_P_int32+0x2e4>
			{
				return 0; // avoid exception caused by division by zero
 8002632:	2300      	movs	r3, #0
 8002634:	e152      	b.n	80028dc <bmp280_compensate_P_int32+0x56c>
 8002636:	bf00      	nop
 8002638:	20000288 	.word	0x20000288
 800263c:	20000280 	.word	0x20000280
 8002640:	2000027e 	.word	0x2000027e
 8002644:	2000027c 	.word	0x2000027c
 8002648:	2000027a 	.word	0x2000027a
 800264c:	20000278 	.word	0x20000278
 8002650:	20000272 	.word	0x20000272
			}

	p = 1048576-adc_P;
 8002654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002658:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800265c:	17da      	asrs	r2, r3, #31
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002662:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002666:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800266a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800266e:	105b      	asrs	r3, r3, #1
 8002670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002674:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002678:	07db      	lsls	r3, r3, #31
 800267a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800267e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002682:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002686:	4604      	mov	r4, r0
 8002688:	1aa4      	subs	r4, r4, r2
 800268a:	67bc      	str	r4, [r7, #120]	; 0x78
 800268c:	eb61 0303 	sbc.w	r3, r1, r3
 8002690:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002692:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	1891      	adds	r1, r2, r2
 800269c:	6239      	str	r1, [r7, #32]
 800269e:	415b      	adcs	r3, r3
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026a6:	4621      	mov	r1, r4
 80026a8:	1851      	adds	r1, r2, r1
 80026aa:	61b9      	str	r1, [r7, #24]
 80026ac:	4629      	mov	r1, r5
 80026ae:	414b      	adcs	r3, r1
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80026be:	4649      	mov	r1, r9
 80026c0:	018b      	lsls	r3, r1, #6
 80026c2:	4641      	mov	r1, r8
 80026c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026c8:	4641      	mov	r1, r8
 80026ca:	018a      	lsls	r2, r1, #6
 80026cc:	4641      	mov	r1, r8
 80026ce:	1889      	adds	r1, r1, r2
 80026d0:	6139      	str	r1, [r7, #16]
 80026d2:	4649      	mov	r1, r9
 80026d4:	eb43 0101 	adc.w	r1, r3, r1
 80026d8:	6179      	str	r1, [r7, #20]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80026e6:	4649      	mov	r1, r9
 80026e8:	008b      	lsls	r3, r1, #2
 80026ea:	46c4      	mov	ip, r8
 80026ec:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80026f0:	4641      	mov	r1, r8
 80026f2:	008a      	lsls	r2, r1, #2
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	4603      	mov	r3, r0
 80026fa:	4622      	mov	r2, r4
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	460b      	mov	r3, r1
 8002702:	462a      	mov	r2, r5
 8002704:	eb42 0303 	adc.w	r3, r2, r3
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002716:	4649      	mov	r1, r9
 8002718:	008b      	lsls	r3, r1, #2
 800271a:	46c4      	mov	ip, r8
 800271c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002720:	4641      	mov	r1, r8
 8002722:	008a      	lsls	r2, r1, #2
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	4603      	mov	r3, r0
 800272a:	4622      	mov	r2, r4
 800272c:	189b      	adds	r3, r3, r2
 800272e:	673b      	str	r3, [r7, #112]	; 0x70
 8002730:	462b      	mov	r3, r5
 8002732:	460a      	mov	r2, r1
 8002734:	eb42 0303 	adc.w	r3, r2, r3
 8002738:	677b      	str	r3, [r7, #116]	; 0x74
 800273a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800273e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002742:	f7fe fc95 	bl	8001070 <__aeabi_ldivmod>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 800274e:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <bmp280_compensate_P_int32+0x578>)
 8002750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002754:	b21b      	sxth	r3, r3
 8002756:	17da      	asrs	r2, r3, #31
 8002758:	66bb      	str	r3, [r7, #104]	; 0x68
 800275a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800275c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002760:	f04f 0000 	mov.w	r0, #0
 8002764:	f04f 0100 	mov.w	r1, #0
 8002768:	0b50      	lsrs	r0, r2, #13
 800276a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800276e:	1359      	asrs	r1, r3, #13
 8002770:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002774:	462b      	mov	r3, r5
 8002776:	fb00 f203 	mul.w	r2, r0, r3
 800277a:	4623      	mov	r3, r4
 800277c:	fb03 f301 	mul.w	r3, r3, r1
 8002780:	4413      	add	r3, r2
 8002782:	4622      	mov	r2, r4
 8002784:	fba2 2100 	umull	r2, r1, r2, r0
 8002788:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800278c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002790:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002794:	4413      	add	r3, r2
 8002796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800279a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800279e:	f04f 0000 	mov.w	r0, #0
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	0b50      	lsrs	r0, r2, #13
 80027a8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80027ac:	1359      	asrs	r1, r3, #13
 80027ae:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80027b2:	462b      	mov	r3, r5
 80027b4:	fb00 f203 	mul.w	r2, r0, r3
 80027b8:	4623      	mov	r3, r4
 80027ba:	fb03 f301 	mul.w	r3, r3, r1
 80027be:	4413      	add	r3, r2
 80027c0:	4622      	mov	r2, r4
 80027c2:	fba2 2100 	umull	r2, r1, r2, r0
 80027c6:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80027ca:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80027ce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80027d2:	4413      	add	r3, r2
 80027d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80027e4:	4621      	mov	r1, r4
 80027e6:	0e4a      	lsrs	r2, r1, #25
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	460c      	mov	r4, r1
 80027ee:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80027f2:	164b      	asrs	r3, r1, #25
 80027f4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80027f8:	4b3c      	ldr	r3, [pc, #240]	; (80028ec <bmp280_compensate_P_int32+0x57c>)
 80027fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fe:	b21b      	sxth	r3, r3
 8002800:	17da      	asrs	r2, r3, #31
 8002802:	663b      	str	r3, [r7, #96]	; 0x60
 8002804:	667a      	str	r2, [r7, #100]	; 0x64
 8002806:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800280a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800280e:	462a      	mov	r2, r5
 8002810:	fb02 f203 	mul.w	r2, r2, r3
 8002814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002818:	4621      	mov	r1, r4
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002824:	4621      	mov	r1, r4
 8002826:	fba2 2101 	umull	r2, r1, r2, r1
 800282a:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800282e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8002832:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002836:	4413      	add	r3, r2
 8002838:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002848:	4621      	mov	r1, r4
 800284a:	0cca      	lsrs	r2, r1, #19
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	460c      	mov	r4, r1
 8002852:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8002856:	14cb      	asrs	r3, r1, #19
 8002858:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800285c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002860:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002864:	1884      	adds	r4, r0, r2
 8002866:	65bc      	str	r4, [r7, #88]	; 0x58
 8002868:	eb41 0303 	adc.w	r3, r1, r3
 800286c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800286e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002872:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002876:	4621      	mov	r1, r4
 8002878:	1889      	adds	r1, r1, r2
 800287a:	6539      	str	r1, [r7, #80]	; 0x50
 800287c:	4629      	mov	r1, r5
 800287e:	eb43 0101 	adc.w	r1, r3, r1
 8002882:	6579      	str	r1, [r7, #84]	; 0x54
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002890:	4623      	mov	r3, r4
 8002892:	0a18      	lsrs	r0, r3, #8
 8002894:	462a      	mov	r2, r5
 8002896:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800289a:	462b      	mov	r3, r5
 800289c:	1219      	asrs	r1, r3, #8
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <bmp280_compensate_P_int32+0x580>)
 80028a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a4:	b21b      	sxth	r3, r3
 80028a6:	17da      	asrs	r2, r3, #31
 80028a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80028b8:	464c      	mov	r4, r9
 80028ba:	0123      	lsls	r3, r4, #4
 80028bc:	46c4      	mov	ip, r8
 80028be:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80028c2:	4644      	mov	r4, r8
 80028c4:	0122      	lsls	r2, r4, #4
 80028c6:	1884      	adds	r4, r0, r2
 80028c8:	603c      	str	r4, [r7, #0]
 80028ca:	eb41 0303 	adc.w	r3, r1, r3
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80028d4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (int64_t)p;
 80028d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110

}
 80028dc:	4618      	mov	r0, r3
 80028de:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e8:	20000286 	.word	0x20000286
 80028ec:	20000284 	.word	0x20000284
 80028f0:	20000282 	.word	0x20000282

080028f4 <BMP280_Config>:


int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af04      	add	r7, sp, #16
 80028fa:	4604      	mov	r4, r0
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4623      	mov	r3, r4
 8002904:	71fb      	strb	r3, [r7, #7]
 8002906:	4603      	mov	r3, r0
 8002908:	71bb      	strb	r3, [r7, #6]
 800290a:	460b      	mov	r3, r1
 800290c:	717b      	strb	r3, [r7, #5]
 800290e:	4613      	mov	r3, r2
 8002910:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	dataRead();
 8002912:	f7ff fc09 	bl	8002128 <dataRead>

	uint8_t datatowrite = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 800291e:	23b6      	movs	r3, #182	; 0xb6
 8002920:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8002922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002926:	9302      	str	r3, [sp, #8]
 8002928:	2301      	movs	r3, #1
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	f107 030f 	add.w	r3, r7, #15
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2301      	movs	r3, #1
 8002934:	22e0      	movs	r2, #224	; 0xe0
 8002936:	21ec      	movs	r1, #236	; 0xec
 8002938:	4840      	ldr	r0, [pc, #256]	; (8002a3c <BMP280_Config+0x148>)
 800293a:	f001 f85f 	bl	80039fc <HAL_I2C_Mem_Write>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <BMP280_Config+0x56>
	{
		return -1;
 8002944:	f04f 33ff 	mov.w	r3, #4294967295
 8002948:	e074      	b.n	8002a34 <BMP280_Config+0x140>
	}

	HAL_Delay (100);
 800294a:	2064      	movs	r0, #100	; 0x64
 800294c:	f000 f9a4 	bl	8002c98 <HAL_Delay>


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8002950:	793b      	ldrb	r3, [r7, #4]
 8002952:	015b      	lsls	r3, r3, #5
 8002954:	b25a      	sxtb	r2, r3
 8002956:	f897 3020 	ldrb.w	r3, [r7, #32]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	b25b      	sxtb	r3, r3
 800295e:	4313      	orrs	r3, r2
 8002960:	b25b      	sxtb	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8002966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	2301      	movs	r3, #1
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	f107 030f 	add.w	r3, r7, #15
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2301      	movs	r3, #1
 8002978:	22f5      	movs	r2, #245	; 0xf5
 800297a:	21ec      	movs	r1, #236	; 0xec
 800297c:	482f      	ldr	r0, [pc, #188]	; (8002a3c <BMP280_Config+0x148>)
 800297e:	f001 f83d 	bl	80039fc <HAL_I2C_Mem_Write>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <BMP280_Config+0x9a>
	{
		return -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
 800298c:	e052      	b.n	8002a34 <BMP280_Config+0x140>
	}
	HAL_Delay (100);
 800298e:	2064      	movs	r0, #100	; 0x64
 8002990:	f000 f982 	bl	8002c98 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, CONFIG_REG, 1, &datacheck, 1, 1000);
 8002994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002998:	9302      	str	r3, [sp, #8]
 800299a:	2301      	movs	r3, #1
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	f107 030e 	add.w	r3, r7, #14
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2301      	movs	r3, #1
 80029a6:	22f5      	movs	r2, #245	; 0xf5
 80029a8:	21ec      	movs	r1, #236	; 0xec
 80029aa:	4824      	ldr	r0, [pc, #144]	; (8002a3c <BMP280_Config+0x148>)
 80029ac:	f001 f920 	bl	8003bf0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80029b0:	7bba      	ldrb	r2, [r7, #14]
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d002      	beq.n	80029be <BMP280_Config+0xca>
	{
		return -1;
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295
 80029bc:	e03a      	b.n	8002a34 <BMP280_Config+0x140>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	015b      	lsls	r3, r3, #5
 80029c2:	b25a      	sxtb	r2, r3
 80029c4:	79bb      	ldrb	r3, [r7, #6]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b25a      	sxtb	r2, r3
 80029ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80029da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029de:	9302      	str	r3, [sp, #8]
 80029e0:	2301      	movs	r3, #1
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	f107 030f 	add.w	r3, r7, #15
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2301      	movs	r3, #1
 80029ec:	22f4      	movs	r2, #244	; 0xf4
 80029ee:	21ec      	movs	r1, #236	; 0xec
 80029f0:	4812      	ldr	r0, [pc, #72]	; (8002a3c <BMP280_Config+0x148>)
 80029f2:	f001 f803 	bl	80039fc <HAL_I2C_Mem_Write>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <BMP280_Config+0x10e>
	{
		return -1;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002a00:	e018      	b.n	8002a34 <BMP280_Config+0x140>
	}
	HAL_Delay (100);
 8002a02:	2064      	movs	r0, #100	; 0x64
 8002a04:	f000 f948 	bl	8002c98 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8002a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0c:	9302      	str	r3, [sp, #8]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	f107 030e 	add.w	r3, r7, #14
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2301      	movs	r3, #1
 8002a1a:	22f4      	movs	r2, #244	; 0xf4
 8002a1c:	21ec      	movs	r1, #236	; 0xec
 8002a1e:	4807      	ldr	r0, [pc, #28]	; (8002a3c <BMP280_Config+0x148>)
 8002a20:	f001 f8e6 	bl	8003bf0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8002a24:	7bba      	ldrb	r2, [r7, #14]
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d002      	beq.n	8002a32 <BMP280_Config+0x13e>
	{
		return -1;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a30:	e000      	b.n	8002a34 <BMP280_Config+0x140>
	}

	return 0;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd90      	pop	{r4, r7, pc}
 8002a3c:	200000e8 	.word	0x200000e8

08002a40 <BMP280_Measure>:
/* measure the temp, pressure
 * the values will be stored in the parameters passed to the function
 */

void BMP280_Measure(float *temperature, float *pressure)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	const int32_t INVALID_RAW_VALUE = 0x800000;
 8002a4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002a4e:	60fb      	str	r3, [r7, #12]

	if (BMPReadRaw() == 0)
 8002a50:	f7ff fc06 	bl	8002260 <BMPReadRaw>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d13b      	bne.n	8002ad2 <BMP280_Measure+0x92>
	{
		  if (tRaw != INVALID_RAW_VALUE) {
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <BMP280_Measure+0xac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d017      	beq.n	8002a94 <BMP280_Measure+0x54>
			  *temperature = (bmp280_compensate_T_int32 (tRaw))/100.0;  // temp x100
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <BMP280_Measure+0xac>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fc41 	bl	80022f0 <bmp280_compensate_T_int32>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fcbf 	bl	80003f4 <__aeabi_i2d>
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <BMP280_Measure+0xb0>)
 8002a7c:	f7fd fe4e 	bl	800071c <__aeabi_ddiv>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fd ffce 	bl	8000a28 <__aeabi_d2f>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e003      	b.n	8002a9c <BMP280_Measure+0x5c>
			  }
		  else *temperature = 1; // value in case temp measurement was disabled
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a9a:	601a      	str	r2, [r3, #0]

		  if (pRaw != INVALID_RAW_VALUE) {
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <BMP280_Measure+0xb4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d010      	beq.n	8002ac8 <BMP280_Measure+0x88>
			  *pressure = (bmp280_compensate_P_int32 (pRaw))/256;  //  Pa
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <BMP280_Measure+0xb4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fc60 	bl	8002370 <bmp280_compensate_P_int32>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da00      	bge.n	8002ab8 <BMP280_Measure+0x78>
 8002ab6:	33ff      	adds	r3, #255	; 0xff
 8002ab8:	121b      	asrs	r3, r3, #8
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe f8be 	bl	8000c3c <__aeabi_i2f>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	601a      	str	r2, [r3, #0]

	else
	{
		*temperature = *pressure = 1;
	}
}
 8002ac6:	e00c      	b.n	8002ae2 <BMP280_Measure+0xa2>
			  *pressure = 1; // value in case temp measurement was disabled
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ace:	601a      	str	r2, [r3, #0]
}
 8002ad0:	e007      	b.n	8002ae2 <BMP280_Measure+0xa2>
		*temperature = *pressure = 1;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000268 	.word	0x20000268
 8002af0:	40590000 	.word	0x40590000
 8002af4:	2000026c 	.word	0x2000026c

08002af8 <Measure_alt>:

// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa

void Measure_alt(float *altitude )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	float pressure_calc[1],temperature_calc[1];

	BMP280_Measure(temperature_calc, pressure_calc);
 8002b00:	f107 0210 	add.w	r2, r7, #16
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff98 	bl	8002a40 <BMP280_Measure>
	float pressureSeaLevel = 101325; // pressão ao nível do mar em Pascals
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <Measure_alt+0x88>)
 8002b12:	617b      	str	r3, [r7, #20]
	*altitude = (float)(44330 * (1 - pow((*pressure_calc / pressureSeaLevel), (1 / 5.255))));
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	6979      	ldr	r1, [r7, #20]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe f997 	bl	8000e4c <__aeabi_fdiv>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fc79 	bl	8000418 <__aeabi_f2d>
 8002b26:	a312      	add	r3, pc, #72	; (adr r3, 8002b70 <Measure_alt+0x78>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f004 fec4 	bl	80078b8 <pow>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	f04f 0000 	mov.w	r0, #0
 8002b38:	4912      	ldr	r1, [pc, #72]	; (8002b84 <Measure_alt+0x8c>)
 8002b3a:	f7fd fb0d 	bl	8000158 <__aeabi_dsub>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	a30c      	add	r3, pc, #48	; (adr r3, 8002b78 <Measure_alt+0x80>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd fcbc 	bl	80004c8 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7fd ff66 	bl	8000a28 <__aeabi_d2f>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	f3af 8000 	nop.w
 8002b70:	ccd9456c 	.word	0xccd9456c
 8002b74:	3fc85b95 	.word	0x3fc85b95
 8002b78:	00000000 	.word	0x00000000
 8002b7c:	40e5a540 	.word	0x40e5a540
 8002b80:	47c5e680 	.word	0x47c5e680
 8002b84:	3ff00000 	.word	0x3ff00000

08002b88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b8a:	490d      	ldr	r1, [pc, #52]	; (8002bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b90:	e002      	b.n	8002b98 <LoopCopyDataInit>

08002b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b96:	3304      	adds	r3, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b9c:	d3f9      	bcc.n	8002b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ba0:	4c0a      	ldr	r4, [pc, #40]	; (8002bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba4:	e001      	b.n	8002baa <LoopFillZerobss>

08002ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba8:	3204      	adds	r2, #4

08002baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bac:	d3fb      	bcc.n	8002ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bae:	f7ff f9b7 	bl	8001f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb2:	f005 fd69 	bl	8008688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bb6:	f7fe fccf 	bl	8001558 <main>
  bx lr
 8002bba:	4770      	bx	lr
  ldr r0, =_sdata
 8002bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002bc4:	08008760 	.word	0x08008760
  ldr r2, =_sbss
 8002bc8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002bcc:	20000290 	.word	0x20000290

08002bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC1_2_IRQHandler>
	...

08002bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <HAL_Init+0x28>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <HAL_Init+0x28>)
 8002bde:	f043 0310 	orr.w	r3, r3, #16
 8002be2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f000 f947 	bl	8002e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bea:	200f      	movs	r0, #15
 8002bec:	f000 f808 	bl	8002c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf0:	f7fe ffe4 	bl	8001bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40022000 	.word	0x40022000

08002c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_InitTick+0x54>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_InitTick+0x58>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f95f 	bl	8002ee2 <HAL_SYSTICK_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00e      	b.n	8002c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b0f      	cmp	r3, #15
 8002c32:	d80a      	bhi.n	8002c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c34:	2200      	movs	r2, #0
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	f000 f927 	bl	8002e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c40:	4a06      	ldr	r2, [pc, #24]	; (8002c5c <HAL_InitTick+0x5c>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000004 	.word	0x20000004
 8002c58:	2000000c 	.word	0x2000000c
 8002c5c:	20000008 	.word	0x20000008

08002c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_IncTick+0x1c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_IncTick+0x20>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a03      	ldr	r2, [pc, #12]	; (8002c80 <HAL_IncTick+0x20>)
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	2000000c 	.word	0x2000000c
 8002c80:	2000028c 	.word	0x2000028c

08002c84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return uwTick;
 8002c88:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <HAL_GetTick+0x10>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	2000028c 	.word	0x2000028c

08002c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff fff0 	bl	8002c84 <HAL_GetTick>
 8002ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d005      	beq.n	8002cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <HAL_Delay+0x44>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4413      	add	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cbe:	bf00      	nop
 8002cc0:	f7ff ffe0 	bl	8002c84 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d8f7      	bhi.n	8002cc0 <HAL_Delay+0x28>
  {
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000000c 	.word	0x2000000c

08002ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <__NVIC_GetPriorityGrouping+0x18>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	f003 0307 	and.w	r3, r3, #7
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db0b      	blt.n	8002d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4906      	ldr	r1, [pc, #24]	; (8002d78 <__NVIC_EnableIRQ+0x34>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	e000e100 	.word	0xe000e100

08002d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	db0a      	blt.n	8002da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490c      	ldr	r1, [pc, #48]	; (8002dc8 <__NVIC_SetPriority+0x4c>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da4:	e00a      	b.n	8002dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4908      	ldr	r1, [pc, #32]	; (8002dcc <__NVIC_SetPriority+0x50>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3b04      	subs	r3, #4
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	440b      	add	r3, r1
 8002dba:	761a      	strb	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f1c3 0307 	rsb	r3, r3, #7
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf28      	it	cs
 8002dee:	2304      	movcs	r3, #4
 8002df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <NVIC_EncodePriority+0x30>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3b03      	subs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <NVIC_EncodePriority+0x32>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	4313      	orrs	r3, r2
         );
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e44:	d301      	bcc.n	8002e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00f      	b.n	8002e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <SysTick_Config+0x40>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e52:	210f      	movs	r1, #15
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f7ff ff90 	bl	8002d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <SysTick_Config+0x40>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <SysTick_Config+0x40>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	e000e010 	.word	0xe000e010

08002e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff2d 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea0:	f7ff ff42 	bl	8002d28 <__NVIC_GetPriorityGrouping>
 8002ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f7ff ff90 	bl	8002dd0 <NVIC_EncodePriority>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff5f 	bl	8002d7c <__NVIC_SetPriority>
}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	4603      	mov	r3, r0
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff35 	bl	8002d44 <__NVIC_EnableIRQ>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff ffa2 	bl	8002e34 <SysTick_Config>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e043      	b.n	8002f9a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <HAL_DMA_Init+0xa8>)
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_DMA_Init+0xac>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	009a      	lsls	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <HAL_DMA_Init+0xb0>)
 8002f2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	bffdfff8 	.word	0xbffdfff8
 8002fa8:	cccccccd 	.word	0xcccccccd
 8002fac:	40020000 	.word	0x40020000

08002fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_DMA_Start_IT+0x20>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e04a      	b.n	8003066 <HAL_DMA_Start_IT+0xb6>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d13a      	bne.n	8003058 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f9ba 	bl	8003380 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 020e 	orr.w	r2, r2, #14
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e00f      	b.n	8003046 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0204 	bic.w	r2, r2, #4
 8003034:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 020a 	orr.w	r2, r2, #10
 8003044:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e005      	b.n	8003064 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003060:	2302      	movs	r3, #2
 8003062:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003064:	7dfb      	ldrb	r3, [r7, #23]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003082:	2b02      	cmp	r3, #2
 8003084:	d005      	beq.n	8003092 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2204      	movs	r2, #4
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e051      	b.n	8003136 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 020e 	bic.w	r2, r2, #14
 80030a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a22      	ldr	r2, [pc, #136]	; (8003140 <HAL_DMA_Abort_IT+0xd0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d029      	beq.n	8003110 <HAL_DMA_Abort_IT+0xa0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a20      	ldr	r2, [pc, #128]	; (8003144 <HAL_DMA_Abort_IT+0xd4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d022      	beq.n	800310c <HAL_DMA_Abort_IT+0x9c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <HAL_DMA_Abort_IT+0xd8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d01a      	beq.n	8003106 <HAL_DMA_Abort_IT+0x96>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <HAL_DMA_Abort_IT+0xdc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d012      	beq.n	8003100 <HAL_DMA_Abort_IT+0x90>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_DMA_Abort_IT+0xe0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00a      	beq.n	80030fa <HAL_DMA_Abort_IT+0x8a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <HAL_DMA_Abort_IT+0xe4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d102      	bne.n	80030f4 <HAL_DMA_Abort_IT+0x84>
 80030ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030f2:	e00e      	b.n	8003112 <HAL_DMA_Abort_IT+0xa2>
 80030f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f8:	e00b      	b.n	8003112 <HAL_DMA_Abort_IT+0xa2>
 80030fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030fe:	e008      	b.n	8003112 <HAL_DMA_Abort_IT+0xa2>
 8003100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003104:	e005      	b.n	8003112 <HAL_DMA_Abort_IT+0xa2>
 8003106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310a:	e002      	b.n	8003112 <HAL_DMA_Abort_IT+0xa2>
 800310c:	2310      	movs	r3, #16
 800310e:	e000      	b.n	8003112 <HAL_DMA_Abort_IT+0xa2>
 8003110:	2301      	movs	r3, #1
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <HAL_DMA_Abort_IT+0xe8>)
 8003114:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
    } 
  }
  return status;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40020008 	.word	0x40020008
 8003144:	4002001c 	.word	0x4002001c
 8003148:	40020030 	.word	0x40020030
 800314c:	40020044 	.word	0x40020044
 8003150:	40020058 	.word	0x40020058
 8003154:	4002006c 	.word	0x4002006c
 8003158:	40020000 	.word	0x40020000

0800315c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	2204      	movs	r2, #4
 800317a:	409a      	lsls	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d04f      	beq.n	8003224 <HAL_DMA_IRQHandler+0xc8>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04a      	beq.n	8003224 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d107      	bne.n	80031ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a66      	ldr	r2, [pc, #408]	; (800334c <HAL_DMA_IRQHandler+0x1f0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d029      	beq.n	800320a <HAL_DMA_IRQHandler+0xae>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a65      	ldr	r2, [pc, #404]	; (8003350 <HAL_DMA_IRQHandler+0x1f4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d022      	beq.n	8003206 <HAL_DMA_IRQHandler+0xaa>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a63      	ldr	r2, [pc, #396]	; (8003354 <HAL_DMA_IRQHandler+0x1f8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01a      	beq.n	8003200 <HAL_DMA_IRQHandler+0xa4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a62      	ldr	r2, [pc, #392]	; (8003358 <HAL_DMA_IRQHandler+0x1fc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d012      	beq.n	80031fa <HAL_DMA_IRQHandler+0x9e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a60      	ldr	r2, [pc, #384]	; (800335c <HAL_DMA_IRQHandler+0x200>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00a      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x98>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a5f      	ldr	r2, [pc, #380]	; (8003360 <HAL_DMA_IRQHandler+0x204>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d102      	bne.n	80031ee <HAL_DMA_IRQHandler+0x92>
 80031e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031ec:	e00e      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 80031ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031f2:	e00b      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 80031f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031f8:	e008      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 80031fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031fe:	e005      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 8003200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003204:	e002      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 8003206:	2340      	movs	r3, #64	; 0x40
 8003208:	e000      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 800320a:	2304      	movs	r3, #4
 800320c:	4a55      	ldr	r2, [pc, #340]	; (8003364 <HAL_DMA_IRQHandler+0x208>)
 800320e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8094 	beq.w	8003342 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003222:	e08e      	b.n	8003342 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	2202      	movs	r2, #2
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d056      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x186>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d051      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 020a 	bic.w	r2, r2, #10
 800325a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a38      	ldr	r2, [pc, #224]	; (800334c <HAL_DMA_IRQHandler+0x1f0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d029      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x166>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a37      	ldr	r2, [pc, #220]	; (8003350 <HAL_DMA_IRQHandler+0x1f4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <HAL_DMA_IRQHandler+0x162>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a35      	ldr	r2, [pc, #212]	; (8003354 <HAL_DMA_IRQHandler+0x1f8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01a      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x15c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a34      	ldr	r2, [pc, #208]	; (8003358 <HAL_DMA_IRQHandler+0x1fc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d012      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x156>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a32      	ldr	r2, [pc, #200]	; (800335c <HAL_DMA_IRQHandler+0x200>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00a      	beq.n	80032ac <HAL_DMA_IRQHandler+0x150>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a31      	ldr	r2, [pc, #196]	; (8003360 <HAL_DMA_IRQHandler+0x204>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d102      	bne.n	80032a6 <HAL_DMA_IRQHandler+0x14a>
 80032a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032a4:	e00e      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032aa:	e00b      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b0:	e008      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b6:	e005      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032bc:	e002      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032be:	2320      	movs	r3, #32
 80032c0:	e000      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032c2:	2302      	movs	r3, #2
 80032c4:	4a27      	ldr	r2, [pc, #156]	; (8003364 <HAL_DMA_IRQHandler+0x208>)
 80032c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d034      	beq.n	8003342 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032e0:	e02f      	b.n	8003342 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2208      	movs	r2, #8
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_DMA_IRQHandler+0x1e8>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d023      	beq.n	8003344 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 020e 	bic.w	r2, r2, #14
 800330a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f202 	lsl.w	r2, r1, r2
 800331a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
    }
  }
  return;
 8003342:	bf00      	nop
 8003344:	bf00      	nop
}
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40020008 	.word	0x40020008
 8003350:	4002001c 	.word	0x4002001c
 8003354:	40020030 	.word	0x40020030
 8003358:	40020044 	.word	0x40020044
 800335c:	40020058 	.word	0x40020058
 8003360:	4002006c 	.word	0x4002006c
 8003364:	40020000 	.word	0x40020000

08003368 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d108      	bne.n	80033c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033be:	e007      	b.n	80033d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	60da      	str	r2, [r3, #12]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033dc:	b480      	push	{r7}
 80033de:	b08b      	sub	sp, #44	; 0x2c
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ee:	e169      	b.n	80036c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033f0:	2201      	movs	r2, #1
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	429a      	cmp	r2, r3
 800340a:	f040 8158 	bne.w	80036be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4a9a      	ldr	r2, [pc, #616]	; (800367c <HAL_GPIO_Init+0x2a0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d05e      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
 8003418:	4a98      	ldr	r2, [pc, #608]	; (800367c <HAL_GPIO_Init+0x2a0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d875      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 800341e:	4a98      	ldr	r2, [pc, #608]	; (8003680 <HAL_GPIO_Init+0x2a4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d058      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
 8003424:	4a96      	ldr	r2, [pc, #600]	; (8003680 <HAL_GPIO_Init+0x2a4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d86f      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 800342a:	4a96      	ldr	r2, [pc, #600]	; (8003684 <HAL_GPIO_Init+0x2a8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d052      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
 8003430:	4a94      	ldr	r2, [pc, #592]	; (8003684 <HAL_GPIO_Init+0x2a8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d869      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 8003436:	4a94      	ldr	r2, [pc, #592]	; (8003688 <HAL_GPIO_Init+0x2ac>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d04c      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
 800343c:	4a92      	ldr	r2, [pc, #584]	; (8003688 <HAL_GPIO_Init+0x2ac>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d863      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 8003442:	4a92      	ldr	r2, [pc, #584]	; (800368c <HAL_GPIO_Init+0x2b0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d046      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
 8003448:	4a90      	ldr	r2, [pc, #576]	; (800368c <HAL_GPIO_Init+0x2b0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d85d      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 800344e:	2b12      	cmp	r3, #18
 8003450:	d82a      	bhi.n	80034a8 <HAL_GPIO_Init+0xcc>
 8003452:	2b12      	cmp	r3, #18
 8003454:	d859      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 8003456:	a201      	add	r2, pc, #4	; (adr r2, 800345c <HAL_GPIO_Init+0x80>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	080034d7 	.word	0x080034d7
 8003460:	080034b1 	.word	0x080034b1
 8003464:	080034c3 	.word	0x080034c3
 8003468:	08003505 	.word	0x08003505
 800346c:	0800350b 	.word	0x0800350b
 8003470:	0800350b 	.word	0x0800350b
 8003474:	0800350b 	.word	0x0800350b
 8003478:	0800350b 	.word	0x0800350b
 800347c:	0800350b 	.word	0x0800350b
 8003480:	0800350b 	.word	0x0800350b
 8003484:	0800350b 	.word	0x0800350b
 8003488:	0800350b 	.word	0x0800350b
 800348c:	0800350b 	.word	0x0800350b
 8003490:	0800350b 	.word	0x0800350b
 8003494:	0800350b 	.word	0x0800350b
 8003498:	0800350b 	.word	0x0800350b
 800349c:	0800350b 	.word	0x0800350b
 80034a0:	080034b9 	.word	0x080034b9
 80034a4:	080034cd 	.word	0x080034cd
 80034a8:	4a79      	ldr	r2, [pc, #484]	; (8003690 <HAL_GPIO_Init+0x2b4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034ae:	e02c      	b.n	800350a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	623b      	str	r3, [r7, #32]
          break;
 80034b6:	e029      	b.n	800350c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	3304      	adds	r3, #4
 80034be:	623b      	str	r3, [r7, #32]
          break;
 80034c0:	e024      	b.n	800350c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	3308      	adds	r3, #8
 80034c8:	623b      	str	r3, [r7, #32]
          break;
 80034ca:	e01f      	b.n	800350c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	330c      	adds	r3, #12
 80034d2:	623b      	str	r3, [r7, #32]
          break;
 80034d4:	e01a      	b.n	800350c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034de:	2304      	movs	r3, #4
 80034e0:	623b      	str	r3, [r7, #32]
          break;
 80034e2:	e013      	b.n	800350c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034ec:	2308      	movs	r3, #8
 80034ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	611a      	str	r2, [r3, #16]
          break;
 80034f6:	e009      	b.n	800350c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034f8:	2308      	movs	r3, #8
 80034fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	615a      	str	r2, [r3, #20]
          break;
 8003502:	e003      	b.n	800350c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003504:	2300      	movs	r3, #0
 8003506:	623b      	str	r3, [r7, #32]
          break;
 8003508:	e000      	b.n	800350c <HAL_GPIO_Init+0x130>
          break;
 800350a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2bff      	cmp	r3, #255	; 0xff
 8003510:	d801      	bhi.n	8003516 <HAL_GPIO_Init+0x13a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	e001      	b.n	800351a <HAL_GPIO_Init+0x13e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2bff      	cmp	r3, #255	; 0xff
 8003520:	d802      	bhi.n	8003528 <HAL_GPIO_Init+0x14c>
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	e002      	b.n	800352e <HAL_GPIO_Init+0x152>
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	3b08      	subs	r3, #8
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	210f      	movs	r1, #15
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	401a      	ands	r2, r3
 8003540:	6a39      	ldr	r1, [r7, #32]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	431a      	orrs	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80b1 	beq.w	80036be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800355c:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <HAL_GPIO_Init+0x2b8>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	4a4c      	ldr	r2, [pc, #304]	; (8003694 <HAL_GPIO_Init+0x2b8>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6193      	str	r3, [r2, #24]
 8003568:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_GPIO_Init+0x2b8>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003574:	4a48      	ldr	r2, [pc, #288]	; (8003698 <HAL_GPIO_Init+0x2bc>)
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	3302      	adds	r3, #2
 800357c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003580:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	220f      	movs	r2, #15
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4013      	ands	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a40      	ldr	r2, [pc, #256]	; (800369c <HAL_GPIO_Init+0x2c0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <HAL_GPIO_Init+0x1ec>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a3f      	ldr	r2, [pc, #252]	; (80036a0 <HAL_GPIO_Init+0x2c4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00d      	beq.n	80035c4 <HAL_GPIO_Init+0x1e8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3e      	ldr	r2, [pc, #248]	; (80036a4 <HAL_GPIO_Init+0x2c8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <HAL_GPIO_Init+0x1e4>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3d      	ldr	r2, [pc, #244]	; (80036a8 <HAL_GPIO_Init+0x2cc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_GPIO_Init+0x1e0>
 80035b8:	2303      	movs	r3, #3
 80035ba:	e006      	b.n	80035ca <HAL_GPIO_Init+0x1ee>
 80035bc:	2304      	movs	r3, #4
 80035be:	e004      	b.n	80035ca <HAL_GPIO_Init+0x1ee>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e002      	b.n	80035ca <HAL_GPIO_Init+0x1ee>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <HAL_GPIO_Init+0x1ee>
 80035c8:	2300      	movs	r3, #0
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	f002 0203 	and.w	r2, r2, #3
 80035d0:	0092      	lsls	r2, r2, #2
 80035d2:	4093      	lsls	r3, r2
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035da:	492f      	ldr	r1, [pc, #188]	; (8003698 <HAL_GPIO_Init+0x2bc>)
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	3302      	adds	r3, #2
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d006      	beq.n	8003602 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035f4:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	492c      	ldr	r1, [pc, #176]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
 8003600:	e006      	b.n	8003610 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003602:	4b2a      	ldr	r3, [pc, #168]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	43db      	mvns	r3, r3
 800360a:	4928      	ldr	r1, [pc, #160]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800360c:	4013      	ands	r3, r2
 800360e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d006      	beq.n	800362a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800361c:	4b23      	ldr	r3, [pc, #140]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4922      	ldr	r1, [pc, #136]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
 8003628:	e006      	b.n	8003638 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	43db      	mvns	r3, r3
 8003632:	491e      	ldr	r1, [pc, #120]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003634:	4013      	ands	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	4918      	ldr	r1, [pc, #96]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]
 8003650:	e006      	b.n	8003660 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003652:	4b16      	ldr	r3, [pc, #88]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	43db      	mvns	r3, r3
 800365a:	4914      	ldr	r1, [pc, #80]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800365c:	4013      	ands	r3, r2
 800365e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d021      	beq.n	80036b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	490e      	ldr	r1, [pc, #56]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	60cb      	str	r3, [r1, #12]
 8003678:	e021      	b.n	80036be <HAL_GPIO_Init+0x2e2>
 800367a:	bf00      	nop
 800367c:	10320000 	.word	0x10320000
 8003680:	10310000 	.word	0x10310000
 8003684:	10220000 	.word	0x10220000
 8003688:	10210000 	.word	0x10210000
 800368c:	10120000 	.word	0x10120000
 8003690:	10110000 	.word	0x10110000
 8003694:	40021000 	.word	0x40021000
 8003698:	40010000 	.word	0x40010000
 800369c:	40010800 	.word	0x40010800
 80036a0:	40010c00 	.word	0x40010c00
 80036a4:	40011000 	.word	0x40011000
 80036a8:	40011400 	.word	0x40011400
 80036ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_GPIO_Init+0x304>)
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	4909      	ldr	r1, [pc, #36]	; (80036e0 <HAL_GPIO_Init+0x304>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	3301      	adds	r3, #1
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f47f ae8e 	bne.w	80033f0 <HAL_GPIO_Init+0x14>
  }
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	372c      	adds	r7, #44	; 0x2c
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	40010400 	.word	0x40010400

080036e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e001      	b.n	8003706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	807b      	strh	r3, [r7, #2]
 800371e:	4613      	mov	r3, r2
 8003720:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003722:	787b      	ldrb	r3, [r7, #1]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003728:	887a      	ldrh	r2, [r7, #2]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800372e:	e003      	b.n	8003738 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003730:	887b      	ldrh	r3, [r7, #2]
 8003732:	041a      	lsls	r2, r3, #16
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	611a      	str	r2, [r3, #16]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003754:	887a      	ldrh	r2, [r7, #2]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4013      	ands	r3, r2
 800375a:	041a      	lsls	r2, r3, #16
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	43d9      	mvns	r1, r3
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	400b      	ands	r3, r1
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	611a      	str	r2, [r3, #16]
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e12b      	b.n	80039de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe fa40 	bl	8001c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	; 0x24
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d8:	f003 f9e0 	bl	8006b9c <HAL_RCC_GetPCLK1Freq>
 80037dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4a81      	ldr	r2, [pc, #516]	; (80039e8 <HAL_I2C_Init+0x274>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d807      	bhi.n	80037f8 <HAL_I2C_Init+0x84>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a80      	ldr	r2, [pc, #512]	; (80039ec <HAL_I2C_Init+0x278>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e006      	b.n	8003806 <HAL_I2C_Init+0x92>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a7d      	ldr	r2, [pc, #500]	; (80039f0 <HAL_I2C_Init+0x27c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bf94      	ite	ls
 8003800:	2301      	movls	r3, #1
 8003802:	2300      	movhi	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0e7      	b.n	80039de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a78      	ldr	r2, [pc, #480]	; (80039f4 <HAL_I2C_Init+0x280>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	0c9b      	lsrs	r3, r3, #18
 8003818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a6a      	ldr	r2, [pc, #424]	; (80039e8 <HAL_I2C_Init+0x274>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d802      	bhi.n	8003848 <HAL_I2C_Init+0xd4>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3301      	adds	r3, #1
 8003846:	e009      	b.n	800385c <HAL_I2C_Init+0xe8>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	4a69      	ldr	r2, [pc, #420]	; (80039f8 <HAL_I2C_Init+0x284>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	3301      	adds	r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	430b      	orrs	r3, r1
 8003862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800386e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	495c      	ldr	r1, [pc, #368]	; (80039e8 <HAL_I2C_Init+0x274>)
 8003878:	428b      	cmp	r3, r1
 800387a:	d819      	bhi.n	80038b0 <HAL_I2C_Init+0x13c>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e59      	subs	r1, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fbb1 f3f3 	udiv	r3, r1, r3
 800388a:	1c59      	adds	r1, r3, #1
 800388c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003890:	400b      	ands	r3, r1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_I2C_Init+0x138>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e59      	subs	r1, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	e051      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 80038ac:	2304      	movs	r3, #4
 80038ae:	e04f      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <HAL_I2C_Init+0x168>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e012      	b.n	8003902 <HAL_I2C_Init+0x18e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	0099      	lsls	r1, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Init+0x196>
 8003906:	2301      	movs	r3, #1
 8003908:	e022      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10e      	bne.n	8003930 <HAL_I2C_Init+0x1bc>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1e58      	subs	r0, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	440b      	add	r3, r1
 8003920:	fbb0 f3f3 	udiv	r3, r0, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392e:	e00f      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	0099      	lsls	r1, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	fbb0 f3f3 	udiv	r3, r0, r3
 8003946:	3301      	adds	r3, #1
 8003948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	6809      	ldr	r1, [r1, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800397e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6911      	ldr	r1, [r2, #16]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	000186a0 	.word	0x000186a0
 80039ec:	001e847f 	.word	0x001e847f
 80039f0:	003d08ff 	.word	0x003d08ff
 80039f4:	431bde83 	.word	0x431bde83
 80039f8:	10624dd3 	.word	0x10624dd3

080039fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	817b      	strh	r3, [r7, #10]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	813b      	strh	r3, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a16:	f7ff f935 	bl	8002c84 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	f040 80d9 	bne.w	8003bdc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2319      	movs	r3, #25
 8003a30:	2201      	movs	r2, #1
 8003a32:	496d      	ldr	r1, [pc, #436]	; (8003be8 <HAL_I2C_Mem_Write+0x1ec>)
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f002 fab5 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0cc      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2C_Mem_Write+0x56>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e0c5      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d007      	beq.n	8003a78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2221      	movs	r2, #33	; 0x21
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2240      	movs	r2, #64	; 0x40
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a4d      	ldr	r2, [pc, #308]	; (8003bec <HAL_I2C_Mem_Write+0x1f0>)
 8003ab8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aba:	88f8      	ldrh	r0, [r7, #6]
 8003abc:	893a      	ldrh	r2, [r7, #8]
 8003abe:	8979      	ldrh	r1, [r7, #10]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	4603      	mov	r3, r0
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f001 ff38 	bl	8005940 <I2C_RequestMemoryWrite>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d052      	beq.n	8003b7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e081      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f002 fb36 	bl	8006150 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d107      	bne.n	8003b02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06b      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d11b      	bne.n	8003b7c <HAL_I2C_Mem_Write+0x180>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d017      	beq.n	8003b7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1aa      	bne.n	8003ada <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f002 fb22 	bl	80061d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d107      	bne.n	8003bac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003baa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e016      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	00100002 	.word	0x00100002
 8003bec:	ffff0000 	.word	0xffff0000

08003bf0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08c      	sub	sp, #48	; 0x30
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	817b      	strh	r3, [r7, #10]
 8003c02:	460b      	mov	r3, r1
 8003c04:	813b      	strh	r3, [r7, #8]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c0e:	f7ff f839 	bl	8002c84 <HAL_GetTick>
 8003c12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	f040 8244 	bne.w	80040aa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2319      	movs	r3, #25
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4982      	ldr	r1, [pc, #520]	; (8003e34 <HAL_I2C_Mem_Read+0x244>)
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f002 f9b9 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e237      	b.n	80040ac <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_I2C_Mem_Read+0x5a>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e230      	b.n	80040ac <HAL_I2C_Mem_Read+0x4bc>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d007      	beq.n	8003c70 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2222      	movs	r2, #34	; 0x22
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2240      	movs	r2, #64	; 0x40
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a62      	ldr	r2, [pc, #392]	; (8003e38 <HAL_I2C_Mem_Read+0x248>)
 8003cb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cb2:	88f8      	ldrh	r0, [r7, #6]
 8003cb4:	893a      	ldrh	r2, [r7, #8]
 8003cb6:	8979      	ldrh	r1, [r7, #10]
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f001 fed2 	bl	8005a6c <I2C_RequestMemoryRead>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e1ec      	b.n	80040ac <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d113      	bne.n	8003d02 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e1c0      	b.n	8004084 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d11e      	bne.n	8003d48 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d1a:	b672      	cpsid	i
}
 8003d1c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d44:	b662      	cpsie	i
}
 8003d46:	e035      	b.n	8003db4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d11e      	bne.n	8003d8e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d60:	b672      	cpsid	i
}
 8003d62:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d8a:	b662      	cpsie	i
}
 8003d8c:	e012      	b.n	8003db4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d9c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003db4:	e166      	b.n	8004084 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	f200 811f 	bhi.w	8003ffe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d123      	bne.n	8003e10 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f002 fa73 	bl	80062b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e167      	b.n	80040ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e0e:	e139      	b.n	8004084 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d152      	bne.n	8003ebe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	2200      	movs	r2, #0
 8003e20:	4906      	ldr	r1, [pc, #24]	; (8003e3c <HAL_I2C_Mem_Read+0x24c>)
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f002 f8be 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e13c      	b.n	80040ac <HAL_I2C_Mem_Read+0x4bc>
 8003e32:	bf00      	nop
 8003e34:	00100002 	.word	0x00100002
 8003e38:	ffff0000 	.word	0xffff0000
 8003e3c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e40:	b672      	cpsid	i
}
 8003e42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e86:	b662      	cpsie	i
}
 8003e88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ebc:	e0e2      	b.n	8004084 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	497b      	ldr	r1, [pc, #492]	; (80040b4 <HAL_I2C_Mem_Read+0x4c4>)
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f002 f86b 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0e9      	b.n	80040ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee8:	b672      	cpsid	i
}
 8003eea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f1e:	4b66      	ldr	r3, [pc, #408]	; (80040b8 <HAL_I2C_Mem_Read+0x4c8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	08db      	lsrs	r3, r3, #3
 8003f24:	4a65      	ldr	r2, [pc, #404]	; (80040bc <HAL_I2C_Mem_Read+0x4cc>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0a1a      	lsrs	r2, r3, #8
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	00da      	lsls	r2, r3, #3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d118      	bne.n	8003f76 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f043 0220 	orr.w	r2, r3, #32
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003f66:	b662      	cpsie	i
}
 8003f68:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e09a      	b.n	80040ac <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d1d9      	bne.n	8003f38 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fc6:	b662      	cpsie	i
}
 8003fc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffc:	e042      	b.n	8004084 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004000:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f002 f958 	bl	80062b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e04c      	b.n	80040ac <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d118      	bne.n	8004084 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	2b00      	cmp	r3, #0
 800408a:	f47f ae94 	bne.w	8003db6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3728      	adds	r7, #40	; 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	00010004 	.word	0x00010004
 80040b8:	20000004 	.word	0x20000004
 80040bc:	14f8b589 	.word	0x14f8b589

080040c0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08c      	sub	sp, #48	; 0x30
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	817b      	strh	r3, [r7, #10]
 80040d2:	460b      	mov	r3, r1
 80040d4:	813b      	strh	r3, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040da:	f7fe fdd3 	bl	8002c84 <HAL_GetTick>
 80040de:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	f040 8160 	bne.w	80043b2 <HAL_I2C_Mem_Read_DMA+0x2f2>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80040f2:	4b9c      	ldr	r3, [pc, #624]	; (8004364 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	08db      	lsrs	r3, r3, #3
 80040f8:	4a9b      	ldr	r2, [pc, #620]	; (8004368 <HAL_I2C_Mem_Read_DMA+0x2a8>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0a1a      	lsrs	r2, r3, #8
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3b01      	subs	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d116      	bne.n	8004146 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f043 0220 	orr.w	r2, r3, #32
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e136      	b.n	80043b4 <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b02      	cmp	r3, #2
 8004152:	d0db      	beq.n	800410c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_I2C_Mem_Read_DMA+0xa2>
 800415e:	2302      	movs	r3, #2
 8004160:	e128      	b.n	80043b4 <HAL_I2C_Mem_Read_DMA+0x2f4>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b01      	cmp	r3, #1
 8004176:	d007      	beq.n	8004188 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2222      	movs	r2, #34	; 0x22
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2240      	movs	r2, #64	; 0x40
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4a69      	ldr	r2, [pc, #420]	; (800436c <HAL_I2C_Mem_Read_DMA+0x2ac>)
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80b8 	beq.w	8004344 <HAL_I2C_Mem_Read_DMA+0x284>
    {
      if (hi2c->hdmarx != NULL)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d024      	beq.n	8004226 <HAL_I2C_Mem_Read_DMA+0x166>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	4a63      	ldr	r2, [pc, #396]	; (8004370 <HAL_I2C_Mem_Read_DMA+0x2b0>)
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	4a62      	ldr	r2, [pc, #392]	; (8004374 <HAL_I2C_Mem_Read_DMA+0x2b4>)
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	2200      	movs	r2, #0
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	2200      	movs	r2, #0
 80041fa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3310      	adds	r3, #16
 8004206:	4619      	mov	r1, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	461a      	mov	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	f7fe fecd 	bl	8002fb0 <HAL_DMA_Start_IT>
 8004216:	4603      	mov	r3, r0
 8004218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800421c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004220:	2b00      	cmp	r3, #0
 8004222:	d17b      	bne.n	800431c <HAL_I2C_Mem_Read_DMA+0x25c>
 8004224:	e013      	b.n	800424e <HAL_I2C_Mem_Read_DMA+0x18e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0b2      	b.n	80043b4 <HAL_I2C_Mem_Read_DMA+0x2f4>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800424e:	88f8      	ldrh	r0, [r7, #6]
 8004250:	893a      	ldrh	r2, [r7, #8]
 8004252:	8979      	ldrh	r1, [r7, #10]
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	2323      	movs	r3, #35	; 0x23
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	4603      	mov	r3, r0
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f001 fc04 	bl	8005a6c <I2C_RequestMemoryRead>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d023      	beq.n	80042b2 <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fefe 	bl	8003070 <HAL_DMA_Abort_IT>
 8004274:	4603      	mov	r3, r0
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	2200      	movs	r2, #0
 8004280:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004290:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e080      	b.n	80043b4 <HAL_I2C_Mem_Read_DMA+0x2f4>
        }

        if (hi2c->XferSize == 1U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d108      	bne.n	80042cc <HAL_I2C_Mem_Read_DMA+0x20c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e007      	b.n	80042dc <HAL_I2C_Mem_Read_DMA+0x21c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042dc:	2300      	movs	r3, #0
 80042de:	61bb      	str	r3, [r7, #24]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004308:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	e048      	b.n	80043ae <HAL_I2C_Mem_Read_DMA+0x2ee>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	f043 0210 	orr.w	r2, r3, #16
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e037      	b.n	80043b4 <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004344:	88f8      	ldrh	r0, [r7, #6]
 8004346:	893a      	ldrh	r2, [r7, #8]
 8004348:	8979      	ldrh	r1, [r7, #10]
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	2323      	movs	r3, #35	; 0x23
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	4603      	mov	r3, r0
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f001 fb89 	bl	8005a6c <I2C_RequestMemoryRead>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00b      	beq.n	8004378 <HAL_I2C_Mem_Read_DMA+0x2b8>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e027      	b.n	80043b4 <HAL_I2C_Mem_Read_DMA+0x2f4>
 8004364:	20000004 	.word	0x20000004
 8004368:	14f8b589 	.word	0x14f8b589
 800436c:	ffff0000 	.word	0xffff0000
 8004370:	08005c3d 	.word	0x08005c3d
 8004374:	08005de7 	.word	0x08005de7
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <HAL_I2C_Mem_Read_DMA+0x2f4>
  }
  else
  {
    return HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
  }
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3728      	adds	r7, #40	; 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d003      	beq.n	80043f4 <HAL_I2C_EV_IRQHandler+0x38>
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	f040 80c1 	bne.w	8004576 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10d      	bne.n	800442a <HAL_I2C_EV_IRQHandler+0x6e>
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004414:	d003      	beq.n	800441e <HAL_I2C_EV_IRQHandler+0x62>
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800441c:	d101      	bne.n	8004422 <HAL_I2C_EV_IRQHandler+0x66>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <HAL_I2C_EV_IRQHandler+0x68>
 8004422:	2300      	movs	r3, #0
 8004424:	2b01      	cmp	r3, #1
 8004426:	f000 8132 	beq.w	800468e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00c      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x92>
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	0a5b      	lsrs	r3, r3, #9
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f001 ffbd 	bl	80063c0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fcc8 	bl	8004ddc <I2C_Master_SB>
 800444c:	e092      	b.n	8004574 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	08db      	lsrs	r3, r3, #3
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <HAL_I2C_EV_IRQHandler+0xb2>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	0a5b      	lsrs	r3, r3, #9
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fd3d 	bl	8004ee6 <I2C_Master_ADD10>
 800446c:	e082      	b.n	8004574 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <HAL_I2C_EV_IRQHandler+0xd2>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	0a5b      	lsrs	r3, r3, #9
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fd56 	bl	8004f38 <I2C_Master_ADDR>
 800448c:	e072      	b.n	8004574 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d03b      	beq.n	8004512 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a8:	f000 80f3 	beq.w	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	09db      	lsrs	r3, r3, #7
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00f      	beq.n	80044d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	0a9b      	lsrs	r3, r3, #10
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f942 	bl	800475a <I2C_MasterTransmit_TXE>
 80044d6:	e04d      	b.n	8004574 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80d6 	beq.w	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	0a5b      	lsrs	r3, r3, #9
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80cf 	beq.w	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044f4:	7bbb      	ldrb	r3, [r7, #14]
 80044f6:	2b21      	cmp	r3, #33	; 0x21
 80044f8:	d103      	bne.n	8004502 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9c9 	bl	8004892 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004500:	e0c7      	b.n	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	f040 80c4 	bne.w	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa37 	bl	800497e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004510:	e0bf      	b.n	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800451c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004520:	f000 80b7 	beq.w	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	099b      	lsrs	r3, r3, #6
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00f      	beq.n	8004550 <HAL_I2C_EV_IRQHandler+0x194>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	0a9b      	lsrs	r3, r3, #10
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d009      	beq.n	8004550 <HAL_I2C_EV_IRQHandler+0x194>
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	089b      	lsrs	r3, r3, #2
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 faac 	bl	8004aa6 <I2C_MasterReceive_RXNE>
 800454e:	e011      	b.n	8004574 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 809a 	beq.w	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	0a5b      	lsrs	r3, r3, #9
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8093 	beq.w	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fb4b 	bl	8004c08 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004572:	e08e      	b.n	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004574:	e08d      	b.n	8004692 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	e007      	b.n	8004598 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d012      	beq.n	80045ca <HAL_I2C_EV_IRQHandler+0x20e>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	0a5b      	lsrs	r3, r3, #9
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00c      	beq.n	80045ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80045c0:	69b9      	ldr	r1, [r7, #24]
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 ff0f 	bl	80053e6 <I2C_Slave_ADDR>
 80045c8:	e066      	b.n	8004698 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_I2C_EV_IRQHandler+0x22e>
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	0a5b      	lsrs	r3, r3, #9
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 ff4a 	bl	800547c <I2C_Slave_STOPF>
 80045e8:	e056      	b.n	8004698 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045ea:	7bbb      	ldrb	r3, [r7, #14]
 80045ec:	2b21      	cmp	r3, #33	; 0x21
 80045ee:	d002      	beq.n	80045f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80045f0:	7bbb      	ldrb	r3, [r7, #14]
 80045f2:	2b29      	cmp	r3, #41	; 0x29
 80045f4:	d125      	bne.n	8004642 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	09db      	lsrs	r3, r3, #7
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00f      	beq.n	8004622 <HAL_I2C_EV_IRQHandler+0x266>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	0a9b      	lsrs	r3, r3, #10
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_I2C_EV_IRQHandler+0x266>
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fe27 	bl	800526e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004620:	e039      	b.n	8004696 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d033      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x2da>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	0a5b      	lsrs	r3, r3, #9
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d02d      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fe54 	bl	80052e8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004640:	e029      	b.n	8004696 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	099b      	lsrs	r3, r3, #6
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00f      	beq.n	800466e <HAL_I2C_EV_IRQHandler+0x2b2>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	0a9b      	lsrs	r3, r3, #10
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_I2C_EV_IRQHandler+0x2b2>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fe5e 	bl	8005328 <I2C_SlaveReceive_RXNE>
 800466c:	e014      	b.n	8004698 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <HAL_I2C_EV_IRQHandler+0x2dc>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	0a5b      	lsrs	r3, r3, #9
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fe8c 	bl	80053a4 <I2C_SlaveReceive_BTF>
 800468c:	e004      	b.n	8004698 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800468e:	bf00      	nop
 8004690:	e002      	b.n	8004698 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004696:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr

080046c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	70fb      	strb	r3, [r7, #3]
 80046f2:	4613      	mov	r3, r2
 80046f4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr

08004712 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr

08004748 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004770:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477c:	2b00      	cmp	r3, #0
 800477e:	d150      	bne.n	8004822 <I2C_MasterTransmit_TXE+0xc8>
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	2b21      	cmp	r3, #33	; 0x21
 8004784:	d14d      	bne.n	8004822 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d01d      	beq.n	80047c8 <I2C_MasterTransmit_TXE+0x6e>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b20      	cmp	r3, #32
 8004790:	d01a      	beq.n	80047c8 <I2C_MasterTransmit_TXE+0x6e>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004798:	d016      	beq.n	80047c8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047a8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2211      	movs	r2, #17
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff ff6c 	bl	800469e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047c6:	e060      	b.n	800488a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d107      	bne.n	8004812 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff ff81 	bl	8004712 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004810:	e03b      	b.n	800488a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ff3f 	bl	800469e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004820:	e033      	b.n	800488a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	2b21      	cmp	r3, #33	; 0x21
 8004826:	d005      	beq.n	8004834 <I2C_MasterTransmit_TXE+0xda>
 8004828:	7bbb      	ldrb	r3, [r7, #14]
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d12d      	bne.n	800488a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	2b22      	cmp	r3, #34	; 0x22
 8004832:	d12a      	bne.n	800488a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d108      	bne.n	8004850 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800484e:	e01c      	b.n	800488a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	d103      	bne.n	8004864 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f88e 	bl	800497e <I2C_MemoryTransmit_TXE_BTF>
}
 8004862:	e012      	b.n	800488a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	781a      	ldrb	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004888:	e7ff      	b.n	800488a <I2C_MasterTransmit_TXE+0x130>
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b21      	cmp	r3, #33	; 0x21
 80048aa:	d164      	bne.n	8004976 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d012      	beq.n	80048dc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	781a      	ldrb	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80048da:	e04c      	b.n	8004976 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d01d      	beq.n	800491e <I2C_MasterTransmit_BTF+0x8c>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d01a      	beq.n	800491e <I2C_MasterTransmit_BTF+0x8c>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048ee:	d016      	beq.n	800491e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048fe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2211      	movs	r2, #17
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fec1 	bl	800469e <HAL_I2C_MasterTxCpltCallback>
}
 800491c:	e02b      	b.n	8004976 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800492c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b40      	cmp	r3, #64	; 0x40
 8004956:	d107      	bne.n	8004968 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fed6 	bl	8004712 <HAL_I2C_MemTxCpltCallback>
}
 8004966:	e006      	b.n	8004976 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff fe94 	bl	800469e <HAL_I2C_MasterTxCpltCallback>
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004992:	2b00      	cmp	r3, #0
 8004994:	d11d      	bne.n	80049d2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10b      	bne.n	80049b6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ae:	1c9a      	adds	r2, r3, #2
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80049b4:	e073      	b.n	8004a9e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	121b      	asrs	r3, r3, #8
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049d0:	e065      	b.n	8004a9e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10b      	bne.n	80049f2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049f0:	e055      	b.n	8004a9e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d151      	bne.n	8004a9e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b22      	cmp	r3, #34	; 0x22
 80049fe:	d10d      	bne.n	8004a1c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a0e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a1a:	e040      	b.n	8004a9e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d015      	beq.n	8004a52 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b21      	cmp	r3, #33	; 0x21
 8004a2a:	d112      	bne.n	8004a52 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a50:	e025      	b.n	8004a9e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d120      	bne.n	8004a9e <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b21      	cmp	r3, #33	; 0x21
 8004a60:	d11d      	bne.n	8004a9e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a70:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a80:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff fe3a 	bl	8004712 <HAL_I2C_MemTxCpltCallback>
}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b22      	cmp	r3, #34	; 0x22
 8004ab8:	f040 80a2 	bne.w	8004c00 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d921      	bls.n	8004b0e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	f040 8082 	bne.w	8004c00 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004b0c:	e078      	b.n	8004c00 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d074      	beq.n	8004c00 <I2C_MasterReceive_RXNE+0x15a>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d002      	beq.n	8004b22 <I2C_MasterReceive_RXNE+0x7c>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d16e      	bne.n	8004c00 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f001 fb96 	bl	8006254 <I2C_WaitOnSTOPRequestThroughIT>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d142      	bne.n	8004bb4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d10a      	bne.n	8004b9e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fdc4 	bl	8004724 <HAL_I2C_MemRxCpltCallback>
}
 8004b9c:	e030      	b.n	8004c00 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2212      	movs	r2, #18
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff fd7f 	bl	80046b0 <HAL_I2C_MasterRxCpltCallback>
}
 8004bb2:	e025      	b.n	8004c00 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bc2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fd9b 	bl	8004736 <HAL_I2C_ErrorCallback>
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d11b      	bne.n	8004c58 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004c56:	e0bd      	b.n	8004dd4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d129      	bne.n	8004cb6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c70:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d00a      	beq.n	8004c8e <I2C_MasterReceive_BTF+0x86>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d007      	beq.n	8004c8e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cb4:	e08e      	b.n	8004dd4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d176      	bne.n	8004dae <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d002      	beq.n	8004ccc <I2C_MasterReceive_BTF+0xc4>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d108      	bne.n	8004cde <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	e019      	b.n	8004d12 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d002      	beq.n	8004cea <I2C_MasterReceive_BTF+0xe2>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d108      	bne.n	8004cfc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e00a      	b.n	8004d12 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d007      	beq.n	8004d12 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d10:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d6c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d10a      	bne.n	8004d98 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff fcc7 	bl	8004724 <HAL_I2C_MemRxCpltCallback>
}
 8004d96:	e01d      	b.n	8004dd4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2212      	movs	r2, #18
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff fc82 	bl	80046b0 <HAL_I2C_MasterRxCpltCallback>
}
 8004dac:	e012      	b.n	8004dd4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d117      	bne.n	8004e20 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d109      	bne.n	8004e0c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e08:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e0a:	e067      	b.n	8004edc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	611a      	str	r2, [r3, #16]
}
 8004e1e:	e05d      	b.n	8004edc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e28:	d133      	bne.n	8004e92 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b21      	cmp	r3, #33	; 0x21
 8004e34:	d109      	bne.n	8004e4a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e46:	611a      	str	r2, [r3, #16]
 8004e48:	e008      	b.n	8004e5c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <I2C_Master_SB+0x92>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d108      	bne.n	8004e80 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d032      	beq.n	8004edc <I2C_Master_SB+0x100>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d02d      	beq.n	8004edc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8e:	605a      	str	r2, [r3, #4]
}
 8004e90:	e024      	b.n	8004edc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10e      	bne.n	8004eb8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	11db      	asrs	r3, r3, #7
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0306 	and.w	r3, r3, #6
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f063 030f 	orn	r3, r3, #15
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	611a      	str	r2, [r3, #16]
}
 8004eb6:	e011      	b.n	8004edc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d10d      	bne.n	8004edc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	11db      	asrs	r3, r3, #7
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f003 0306 	and.w	r3, r3, #6
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f063 030e 	orn	r3, r3, #14
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	611a      	str	r2, [r3, #16]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr

08004ee6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <I2C_Master_ADD10+0x26>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d108      	bne.n	8004f1e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00c      	beq.n	8004f2e <I2C_Master_ADD10+0x48>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2c:	605a      	str	r2, [r3, #4]
  }
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b091      	sub	sp, #68	; 0x44
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b22      	cmp	r3, #34	; 0x22
 8004f60:	f040 8174 	bne.w	800524c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10f      	bne.n	8004f8c <I2C_Master_ADDR+0x54>
 8004f6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f70:	2b40      	cmp	r3, #64	; 0x40
 8004f72:	d10b      	bne.n	8004f8c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f74:	2300      	movs	r3, #0
 8004f76:	633b      	str	r3, [r7, #48]	; 0x30
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	633b      	str	r3, [r7, #48]	; 0x30
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	e16b      	b.n	8005264 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11d      	bne.n	8004fd0 <I2C_Master_ADDR+0x98>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f9c:	d118      	bne.n	8004fd0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	651a      	str	r2, [r3, #80]	; 0x50
 8004fce:	e149      	b.n	8005264 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d113      	bne.n	8005002 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fda:	2300      	movs	r3, #0
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	e120      	b.n	8005244 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	f040 808a 	bne.w	8005122 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005014:	d137      	bne.n	8005086 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005024:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005034:	d113      	bne.n	800505e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005044:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005046:	2300      	movs	r3, #0
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	e0f2      	b.n	8005244 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505e:	2300      	movs	r3, #0
 8005060:	623b      	str	r3, [r7, #32]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	623b      	str	r3, [r7, #32]
 8005072:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e0de      	b.n	8005244 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	2b08      	cmp	r3, #8
 800508a:	d02e      	beq.n	80050ea <I2C_Master_ADDR+0x1b2>
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	2b20      	cmp	r3, #32
 8005090:	d02b      	beq.n	80050ea <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005094:	2b12      	cmp	r3, #18
 8005096:	d102      	bne.n	800509e <I2C_Master_ADDR+0x166>
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	2b01      	cmp	r3, #1
 800509c:	d125      	bne.n	80050ea <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d00e      	beq.n	80050c2 <I2C_Master_ADDR+0x18a>
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d00b      	beq.n	80050c2 <I2C_Master_ADDR+0x18a>
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d008      	beq.n	80050c2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e007      	b.n	80050d2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	e0ac      	b.n	8005244 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fa:	2300      	movs	r3, #0
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e090      	b.n	8005244 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d158      	bne.n	80051de <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	2b04      	cmp	r3, #4
 8005130:	d021      	beq.n	8005176 <I2C_Master_ADDR+0x23e>
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	2b02      	cmp	r3, #2
 8005136:	d01e      	beq.n	8005176 <I2C_Master_ADDR+0x23e>
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	2b10      	cmp	r3, #16
 800513c:	d01b      	beq.n	8005176 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800514c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e012      	b.n	800519c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005184:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051aa:	d14b      	bne.n	8005244 <I2C_Master_ADDR+0x30c>
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051b2:	d00b      	beq.n	80051cc <I2C_Master_ADDR+0x294>
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d008      	beq.n	80051cc <I2C_Master_ADDR+0x294>
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d005      	beq.n	80051cc <I2C_Master_ADDR+0x294>
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d002      	beq.n	80051cc <I2C_Master_ADDR+0x294>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d13b      	bne.n	8005244 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051da:	605a      	str	r2, [r3, #4]
 80051dc:	e032      	b.n	8005244 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ec:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fc:	d117      	bne.n	800522e <I2C_Master_ADDR+0x2f6>
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005204:	d00b      	beq.n	800521e <I2C_Master_ADDR+0x2e6>
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	2b01      	cmp	r3, #1
 800520a:	d008      	beq.n	800521e <I2C_Master_ADDR+0x2e6>
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	2b08      	cmp	r3, #8
 8005210:	d005      	beq.n	800521e <I2C_Master_ADDR+0x2e6>
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	2b10      	cmp	r3, #16
 8005216:	d002      	beq.n	800521e <I2C_Master_ADDR+0x2e6>
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	2b20      	cmp	r3, #32
 800521c:	d107      	bne.n	800522e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800522c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800524a:	e00b      	b.n	8005264 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	60bb      	str	r3, [r7, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
}
 8005262:	e7ff      	b.n	8005264 <I2C_Master_ADDR+0x32c>
 8005264:	bf00      	nop
 8005266:	3744      	adds	r7, #68	; 0x44
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr

0800526e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d02b      	beq.n	80052e0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	781a      	ldrb	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d114      	bne.n	80052e0 <I2C_SlaveTransmit_TXE+0x72>
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b29      	cmp	r3, #41	; 0x29
 80052ba:	d111      	bne.n	80052e0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2221      	movs	r2, #33	; 0x21
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2228      	movs	r2, #40	; 0x28
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff f9f1 	bl	80046c2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d011      	beq.n	800531e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	781a      	ldrb	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005336:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d02c      	beq.n	800539c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d114      	bne.n	800539c <I2C_SlaveReceive_RXNE+0x74>
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b2a      	cmp	r3, #42	; 0x2a
 8005376:	d111      	bne.n	800539c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005386:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2222      	movs	r2, #34	; 0x22
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2228      	movs	r2, #40	; 0x28
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff f99c 	bl	80046d4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d012      	beq.n	80053dc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005400:	2b28      	cmp	r3, #40	; 0x28
 8005402:	d127      	bne.n	8005454 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005412:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	09db      	lsrs	r3, r3, #7
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d103      	bne.n	8005438 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	81bb      	strh	r3, [r7, #12]
 8005436:	e002      	b.n	800543e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005446:	89ba      	ldrh	r2, [r7, #12]
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff f94a 	bl	80046e6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005452:	e00e      	b.n	8005472 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	60bb      	str	r3, [r7, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800549a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800549c:	2300      	movs	r3, #0
 800549e:	60bb      	str	r3, [r7, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d8:	d172      	bne.n	80055c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b22      	cmp	r3, #34	; 0x22
 80054de:	d002      	beq.n	80054e6 <I2C_Slave_STOPF+0x6a>
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	2b2a      	cmp	r3, #42	; 0x2a
 80054e4:	d135      	bne.n	8005552 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f043 0204 	orr.w	r2, r3, #4
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005518:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	4618      	mov	r0, r3
 8005520:	f7fd ff22 	bl	8003368 <HAL_DMA_GetState>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d049      	beq.n	80055be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	4a69      	ldr	r2, [pc, #420]	; (80056d4 <I2C_Slave_STOPF+0x258>)
 8005530:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	4618      	mov	r0, r3
 8005538:	f7fd fd9a 	bl	8003070 <HAL_DMA_Abort_IT>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d03d      	beq.n	80055be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800554c:	4610      	mov	r0, r2
 800554e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005550:	e035      	b.n	80055be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0204 	orr.w	r2, r3, #4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005584:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558a:	4618      	mov	r0, r3
 800558c:	f7fd feec 	bl	8003368 <HAL_DMA_GetState>
 8005590:	4603      	mov	r3, r0
 8005592:	2b01      	cmp	r3, #1
 8005594:	d014      	beq.n	80055c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	4a4e      	ldr	r2, [pc, #312]	; (80056d4 <I2C_Slave_STOPF+0x258>)
 800559c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fd fd64 	bl	8003070 <HAL_DMA_Abort_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d008      	beq.n	80055c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055b8:	4610      	mov	r0, r2
 80055ba:	4798      	blx	r3
 80055bc:	e000      	b.n	80055c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d03e      	beq.n	8005648 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d112      	bne.n	80055fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d112      	bne.n	8005632 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	f043 0204 	orr.w	r2, r3, #4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f843 	bl	80056dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005656:	e039      	b.n	80056cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b2a      	cmp	r3, #42	; 0x2a
 800565c:	d109      	bne.n	8005672 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2228      	movs	r2, #40	; 0x28
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff f831 	bl	80046d4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b28      	cmp	r3, #40	; 0x28
 800567c:	d111      	bne.n	80056a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <I2C_Slave_STOPF+0x25c>)
 8005682:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff f830 	bl	8004700 <HAL_I2C_ListenCpltCallback>
}
 80056a0:	e014      	b.n	80056cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	2b22      	cmp	r3, #34	; 0x22
 80056a8:	d002      	beq.n	80056b0 <I2C_Slave_STOPF+0x234>
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	2b22      	cmp	r3, #34	; 0x22
 80056ae:	d10d      	bne.n	80056cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff f804 	bl	80046d4 <HAL_I2C_SlaveRxCpltCallback>
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	08005e55 	.word	0x08005e55
 80056d8:	ffff0000 	.word	0xffff0000

080056dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	2b10      	cmp	r3, #16
 80056f8:	d002      	beq.n	8005700 <I2C_ITError+0x24>
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d10a      	bne.n	8005716 <I2C_ITError+0x3a>
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	2b22      	cmp	r3, #34	; 0x22
 8005704:	d107      	bne.n	8005716 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005714:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800571c:	2b28      	cmp	r3, #40	; 0x28
 800571e:	d107      	bne.n	8005730 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2228      	movs	r2, #40	; 0x28
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800572e:	e015      	b.n	800575c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800573a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800573e:	d00a      	beq.n	8005756 <I2C_ITError+0x7a>
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b60      	cmp	r3, #96	; 0x60
 8005744:	d007      	beq.n	8005756 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800576a:	d161      	bne.n	8005830 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800577a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005780:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005784:	2b01      	cmp	r3, #1
 8005786:	d020      	beq.n	80057ca <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	4a6a      	ldr	r2, [pc, #424]	; (8005938 <I2C_ITError+0x25c>)
 800578e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	4618      	mov	r0, r3
 8005796:	f7fd fc6b 	bl	8003070 <HAL_DMA_Abort_IT>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8089 	beq.w	80058b4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057c4:	4610      	mov	r0, r2
 80057c6:	4798      	blx	r3
 80057c8:	e074      	b.n	80058b4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	4a5a      	ldr	r2, [pc, #360]	; (8005938 <I2C_ITError+0x25c>)
 80057d0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fd fc4a 	bl	8003070 <HAL_DMA_Abort_IT>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d068      	beq.n	80058b4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d10b      	bne.n	8005808 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0201 	bic.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800582a:	4610      	mov	r0, r2
 800582c:	4798      	blx	r3
 800582e:	e041      	b.n	80058b4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b60      	cmp	r3, #96	; 0x60
 800583a:	d125      	bne.n	8005888 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d10b      	bne.n	8005870 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fe ff61 	bl	8004748 <HAL_I2C_AbortCpltCallback>
 8005886:	e015      	b.n	80058b4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d10b      	bne.n	80058ae <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fe ff41 	bl	8004736 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10e      	bne.n	80058e2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058f0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b04      	cmp	r3, #4
 8005904:	d113      	bne.n	800592e <I2C_ITError+0x252>
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b28      	cmp	r3, #40	; 0x28
 800590a:	d110      	bne.n	800592e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a0b      	ldr	r2, [pc, #44]	; (800593c <I2C_ITError+0x260>)
 8005910:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7fe fee9 	bl	8004700 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	08005e55 	.word	0x08005e55
 800593c:	ffff0000 	.word	0xffff0000

08005940 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	4608      	mov	r0, r1
 800594a:	4611      	mov	r1, r2
 800594c:	461a      	mov	r2, r3
 800594e:	4603      	mov	r3, r0
 8005950:	817b      	strh	r3, [r7, #10]
 8005952:	460b      	mov	r3, r1
 8005954:	813b      	strh	r3, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	2200      	movs	r2, #0
 8005972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fb14 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005990:	d103      	bne.n	800599a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e05f      	b.n	8005a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800599e:	897b      	ldrh	r3, [r7, #10]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	492d      	ldr	r1, [pc, #180]	; (8005a68 <I2C_RequestMemoryWrite+0x128>)
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 fb4c 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e04c      	b.n	8005a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059dc:	6a39      	ldr	r1, [r7, #32]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fbb6 	bl	8006150 <I2C_WaitOnTXEFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00d      	beq.n	8005a06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d107      	bne.n	8005a02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e02b      	b.n	8005a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d105      	bne.n	8005a18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a0c:	893b      	ldrh	r3, [r7, #8]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	611a      	str	r2, [r3, #16]
 8005a16:	e021      	b.n	8005a5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a18:	893b      	ldrh	r3, [r7, #8]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a28:	6a39      	ldr	r1, [r7, #32]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fb90 	bl	8006150 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d107      	bne.n	8005a4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e005      	b.n	8005a5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a52:	893b      	ldrh	r3, [r7, #8]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	00010002 	.word	0x00010002

08005a6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	4608      	mov	r0, r1
 8005a76:	4611      	mov	r1, r2
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	817b      	strh	r3, [r7, #10]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	813b      	strh	r3, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 fa76 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005acc:	d103      	bne.n	8005ad6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e0aa      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ada:	897b      	ldrh	r3, [r7, #10]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ae8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	6a3a      	ldr	r2, [r7, #32]
 8005aee:	4952      	ldr	r1, [pc, #328]	; (8005c38 <I2C_RequestMemoryRead+0x1cc>)
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 faae 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e097      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b18:	6a39      	ldr	r1, [r7, #32]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fb18 	bl	8006150 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d107      	bne.n	8005b3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e076      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d105      	bne.n	8005b54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b48:	893b      	ldrh	r3, [r7, #8]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	611a      	str	r2, [r3, #16]
 8005b52:	e021      	b.n	8005b98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b54:	893b      	ldrh	r3, [r7, #8]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b64:	6a39      	ldr	r1, [r7, #32]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 faf2 	bl	8006150 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00d      	beq.n	8005b8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d107      	bne.n	8005b8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e050      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b8e:	893b      	ldrh	r3, [r7, #8]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9a:	6a39      	ldr	r1, [r7, #32]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fad7 	bl	8006150 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d107      	bne.n	8005bc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e035      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f9df 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfa:	d103      	bne.n	8005c04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e013      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c08:	897b      	ldrh	r3, [r7, #10]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	6a3a      	ldr	r2, [r7, #32]
 8005c1c:	4906      	ldr	r1, [pc, #24]	; (8005c38 <I2C_RequestMemoryRead+0x1cc>)
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fa17 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	00010002 	.word	0x00010002

08005c3c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c50:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c58:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c6e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005c90:	7cfb      	ldrb	r3, [r7, #19]
 8005c92:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005c96:	2b21      	cmp	r3, #33	; 0x21
 8005c98:	d007      	beq.n	8005caa <I2C_DMAXferCplt+0x6e>
 8005c9a:	7cfb      	ldrb	r3, [r7, #19]
 8005c9c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005ca0:	2b22      	cmp	r3, #34	; 0x22
 8005ca2:	d131      	bne.n	8005d08 <I2C_DMAXferCplt+0xcc>
 8005ca4:	7cbb      	ldrb	r3, [r7, #18]
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d12e      	bne.n	8005d08 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cb8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	2b29      	cmp	r3, #41	; 0x29
 8005cc4:	d10a      	bne.n	8005cdc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2221      	movs	r2, #33	; 0x21
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2228      	movs	r2, #40	; 0x28
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cd4:	6978      	ldr	r0, [r7, #20]
 8005cd6:	f7fe fcf4 	bl	80046c2 <HAL_I2C_SlaveTxCpltCallback>
 8005cda:	e00c      	b.n	8005cf6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cdc:	7cfb      	ldrb	r3, [r7, #19]
 8005cde:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce0:	d109      	bne.n	8005cf6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2222      	movs	r2, #34	; 0x22
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2228      	movs	r2, #40	; 0x28
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cf0:	6978      	ldr	r0, [r7, #20]
 8005cf2:	f7fe fcef 	bl	80046d4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005d04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005d06:	e06a      	b.n	8005dde <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d064      	beq.n	8005dde <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d107      	bne.n	8005d2e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d2c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d44:	d009      	beq.n	8005d5a <I2C_DMAXferCplt+0x11e>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d006      	beq.n	8005d5a <I2C_DMAXferCplt+0x11e>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005d52:	d002      	beq.n	8005d5a <I2C_DMAXferCplt+0x11e>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d107      	bne.n	8005d6a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d68:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d78:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d88:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005d98:	6978      	ldr	r0, [r7, #20]
 8005d9a:	f7fe fccc 	bl	8004736 <HAL_I2C_ErrorCallback>
}
 8005d9e:	e01e      	b.n	8005dde <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d10a      	bne.n	8005dca <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005dc2:	6978      	ldr	r0, [r7, #20]
 8005dc4:	f7fe fcae 	bl	8004724 <HAL_I2C_MemRxCpltCallback>
}
 8005dc8:	e009      	b.n	8005dde <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2212      	movs	r2, #18
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005dd8:	6978      	ldr	r0, [r7, #20]
 8005dda:	f7fe fc69 	bl	80046b0 <HAL_I2C_MasterRxCpltCallback>
}
 8005dde:	bf00      	nop
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e00:	2200      	movs	r2, #0
 8005e02:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e10:	2200      	movs	r2, #0
 8005e12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e22:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f043 0210 	orr.w	r2, r3, #16
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7fe fc75 	bl	8004736 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e6e:	4b4b      	ldr	r3, [pc, #300]	; (8005f9c <I2C_DMAAbort+0x148>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	08db      	lsrs	r3, r3, #3
 8005e74:	4a4a      	ldr	r2, [pc, #296]	; (8005fa0 <I2C_DMAAbort+0x14c>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	0a1a      	lsrs	r2, r3, #8
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	00da      	lsls	r2, r3, #3
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f043 0220 	orr.w	r2, r3, #32
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e9a:	e00a      	b.n	8005eb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb0:	d0ea      	beq.n	8005e88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	2200      	movs	r2, #0
 8005ed0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	2200      	movs	r2, #0
 8005f06:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b60      	cmp	r3, #96	; 0x60
 8005f22:	d10e      	bne.n	8005f42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2200      	movs	r2, #0
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f3a:	6978      	ldr	r0, [r7, #20]
 8005f3c:	f7fe fc04 	bl	8004748 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f40:	e027      	b.n	8005f92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f42:	7cfb      	ldrb	r3, [r7, #19]
 8005f44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f48:	2b28      	cmp	r3, #40	; 0x28
 8005f4a:	d117      	bne.n	8005f7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2228      	movs	r2, #40	; 0x28
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f7a:	e007      	b.n	8005f8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f8c:	6978      	ldr	r0, [r7, #20]
 8005f8e:	f7fe fbd2 	bl	8004736 <HAL_I2C_ErrorCallback>
}
 8005f92:	bf00      	nop
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000004 	.word	0x20000004
 8005fa0:	14f8b589 	.word	0x14f8b589

08005fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fb4:	e025      	b.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d021      	beq.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fc fe61 	bl	8002c84 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d116      	bne.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e023      	b.n	800604a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10d      	bne.n	8006028 <I2C_WaitOnFlagUntilTimeout+0x84>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	43da      	mvns	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf0c      	ite	eq
 800601e:	2301      	moveq	r3, #1
 8006020:	2300      	movne	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	e00c      	b.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	43da      	mvns	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4013      	ands	r3, r2
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	bf0c      	ite	eq
 800603a:	2301      	moveq	r3, #1
 800603c:	2300      	movne	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	429a      	cmp	r2, r3
 8006046:	d0b6      	beq.n	8005fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006060:	e051      	b.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006070:	d123      	bne.n	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006080:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800608a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f043 0204 	orr.w	r2, r3, #4
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e046      	b.n	8006148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d021      	beq.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fc fddf 	bl	8002c84 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d116      	bne.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e020      	b.n	8006148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	0c1b      	lsrs	r3, r3, #16
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10c      	bne.n	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	43da      	mvns	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4013      	ands	r3, r2
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf14      	ite	ne
 8006122:	2301      	movne	r3, #1
 8006124:	2300      	moveq	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e00b      	b.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	43da      	mvns	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	4013      	ands	r3, r2
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	bf14      	ite	ne
 800613c:	2301      	movne	r3, #1
 800613e:	2300      	moveq	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d18d      	bne.n	8006062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800615c:	e02d      	b.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f900 	bl	8006364 <I2C_IsAcknowledgeFailed>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e02d      	b.n	80061ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d021      	beq.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006176:	f7fc fd85 	bl	8002c84 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	d302      	bcc.n	800618c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d116      	bne.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e007      	b.n	80061ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c4:	2b80      	cmp	r3, #128	; 0x80
 80061c6:	d1ca      	bne.n	800615e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061de:	e02d      	b.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f8bf 	bl	8006364 <I2C_IsAcknowledgeFailed>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e02d      	b.n	800624c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d021      	beq.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f8:	f7fc fd44 	bl	8002c84 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	d302      	bcc.n	800620e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d116      	bne.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	f043 0220 	orr.w	r2, r3, #32
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e007      	b.n	800624c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d1ca      	bne.n	80061e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006260:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	08db      	lsrs	r3, r3, #3
 8006266:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006268:	fba2 2303 	umull	r2, r3, r2, r3
 800626c:	0a1a      	lsrs	r2, r3, #8
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3b01      	subs	r3, #1
 800627a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d107      	bne.n	8006292 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f043 0220 	orr.w	r2, r3, #32
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e008      	b.n	80062a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800629c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a0:	d0e9      	beq.n	8006276 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	20000004 	.word	0x20000004
 80062b4:	14f8b589 	.word	0x14f8b589

080062b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062c4:	e042      	b.n	800634c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d119      	bne.n	8006308 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0210 	mvn.w	r2, #16
 80062dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2220      	movs	r2, #32
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e029      	b.n	800635c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006308:	f7fc fcbc 	bl	8002c84 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	429a      	cmp	r2, r3
 8006316:	d302      	bcc.n	800631e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d116      	bne.n	800634c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e007      	b.n	800635c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d1b5      	bne.n	80062c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637a:	d11b      	bne.n	80063b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006384:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	f043 0204 	orr.w	r2, r3, #4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063d0:	d103      	bne.n	80063da <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063d8:	e007      	b.n	80063ea <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063e2:	d102      	bne.n	80063ea <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2208      	movs	r2, #8
 80063e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr

080063f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e272      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 8087 	beq.w	8006522 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006414:	4b92      	ldr	r3, [pc, #584]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f003 030c 	and.w	r3, r3, #12
 800641c:	2b04      	cmp	r3, #4
 800641e:	d00c      	beq.n	800643a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006420:	4b8f      	ldr	r3, [pc, #572]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 030c 	and.w	r3, r3, #12
 8006428:	2b08      	cmp	r3, #8
 800642a:	d112      	bne.n	8006452 <HAL_RCC_OscConfig+0x5e>
 800642c:	4b8c      	ldr	r3, [pc, #560]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006438:	d10b      	bne.n	8006452 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643a:	4b89      	ldr	r3, [pc, #548]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d06c      	beq.n	8006520 <HAL_RCC_OscConfig+0x12c>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d168      	bne.n	8006520 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e24c      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645a:	d106      	bne.n	800646a <HAL_RCC_OscConfig+0x76>
 800645c:	4b80      	ldr	r3, [pc, #512]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a7f      	ldr	r2, [pc, #508]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	e02e      	b.n	80064c8 <HAL_RCC_OscConfig+0xd4>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10c      	bne.n	800648c <HAL_RCC_OscConfig+0x98>
 8006472:	4b7b      	ldr	r3, [pc, #492]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a7a      	ldr	r2, [pc, #488]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	4b78      	ldr	r3, [pc, #480]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a77      	ldr	r2, [pc, #476]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	e01d      	b.n	80064c8 <HAL_RCC_OscConfig+0xd4>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006494:	d10c      	bne.n	80064b0 <HAL_RCC_OscConfig+0xbc>
 8006496:	4b72      	ldr	r3, [pc, #456]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a71      	ldr	r2, [pc, #452]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 800649c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	4b6f      	ldr	r3, [pc, #444]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a6e      	ldr	r2, [pc, #440]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80064a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	e00b      	b.n	80064c8 <HAL_RCC_OscConfig+0xd4>
 80064b0:	4b6b      	ldr	r3, [pc, #428]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a6a      	ldr	r2, [pc, #424]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80064b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	4b68      	ldr	r3, [pc, #416]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a67      	ldr	r2, [pc, #412]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80064c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d013      	beq.n	80064f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d0:	f7fc fbd8 	bl	8002c84 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d8:	f7fc fbd4 	bl	8002c84 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b64      	cmp	r3, #100	; 0x64
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e200      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ea:	4b5d      	ldr	r3, [pc, #372]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0xe4>
 80064f6:	e014      	b.n	8006522 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f8:	f7fc fbc4 	bl	8002c84 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006500:	f7fc fbc0 	bl	8002c84 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b64      	cmp	r3, #100	; 0x64
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e1ec      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006512:	4b53      	ldr	r3, [pc, #332]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f0      	bne.n	8006500 <HAL_RCC_OscConfig+0x10c>
 800651e:	e000      	b.n	8006522 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d063      	beq.n	80065f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800652e:	4b4c      	ldr	r3, [pc, #304]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f003 030c 	and.w	r3, r3, #12
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800653a:	4b49      	ldr	r3, [pc, #292]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 030c 	and.w	r3, r3, #12
 8006542:	2b08      	cmp	r3, #8
 8006544:	d11c      	bne.n	8006580 <HAL_RCC_OscConfig+0x18c>
 8006546:	4b46      	ldr	r3, [pc, #280]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d116      	bne.n	8006580 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006552:	4b43      	ldr	r3, [pc, #268]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <HAL_RCC_OscConfig+0x176>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d001      	beq.n	800656a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e1c0      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656a:	4b3d      	ldr	r3, [pc, #244]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4939      	ldr	r1, [pc, #228]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 800657a:	4313      	orrs	r3, r2
 800657c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657e:	e03a      	b.n	80065f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d020      	beq.n	80065ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006588:	4b36      	ldr	r3, [pc, #216]	; (8006664 <HAL_RCC_OscConfig+0x270>)
 800658a:	2201      	movs	r2, #1
 800658c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658e:	f7fc fb79 	bl	8002c84 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006596:	f7fc fb75 	bl	8002c84 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e1a1      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a8:	4b2d      	ldr	r3, [pc, #180]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b4:	4b2a      	ldr	r3, [pc, #168]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4927      	ldr	r1, [pc, #156]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]
 80065c8:	e015      	b.n	80065f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ca:	4b26      	ldr	r3, [pc, #152]	; (8006664 <HAL_RCC_OscConfig+0x270>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d0:	f7fc fb58 	bl	8002c84 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065d8:	f7fc fb54 	bl	8002c84 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e180      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ea:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f0      	bne.n	80065d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d03a      	beq.n	8006678 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d019      	beq.n	800663e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800660a:	4b17      	ldr	r3, [pc, #92]	; (8006668 <HAL_RCC_OscConfig+0x274>)
 800660c:	2201      	movs	r2, #1
 800660e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006610:	f7fc fb38 	bl	8002c84 <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006618:	f7fc fb34 	bl	8002c84 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e160      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800662a:	4b0d      	ldr	r3, [pc, #52]	; (8006660 <HAL_RCC_OscConfig+0x26c>)
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006636:	2001      	movs	r0, #1
 8006638:	f000 fad8 	bl	8006bec <RCC_Delay>
 800663c:	e01c      	b.n	8006678 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800663e:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <HAL_RCC_OscConfig+0x274>)
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006644:	f7fc fb1e 	bl	8002c84 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800664a:	e00f      	b.n	800666c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800664c:	f7fc fb1a 	bl	8002c84 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d908      	bls.n	800666c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e146      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
 800665e:	bf00      	nop
 8006660:	40021000 	.word	0x40021000
 8006664:	42420000 	.word	0x42420000
 8006668:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800666c:	4b92      	ldr	r3, [pc, #584]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e9      	bne.n	800664c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80a6 	beq.w	80067d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800668a:	4b8b      	ldr	r3, [pc, #556]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006696:	4b88      	ldr	r3, [pc, #544]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	4a87      	ldr	r2, [pc, #540]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 800669c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a0:	61d3      	str	r3, [r2, #28]
 80066a2:	4b85      	ldr	r3, [pc, #532]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066aa:	60bb      	str	r3, [r7, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ae:	2301      	movs	r3, #1
 80066b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b2:	4b82      	ldr	r3, [pc, #520]	; (80068bc <HAL_RCC_OscConfig+0x4c8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d118      	bne.n	80066f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066be:	4b7f      	ldr	r3, [pc, #508]	; (80068bc <HAL_RCC_OscConfig+0x4c8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a7e      	ldr	r2, [pc, #504]	; (80068bc <HAL_RCC_OscConfig+0x4c8>)
 80066c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ca:	f7fc fadb 	bl	8002c84 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d2:	f7fc fad7 	bl	8002c84 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b64      	cmp	r3, #100	; 0x64
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e103      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e4:	4b75      	ldr	r3, [pc, #468]	; (80068bc <HAL_RCC_OscConfig+0x4c8>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f0      	beq.n	80066d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d106      	bne.n	8006706 <HAL_RCC_OscConfig+0x312>
 80066f8:	4b6f      	ldr	r3, [pc, #444]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	4a6e      	ldr	r2, [pc, #440]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	6213      	str	r3, [r2, #32]
 8006704:	e02d      	b.n	8006762 <HAL_RCC_OscConfig+0x36e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10c      	bne.n	8006728 <HAL_RCC_OscConfig+0x334>
 800670e:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	4a69      	ldr	r2, [pc, #420]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	6213      	str	r3, [r2, #32]
 800671a:	4b67      	ldr	r3, [pc, #412]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	4a66      	ldr	r2, [pc, #408]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006720:	f023 0304 	bic.w	r3, r3, #4
 8006724:	6213      	str	r3, [r2, #32]
 8006726:	e01c      	b.n	8006762 <HAL_RCC_OscConfig+0x36e>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	2b05      	cmp	r3, #5
 800672e:	d10c      	bne.n	800674a <HAL_RCC_OscConfig+0x356>
 8006730:	4b61      	ldr	r3, [pc, #388]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	4a60      	ldr	r2, [pc, #384]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006736:	f043 0304 	orr.w	r3, r3, #4
 800673a:	6213      	str	r3, [r2, #32]
 800673c:	4b5e      	ldr	r3, [pc, #376]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	4a5d      	ldr	r2, [pc, #372]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	6213      	str	r3, [r2, #32]
 8006748:	e00b      	b.n	8006762 <HAL_RCC_OscConfig+0x36e>
 800674a:	4b5b      	ldr	r3, [pc, #364]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	4a5a      	ldr	r2, [pc, #360]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6213      	str	r3, [r2, #32]
 8006756:	4b58      	ldr	r3, [pc, #352]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	4a57      	ldr	r2, [pc, #348]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 800675c:	f023 0304 	bic.w	r3, r3, #4
 8006760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d015      	beq.n	8006796 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676a:	f7fc fa8b 	bl	8002c84 <HAL_GetTick>
 800676e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006770:	e00a      	b.n	8006788 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006772:	f7fc fa87 	bl	8002c84 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006780:	4293      	cmp	r3, r2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e0b1      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006788:	4b4b      	ldr	r3, [pc, #300]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0ee      	beq.n	8006772 <HAL_RCC_OscConfig+0x37e>
 8006794:	e014      	b.n	80067c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006796:	f7fc fa75 	bl	8002c84 <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800679c:	e00a      	b.n	80067b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679e:	f7fc fa71 	bl	8002c84 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e09b      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067b4:	4b40      	ldr	r3, [pc, #256]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1ee      	bne.n	800679e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d105      	bne.n	80067d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067c6:	4b3c      	ldr	r3, [pc, #240]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	4a3b      	ldr	r2, [pc, #236]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 80067cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 8087 	beq.w	80068ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067dc:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d061      	beq.n	80068ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d146      	bne.n	800687e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f0:	4b33      	ldr	r3, [pc, #204]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f6:	f7fc fa45 	bl	8002c84 <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067fe:	f7fc fa41 	bl	8002c84 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e06d      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006810:	4b29      	ldr	r3, [pc, #164]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f0      	bne.n	80067fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006824:	d108      	bne.n	8006838 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	4921      	ldr	r1, [pc, #132]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006834:	4313      	orrs	r3, r2
 8006836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006838:	4b1f      	ldr	r3, [pc, #124]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a19      	ldr	r1, [r3, #32]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	430b      	orrs	r3, r1
 800684a:	491b      	ldr	r1, [pc, #108]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 800684c:	4313      	orrs	r3, r2
 800684e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006850:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006852:	2201      	movs	r2, #1
 8006854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006856:	f7fc fa15 	bl	8002c84 <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800685e:	f7fc fa11 	bl	8002c84 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e03d      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006870:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCC_OscConfig+0x46a>
 800687c:	e035      	b.n	80068ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800687e:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006884:	f7fc f9fe 	bl	8002c84 <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800688c:	f7fc f9fa 	bl	8002c84 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e026      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800689e:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <HAL_RCC_OscConfig+0x4c4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f0      	bne.n	800688c <HAL_RCC_OscConfig+0x498>
 80068aa:	e01e      	b.n	80068ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d107      	bne.n	80068c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e019      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
 80068b8:	40021000 	.word	0x40021000
 80068bc:	40007000 	.word	0x40007000
 80068c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_RCC_OscConfig+0x500>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d106      	bne.n	80068e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d001      	beq.n	80068ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40021000 	.word	0x40021000

080068f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e0d0      	b.n	8006aae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800690c:	4b6a      	ldr	r3, [pc, #424]	; (8006ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d910      	bls.n	800693c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691a:	4b67      	ldr	r3, [pc, #412]	; (8006ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f023 0207 	bic.w	r2, r3, #7
 8006922:	4965      	ldr	r1, [pc, #404]	; (8006ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	4313      	orrs	r3, r2
 8006928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800692a:	4b63      	ldr	r3, [pc, #396]	; (8006ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	429a      	cmp	r2, r3
 8006936:	d001      	beq.n	800693c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e0b8      	b.n	8006aae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d020      	beq.n	800698a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006954:	4b59      	ldr	r3, [pc, #356]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4a58      	ldr	r2, [pc, #352]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 800695a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800695e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800696c:	4b53      	ldr	r3, [pc, #332]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4a52      	ldr	r2, [pc, #328]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006972:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006976:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006978:	4b50      	ldr	r3, [pc, #320]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	494d      	ldr	r1, [pc, #308]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006986:	4313      	orrs	r3, r2
 8006988:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d040      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d107      	bne.n	80069ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699e:	4b47      	ldr	r3, [pc, #284]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d115      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e07f      	b.n	8006aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d107      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b6:	4b41      	ldr	r3, [pc, #260]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e073      	b.n	8006aae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c6:	4b3d      	ldr	r3, [pc, #244]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e06b      	b.n	8006aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069d6:	4b39      	ldr	r3, [pc, #228]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f023 0203 	bic.w	r2, r3, #3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	4936      	ldr	r1, [pc, #216]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069e8:	f7fc f94c 	bl	8002c84 <HAL_GetTick>
 80069ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ee:	e00a      	b.n	8006a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069f0:	f7fc f948 	bl	8002c84 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e053      	b.n	8006aae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a06:	4b2d      	ldr	r3, [pc, #180]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f003 020c 	and.w	r2, r3, #12
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d1eb      	bne.n	80069f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a18:	4b27      	ldr	r3, [pc, #156]	; (8006ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d210      	bcs.n	8006a48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a26:	4b24      	ldr	r3, [pc, #144]	; (8006ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f023 0207 	bic.w	r2, r3, #7
 8006a2e:	4922      	ldr	r1, [pc, #136]	; (8006ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a36:	4b20      	ldr	r3, [pc, #128]	; (8006ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d001      	beq.n	8006a48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e032      	b.n	8006aae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d008      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a54:	4b19      	ldr	r3, [pc, #100]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	4916      	ldr	r1, [pc, #88]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d009      	beq.n	8006a86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a72:	4b12      	ldr	r3, [pc, #72]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	490e      	ldr	r1, [pc, #56]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a86:	f000 f821 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	091b      	lsrs	r3, r3, #4
 8006a92:	f003 030f 	and.w	r3, r3, #15
 8006a96:	490a      	ldr	r1, [pc, #40]	; (8006ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a98:	5ccb      	ldrb	r3, [r1, r3]
 8006a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9e:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <HAL_RCC_ClockConfig+0x1cc>)
 8006aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006aa2:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <HAL_RCC_ClockConfig+0x1d0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fc f8aa 	bl	8002c00 <HAL_InitTick>

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	40022000 	.word	0x40022000
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	08008708 	.word	0x08008708
 8006ac4:	20000004 	.word	0x20000004
 8006ac8:	20000008 	.word	0x20000008

08006acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006acc:	b490      	push	{r4, r7}
 8006ace:	b08a      	sub	sp, #40	; 0x28
 8006ad0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ad2:	4b29      	ldr	r3, [pc, #164]	; (8006b78 <HAL_RCC_GetSysClockFreq+0xac>)
 8006ad4:	1d3c      	adds	r4, r7, #4
 8006ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006adc:	f240 2301 	movw	r3, #513	; 0x201
 8006ae0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	2300      	movs	r3, #0
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
 8006aee:	2300      	movs	r3, #0
 8006af0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006af6:	4b21      	ldr	r3, [pc, #132]	; (8006b7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f003 030c 	and.w	r3, r3, #12
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d002      	beq.n	8006b0c <HAL_RCC_GetSysClockFreq+0x40>
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d003      	beq.n	8006b12 <HAL_RCC_GetSysClockFreq+0x46>
 8006b0a:	e02b      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b0c:	4b1c      	ldr	r3, [pc, #112]	; (8006b80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b0e:	623b      	str	r3, [r7, #32]
      break;
 8006b10:	e02b      	b.n	8006b6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	0c9b      	lsrs	r3, r3, #18
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	3328      	adds	r3, #40	; 0x28
 8006b1c:	443b      	add	r3, r7
 8006b1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b22:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d012      	beq.n	8006b54 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b2e:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	0c5b      	lsrs	r3, r3, #17
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	3328      	adds	r3, #40	; 0x28
 8006b3a:	443b      	add	r3, r7
 8006b3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	4a0e      	ldr	r2, [pc, #56]	; (8006b80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b46:	fb03 f202 	mul.w	r2, r3, r2
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
 8006b52:	e004      	b.n	8006b5e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	4a0b      	ldr	r2, [pc, #44]	; (8006b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b58:	fb02 f303 	mul.w	r3, r2, r3
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	623b      	str	r3, [r7, #32]
      break;
 8006b62:	e002      	b.n	8006b6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b66:	623b      	str	r3, [r7, #32]
      break;
 8006b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3728      	adds	r7, #40	; 0x28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc90      	pop	{r4, r7}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	080086f8 	.word	0x080086f8
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	007a1200 	.word	0x007a1200
 8006b84:	003d0900 	.word	0x003d0900

08006b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b8c:	4b02      	ldr	r3, [pc, #8]	; (8006b98 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr
 8006b98:	20000004 	.word	0x20000004

08006b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ba0:	f7ff fff2 	bl	8006b88 <HAL_RCC_GetHCLKFreq>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	4903      	ldr	r1, [pc, #12]	; (8006bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bb2:	5ccb      	ldrb	r3, [r1, r3]
 8006bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	08008718 	.word	0x08008718

08006bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006bc8:	f7ff ffde 	bl	8006b88 <HAL_RCC_GetHCLKFreq>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	0adb      	lsrs	r3, r3, #11
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	4903      	ldr	r1, [pc, #12]	; (8006be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bda:	5ccb      	ldrb	r3, [r1, r3]
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40021000 	.word	0x40021000
 8006be8:	08008718 	.word	0x08008718

08006bec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <RCC_Delay+0x34>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a0a      	ldr	r2, [pc, #40]	; (8006c24 <RCC_Delay+0x38>)
 8006bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfe:	0a5b      	lsrs	r3, r3, #9
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
 8006c06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c08:	bf00      	nop
  }
  while (Delay --);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	1e5a      	subs	r2, r3, #1
 8006c0e:	60fa      	str	r2, [r7, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f9      	bne.n	8006c08 <RCC_Delay+0x1c>
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr
 8006c20:	20000004 	.word	0x20000004
 8006c24:	10624dd3 	.word	0x10624dd3

08006c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e076      	b.n	8006d28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d108      	bne.n	8006c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c4a:	d009      	beq.n	8006c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	61da      	str	r2, [r3, #28]
 8006c52:	e005      	b.n	8006c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fb f876 	bl	8001d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce4:	ea42 0103 	orr.w	r1, r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	0c1a      	lsrs	r2, r3, #16
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f002 0204 	and.w	r2, r2, #4
 8006d06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69da      	ldr	r2, [r3, #28]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_SPI_Transmit+0x22>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e126      	b.n	8006fa0 <HAL_SPI_Transmit+0x270>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d5a:	f7fb ff93 	bl	8002c84 <HAL_GetTick>
 8006d5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d002      	beq.n	8006d76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
 8006d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d74:	e10b      	b.n	8006f8e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <HAL_SPI_Transmit+0x52>
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d86:	e102      	b.n	8006f8e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	88fa      	ldrh	r2, [r7, #6]
 8006da0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	88fa      	ldrh	r2, [r7, #6]
 8006da6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dce:	d10f      	bne.n	8006df0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	d007      	beq.n	8006e0e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e16:	d14b      	bne.n	8006eb0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <HAL_SPI_Transmit+0xf6>
 8006e20:	8afb      	ldrh	r3, [r7, #22]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d13e      	bne.n	8006ea4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	881a      	ldrh	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	1c9a      	adds	r2, r3, #2
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e4a:	e02b      	b.n	8006ea4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d112      	bne.n	8006e80 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5e:	881a      	ldrh	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	1c9a      	adds	r2, r3, #2
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e7e:	e011      	b.n	8006ea4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e80:	f7fb ff00 	bl	8002c84 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d803      	bhi.n	8006e98 <HAL_SPI_Transmit+0x168>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e96:	d102      	bne.n	8006e9e <HAL_SPI_Transmit+0x16e>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d102      	bne.n	8006ea4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ea2:	e074      	b.n	8006f8e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1ce      	bne.n	8006e4c <HAL_SPI_Transmit+0x11c>
 8006eae:	e04c      	b.n	8006f4a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_SPI_Transmit+0x18e>
 8006eb8:	8afb      	ldrh	r3, [r7, #22]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d140      	bne.n	8006f40 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	330c      	adds	r3, #12
 8006ec8:	7812      	ldrb	r2, [r2, #0]
 8006eca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ee4:	e02c      	b.n	8006f40 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d113      	bne.n	8006f1c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	330c      	adds	r3, #12
 8006efe:	7812      	ldrb	r2, [r2, #0]
 8006f00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f1a:	e011      	b.n	8006f40 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f1c:	f7fb feb2 	bl	8002c84 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d803      	bhi.n	8006f34 <HAL_SPI_Transmit+0x204>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f32:	d102      	bne.n	8006f3a <HAL_SPI_Transmit+0x20a>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d102      	bne.n	8006f40 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f3e:	e026      	b.n	8006f8e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1cd      	bne.n	8006ee6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fbb8 	bl	80076c4 <SPI_EndRxTxTransaction>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f68:	2300      	movs	r3, #0
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e000      	b.n	8006f8e <HAL_SPI_Transmit+0x25e>
  }

error:
 8006f8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3720      	adds	r7, #32
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fc4:	d112      	bne.n	8006fec <HAL_SPI_Receive+0x44>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10e      	bne.n	8006fec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fd6:	88fa      	ldrh	r2, [r7, #6]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f8f1 	bl	80071ca <HAL_SPI_TransmitReceive>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	e0ea      	b.n	80071c2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_SPI_Receive+0x52>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e0e3      	b.n	80071c2 <HAL_SPI_Receive+0x21a>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007002:	f7fb fe3f 	bl	8002c84 <HAL_GetTick>
 8007006:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d002      	beq.n	800701a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007014:	2302      	movs	r3, #2
 8007016:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007018:	e0ca      	b.n	80071b0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <HAL_SPI_Receive+0x7e>
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]
    goto error;
 800702a:	e0c1      	b.n	80071b0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2204      	movs	r2, #4
 8007030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	88fa      	ldrh	r2, [r7, #6]
 800704a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007072:	d10f      	bne.n	8007094 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007082:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007092:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d007      	beq.n	80070b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d162      	bne.n	8007180 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070ba:	e02e      	b.n	800711a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d115      	bne.n	80070f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f103 020c 	add.w	r2, r3, #12
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	b2d2      	uxtb	r2, r2
 80070da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070f4:	e011      	b.n	800711a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070f6:	f7fb fdc5 	bl	8002c84 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d803      	bhi.n	800710e <HAL_SPI_Receive+0x166>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d102      	bne.n	8007114 <HAL_SPI_Receive+0x16c>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007118:	e04a      	b.n	80071b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1cb      	bne.n	80070bc <HAL_SPI_Receive+0x114>
 8007124:	e031      	b.n	800718a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b01      	cmp	r3, #1
 8007132:	d113      	bne.n	800715c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	b292      	uxth	r2, r2
 8007140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	1c9a      	adds	r2, r3, #2
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	87da      	strh	r2, [r3, #62]	; 0x3e
 800715a:	e011      	b.n	8007180 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800715c:	f7fb fd92 	bl	8002c84 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d803      	bhi.n	8007174 <HAL_SPI_Receive+0x1cc>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007172:	d102      	bne.n	800717a <HAL_SPI_Receive+0x1d2>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d102      	bne.n	8007180 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800717e:	e017      	b.n	80071b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1cd      	bne.n	8007126 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 fa46 	bl	8007620 <SPI_EndRxTransaction>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2220      	movs	r2, #32
 800719e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	75fb      	strb	r3, [r7, #23]
 80071ac:	e000      	b.n	80071b0 <HAL_SPI_Receive+0x208>
  }

error :
 80071ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b08c      	sub	sp, #48	; 0x30
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071d8:	2301      	movs	r3, #1
 80071da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_SPI_TransmitReceive+0x26>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e18a      	b.n	8007506 <HAL_SPI_TransmitReceive+0x33c>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071f8:	f7fb fd44 	bl	8002c84 <HAL_GetTick>
 80071fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800720e:	887b      	ldrh	r3, [r7, #2]
 8007210:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007216:	2b01      	cmp	r3, #1
 8007218:	d00f      	beq.n	800723a <HAL_SPI_TransmitReceive+0x70>
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007220:	d107      	bne.n	8007232 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d103      	bne.n	8007232 <HAL_SPI_TransmitReceive+0x68>
 800722a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800722e:	2b04      	cmp	r3, #4
 8007230:	d003      	beq.n	800723a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007232:	2302      	movs	r3, #2
 8007234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007238:	e15b      	b.n	80074f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <HAL_SPI_TransmitReceive+0x82>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <HAL_SPI_TransmitReceive+0x82>
 8007246:	887b      	ldrh	r3, [r7, #2]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d103      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007252:	e14e      	b.n	80074f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b04      	cmp	r3, #4
 800725e:	d003      	beq.n	8007268 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2205      	movs	r2, #5
 8007264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	887a      	ldrh	r2, [r7, #2]
 8007278:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	887a      	ldrh	r2, [r7, #2]
 800727e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	887a      	ldrh	r2, [r7, #2]
 800728a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	887a      	ldrh	r2, [r7, #2]
 8007290:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	d007      	beq.n	80072bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c4:	d178      	bne.n	80073b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <HAL_SPI_TransmitReceive+0x10a>
 80072ce:	8b7b      	ldrh	r3, [r7, #26]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d166      	bne.n	80073a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	881a      	ldrh	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e4:	1c9a      	adds	r2, r3, #2
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072f8:	e053      	b.n	80073a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b02      	cmp	r3, #2
 8007306:	d11b      	bne.n	8007340 <HAL_SPI_TransmitReceive+0x176>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <HAL_SPI_TransmitReceive+0x176>
 8007312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007314:	2b01      	cmp	r3, #1
 8007316:	d113      	bne.n	8007340 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	881a      	ldrh	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007328:	1c9a      	adds	r2, r3, #2
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b01      	cmp	r3, #1
 800734c:	d119      	bne.n	8007382 <HAL_SPI_TransmitReceive+0x1b8>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d014      	beq.n	8007382 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	b292      	uxth	r2, r2
 8007364:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	1c9a      	adds	r2, r3, #2
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800737e:	2301      	movs	r3, #1
 8007380:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007382:	f7fb fc7f 	bl	8002c84 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800738e:	429a      	cmp	r2, r3
 8007390:	d807      	bhi.n	80073a2 <HAL_SPI_TransmitReceive+0x1d8>
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d003      	beq.n	80073a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073a0:	e0a7      	b.n	80074f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1a6      	bne.n	80072fa <HAL_SPI_TransmitReceive+0x130>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1a1      	bne.n	80072fa <HAL_SPI_TransmitReceive+0x130>
 80073b6:	e07c      	b.n	80074b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_SPI_TransmitReceive+0x1fc>
 80073c0:	8b7b      	ldrh	r3, [r7, #26]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d16b      	bne.n	800749e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	330c      	adds	r3, #12
 80073d0:	7812      	ldrb	r2, [r2, #0]
 80073d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ec:	e057      	b.n	800749e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d11c      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x26c>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d017      	beq.n	8007436 <HAL_SPI_TransmitReceive+0x26c>
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d114      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	330c      	adds	r3, #12
 8007416:	7812      	ldrb	r2, [r2, #0]
 8007418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007428:	b29b      	uxth	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	b29a      	uxth	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d119      	bne.n	8007478 <HAL_SPI_TransmitReceive+0x2ae>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007448:	b29b      	uxth	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d014      	beq.n	8007478 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007474:	2301      	movs	r3, #1
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007478:	f7fb fc04 	bl	8002c84 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007484:	429a      	cmp	r2, r3
 8007486:	d803      	bhi.n	8007490 <HAL_SPI_TransmitReceive+0x2c6>
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d102      	bne.n	8007496 <HAL_SPI_TransmitReceive+0x2cc>
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	2b00      	cmp	r3, #0
 8007494:	d103      	bne.n	800749e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800749c:	e029      	b.n	80074f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1a2      	bne.n	80073ee <HAL_SPI_TransmitReceive+0x224>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d19d      	bne.n	80073ee <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f904 	bl	80076c4 <SPI_EndRxTxTransaction>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d006      	beq.n	80074d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2220      	movs	r2, #32
 80074cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80074ce:	e010      	b.n	80074f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074d8:	2300      	movs	r3, #0
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	e000      	b.n	80074f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80074f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007506:	4618      	mov	r0, r3
 8007508:	3730      	adds	r7, #48	; 0x30
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	4613      	mov	r3, r2
 800751e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007520:	f7fb fbb0 	bl	8002c84 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	1a9b      	subs	r3, r3, r2
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	4413      	add	r3, r2
 800752e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007530:	f7fb fba8 	bl	8002c84 <HAL_GetTick>
 8007534:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007536:	4b39      	ldr	r3, [pc, #228]	; (800761c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	015b      	lsls	r3, r3, #5
 800753c:	0d1b      	lsrs	r3, r3, #20
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	fb02 f303 	mul.w	r3, r2, r3
 8007544:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007546:	e054      	b.n	80075f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d050      	beq.n	80075f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007550:	f7fb fb98 	bl	8002c84 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	429a      	cmp	r2, r3
 800755e:	d902      	bls.n	8007566 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d13d      	bne.n	80075e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800757e:	d111      	bne.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007588:	d004      	beq.n	8007594 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007592:	d107      	bne.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ac:	d10f      	bne.n	80075ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e017      	b.n	8007612 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4013      	ands	r3, r2
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	429a      	cmp	r2, r3
 8007600:	bf0c      	ite	eq
 8007602:	2301      	moveq	r3, #1
 8007604:	2300      	movne	r3, #0
 8007606:	b2db      	uxtb	r3, r3
 8007608:	461a      	mov	r2, r3
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	429a      	cmp	r2, r3
 800760e:	d19b      	bne.n	8007548 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3720      	adds	r7, #32
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000004 	.word	0x20000004

08007620 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007634:	d111      	bne.n	800765a <SPI_EndRxTransaction+0x3a>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800763e:	d004      	beq.n	800764a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007648:	d107      	bne.n	800765a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007658:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007662:	d117      	bne.n	8007694 <SPI_EndRxTransaction+0x74>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800766c:	d112      	bne.n	8007694 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2200      	movs	r2, #0
 8007676:	2101      	movs	r1, #1
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7ff ff49 	bl	8007510 <SPI_WaitFlagStateUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01a      	beq.n	80076ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007688:	f043 0220 	orr.w	r2, r3, #32
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e013      	b.n	80076bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	2180      	movs	r1, #128	; 0x80
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff ff36 	bl	8007510 <SPI_WaitFlagStateUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d007      	beq.n	80076ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	f043 0220 	orr.w	r2, r3, #32
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e000      	b.n	80076bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2200      	movs	r2, #0
 80076d8:	2180      	movs	r1, #128	; 0x80
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff ff18 	bl	8007510 <SPI_WaitFlagStateUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d007      	beq.n	80076f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ea:	f043 0220 	orr.w	r2, r3, #32
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e000      	b.n	80076f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e03f      	b.n	8007792 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fa fb6a 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2224      	movs	r2, #36	; 0x24
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f829 	bl	800779c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695a      	ldr	r2, [r3, #20]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80077d6:	f023 030c 	bic.w	r3, r3, #12
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	430b      	orrs	r3, r1
 80077e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a2c      	ldr	r2, [pc, #176]	; (80078b0 <UART_SetConfig+0x114>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d103      	bne.n	800780c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007804:	f7ff f9de 	bl	8006bc4 <HAL_RCC_GetPCLK2Freq>
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	e002      	b.n	8007812 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800780c:	f7ff f9c6 	bl	8006b9c <HAL_RCC_GetPCLK1Freq>
 8007810:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	009a      	lsls	r2, r3, #2
 800781c:	441a      	add	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	fbb2 f3f3 	udiv	r3, r2, r3
 8007828:	4a22      	ldr	r2, [pc, #136]	; (80078b4 <UART_SetConfig+0x118>)
 800782a:	fba2 2303 	umull	r2, r3, r2, r3
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	0119      	lsls	r1, r3, #4
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009a      	lsls	r2, r3, #2
 800783c:	441a      	add	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	fbb2 f2f3 	udiv	r2, r2, r3
 8007848:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <UART_SetConfig+0x118>)
 800784a:	fba3 0302 	umull	r0, r3, r3, r2
 800784e:	095b      	lsrs	r3, r3, #5
 8007850:	2064      	movs	r0, #100	; 0x64
 8007852:	fb00 f303 	mul.w	r3, r0, r3
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	3332      	adds	r3, #50	; 0x32
 800785c:	4a15      	ldr	r2, [pc, #84]	; (80078b4 <UART_SetConfig+0x118>)
 800785e:	fba2 2303 	umull	r2, r3, r2, r3
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007868:	4419      	add	r1, r3
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	009a      	lsls	r2, r3, #2
 8007874:	441a      	add	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007880:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <UART_SetConfig+0x118>)
 8007882:	fba3 0302 	umull	r0, r3, r3, r2
 8007886:	095b      	lsrs	r3, r3, #5
 8007888:	2064      	movs	r0, #100	; 0x64
 800788a:	fb00 f303 	mul.w	r3, r0, r3
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	3332      	adds	r3, #50	; 0x32
 8007894:	4a07      	ldr	r2, [pc, #28]	; (80078b4 <UART_SetConfig+0x118>)
 8007896:	fba2 2303 	umull	r2, r3, r2, r3
 800789a:	095b      	lsrs	r3, r3, #5
 800789c:	f003 020f 	and.w	r2, r3, #15
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	440a      	add	r2, r1
 80078a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	40013800 	.word	0x40013800
 80078b4:	51eb851f 	.word	0x51eb851f

080078b8 <pow>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	4614      	mov	r4, r2
 80078be:	461d      	mov	r5, r3
 80078c0:	4680      	mov	r8, r0
 80078c2:	4689      	mov	r9, r1
 80078c4:	f000 f860 	bl	8007988 <__ieee754_pow>
 80078c8:	4622      	mov	r2, r4
 80078ca:	4606      	mov	r6, r0
 80078cc:	460f      	mov	r7, r1
 80078ce:	462b      	mov	r3, r5
 80078d0:	4620      	mov	r0, r4
 80078d2:	4629      	mov	r1, r5
 80078d4:	f7f9 f892 	bl	80009fc <__aeabi_dcmpun>
 80078d8:	bbc8      	cbnz	r0, 800794e <pow+0x96>
 80078da:	2200      	movs	r2, #0
 80078dc:	2300      	movs	r3, #0
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f9 f859 	bl	8000998 <__aeabi_dcmpeq>
 80078e6:	b1b8      	cbz	r0, 8007918 <pow+0x60>
 80078e8:	2200      	movs	r2, #0
 80078ea:	2300      	movs	r3, #0
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	f7f9 f852 	bl	8000998 <__aeabi_dcmpeq>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d141      	bne.n	800797c <pow+0xc4>
 80078f8:	4620      	mov	r0, r4
 80078fa:	4629      	mov	r1, r5
 80078fc:	f000 fe39 	bl	8008572 <finite>
 8007900:	b328      	cbz	r0, 800794e <pow+0x96>
 8007902:	2200      	movs	r2, #0
 8007904:	2300      	movs	r3, #0
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f9 f84f 	bl	80009ac <__aeabi_dcmplt>
 800790e:	b1f0      	cbz	r0, 800794e <pow+0x96>
 8007910:	f000 feb4 	bl	800867c <__errno>
 8007914:	2322      	movs	r3, #34	; 0x22
 8007916:	e019      	b.n	800794c <pow+0x94>
 8007918:	4630      	mov	r0, r6
 800791a:	4639      	mov	r1, r7
 800791c:	f000 fe29 	bl	8008572 <finite>
 8007920:	b9c8      	cbnz	r0, 8007956 <pow+0x9e>
 8007922:	4640      	mov	r0, r8
 8007924:	4649      	mov	r1, r9
 8007926:	f000 fe24 	bl	8008572 <finite>
 800792a:	b1a0      	cbz	r0, 8007956 <pow+0x9e>
 800792c:	4620      	mov	r0, r4
 800792e:	4629      	mov	r1, r5
 8007930:	f000 fe1f 	bl	8008572 <finite>
 8007934:	b178      	cbz	r0, 8007956 <pow+0x9e>
 8007936:	4632      	mov	r2, r6
 8007938:	463b      	mov	r3, r7
 800793a:	4630      	mov	r0, r6
 800793c:	4639      	mov	r1, r7
 800793e:	f7f9 f85d 	bl	80009fc <__aeabi_dcmpun>
 8007942:	2800      	cmp	r0, #0
 8007944:	d0e4      	beq.n	8007910 <pow+0x58>
 8007946:	f000 fe99 	bl	800867c <__errno>
 800794a:	2321      	movs	r3, #33	; 0x21
 800794c:	6003      	str	r3, [r0, #0]
 800794e:	4630      	mov	r0, r6
 8007950:	4639      	mov	r1, r7
 8007952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007956:	2200      	movs	r2, #0
 8007958:	2300      	movs	r3, #0
 800795a:	4630      	mov	r0, r6
 800795c:	4639      	mov	r1, r7
 800795e:	f7f9 f81b 	bl	8000998 <__aeabi_dcmpeq>
 8007962:	2800      	cmp	r0, #0
 8007964:	d0f3      	beq.n	800794e <pow+0x96>
 8007966:	4640      	mov	r0, r8
 8007968:	4649      	mov	r1, r9
 800796a:	f000 fe02 	bl	8008572 <finite>
 800796e:	2800      	cmp	r0, #0
 8007970:	d0ed      	beq.n	800794e <pow+0x96>
 8007972:	4620      	mov	r0, r4
 8007974:	4629      	mov	r1, r5
 8007976:	f000 fdfc 	bl	8008572 <finite>
 800797a:	e7c8      	b.n	800790e <pow+0x56>
 800797c:	2600      	movs	r6, #0
 800797e:	4f01      	ldr	r7, [pc, #4]	; (8007984 <pow+0xcc>)
 8007980:	e7e5      	b.n	800794e <pow+0x96>
 8007982:	bf00      	nop
 8007984:	3ff00000 	.word	0x3ff00000

08007988 <__ieee754_pow>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	b093      	sub	sp, #76	; 0x4c
 800798e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007992:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8007996:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800799a:	4689      	mov	r9, r1
 800799c:	ea56 0102 	orrs.w	r1, r6, r2
 80079a0:	4680      	mov	r8, r0
 80079a2:	d111      	bne.n	80079c8 <__ieee754_pow+0x40>
 80079a4:	1803      	adds	r3, r0, r0
 80079a6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80079aa:	4152      	adcs	r2, r2
 80079ac:	4299      	cmp	r1, r3
 80079ae:	4b82      	ldr	r3, [pc, #520]	; (8007bb8 <__ieee754_pow+0x230>)
 80079b0:	4193      	sbcs	r3, r2
 80079b2:	f080 84b9 	bcs.w	8008328 <__ieee754_pow+0x9a0>
 80079b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f8 fbcd 	bl	800015c <__adddf3>
 80079c2:	4683      	mov	fp, r0
 80079c4:	468c      	mov	ip, r1
 80079c6:	e06f      	b.n	8007aa8 <__ieee754_pow+0x120>
 80079c8:	4b7c      	ldr	r3, [pc, #496]	; (8007bbc <__ieee754_pow+0x234>)
 80079ca:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80079ce:	429c      	cmp	r4, r3
 80079d0:	464d      	mov	r5, r9
 80079d2:	4682      	mov	sl, r0
 80079d4:	dc06      	bgt.n	80079e4 <__ieee754_pow+0x5c>
 80079d6:	d101      	bne.n	80079dc <__ieee754_pow+0x54>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d1ec      	bne.n	80079b6 <__ieee754_pow+0x2e>
 80079dc:	429e      	cmp	r6, r3
 80079de:	dc01      	bgt.n	80079e4 <__ieee754_pow+0x5c>
 80079e0:	d10f      	bne.n	8007a02 <__ieee754_pow+0x7a>
 80079e2:	b172      	cbz	r2, 8007a02 <__ieee754_pow+0x7a>
 80079e4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80079e8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80079ec:	ea55 050a 	orrs.w	r5, r5, sl
 80079f0:	d1e1      	bne.n	80079b6 <__ieee754_pow+0x2e>
 80079f2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80079f6:	18db      	adds	r3, r3, r3
 80079f8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80079fc:	4152      	adcs	r2, r2
 80079fe:	429d      	cmp	r5, r3
 8007a00:	e7d5      	b.n	80079ae <__ieee754_pow+0x26>
 8007a02:	2d00      	cmp	r5, #0
 8007a04:	da39      	bge.n	8007a7a <__ieee754_pow+0xf2>
 8007a06:	4b6e      	ldr	r3, [pc, #440]	; (8007bc0 <__ieee754_pow+0x238>)
 8007a08:	429e      	cmp	r6, r3
 8007a0a:	dc52      	bgt.n	8007ab2 <__ieee754_pow+0x12a>
 8007a0c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007a10:	429e      	cmp	r6, r3
 8007a12:	f340 849c 	ble.w	800834e <__ieee754_pow+0x9c6>
 8007a16:	1533      	asrs	r3, r6, #20
 8007a18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007a1c:	2b14      	cmp	r3, #20
 8007a1e:	dd0f      	ble.n	8007a40 <__ieee754_pow+0xb8>
 8007a20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007a24:	fa22 f103 	lsr.w	r1, r2, r3
 8007a28:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	f040 848e 	bne.w	800834e <__ieee754_pow+0x9c6>
 8007a32:	f001 0101 	and.w	r1, r1, #1
 8007a36:	f1c1 0302 	rsb	r3, r1, #2
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	b182      	cbz	r2, 8007a60 <__ieee754_pow+0xd8>
 8007a3e:	e05d      	b.n	8007afc <__ieee754_pow+0x174>
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d159      	bne.n	8007af8 <__ieee754_pow+0x170>
 8007a44:	f1c3 0314 	rsb	r3, r3, #20
 8007a48:	fa46 f103 	asr.w	r1, r6, r3
 8007a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a50:	42b3      	cmp	r3, r6
 8007a52:	f040 8479 	bne.w	8008348 <__ieee754_pow+0x9c0>
 8007a56:	f001 0101 	and.w	r1, r1, #1
 8007a5a:	f1c1 0302 	rsb	r3, r1, #2
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	4b58      	ldr	r3, [pc, #352]	; (8007bc4 <__ieee754_pow+0x23c>)
 8007a62:	429e      	cmp	r6, r3
 8007a64:	d132      	bne.n	8007acc <__ieee754_pow+0x144>
 8007a66:	2f00      	cmp	r7, #0
 8007a68:	f280 846a 	bge.w	8008340 <__ieee754_pow+0x9b8>
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	464b      	mov	r3, r9
 8007a70:	2000      	movs	r0, #0
 8007a72:	4954      	ldr	r1, [pc, #336]	; (8007bc4 <__ieee754_pow+0x23c>)
 8007a74:	f7f8 fe52 	bl	800071c <__aeabi_ddiv>
 8007a78:	e7a3      	b.n	80079c2 <__ieee754_pow+0x3a>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	2a00      	cmp	r2, #0
 8007a80:	d13c      	bne.n	8007afc <__ieee754_pow+0x174>
 8007a82:	4b4e      	ldr	r3, [pc, #312]	; (8007bbc <__ieee754_pow+0x234>)
 8007a84:	429e      	cmp	r6, r3
 8007a86:	d1eb      	bne.n	8007a60 <__ieee754_pow+0xd8>
 8007a88:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007a8c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007a90:	ea53 030a 	orrs.w	r3, r3, sl
 8007a94:	f000 8448 	beq.w	8008328 <__ieee754_pow+0x9a0>
 8007a98:	4b4b      	ldr	r3, [pc, #300]	; (8007bc8 <__ieee754_pow+0x240>)
 8007a9a:	429c      	cmp	r4, r3
 8007a9c:	dd0b      	ble.n	8007ab6 <__ieee754_pow+0x12e>
 8007a9e:	2f00      	cmp	r7, #0
 8007aa0:	f2c0 8448 	blt.w	8008334 <__ieee754_pow+0x9ac>
 8007aa4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007aa8:	4658      	mov	r0, fp
 8007aaa:	4661      	mov	r1, ip
 8007aac:	b013      	add	sp, #76	; 0x4c
 8007aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e7e2      	b.n	8007a7c <__ieee754_pow+0xf4>
 8007ab6:	2f00      	cmp	r7, #0
 8007ab8:	f04f 0b00 	mov.w	fp, #0
 8007abc:	f04f 0c00 	mov.w	ip, #0
 8007ac0:	daf2      	bge.n	8007aa8 <__ieee754_pow+0x120>
 8007ac2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007ac6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007aca:	e7ed      	b.n	8007aa8 <__ieee754_pow+0x120>
 8007acc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007ad0:	d106      	bne.n	8007ae0 <__ieee754_pow+0x158>
 8007ad2:	4642      	mov	r2, r8
 8007ad4:	464b      	mov	r3, r9
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4649      	mov	r1, r9
 8007ada:	f7f8 fcf5 	bl	80004c8 <__aeabi_dmul>
 8007ade:	e770      	b.n	80079c2 <__ieee754_pow+0x3a>
 8007ae0:	4b3a      	ldr	r3, [pc, #232]	; (8007bcc <__ieee754_pow+0x244>)
 8007ae2:	429f      	cmp	r7, r3
 8007ae4:	d10a      	bne.n	8007afc <__ieee754_pow+0x174>
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	db08      	blt.n	8007afc <__ieee754_pow+0x174>
 8007aea:	4640      	mov	r0, r8
 8007aec:	4649      	mov	r1, r9
 8007aee:	b013      	add	sp, #76	; 0x4c
 8007af0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	f000 bc5e 	b.w	80083b4 <__ieee754_sqrt>
 8007af8:	2300      	movs	r3, #0
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4640      	mov	r0, r8
 8007afe:	4649      	mov	r1, r9
 8007b00:	f000 fd34 	bl	800856c <fabs>
 8007b04:	4683      	mov	fp, r0
 8007b06:	468c      	mov	ip, r1
 8007b08:	f1ba 0f00 	cmp.w	sl, #0
 8007b0c:	d128      	bne.n	8007b60 <__ieee754_pow+0x1d8>
 8007b0e:	b124      	cbz	r4, 8007b1a <__ieee754_pow+0x192>
 8007b10:	4b2c      	ldr	r3, [pc, #176]	; (8007bc4 <__ieee754_pow+0x23c>)
 8007b12:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d122      	bne.n	8007b60 <__ieee754_pow+0x1d8>
 8007b1a:	2f00      	cmp	r7, #0
 8007b1c:	da07      	bge.n	8007b2e <__ieee754_pow+0x1a6>
 8007b1e:	465a      	mov	r2, fp
 8007b20:	4663      	mov	r3, ip
 8007b22:	2000      	movs	r0, #0
 8007b24:	4927      	ldr	r1, [pc, #156]	; (8007bc4 <__ieee754_pow+0x23c>)
 8007b26:	f7f8 fdf9 	bl	800071c <__aeabi_ddiv>
 8007b2a:	4683      	mov	fp, r0
 8007b2c:	468c      	mov	ip, r1
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	daba      	bge.n	8007aa8 <__ieee754_pow+0x120>
 8007b32:	9b00      	ldr	r3, [sp, #0]
 8007b34:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007b38:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b3c:	4323      	orrs	r3, r4
 8007b3e:	d108      	bne.n	8007b52 <__ieee754_pow+0x1ca>
 8007b40:	465a      	mov	r2, fp
 8007b42:	4663      	mov	r3, ip
 8007b44:	4658      	mov	r0, fp
 8007b46:	4661      	mov	r1, ip
 8007b48:	f7f8 fb06 	bl	8000158 <__aeabi_dsub>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	e790      	b.n	8007a74 <__ieee754_pow+0xec>
 8007b52:	9b00      	ldr	r3, [sp, #0]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d1a7      	bne.n	8007aa8 <__ieee754_pow+0x120>
 8007b58:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007b5c:	469c      	mov	ip, r3
 8007b5e:	e7a3      	b.n	8007aa8 <__ieee754_pow+0x120>
 8007b60:	0feb      	lsrs	r3, r5, #31
 8007b62:	3b01      	subs	r3, #1
 8007b64:	930c      	str	r3, [sp, #48]	; 0x30
 8007b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b68:	9b00      	ldr	r3, [sp, #0]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	d104      	bne.n	8007b78 <__ieee754_pow+0x1f0>
 8007b6e:	4642      	mov	r2, r8
 8007b70:	464b      	mov	r3, r9
 8007b72:	4640      	mov	r0, r8
 8007b74:	4649      	mov	r1, r9
 8007b76:	e7e7      	b.n	8007b48 <__ieee754_pow+0x1c0>
 8007b78:	4b15      	ldr	r3, [pc, #84]	; (8007bd0 <__ieee754_pow+0x248>)
 8007b7a:	429e      	cmp	r6, r3
 8007b7c:	f340 80f6 	ble.w	8007d6c <__ieee754_pow+0x3e4>
 8007b80:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007b84:	429e      	cmp	r6, r3
 8007b86:	4b10      	ldr	r3, [pc, #64]	; (8007bc8 <__ieee754_pow+0x240>)
 8007b88:	dd09      	ble.n	8007b9e <__ieee754_pow+0x216>
 8007b8a:	429c      	cmp	r4, r3
 8007b8c:	dc0c      	bgt.n	8007ba8 <__ieee754_pow+0x220>
 8007b8e:	2f00      	cmp	r7, #0
 8007b90:	da0c      	bge.n	8007bac <__ieee754_pow+0x224>
 8007b92:	2000      	movs	r0, #0
 8007b94:	b013      	add	sp, #76	; 0x4c
 8007b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9a:	f000 bce2 	b.w	8008562 <__math_oflow>
 8007b9e:	429c      	cmp	r4, r3
 8007ba0:	dbf5      	blt.n	8007b8e <__ieee754_pow+0x206>
 8007ba2:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <__ieee754_pow+0x23c>)
 8007ba4:	429c      	cmp	r4, r3
 8007ba6:	dd15      	ble.n	8007bd4 <__ieee754_pow+0x24c>
 8007ba8:	2f00      	cmp	r7, #0
 8007baa:	dcf2      	bgt.n	8007b92 <__ieee754_pow+0x20a>
 8007bac:	2000      	movs	r0, #0
 8007bae:	b013      	add	sp, #76	; 0x4c
 8007bb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	f000 bcd0 	b.w	8008558 <__math_uflow>
 8007bb8:	fff00000 	.word	0xfff00000
 8007bbc:	7ff00000 	.word	0x7ff00000
 8007bc0:	433fffff 	.word	0x433fffff
 8007bc4:	3ff00000 	.word	0x3ff00000
 8007bc8:	3fefffff 	.word	0x3fefffff
 8007bcc:	3fe00000 	.word	0x3fe00000
 8007bd0:	41e00000 	.word	0x41e00000
 8007bd4:	4661      	mov	r1, ip
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4658      	mov	r0, fp
 8007bda:	4b5f      	ldr	r3, [pc, #380]	; (8007d58 <__ieee754_pow+0x3d0>)
 8007bdc:	f7f8 fabc 	bl	8000158 <__aeabi_dsub>
 8007be0:	a355      	add	r3, pc, #340	; (adr r3, 8007d38 <__ieee754_pow+0x3b0>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	4604      	mov	r4, r0
 8007be8:	460d      	mov	r5, r1
 8007bea:	f7f8 fc6d 	bl	80004c8 <__aeabi_dmul>
 8007bee:	a354      	add	r3, pc, #336	; (adr r3, 8007d40 <__ieee754_pow+0x3b8>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	460f      	mov	r7, r1
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	f7f8 fc64 	bl	80004c8 <__aeabi_dmul>
 8007c00:	2200      	movs	r2, #0
 8007c02:	4682      	mov	sl, r0
 8007c04:	468b      	mov	fp, r1
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4b54      	ldr	r3, [pc, #336]	; (8007d5c <__ieee754_pow+0x3d4>)
 8007c0c:	f7f8 fc5c 	bl	80004c8 <__aeabi_dmul>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	a14c      	add	r1, pc, #304	; (adr r1, 8007d48 <__ieee754_pow+0x3c0>)
 8007c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c1a:	f7f8 fa9d 	bl	8000158 <__aeabi_dsub>
 8007c1e:	4622      	mov	r2, r4
 8007c20:	462b      	mov	r3, r5
 8007c22:	f7f8 fc51 	bl	80004c8 <__aeabi_dmul>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	494c      	ldr	r1, [pc, #304]	; (8007d60 <__ieee754_pow+0x3d8>)
 8007c2e:	f7f8 fa93 	bl	8000158 <__aeabi_dsub>
 8007c32:	4622      	mov	r2, r4
 8007c34:	462b      	mov	r3, r5
 8007c36:	4680      	mov	r8, r0
 8007c38:	4689      	mov	r9, r1
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f7f8 fc43 	bl	80004c8 <__aeabi_dmul>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4640      	mov	r0, r8
 8007c48:	4649      	mov	r1, r9
 8007c4a:	f7f8 fc3d 	bl	80004c8 <__aeabi_dmul>
 8007c4e:	a340      	add	r3, pc, #256	; (adr r3, 8007d50 <__ieee754_pow+0x3c8>)
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f7f8 fc38 	bl	80004c8 <__aeabi_dmul>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	4659      	mov	r1, fp
 8007c60:	f7f8 fa7a 	bl	8000158 <__aeabi_dsub>
 8007c64:	f04f 0a00 	mov.w	sl, #0
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f8 fa72 	bl	800015c <__adddf3>
 8007c78:	4632      	mov	r2, r6
 8007c7a:	463b      	mov	r3, r7
 8007c7c:	4650      	mov	r0, sl
 8007c7e:	468b      	mov	fp, r1
 8007c80:	f7f8 fa6a 	bl	8000158 <__aeabi_dsub>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	f7f8 fa64 	bl	8000158 <__aeabi_dsub>
 8007c90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c94:	9b00      	ldr	r3, [sp, #0]
 8007c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	f04f 0600 	mov.w	r6, #0
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	bf0c      	ite	eq
 8007ca6:	4b2f      	ldreq	r3, [pc, #188]	; (8007d64 <__ieee754_pow+0x3dc>)
 8007ca8:	4b2b      	ldrne	r3, [pc, #172]	; (8007d58 <__ieee754_pow+0x3d0>)
 8007caa:	4604      	mov	r4, r0
 8007cac:	460d      	mov	r5, r1
 8007cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cb2:	e9cd 2300 	strd	r2, r3, [sp]
 8007cb6:	4632      	mov	r2, r6
 8007cb8:	463b      	mov	r3, r7
 8007cba:	f7f8 fa4d 	bl	8000158 <__aeabi_dsub>
 8007cbe:	4652      	mov	r2, sl
 8007cc0:	465b      	mov	r3, fp
 8007cc2:	f7f8 fc01 	bl	80004c8 <__aeabi_dmul>
 8007cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cca:	4680      	mov	r8, r0
 8007ccc:	4689      	mov	r9, r1
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 fbf9 	bl	80004c8 <__aeabi_dmul>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4640      	mov	r0, r8
 8007cdc:	4649      	mov	r1, r9
 8007cde:	f7f8 fa3d 	bl	800015c <__adddf3>
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	4689      	mov	r9, r1
 8007cea:	4650      	mov	r0, sl
 8007cec:	4659      	mov	r1, fp
 8007cee:	f7f8 fbeb 	bl	80004c8 <__aeabi_dmul>
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	460d      	mov	r5, r1
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007d02:	f7f8 fa2b 	bl	800015c <__adddf3>
 8007d06:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <__ieee754_pow+0x3e0>)
 8007d08:	4682      	mov	sl, r0
 8007d0a:	4299      	cmp	r1, r3
 8007d0c:	460f      	mov	r7, r1
 8007d0e:	460e      	mov	r6, r1
 8007d10:	f340 82e5 	ble.w	80082de <__ieee754_pow+0x956>
 8007d14:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007d18:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007d1c:	4303      	orrs	r3, r0
 8007d1e:	f000 81df 	beq.w	80080e0 <__ieee754_pow+0x758>
 8007d22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d26:	2200      	movs	r2, #0
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f7f8 fe3f 	bl	80009ac <__aeabi_dcmplt>
 8007d2e:	3800      	subs	r0, #0
 8007d30:	bf18      	it	ne
 8007d32:	2001      	movne	r0, #1
 8007d34:	e72e      	b.n	8007b94 <__ieee754_pow+0x20c>
 8007d36:	bf00      	nop
 8007d38:	60000000 	.word	0x60000000
 8007d3c:	3ff71547 	.word	0x3ff71547
 8007d40:	f85ddf44 	.word	0xf85ddf44
 8007d44:	3e54ae0b 	.word	0x3e54ae0b
 8007d48:	55555555 	.word	0x55555555
 8007d4c:	3fd55555 	.word	0x3fd55555
 8007d50:	652b82fe 	.word	0x652b82fe
 8007d54:	3ff71547 	.word	0x3ff71547
 8007d58:	3ff00000 	.word	0x3ff00000
 8007d5c:	3fd00000 	.word	0x3fd00000
 8007d60:	3fe00000 	.word	0x3fe00000
 8007d64:	bff00000 	.word	0xbff00000
 8007d68:	408fffff 	.word	0x408fffff
 8007d6c:	4bd2      	ldr	r3, [pc, #840]	; (80080b8 <__ieee754_pow+0x730>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	402b      	ands	r3, r5
 8007d72:	b943      	cbnz	r3, 8007d86 <__ieee754_pow+0x3fe>
 8007d74:	4658      	mov	r0, fp
 8007d76:	4661      	mov	r1, ip
 8007d78:	4bd0      	ldr	r3, [pc, #832]	; (80080bc <__ieee754_pow+0x734>)
 8007d7a:	f7f8 fba5 	bl	80004c8 <__aeabi_dmul>
 8007d7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007d82:	4683      	mov	fp, r0
 8007d84:	460c      	mov	r4, r1
 8007d86:	1523      	asrs	r3, r4, #20
 8007d88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d8c:	4413      	add	r3, r2
 8007d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d90:	4bcb      	ldr	r3, [pc, #812]	; (80080c0 <__ieee754_pow+0x738>)
 8007d92:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007d96:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007da0:	dd08      	ble.n	8007db4 <__ieee754_pow+0x42c>
 8007da2:	4bc8      	ldr	r3, [pc, #800]	; (80080c4 <__ieee754_pow+0x73c>)
 8007da4:	429c      	cmp	r4, r3
 8007da6:	f340 8199 	ble.w	80080dc <__ieee754_pow+0x754>
 8007daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dac:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007db0:	3301      	adds	r3, #1
 8007db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007db4:	2600      	movs	r6, #0
 8007db6:	00f3      	lsls	r3, r6, #3
 8007db8:	930d      	str	r3, [sp, #52]	; 0x34
 8007dba:	4bc3      	ldr	r3, [pc, #780]	; (80080c8 <__ieee754_pow+0x740>)
 8007dbc:	4658      	mov	r0, fp
 8007dbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007dc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	461a      	mov	r2, r3
 8007dca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007dce:	4623      	mov	r3, r4
 8007dd0:	f7f8 f9c2 	bl	8000158 <__aeabi_dsub>
 8007dd4:	46da      	mov	sl, fp
 8007dd6:	462b      	mov	r3, r5
 8007dd8:	4652      	mov	r2, sl
 8007dda:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007dde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007de2:	f7f8 f9bb 	bl	800015c <__adddf3>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	2000      	movs	r0, #0
 8007dec:	49b7      	ldr	r1, [pc, #732]	; (80080cc <__ieee754_pow+0x744>)
 8007dee:	f7f8 fc95 	bl	800071c <__aeabi_ddiv>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007dfa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007dfe:	f7f8 fb63 	bl	80004c8 <__aeabi_dmul>
 8007e02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e06:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007e0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2200      	movs	r2, #0
 8007e12:	46ab      	mov	fp, r5
 8007e14:	106d      	asrs	r5, r5, #1
 8007e16:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007e1a:	9304      	str	r3, [sp, #16]
 8007e1c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007e20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007e24:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007e28:	4640      	mov	r0, r8
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	461d      	mov	r5, r3
 8007e30:	f7f8 fb4a 	bl	80004c8 <__aeabi_dmul>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e3c:	f7f8 f98c 	bl	8000158 <__aeabi_dsub>
 8007e40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	4620      	mov	r0, r4
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	f7f8 f984 	bl	8000158 <__aeabi_dsub>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4650      	mov	r0, sl
 8007e56:	4659      	mov	r1, fp
 8007e58:	f7f8 f97e 	bl	8000158 <__aeabi_dsub>
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	464b      	mov	r3, r9
 8007e60:	f7f8 fb32 	bl	80004c8 <__aeabi_dmul>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f7f8 f974 	bl	8000158 <__aeabi_dsub>
 8007e70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e74:	f7f8 fb28 	bl	80004c8 <__aeabi_dmul>
 8007e78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e80:	4610      	mov	r0, r2
 8007e82:	4619      	mov	r1, r3
 8007e84:	f7f8 fb20 	bl	80004c8 <__aeabi_dmul>
 8007e88:	a379      	add	r3, pc, #484	; (adr r3, 8008070 <__ieee754_pow+0x6e8>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	4604      	mov	r4, r0
 8007e90:	460d      	mov	r5, r1
 8007e92:	f7f8 fb19 	bl	80004c8 <__aeabi_dmul>
 8007e96:	a378      	add	r3, pc, #480	; (adr r3, 8008078 <__ieee754_pow+0x6f0>)
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f7f8 f95e 	bl	800015c <__adddf3>
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	462b      	mov	r3, r5
 8007ea4:	f7f8 fb10 	bl	80004c8 <__aeabi_dmul>
 8007ea8:	a375      	add	r3, pc, #468	; (adr r3, 8008080 <__ieee754_pow+0x6f8>)
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f7f8 f955 	bl	800015c <__adddf3>
 8007eb2:	4622      	mov	r2, r4
 8007eb4:	462b      	mov	r3, r5
 8007eb6:	f7f8 fb07 	bl	80004c8 <__aeabi_dmul>
 8007eba:	a373      	add	r3, pc, #460	; (adr r3, 8008088 <__ieee754_pow+0x700>)
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f7f8 f94c 	bl	800015c <__adddf3>
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	462b      	mov	r3, r5
 8007ec8:	f7f8 fafe 	bl	80004c8 <__aeabi_dmul>
 8007ecc:	a370      	add	r3, pc, #448	; (adr r3, 8008090 <__ieee754_pow+0x708>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	f7f8 f943 	bl	800015c <__adddf3>
 8007ed6:	4622      	mov	r2, r4
 8007ed8:	462b      	mov	r3, r5
 8007eda:	f7f8 faf5 	bl	80004c8 <__aeabi_dmul>
 8007ede:	a36e      	add	r3, pc, #440	; (adr r3, 8008098 <__ieee754_pow+0x710>)
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f7f8 f93a 	bl	800015c <__adddf3>
 8007ee8:	4622      	mov	r2, r4
 8007eea:	4606      	mov	r6, r0
 8007eec:	460f      	mov	r7, r1
 8007eee:	462b      	mov	r3, r5
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f7f8 fae8 	bl	80004c8 <__aeabi_dmul>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4630      	mov	r0, r6
 8007efe:	4639      	mov	r1, r7
 8007f00:	f7f8 fae2 	bl	80004c8 <__aeabi_dmul>
 8007f04:	4604      	mov	r4, r0
 8007f06:	460d      	mov	r5, r1
 8007f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f0c:	4642      	mov	r2, r8
 8007f0e:	464b      	mov	r3, r9
 8007f10:	f7f8 f924 	bl	800015c <__adddf3>
 8007f14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f18:	f7f8 fad6 	bl	80004c8 <__aeabi_dmul>
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	462b      	mov	r3, r5
 8007f20:	f7f8 f91c 	bl	800015c <__adddf3>
 8007f24:	4642      	mov	r2, r8
 8007f26:	4606      	mov	r6, r0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	464b      	mov	r3, r9
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4649      	mov	r1, r9
 8007f30:	f7f8 faca 	bl	80004c8 <__aeabi_dmul>
 8007f34:	2200      	movs	r2, #0
 8007f36:	4b66      	ldr	r3, [pc, #408]	; (80080d0 <__ieee754_pow+0x748>)
 8007f38:	4682      	mov	sl, r0
 8007f3a:	468b      	mov	fp, r1
 8007f3c:	f7f8 f90e 	bl	800015c <__adddf3>
 8007f40:	4632      	mov	r2, r6
 8007f42:	463b      	mov	r3, r7
 8007f44:	f7f8 f90a 	bl	800015c <__adddf3>
 8007f48:	2400      	movs	r4, #0
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	4622      	mov	r2, r4
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4640      	mov	r0, r8
 8007f52:	4649      	mov	r1, r9
 8007f54:	f7f8 fab8 	bl	80004c8 <__aeabi_dmul>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4680      	mov	r8, r0
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	4b5b      	ldr	r3, [pc, #364]	; (80080d0 <__ieee754_pow+0x748>)
 8007f64:	f7f8 f8f8 	bl	8000158 <__aeabi_dsub>
 8007f68:	4652      	mov	r2, sl
 8007f6a:	465b      	mov	r3, fp
 8007f6c:	f7f8 f8f4 	bl	8000158 <__aeabi_dsub>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 f8ee 	bl	8000158 <__aeabi_dsub>
 8007f7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f80:	f7f8 faa2 	bl	80004c8 <__aeabi_dmul>
 8007f84:	4622      	mov	r2, r4
 8007f86:	4606      	mov	r6, r0
 8007f88:	460f      	mov	r7, r1
 8007f8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f8e:	462b      	mov	r3, r5
 8007f90:	f7f8 fa9a 	bl	80004c8 <__aeabi_dmul>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	4630      	mov	r0, r6
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	f7f8 f8de 	bl	800015c <__adddf3>
 8007fa0:	2400      	movs	r4, #0
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460f      	mov	r7, r1
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	f7f8 f8d5 	bl	800015c <__adddf3>
 8007fb2:	a33b      	add	r3, pc, #236	; (adr r3, 80080a0 <__ieee754_pow+0x718>)
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	4620      	mov	r0, r4
 8007fba:	460d      	mov	r5, r1
 8007fbc:	f7f8 fa84 	bl	80004c8 <__aeabi_dmul>
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7f8 f8c4 	bl	8000158 <__aeabi_dsub>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	f7f8 f8be 	bl	8000158 <__aeabi_dsub>
 8007fdc:	a332      	add	r3, pc, #200	; (adr r3, 80080a8 <__ieee754_pow+0x720>)
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f7f8 fa71 	bl	80004c8 <__aeabi_dmul>
 8007fe6:	a332      	add	r3, pc, #200	; (adr r3, 80080b0 <__ieee754_pow+0x728>)
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	4606      	mov	r6, r0
 8007fee:	460f      	mov	r7, r1
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	f7f8 fa68 	bl	80004c8 <__aeabi_dmul>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	4639      	mov	r1, r7
 8008000:	f7f8 f8ac 	bl	800015c <__adddf3>
 8008004:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008006:	4b33      	ldr	r3, [pc, #204]	; (80080d4 <__ieee754_pow+0x74c>)
 8008008:	f04f 0a00 	mov.w	sl, #0
 800800c:	4413      	add	r3, r2
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	f7f8 f8a3 	bl	800015c <__adddf3>
 8008016:	4680      	mov	r8, r0
 8008018:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800801a:	4689      	mov	r9, r1
 800801c:	f7f8 f9ea 	bl	80003f4 <__aeabi_i2d>
 8008020:	4604      	mov	r4, r0
 8008022:	460d      	mov	r5, r1
 8008024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008026:	4b2c      	ldr	r3, [pc, #176]	; (80080d8 <__ieee754_pow+0x750>)
 8008028:	4413      	add	r3, r2
 800802a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800802e:	4642      	mov	r2, r8
 8008030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008034:	464b      	mov	r3, r9
 8008036:	f7f8 f891 	bl	800015c <__adddf3>
 800803a:	4632      	mov	r2, r6
 800803c:	463b      	mov	r3, r7
 800803e:	f7f8 f88d 	bl	800015c <__adddf3>
 8008042:	4622      	mov	r2, r4
 8008044:	462b      	mov	r3, r5
 8008046:	f7f8 f889 	bl	800015c <__adddf3>
 800804a:	4622      	mov	r2, r4
 800804c:	462b      	mov	r3, r5
 800804e:	4650      	mov	r0, sl
 8008050:	468b      	mov	fp, r1
 8008052:	f7f8 f881 	bl	8000158 <__aeabi_dsub>
 8008056:	4632      	mov	r2, r6
 8008058:	463b      	mov	r3, r7
 800805a:	f7f8 f87d 	bl	8000158 <__aeabi_dsub>
 800805e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008062:	f7f8 f879 	bl	8000158 <__aeabi_dsub>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	e60d      	b.n	8007c8c <__ieee754_pow+0x304>
 8008070:	4a454eef 	.word	0x4a454eef
 8008074:	3fca7e28 	.word	0x3fca7e28
 8008078:	93c9db65 	.word	0x93c9db65
 800807c:	3fcd864a 	.word	0x3fcd864a
 8008080:	a91d4101 	.word	0xa91d4101
 8008084:	3fd17460 	.word	0x3fd17460
 8008088:	518f264d 	.word	0x518f264d
 800808c:	3fd55555 	.word	0x3fd55555
 8008090:	db6fabff 	.word	0xdb6fabff
 8008094:	3fdb6db6 	.word	0x3fdb6db6
 8008098:	33333303 	.word	0x33333303
 800809c:	3fe33333 	.word	0x3fe33333
 80080a0:	e0000000 	.word	0xe0000000
 80080a4:	3feec709 	.word	0x3feec709
 80080a8:	dc3a03fd 	.word	0xdc3a03fd
 80080ac:	3feec709 	.word	0x3feec709
 80080b0:	145b01f5 	.word	0x145b01f5
 80080b4:	be3e2fe0 	.word	0xbe3e2fe0
 80080b8:	7ff00000 	.word	0x7ff00000
 80080bc:	43400000 	.word	0x43400000
 80080c0:	0003988e 	.word	0x0003988e
 80080c4:	000bb679 	.word	0x000bb679
 80080c8:	08008720 	.word	0x08008720
 80080cc:	3ff00000 	.word	0x3ff00000
 80080d0:	40080000 	.word	0x40080000
 80080d4:	08008740 	.word	0x08008740
 80080d8:	08008730 	.word	0x08008730
 80080dc:	2601      	movs	r6, #1
 80080de:	e66a      	b.n	8007db6 <__ieee754_pow+0x42e>
 80080e0:	a39d      	add	r3, pc, #628	; (adr r3, 8008358 <__ieee754_pow+0x9d0>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	f7f8 f837 	bl	800015c <__adddf3>
 80080ee:	4622      	mov	r2, r4
 80080f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080f4:	462b      	mov	r3, r5
 80080f6:	4650      	mov	r0, sl
 80080f8:	4639      	mov	r1, r7
 80080fa:	f7f8 f82d 	bl	8000158 <__aeabi_dsub>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008106:	f7f8 fc6f 	bl	80009e8 <__aeabi_dcmpgt>
 800810a:	2800      	cmp	r0, #0
 800810c:	f47f ae09 	bne.w	8007d22 <__ieee754_pow+0x39a>
 8008110:	4aa3      	ldr	r2, [pc, #652]	; (80083a0 <__ieee754_pow+0xa18>)
 8008112:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008116:	4293      	cmp	r3, r2
 8008118:	f340 8101 	ble.w	800831e <__ieee754_pow+0x996>
 800811c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008120:	2000      	movs	r0, #0
 8008122:	151b      	asrs	r3, r3, #20
 8008124:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008128:	fa4a f303 	asr.w	r3, sl, r3
 800812c:	4433      	add	r3, r6
 800812e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008132:	4f9c      	ldr	r7, [pc, #624]	; (80083a4 <__ieee754_pow+0xa1c>)
 8008134:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008138:	4117      	asrs	r7, r2
 800813a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800813e:	ea23 0107 	bic.w	r1, r3, r7
 8008142:	f1c2 0214 	rsb	r2, r2, #20
 8008146:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800814a:	460b      	mov	r3, r1
 800814c:	fa4a fa02 	asr.w	sl, sl, r2
 8008150:	2e00      	cmp	r6, #0
 8008152:	4602      	mov	r2, r0
 8008154:	4629      	mov	r1, r5
 8008156:	4620      	mov	r0, r4
 8008158:	bfb8      	it	lt
 800815a:	f1ca 0a00 	rsblt	sl, sl, #0
 800815e:	f7f7 fffb 	bl	8000158 <__aeabi_dsub>
 8008162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800816a:	2400      	movs	r4, #0
 800816c:	4642      	mov	r2, r8
 800816e:	464b      	mov	r3, r9
 8008170:	f7f7 fff4 	bl	800015c <__adddf3>
 8008174:	a37a      	add	r3, pc, #488	; (adr r3, 8008360 <__ieee754_pow+0x9d8>)
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	4620      	mov	r0, r4
 800817c:	460d      	mov	r5, r1
 800817e:	f7f8 f9a3 	bl	80004c8 <__aeabi_dmul>
 8008182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008186:	4606      	mov	r6, r0
 8008188:	460f      	mov	r7, r1
 800818a:	4620      	mov	r0, r4
 800818c:	4629      	mov	r1, r5
 800818e:	f7f7 ffe3 	bl	8000158 <__aeabi_dsub>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4640      	mov	r0, r8
 8008198:	4649      	mov	r1, r9
 800819a:	f7f7 ffdd 	bl	8000158 <__aeabi_dsub>
 800819e:	a372      	add	r3, pc, #456	; (adr r3, 8008368 <__ieee754_pow+0x9e0>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f7f8 f990 	bl	80004c8 <__aeabi_dmul>
 80081a8:	a371      	add	r3, pc, #452	; (adr r3, 8008370 <__ieee754_pow+0x9e8>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	4680      	mov	r8, r0
 80081b0:	4689      	mov	r9, r1
 80081b2:	4620      	mov	r0, r4
 80081b4:	4629      	mov	r1, r5
 80081b6:	f7f8 f987 	bl	80004c8 <__aeabi_dmul>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4640      	mov	r0, r8
 80081c0:	4649      	mov	r1, r9
 80081c2:	f7f7 ffcb 	bl	800015c <__adddf3>
 80081c6:	4604      	mov	r4, r0
 80081c8:	460d      	mov	r5, r1
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4630      	mov	r0, r6
 80081d0:	4639      	mov	r1, r7
 80081d2:	f7f7 ffc3 	bl	800015c <__adddf3>
 80081d6:	4632      	mov	r2, r6
 80081d8:	463b      	mov	r3, r7
 80081da:	4680      	mov	r8, r0
 80081dc:	4689      	mov	r9, r1
 80081de:	f7f7 ffbb 	bl	8000158 <__aeabi_dsub>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7f7 ffb5 	bl	8000158 <__aeabi_dsub>
 80081ee:	4642      	mov	r2, r8
 80081f0:	4606      	mov	r6, r0
 80081f2:	460f      	mov	r7, r1
 80081f4:	464b      	mov	r3, r9
 80081f6:	4640      	mov	r0, r8
 80081f8:	4649      	mov	r1, r9
 80081fa:	f7f8 f965 	bl	80004c8 <__aeabi_dmul>
 80081fe:	a35e      	add	r3, pc, #376	; (adr r3, 8008378 <__ieee754_pow+0x9f0>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	4604      	mov	r4, r0
 8008206:	460d      	mov	r5, r1
 8008208:	f7f8 f95e 	bl	80004c8 <__aeabi_dmul>
 800820c:	a35c      	add	r3, pc, #368	; (adr r3, 8008380 <__ieee754_pow+0x9f8>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f7 ffa1 	bl	8000158 <__aeabi_dsub>
 8008216:	4622      	mov	r2, r4
 8008218:	462b      	mov	r3, r5
 800821a:	f7f8 f955 	bl	80004c8 <__aeabi_dmul>
 800821e:	a35a      	add	r3, pc, #360	; (adr r3, 8008388 <__ieee754_pow+0xa00>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f7 ff9a 	bl	800015c <__adddf3>
 8008228:	4622      	mov	r2, r4
 800822a:	462b      	mov	r3, r5
 800822c:	f7f8 f94c 	bl	80004c8 <__aeabi_dmul>
 8008230:	a357      	add	r3, pc, #348	; (adr r3, 8008390 <__ieee754_pow+0xa08>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	f7f7 ff8f 	bl	8000158 <__aeabi_dsub>
 800823a:	4622      	mov	r2, r4
 800823c:	462b      	mov	r3, r5
 800823e:	f7f8 f943 	bl	80004c8 <__aeabi_dmul>
 8008242:	a355      	add	r3, pc, #340	; (adr r3, 8008398 <__ieee754_pow+0xa10>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f7 ff88 	bl	800015c <__adddf3>
 800824c:	4622      	mov	r2, r4
 800824e:	462b      	mov	r3, r5
 8008250:	f7f8 f93a 	bl	80004c8 <__aeabi_dmul>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4640      	mov	r0, r8
 800825a:	4649      	mov	r1, r9
 800825c:	f7f7 ff7c 	bl	8000158 <__aeabi_dsub>
 8008260:	4604      	mov	r4, r0
 8008262:	460d      	mov	r5, r1
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4640      	mov	r0, r8
 800826a:	4649      	mov	r1, r9
 800826c:	f7f8 f92c 	bl	80004c8 <__aeabi_dmul>
 8008270:	2200      	movs	r2, #0
 8008272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800827a:	4620      	mov	r0, r4
 800827c:	4629      	mov	r1, r5
 800827e:	f7f7 ff6b 	bl	8000158 <__aeabi_dsub>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800828a:	f7f8 fa47 	bl	800071c <__aeabi_ddiv>
 800828e:	4632      	mov	r2, r6
 8008290:	4604      	mov	r4, r0
 8008292:	460d      	mov	r5, r1
 8008294:	463b      	mov	r3, r7
 8008296:	4640      	mov	r0, r8
 8008298:	4649      	mov	r1, r9
 800829a:	f7f8 f915 	bl	80004c8 <__aeabi_dmul>
 800829e:	4632      	mov	r2, r6
 80082a0:	463b      	mov	r3, r7
 80082a2:	f7f7 ff5b 	bl	800015c <__adddf3>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4620      	mov	r0, r4
 80082ac:	4629      	mov	r1, r5
 80082ae:	f7f7 ff53 	bl	8000158 <__aeabi_dsub>
 80082b2:	4642      	mov	r2, r8
 80082b4:	464b      	mov	r3, r9
 80082b6:	f7f7 ff4f 	bl	8000158 <__aeabi_dsub>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	2000      	movs	r0, #0
 80082c0:	4939      	ldr	r1, [pc, #228]	; (80083a8 <__ieee754_pow+0xa20>)
 80082c2:	f7f7 ff49 	bl	8000158 <__aeabi_dsub>
 80082c6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80082ca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80082ce:	da29      	bge.n	8008324 <__ieee754_pow+0x99c>
 80082d0:	4652      	mov	r2, sl
 80082d2:	f000 f955 	bl	8008580 <scalbn>
 80082d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082da:	f7ff bbfe 	b.w	8007ada <__ieee754_pow+0x152>
 80082de:	4b33      	ldr	r3, [pc, #204]	; (80083ac <__ieee754_pow+0xa24>)
 80082e0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80082e4:	429f      	cmp	r7, r3
 80082e6:	f77f af13 	ble.w	8008110 <__ieee754_pow+0x788>
 80082ea:	4b31      	ldr	r3, [pc, #196]	; (80083b0 <__ieee754_pow+0xa28>)
 80082ec:	440b      	add	r3, r1
 80082ee:	4303      	orrs	r3, r0
 80082f0:	d009      	beq.n	8008306 <__ieee754_pow+0x97e>
 80082f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082f6:	2200      	movs	r2, #0
 80082f8:	2300      	movs	r3, #0
 80082fa:	f7f8 fb57 	bl	80009ac <__aeabi_dcmplt>
 80082fe:	3800      	subs	r0, #0
 8008300:	bf18      	it	ne
 8008302:	2001      	movne	r0, #1
 8008304:	e453      	b.n	8007bae <__ieee754_pow+0x226>
 8008306:	4622      	mov	r2, r4
 8008308:	462b      	mov	r3, r5
 800830a:	f7f7 ff25 	bl	8000158 <__aeabi_dsub>
 800830e:	4642      	mov	r2, r8
 8008310:	464b      	mov	r3, r9
 8008312:	f7f8 fb5f 	bl	80009d4 <__aeabi_dcmpge>
 8008316:	2800      	cmp	r0, #0
 8008318:	f43f aefa 	beq.w	8008110 <__ieee754_pow+0x788>
 800831c:	e7e9      	b.n	80082f2 <__ieee754_pow+0x96a>
 800831e:	f04f 0a00 	mov.w	sl, #0
 8008322:	e720      	b.n	8008166 <__ieee754_pow+0x7de>
 8008324:	4621      	mov	r1, r4
 8008326:	e7d6      	b.n	80082d6 <__ieee754_pow+0x94e>
 8008328:	f04f 0b00 	mov.w	fp, #0
 800832c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80083a8 <__ieee754_pow+0xa20>
 8008330:	f7ff bbba 	b.w	8007aa8 <__ieee754_pow+0x120>
 8008334:	f04f 0b00 	mov.w	fp, #0
 8008338:	f04f 0c00 	mov.w	ip, #0
 800833c:	f7ff bbb4 	b.w	8007aa8 <__ieee754_pow+0x120>
 8008340:	4640      	mov	r0, r8
 8008342:	4649      	mov	r1, r9
 8008344:	f7ff bb3d 	b.w	80079c2 <__ieee754_pow+0x3a>
 8008348:	9200      	str	r2, [sp, #0]
 800834a:	f7ff bb89 	b.w	8007a60 <__ieee754_pow+0xd8>
 800834e:	2300      	movs	r3, #0
 8008350:	f7ff bb73 	b.w	8007a3a <__ieee754_pow+0xb2>
 8008354:	f3af 8000 	nop.w
 8008358:	652b82fe 	.word	0x652b82fe
 800835c:	3c971547 	.word	0x3c971547
 8008360:	00000000 	.word	0x00000000
 8008364:	3fe62e43 	.word	0x3fe62e43
 8008368:	fefa39ef 	.word	0xfefa39ef
 800836c:	3fe62e42 	.word	0x3fe62e42
 8008370:	0ca86c39 	.word	0x0ca86c39
 8008374:	be205c61 	.word	0xbe205c61
 8008378:	72bea4d0 	.word	0x72bea4d0
 800837c:	3e663769 	.word	0x3e663769
 8008380:	c5d26bf1 	.word	0xc5d26bf1
 8008384:	3ebbbd41 	.word	0x3ebbbd41
 8008388:	af25de2c 	.word	0xaf25de2c
 800838c:	3f11566a 	.word	0x3f11566a
 8008390:	16bebd93 	.word	0x16bebd93
 8008394:	3f66c16c 	.word	0x3f66c16c
 8008398:	5555553e 	.word	0x5555553e
 800839c:	3fc55555 	.word	0x3fc55555
 80083a0:	3fe00000 	.word	0x3fe00000
 80083a4:	000fffff 	.word	0x000fffff
 80083a8:	3ff00000 	.word	0x3ff00000
 80083ac:	4090cbff 	.word	0x4090cbff
 80083b0:	3f6f3400 	.word	0x3f6f3400

080083b4 <__ieee754_sqrt>:
 80083b4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008510 <__ieee754_sqrt+0x15c>
 80083b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083bc:	ea3c 0c01 	bics.w	ip, ip, r1
 80083c0:	4606      	mov	r6, r0
 80083c2:	460d      	mov	r5, r1
 80083c4:	460c      	mov	r4, r1
 80083c6:	460a      	mov	r2, r1
 80083c8:	4607      	mov	r7, r0
 80083ca:	4603      	mov	r3, r0
 80083cc:	d10f      	bne.n	80083ee <__ieee754_sqrt+0x3a>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	f7f8 f879 	bl	80004c8 <__aeabi_dmul>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4630      	mov	r0, r6
 80083dc:	4629      	mov	r1, r5
 80083de:	f7f7 febd 	bl	800015c <__adddf3>
 80083e2:	4606      	mov	r6, r0
 80083e4:	460d      	mov	r5, r1
 80083e6:	4630      	mov	r0, r6
 80083e8:	4629      	mov	r1, r5
 80083ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ee:	2900      	cmp	r1, #0
 80083f0:	dc0e      	bgt.n	8008410 <__ieee754_sqrt+0x5c>
 80083f2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80083f6:	ea5c 0707 	orrs.w	r7, ip, r7
 80083fa:	d0f4      	beq.n	80083e6 <__ieee754_sqrt+0x32>
 80083fc:	b141      	cbz	r1, 8008410 <__ieee754_sqrt+0x5c>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	f7f7 fea9 	bl	8000158 <__aeabi_dsub>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	f7f8 f987 	bl	800071c <__aeabi_ddiv>
 800840e:	e7e8      	b.n	80083e2 <__ieee754_sqrt+0x2e>
 8008410:	1521      	asrs	r1, r4, #20
 8008412:	d075      	beq.n	8008500 <__ieee754_sqrt+0x14c>
 8008414:	07cc      	lsls	r4, r1, #31
 8008416:	f04f 0400 	mov.w	r4, #0
 800841a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800841e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008422:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008426:	bf5e      	ittt	pl
 8008428:	0fd9      	lsrpl	r1, r3, #31
 800842a:	005b      	lslpl	r3, r3, #1
 800842c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008430:	0fd9      	lsrs	r1, r3, #31
 8008432:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008436:	2516      	movs	r5, #22
 8008438:	4620      	mov	r0, r4
 800843a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800843e:	107f      	asrs	r7, r7, #1
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	1846      	adds	r6, r0, r1
 8008444:	4296      	cmp	r6, r2
 8008446:	bfde      	ittt	le
 8008448:	1b92      	suble	r2, r2, r6
 800844a:	1870      	addle	r0, r6, r1
 800844c:	1864      	addle	r4, r4, r1
 800844e:	0052      	lsls	r2, r2, #1
 8008450:	3d01      	subs	r5, #1
 8008452:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008456:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800845a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800845e:	d1f0      	bne.n	8008442 <__ieee754_sqrt+0x8e>
 8008460:	4629      	mov	r1, r5
 8008462:	f04f 0e20 	mov.w	lr, #32
 8008466:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800846a:	4282      	cmp	r2, r0
 800846c:	eb06 0c05 	add.w	ip, r6, r5
 8008470:	dc02      	bgt.n	8008478 <__ieee754_sqrt+0xc4>
 8008472:	d113      	bne.n	800849c <__ieee754_sqrt+0xe8>
 8008474:	459c      	cmp	ip, r3
 8008476:	d811      	bhi.n	800849c <__ieee754_sqrt+0xe8>
 8008478:	f1bc 0f00 	cmp.w	ip, #0
 800847c:	eb0c 0506 	add.w	r5, ip, r6
 8008480:	da43      	bge.n	800850a <__ieee754_sqrt+0x156>
 8008482:	2d00      	cmp	r5, #0
 8008484:	db41      	blt.n	800850a <__ieee754_sqrt+0x156>
 8008486:	f100 0801 	add.w	r8, r0, #1
 800848a:	1a12      	subs	r2, r2, r0
 800848c:	4640      	mov	r0, r8
 800848e:	459c      	cmp	ip, r3
 8008490:	bf88      	it	hi
 8008492:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008496:	eba3 030c 	sub.w	r3, r3, ip
 800849a:	4431      	add	r1, r6
 800849c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80084a0:	f1be 0e01 	subs.w	lr, lr, #1
 80084a4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80084a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80084b0:	d1db      	bne.n	800846a <__ieee754_sqrt+0xb6>
 80084b2:	4313      	orrs	r3, r2
 80084b4:	d006      	beq.n	80084c4 <__ieee754_sqrt+0x110>
 80084b6:	1c48      	adds	r0, r1, #1
 80084b8:	bf0b      	itete	eq
 80084ba:	4671      	moveq	r1, lr
 80084bc:	3101      	addne	r1, #1
 80084be:	3401      	addeq	r4, #1
 80084c0:	f021 0101 	bicne.w	r1, r1, #1
 80084c4:	1063      	asrs	r3, r4, #1
 80084c6:	0849      	lsrs	r1, r1, #1
 80084c8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80084cc:	07e2      	lsls	r2, r4, #31
 80084ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80084d2:	bf48      	it	mi
 80084d4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80084d8:	460e      	mov	r6, r1
 80084da:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80084de:	e782      	b.n	80083e6 <__ieee754_sqrt+0x32>
 80084e0:	0ada      	lsrs	r2, r3, #11
 80084e2:	3815      	subs	r0, #21
 80084e4:	055b      	lsls	r3, r3, #21
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	d0fa      	beq.n	80084e0 <__ieee754_sqrt+0x12c>
 80084ea:	02d5      	lsls	r5, r2, #11
 80084ec:	d50a      	bpl.n	8008504 <__ieee754_sqrt+0x150>
 80084ee:	f1c1 0420 	rsb	r4, r1, #32
 80084f2:	fa23 f404 	lsr.w	r4, r3, r4
 80084f6:	1e4d      	subs	r5, r1, #1
 80084f8:	408b      	lsls	r3, r1
 80084fa:	4322      	orrs	r2, r4
 80084fc:	1b41      	subs	r1, r0, r5
 80084fe:	e789      	b.n	8008414 <__ieee754_sqrt+0x60>
 8008500:	4608      	mov	r0, r1
 8008502:	e7f0      	b.n	80084e6 <__ieee754_sqrt+0x132>
 8008504:	0052      	lsls	r2, r2, #1
 8008506:	3101      	adds	r1, #1
 8008508:	e7ef      	b.n	80084ea <__ieee754_sqrt+0x136>
 800850a:	4680      	mov	r8, r0
 800850c:	e7bd      	b.n	800848a <__ieee754_sqrt+0xd6>
 800850e:	bf00      	nop
 8008510:	7ff00000 	.word	0x7ff00000

08008514 <with_errno>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	4604      	mov	r4, r0
 8008518:	460d      	mov	r5, r1
 800851a:	4616      	mov	r6, r2
 800851c:	f000 f8ae 	bl	800867c <__errno>
 8008520:	4629      	mov	r1, r5
 8008522:	6006      	str	r6, [r0, #0]
 8008524:	4620      	mov	r0, r4
 8008526:	bd70      	pop	{r4, r5, r6, pc}

08008528 <xflow>:
 8008528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800852a:	4615      	mov	r5, r2
 800852c:	461c      	mov	r4, r3
 800852e:	b180      	cbz	r0, 8008552 <xflow+0x2a>
 8008530:	4610      	mov	r0, r2
 8008532:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008536:	e9cd 0100 	strd	r0, r1, [sp]
 800853a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800853e:	4628      	mov	r0, r5
 8008540:	4621      	mov	r1, r4
 8008542:	f7f7 ffc1 	bl	80004c8 <__aeabi_dmul>
 8008546:	2222      	movs	r2, #34	; 0x22
 8008548:	b003      	add	sp, #12
 800854a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800854e:	f7ff bfe1 	b.w	8008514 <with_errno>
 8008552:	4610      	mov	r0, r2
 8008554:	4619      	mov	r1, r3
 8008556:	e7ee      	b.n	8008536 <xflow+0xe>

08008558 <__math_uflow>:
 8008558:	2200      	movs	r2, #0
 800855a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800855e:	f7ff bfe3 	b.w	8008528 <xflow>

08008562 <__math_oflow>:
 8008562:	2200      	movs	r2, #0
 8008564:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008568:	f7ff bfde 	b.w	8008528 <xflow>

0800856c <fabs>:
 800856c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008570:	4770      	bx	lr

08008572 <finite>:
 8008572:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008576:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800857a:	0fc0      	lsrs	r0, r0, #31
 800857c:	4770      	bx	lr
	...

08008580 <scalbn>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008586:	4604      	mov	r4, r0
 8008588:	460d      	mov	r5, r1
 800858a:	4617      	mov	r7, r2
 800858c:	460b      	mov	r3, r1
 800858e:	b996      	cbnz	r6, 80085b6 <scalbn+0x36>
 8008590:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008594:	4303      	orrs	r3, r0
 8008596:	d039      	beq.n	800860c <scalbn+0x8c>
 8008598:	4b33      	ldr	r3, [pc, #204]	; (8008668 <scalbn+0xe8>)
 800859a:	2200      	movs	r2, #0
 800859c:	f7f7 ff94 	bl	80004c8 <__aeabi_dmul>
 80085a0:	4b32      	ldr	r3, [pc, #200]	; (800866c <scalbn+0xec>)
 80085a2:	4604      	mov	r4, r0
 80085a4:	429f      	cmp	r7, r3
 80085a6:	460d      	mov	r5, r1
 80085a8:	da0f      	bge.n	80085ca <scalbn+0x4a>
 80085aa:	a32b      	add	r3, pc, #172	; (adr r3, 8008658 <scalbn+0xd8>)
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	f7f7 ff8a 	bl	80004c8 <__aeabi_dmul>
 80085b4:	e006      	b.n	80085c4 <scalbn+0x44>
 80085b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80085ba:	4296      	cmp	r6, r2
 80085bc:	d10a      	bne.n	80085d4 <scalbn+0x54>
 80085be:	4602      	mov	r2, r0
 80085c0:	f7f7 fdcc 	bl	800015c <__adddf3>
 80085c4:	4604      	mov	r4, r0
 80085c6:	460d      	mov	r5, r1
 80085c8:	e020      	b.n	800860c <scalbn+0x8c>
 80085ca:	460b      	mov	r3, r1
 80085cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80085d0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80085d4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80085d8:	19b9      	adds	r1, r7, r6
 80085da:	4291      	cmp	r1, r2
 80085dc:	dd0e      	ble.n	80085fc <scalbn+0x7c>
 80085de:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80085e2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80085e6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80085ea:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80085ee:	4820      	ldr	r0, [pc, #128]	; (8008670 <scalbn+0xf0>)
 80085f0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80085f4:	a31a      	add	r3, pc, #104	; (adr r3, 8008660 <scalbn+0xe0>)
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	e7d9      	b.n	80085b0 <scalbn+0x30>
 80085fc:	2900      	cmp	r1, #0
 80085fe:	dd08      	ble.n	8008612 <scalbn+0x92>
 8008600:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008604:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008608:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800860c:	4620      	mov	r0, r4
 800860e:	4629      	mov	r1, r5
 8008610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008612:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008616:	da12      	bge.n	800863e <scalbn+0xbe>
 8008618:	f24c 3350 	movw	r3, #50000	; 0xc350
 800861c:	429f      	cmp	r7, r3
 800861e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008622:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008626:	dcdc      	bgt.n	80085e2 <scalbn+0x62>
 8008628:	a30b      	add	r3, pc, #44	; (adr r3, 8008658 <scalbn+0xd8>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008632:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008636:	480f      	ldr	r0, [pc, #60]	; (8008674 <scalbn+0xf4>)
 8008638:	f041 011f 	orr.w	r1, r1, #31
 800863c:	e7b8      	b.n	80085b0 <scalbn+0x30>
 800863e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008642:	3136      	adds	r1, #54	; 0x36
 8008644:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008648:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800864c:	4620      	mov	r0, r4
 800864e:	4629      	mov	r1, r5
 8008650:	2200      	movs	r2, #0
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <scalbn+0xf8>)
 8008654:	e7ac      	b.n	80085b0 <scalbn+0x30>
 8008656:	bf00      	nop
 8008658:	c2f8f359 	.word	0xc2f8f359
 800865c:	01a56e1f 	.word	0x01a56e1f
 8008660:	8800759c 	.word	0x8800759c
 8008664:	7e37e43c 	.word	0x7e37e43c
 8008668:	43500000 	.word	0x43500000
 800866c:	ffff3cb0 	.word	0xffff3cb0
 8008670:	8800759c 	.word	0x8800759c
 8008674:	c2f8f359 	.word	0xc2f8f359
 8008678:	3c900000 	.word	0x3c900000

0800867c <__errno>:
 800867c:	4b01      	ldr	r3, [pc, #4]	; (8008684 <__errno+0x8>)
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	20000010 	.word	0x20000010

08008688 <__libc_init_array>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	2600      	movs	r6, #0
 800868c:	4d0c      	ldr	r5, [pc, #48]	; (80086c0 <__libc_init_array+0x38>)
 800868e:	4c0d      	ldr	r4, [pc, #52]	; (80086c4 <__libc_init_array+0x3c>)
 8008690:	1b64      	subs	r4, r4, r5
 8008692:	10a4      	asrs	r4, r4, #2
 8008694:	42a6      	cmp	r6, r4
 8008696:	d109      	bne.n	80086ac <__libc_init_array+0x24>
 8008698:	f000 f822 	bl	80086e0 <_init>
 800869c:	2600      	movs	r6, #0
 800869e:	4d0a      	ldr	r5, [pc, #40]	; (80086c8 <__libc_init_array+0x40>)
 80086a0:	4c0a      	ldr	r4, [pc, #40]	; (80086cc <__libc_init_array+0x44>)
 80086a2:	1b64      	subs	r4, r4, r5
 80086a4:	10a4      	asrs	r4, r4, #2
 80086a6:	42a6      	cmp	r6, r4
 80086a8:	d105      	bne.n	80086b6 <__libc_init_array+0x2e>
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b0:	4798      	blx	r3
 80086b2:	3601      	adds	r6, #1
 80086b4:	e7ee      	b.n	8008694 <__libc_init_array+0xc>
 80086b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ba:	4798      	blx	r3
 80086bc:	3601      	adds	r6, #1
 80086be:	e7f2      	b.n	80086a6 <__libc_init_array+0x1e>
 80086c0:	08008758 	.word	0x08008758
 80086c4:	08008758 	.word	0x08008758
 80086c8:	08008758 	.word	0x08008758
 80086cc:	0800875c 	.word	0x0800875c

080086d0 <memset>:
 80086d0:	4603      	mov	r3, r0
 80086d2:	4402      	add	r2, r0
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d100      	bne.n	80086da <memset+0xa>
 80086d8:	4770      	bx	lr
 80086da:	f803 1b01 	strb.w	r1, [r3], #1
 80086de:	e7f9      	b.n	80086d4 <memset+0x4>

080086e0 <_init>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	bf00      	nop
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr

080086ec <_fini>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	bf00      	nop
 80086f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f2:	bc08      	pop	{r3}
 80086f4:	469e      	mov	lr, r3
 80086f6:	4770      	bx	lr
