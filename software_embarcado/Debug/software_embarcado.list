
software_embarcado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008570  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008680  08008680  00018680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d8  080086d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e0  080086e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080086e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000074  0800875c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  0800875c  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5b2  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa0  00000000  00000000  0002c64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002e5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  0002f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ec6  00000000  00000000  0002fd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0e1  00000000  00000000  00046c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829a0  00000000  00000000  00054cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003790  00000000  00000000  000d76e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08008668 	.word	0x08008668

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08008668 	.word	0x08008668

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_ldivmod>:
 8001070:	b97b      	cbnz	r3, 8001092 <__aeabi_ldivmod+0x22>
 8001072:	b972      	cbnz	r2, 8001092 <__aeabi_ldivmod+0x22>
 8001074:	2900      	cmp	r1, #0
 8001076:	bfbe      	ittt	lt
 8001078:	2000      	movlt	r0, #0
 800107a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800107e:	e006      	blt.n	800108e <__aeabi_ldivmod+0x1e>
 8001080:	bf08      	it	eq
 8001082:	2800      	cmpeq	r0, #0
 8001084:	bf1c      	itt	ne
 8001086:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800108a:	f04f 30ff 	movne.w	r0, #4294967295
 800108e:	f000 b9a9 	b.w	80013e4 <__aeabi_idiv0>
 8001092:	f1ad 0c08 	sub.w	ip, sp, #8
 8001096:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800109a:	2900      	cmp	r1, #0
 800109c:	db09      	blt.n	80010b2 <__aeabi_ldivmod+0x42>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db1a      	blt.n	80010d8 <__aeabi_ldivmod+0x68>
 80010a2:	f000 f835 	bl	8001110 <__udivmoddi4>
 80010a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ae:	b004      	add	sp, #16
 80010b0:	4770      	bx	lr
 80010b2:	4240      	negs	r0, r0
 80010b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db1b      	blt.n	80010f4 <__aeabi_ldivmod+0x84>
 80010bc:	f000 f828 	bl	8001110 <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4240      	negs	r0, r0
 80010cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010d0:	4252      	negs	r2, r2
 80010d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010d6:	4770      	bx	lr
 80010d8:	4252      	negs	r2, r2
 80010da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010de:	f000 f817 	bl	8001110 <__udivmoddi4>
 80010e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ea:	b004      	add	sp, #16
 80010ec:	4240      	negs	r0, r0
 80010ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f2:	4770      	bx	lr
 80010f4:	4252      	negs	r2, r2
 80010f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010fa:	f000 f809 	bl	8001110 <__udivmoddi4>
 80010fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001106:	b004      	add	sp, #16
 8001108:	4252      	negs	r2, r2
 800110a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800110e:	4770      	bx	lr

08001110 <__udivmoddi4>:
 8001110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001114:	9e08      	ldr	r6, [sp, #32]
 8001116:	460d      	mov	r5, r1
 8001118:	4604      	mov	r4, r0
 800111a:	4688      	mov	r8, r1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d14d      	bne.n	80011bc <__udivmoddi4+0xac>
 8001120:	428a      	cmp	r2, r1
 8001122:	4694      	mov	ip, r2
 8001124:	d968      	bls.n	80011f8 <__udivmoddi4+0xe8>
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b152      	cbz	r2, 8001142 <__udivmoddi4+0x32>
 800112c:	fa01 f302 	lsl.w	r3, r1, r2
 8001130:	f1c2 0120 	rsb	r1, r2, #32
 8001134:	fa20 f101 	lsr.w	r1, r0, r1
 8001138:	fa0c fc02 	lsl.w	ip, ip, r2
 800113c:	ea41 0803 	orr.w	r8, r1, r3
 8001140:	4094      	lsls	r4, r2
 8001142:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001146:	fbb8 f7f1 	udiv	r7, r8, r1
 800114a:	fa1f fe8c 	uxth.w	lr, ip
 800114e:	fb01 8817 	mls	r8, r1, r7, r8
 8001152:	fb07 f00e 	mul.w	r0, r7, lr
 8001156:	0c23      	lsrs	r3, r4, #16
 8001158:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800115c:	4298      	cmp	r0, r3
 800115e:	d90a      	bls.n	8001176 <__udivmoddi4+0x66>
 8001160:	eb1c 0303 	adds.w	r3, ip, r3
 8001164:	f107 35ff 	add.w	r5, r7, #4294967295
 8001168:	f080 811e 	bcs.w	80013a8 <__udivmoddi4+0x298>
 800116c:	4298      	cmp	r0, r3
 800116e:	f240 811b 	bls.w	80013a8 <__udivmoddi4+0x298>
 8001172:	3f02      	subs	r7, #2
 8001174:	4463      	add	r3, ip
 8001176:	1a1b      	subs	r3, r3, r0
 8001178:	fbb3 f0f1 	udiv	r0, r3, r1
 800117c:	fb01 3310 	mls	r3, r1, r0, r3
 8001180:	fb00 fe0e 	mul.w	lr, r0, lr
 8001184:	b2a4      	uxth	r4, r4
 8001186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800118a:	45a6      	cmp	lr, r4
 800118c:	d90a      	bls.n	80011a4 <__udivmoddi4+0x94>
 800118e:	eb1c 0404 	adds.w	r4, ip, r4
 8001192:	f100 33ff 	add.w	r3, r0, #4294967295
 8001196:	f080 8109 	bcs.w	80013ac <__udivmoddi4+0x29c>
 800119a:	45a6      	cmp	lr, r4
 800119c:	f240 8106 	bls.w	80013ac <__udivmoddi4+0x29c>
 80011a0:	4464      	add	r4, ip
 80011a2:	3802      	subs	r0, #2
 80011a4:	2100      	movs	r1, #0
 80011a6:	eba4 040e 	sub.w	r4, r4, lr
 80011aa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011ae:	b11e      	cbz	r6, 80011b8 <__udivmoddi4+0xa8>
 80011b0:	2300      	movs	r3, #0
 80011b2:	40d4      	lsrs	r4, r2
 80011b4:	e9c6 4300 	strd	r4, r3, [r6]
 80011b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011bc:	428b      	cmp	r3, r1
 80011be:	d908      	bls.n	80011d2 <__udivmoddi4+0xc2>
 80011c0:	2e00      	cmp	r6, #0
 80011c2:	f000 80ee 	beq.w	80013a2 <__udivmoddi4+0x292>
 80011c6:	2100      	movs	r1, #0
 80011c8:	e9c6 0500 	strd	r0, r5, [r6]
 80011cc:	4608      	mov	r0, r1
 80011ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d2:	fab3 f183 	clz	r1, r3
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d14a      	bne.n	8001270 <__udivmoddi4+0x160>
 80011da:	42ab      	cmp	r3, r5
 80011dc:	d302      	bcc.n	80011e4 <__udivmoddi4+0xd4>
 80011de:	4282      	cmp	r2, r0
 80011e0:	f200 80fc 	bhi.w	80013dc <__udivmoddi4+0x2cc>
 80011e4:	1a84      	subs	r4, r0, r2
 80011e6:	eb65 0303 	sbc.w	r3, r5, r3
 80011ea:	2001      	movs	r0, #1
 80011ec:	4698      	mov	r8, r3
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	d0e2      	beq.n	80011b8 <__udivmoddi4+0xa8>
 80011f2:	e9c6 4800 	strd	r4, r8, [r6]
 80011f6:	e7df      	b.n	80011b8 <__udivmoddi4+0xa8>
 80011f8:	b902      	cbnz	r2, 80011fc <__udivmoddi4+0xec>
 80011fa:	deff      	udf	#255	; 0xff
 80011fc:	fab2 f282 	clz	r2, r2
 8001200:	2a00      	cmp	r2, #0
 8001202:	f040 8091 	bne.w	8001328 <__udivmoddi4+0x218>
 8001206:	eba1 000c 	sub.w	r0, r1, ip
 800120a:	2101      	movs	r1, #1
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb0 f3f7 	udiv	r3, r0, r7
 8001218:	fb07 0013 	mls	r0, r7, r3, r0
 800121c:	0c25      	lsrs	r5, r4, #16
 800121e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001222:	fb0e f003 	mul.w	r0, lr, r3
 8001226:	42a8      	cmp	r0, r5
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x12c>
 800122a:	eb1c 0505 	adds.w	r5, ip, r5
 800122e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001232:	d202      	bcs.n	800123a <__udivmoddi4+0x12a>
 8001234:	42a8      	cmp	r0, r5
 8001236:	f200 80ce 	bhi.w	80013d6 <__udivmoddi4+0x2c6>
 800123a:	4643      	mov	r3, r8
 800123c:	1a2d      	subs	r5, r5, r0
 800123e:	fbb5 f0f7 	udiv	r0, r5, r7
 8001242:	fb07 5510 	mls	r5, r7, r0, r5
 8001246:	fb0e fe00 	mul.w	lr, lr, r0
 800124a:	b2a4      	uxth	r4, r4
 800124c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001250:	45a6      	cmp	lr, r4
 8001252:	d908      	bls.n	8001266 <__udivmoddi4+0x156>
 8001254:	eb1c 0404 	adds.w	r4, ip, r4
 8001258:	f100 35ff 	add.w	r5, r0, #4294967295
 800125c:	d202      	bcs.n	8001264 <__udivmoddi4+0x154>
 800125e:	45a6      	cmp	lr, r4
 8001260:	f200 80b6 	bhi.w	80013d0 <__udivmoddi4+0x2c0>
 8001264:	4628      	mov	r0, r5
 8001266:	eba4 040e 	sub.w	r4, r4, lr
 800126a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800126e:	e79e      	b.n	80011ae <__udivmoddi4+0x9e>
 8001270:	f1c1 0720 	rsb	r7, r1, #32
 8001274:	408b      	lsls	r3, r1
 8001276:	fa22 fc07 	lsr.w	ip, r2, r7
 800127a:	ea4c 0c03 	orr.w	ip, ip, r3
 800127e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001282:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001286:	fbba f8f9 	udiv	r8, sl, r9
 800128a:	fa20 f307 	lsr.w	r3, r0, r7
 800128e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001292:	408d      	lsls	r5, r1
 8001294:	fa1f fe8c 	uxth.w	lr, ip
 8001298:	431d      	orrs	r5, r3
 800129a:	fa00 f301 	lsl.w	r3, r0, r1
 800129e:	fb08 f00e 	mul.w	r0, r8, lr
 80012a2:	0c2c      	lsrs	r4, r5, #16
 80012a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012a8:	42a0      	cmp	r0, r4
 80012aa:	fa02 f201 	lsl.w	r2, r2, r1
 80012ae:	d90b      	bls.n	80012c8 <__udivmoddi4+0x1b8>
 80012b0:	eb1c 0404 	adds.w	r4, ip, r4
 80012b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80012b8:	f080 8088 	bcs.w	80013cc <__udivmoddi4+0x2bc>
 80012bc:	42a0      	cmp	r0, r4
 80012be:	f240 8085 	bls.w	80013cc <__udivmoddi4+0x2bc>
 80012c2:	f1a8 0802 	sub.w	r8, r8, #2
 80012c6:	4464      	add	r4, ip
 80012c8:	1a24      	subs	r4, r4, r0
 80012ca:	fbb4 f0f9 	udiv	r0, r4, r9
 80012ce:	fb09 4410 	mls	r4, r9, r0, r4
 80012d2:	fb00 fe0e 	mul.w	lr, r0, lr
 80012d6:	b2ad      	uxth	r5, r5
 80012d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012dc:	45a6      	cmp	lr, r4
 80012de:	d908      	bls.n	80012f2 <__udivmoddi4+0x1e2>
 80012e0:	eb1c 0404 	adds.w	r4, ip, r4
 80012e4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012e8:	d26c      	bcs.n	80013c4 <__udivmoddi4+0x2b4>
 80012ea:	45a6      	cmp	lr, r4
 80012ec:	d96a      	bls.n	80013c4 <__udivmoddi4+0x2b4>
 80012ee:	3802      	subs	r0, #2
 80012f0:	4464      	add	r4, ip
 80012f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012f6:	fba0 9502 	umull	r9, r5, r0, r2
 80012fa:	eba4 040e 	sub.w	r4, r4, lr
 80012fe:	42ac      	cmp	r4, r5
 8001300:	46c8      	mov	r8, r9
 8001302:	46ae      	mov	lr, r5
 8001304:	d356      	bcc.n	80013b4 <__udivmoddi4+0x2a4>
 8001306:	d053      	beq.n	80013b0 <__udivmoddi4+0x2a0>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d069      	beq.n	80013e0 <__udivmoddi4+0x2d0>
 800130c:	ebb3 0208 	subs.w	r2, r3, r8
 8001310:	eb64 040e 	sbc.w	r4, r4, lr
 8001314:	fa22 f301 	lsr.w	r3, r2, r1
 8001318:	fa04 f707 	lsl.w	r7, r4, r7
 800131c:	431f      	orrs	r7, r3
 800131e:	40cc      	lsrs	r4, r1
 8001320:	e9c6 7400 	strd	r7, r4, [r6]
 8001324:	2100      	movs	r1, #0
 8001326:	e747      	b.n	80011b8 <__udivmoddi4+0xa8>
 8001328:	fa0c fc02 	lsl.w	ip, ip, r2
 800132c:	f1c2 0120 	rsb	r1, r2, #32
 8001330:	fa25 f301 	lsr.w	r3, r5, r1
 8001334:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001338:	fa20 f101 	lsr.w	r1, r0, r1
 800133c:	4095      	lsls	r5, r2
 800133e:	430d      	orrs	r5, r1
 8001340:	fbb3 f1f7 	udiv	r1, r3, r7
 8001344:	fb07 3311 	mls	r3, r7, r1, r3
 8001348:	fa1f fe8c 	uxth.w	lr, ip
 800134c:	0c28      	lsrs	r0, r5, #16
 800134e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001352:	fb01 f30e 	mul.w	r3, r1, lr
 8001356:	4283      	cmp	r3, r0
 8001358:	fa04 f402 	lsl.w	r4, r4, r2
 800135c:	d908      	bls.n	8001370 <__udivmoddi4+0x260>
 800135e:	eb1c 0000 	adds.w	r0, ip, r0
 8001362:	f101 38ff 	add.w	r8, r1, #4294967295
 8001366:	d22f      	bcs.n	80013c8 <__udivmoddi4+0x2b8>
 8001368:	4283      	cmp	r3, r0
 800136a:	d92d      	bls.n	80013c8 <__udivmoddi4+0x2b8>
 800136c:	3902      	subs	r1, #2
 800136e:	4460      	add	r0, ip
 8001370:	1ac0      	subs	r0, r0, r3
 8001372:	fbb0 f3f7 	udiv	r3, r0, r7
 8001376:	fb07 0013 	mls	r0, r7, r3, r0
 800137a:	b2ad      	uxth	r5, r5
 800137c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001380:	fb03 f00e 	mul.w	r0, r3, lr
 8001384:	42a8      	cmp	r0, r5
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x28a>
 8001388:	eb1c 0505 	adds.w	r5, ip, r5
 800138c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001390:	d216      	bcs.n	80013c0 <__udivmoddi4+0x2b0>
 8001392:	42a8      	cmp	r0, r5
 8001394:	d914      	bls.n	80013c0 <__udivmoddi4+0x2b0>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	1a28      	subs	r0, r5, r0
 800139c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013a0:	e738      	b.n	8001214 <__udivmoddi4+0x104>
 80013a2:	4631      	mov	r1, r6
 80013a4:	4630      	mov	r0, r6
 80013a6:	e707      	b.n	80011b8 <__udivmoddi4+0xa8>
 80013a8:	462f      	mov	r7, r5
 80013aa:	e6e4      	b.n	8001176 <__udivmoddi4+0x66>
 80013ac:	4618      	mov	r0, r3
 80013ae:	e6f9      	b.n	80011a4 <__udivmoddi4+0x94>
 80013b0:	454b      	cmp	r3, r9
 80013b2:	d2a9      	bcs.n	8001308 <__udivmoddi4+0x1f8>
 80013b4:	ebb9 0802 	subs.w	r8, r9, r2
 80013b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013bc:	3801      	subs	r0, #1
 80013be:	e7a3      	b.n	8001308 <__udivmoddi4+0x1f8>
 80013c0:	4643      	mov	r3, r8
 80013c2:	e7ea      	b.n	800139a <__udivmoddi4+0x28a>
 80013c4:	4628      	mov	r0, r5
 80013c6:	e794      	b.n	80012f2 <__udivmoddi4+0x1e2>
 80013c8:	4641      	mov	r1, r8
 80013ca:	e7d1      	b.n	8001370 <__udivmoddi4+0x260>
 80013cc:	46d0      	mov	r8, sl
 80013ce:	e77b      	b.n	80012c8 <__udivmoddi4+0x1b8>
 80013d0:	4464      	add	r4, ip
 80013d2:	3802      	subs	r0, #2
 80013d4:	e747      	b.n	8001266 <__udivmoddi4+0x156>
 80013d6:	3b02      	subs	r3, #2
 80013d8:	4465      	add	r5, ip
 80013da:	e72f      	b.n	800123c <__udivmoddi4+0x12c>
 80013dc:	4608      	mov	r0, r1
 80013de:	e706      	b.n	80011ee <__udivmoddi4+0xde>
 80013e0:	4631      	mov	r1, r6
 80013e2:	e6e9      	b.n	80011b8 <__udivmoddi4+0xa8>

080013e4 <__aeabi_idiv0>:
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <FRAM_ID>:

char bytes_ID[4] = {0};
char bytes_status[3] = {0} ;


void FRAM_ID(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2101      	movs	r1, #1
 80013f0:	480a      	ldr	r0, [pc, #40]	; (800141c <FRAM_ID+0x34>)
 80013f2:	f002 f952 	bl	800369a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDIDI, 1, 100); //envia
 80013f6:	2364      	movs	r3, #100	; 0x64
 80013f8:	2201      	movs	r2, #1
 80013fa:	4909      	ldr	r1, [pc, #36]	; (8001420 <FRAM_ID+0x38>)
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <FRAM_ID+0x3c>)
 80013fe:	f005 fc5b 	bl	8006cb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,  (uint8_t *)bytes_ID, 4, 100); //recebe dado
 8001402:	2364      	movs	r3, #100	; 0x64
 8001404:	2204      	movs	r2, #4
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <FRAM_ID+0x40>)
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <FRAM_ID+0x3c>)
 800140a:	f005 fd91 	bl	8006f30 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	2101      	movs	r1, #1
 8001412:	4802      	ldr	r0, [pc, #8]	; (800141c <FRAM_ID+0x34>)
 8001414:	f002 f941 	bl	800369a <HAL_GPIO_WritePin>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40010c00 	.word	0x40010c00
 8001420:	20000003 	.word	0x20000003
 8001424:	20000180 	.word	0x20000180
 8001428:	20000090 	.word	0x20000090

0800142c <FRAM_enablewrite>:

void FRAM_enablewrite(void){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

	//Ativa trava de habilitação de gravação (permite operações de gravação)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2101      	movs	r1, #1
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <FRAM_enablewrite+0x28>)
 8001436:	f002 f930 	bl	800369a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WREN, 1, 100);
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2201      	movs	r2, #1
 800143e:	4906      	ldr	r1, [pc, #24]	; (8001458 <FRAM_enablewrite+0x2c>)
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <FRAM_enablewrite+0x30>)
 8001442:	f005 fc39 	bl	8006cb8 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2101      	movs	r1, #1
 800144a:	4802      	ldr	r0, [pc, #8]	; (8001454 <FRAM_enablewrite+0x28>)
 800144c:	f002 f925 	bl	800369a <HAL_GPIO_WritePin>

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010c00 	.word	0x40010c00
 8001458:	20000002 	.word	0x20000002
 800145c:	20000180 	.word	0x20000180

08001460 <FRAM_Write>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

}


void FRAM_Write(uint16_t address, uint8_t *data, uint16_t size){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	4613      	mov	r3, r2
 800146e:	80bb      	strh	r3, [r7, #4]

	// write
	uint8_t addr_high = (address >> 8 ) & 0xFF;
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_low = address & 0xFF;
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2101      	movs	r1, #1
 8001484:	4812      	ldr	r0, [pc, #72]	; (80014d0 <FRAM_Write+0x70>)
 8001486:	f002 f908 	bl	800369a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 100);
 800148a:	2364      	movs	r3, #100	; 0x64
 800148c:	2201      	movs	r2, #1
 800148e:	4911      	ldr	r1, [pc, #68]	; (80014d4 <FRAM_Write+0x74>)
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <FRAM_Write+0x78>)
 8001492:	f005 fc11 	bl	8006cb8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_high, 1, 100);
 8001496:	f107 010f 	add.w	r1, r7, #15
 800149a:	2364      	movs	r3, #100	; 0x64
 800149c:	2201      	movs	r2, #1
 800149e:	480e      	ldr	r0, [pc, #56]	; (80014d8 <FRAM_Write+0x78>)
 80014a0:	f005 fc0a 	bl	8006cb8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_low, 1, 100);
 80014a4:	f107 010e 	add.w	r1, r7, #14
 80014a8:	2364      	movs	r3, #100	; 0x64
 80014aa:	2201      	movs	r2, #1
 80014ac:	480a      	ldr	r0, [pc, #40]	; (80014d8 <FRAM_Write+0x78>)
 80014ae:	f005 fc03 	bl	8006cb8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, size, 100);
 80014b2:	88ba      	ldrh	r2, [r7, #4]
 80014b4:	2364      	movs	r3, #100	; 0x64
 80014b6:	6839      	ldr	r1, [r7, #0]
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <FRAM_Write+0x78>)
 80014ba:	f005 fbfd 	bl	8006cb8 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2101      	movs	r1, #1
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <FRAM_Write+0x70>)
 80014c4:	f002 f8e9 	bl	800369a <HAL_GPIO_WritePin>

}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40010c00 	.word	0x40010c00
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000180 	.word	0x20000180

080014dc <FRAM_Read>:

void FRAM_Read(uint16_t address, uint8_t *data_receive, uint16_t size){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4613      	mov	r3, r2
 80014ea:	80bb      	strh	r3, [r7, #4]

	// read
	uint8_t addr_high = (address >> 8 ) & 0xFF;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_low = address & 0xFF;
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2101      	movs	r1, #1
 8001500:	4812      	ldr	r0, [pc, #72]	; (800154c <FRAM_Read+0x70>)
 8001502:	f002 f8ca 	bl	800369a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	2201      	movs	r2, #1
 800150a:	4911      	ldr	r1, [pc, #68]	; (8001550 <FRAM_Read+0x74>)
 800150c:	4811      	ldr	r0, [pc, #68]	; (8001554 <FRAM_Read+0x78>)
 800150e:	f005 fbd3 	bl	8006cb8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_high, 1, 100);
 8001512:	f107 010f 	add.w	r1, r7, #15
 8001516:	2364      	movs	r3, #100	; 0x64
 8001518:	2201      	movs	r2, #1
 800151a:	480e      	ldr	r0, [pc, #56]	; (8001554 <FRAM_Read+0x78>)
 800151c:	f005 fbcc 	bl	8006cb8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_low, 1, 100);
 8001520:	f107 010e 	add.w	r1, r7, #14
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	2201      	movs	r2, #1
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <FRAM_Read+0x78>)
 800152a:	f005 fbc5 	bl	8006cb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data_receive, size, 100); //recebe dado
 800152e:	88ba      	ldrh	r2, [r7, #4]
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	4807      	ldr	r0, [pc, #28]	; (8001554 <FRAM_Read+0x78>)
 8001536:	f005 fcfb 	bl	8006f30 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2101      	movs	r1, #1
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <FRAM_Read+0x70>)
 8001540:	f002 f8ab 	bl	800369a <HAL_GPIO_WritePin>
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40010c00 	.word	0x40010c00
 8001550:	20000001 	.word	0x20000001
 8001554:	20000180 	.word	0x20000180

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800155e:	f001 fafd 	bl	8002b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 8001562:	f000 f98d 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001566:	f000 faab 	bl	8001ac0 <MX_GPIO_Init>
	MX_DMA_Init();
 800156a:	f000 fa8b 	bl	8001a84 <MX_DMA_Init>
	MX_I2C1_Init();
 800156e:	f000 f9cd 	bl	800190c <MX_I2C1_Init>
	MX_I2C2_Init();
 8001572:	f000 f9f9 	bl	8001968 <MX_I2C2_Init>
	MX_SPI1_Init();
 8001576:	f000 fa25 	bl	80019c4 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 800157a:	f000 fa59 	bl	8001a30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // INICIALIZA ESTADO DOS INDICADORES DE PRÉ LANÇAMENTO
	state current_state = PAUSADO;
 800157e:	2300      	movs	r3, #0
 8001580:	77fb      	strb	r3, [r7, #31]
	data_vehicle data;
	//AccelData acc_data;

	data.altitude_data = altitude[1];
 8001582:	4bb3      	ldr	r3, [pc, #716]	; (8001850 <main+0x2f8>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	613b      	str	r3, [r7, #16]
	data.altitude_inicial = altitude[1];
 8001588:	4bb1      	ldr	r3, [pc, #708]	; (8001850 <main+0x2f8>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	617b      	str	r3, [r7, #20]
	data.ultima_altitude = altitude[1];
 800158e:	4bb0      	ldr	r3, [pc, #704]	; (8001850 <main+0x2f8>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61bb      	str	r3, [r7, #24]
	data.aceleracao = 0;
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // LED
 800159a:	2200      	movs	r2, #0
 800159c:	2108      	movs	r1, #8
 800159e:	48ad      	ldr	r0, [pc, #692]	; (8001854 <main+0x2fc>)
 80015a0:	f002 f87b 	bl	800369a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // BUZER
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
 80015a8:	48aa      	ldr	r0, [pc, #680]	; (8001854 <main+0x2fc>)
 80015aa:	f002 f876 	bl	800369a <HAL_GPIO_WritePin>

  // INICIALIZA OS PINOS DE ACIONAR CARGA
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // ACIONA CARGA 1 = 0
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b4:	48a7      	ldr	r0, [pc, #668]	; (8001854 <main+0x2fc>)
 80015b6:	f002 f870 	bl	800369a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // ACIONA CARGA 2 = 0
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c0:	48a4      	ldr	r0, [pc, #656]	; (8001854 <main+0x2fc>)
 80015c2:	f002 f86a 	bl	800369a <HAL_GPIO_WritePin>

	pin_state1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // Lê o estado do pino GPIO14 para carga 1
 80015c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ca:	48a2      	ldr	r0, [pc, #648]	; (8001854 <main+0x2fc>)
 80015cc:	f002 f84e 	bl	800366c <HAL_GPIO_ReadPin>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4ba0      	ldr	r3, [pc, #640]	; (8001858 <main+0x300>)
 80015d6:	701a      	strb	r2, [r3, #0]
	pin_state2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); // Lê o estado do pino GPIO15 para carga 2
 80015d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015dc:	489d      	ldr	r0, [pc, #628]	; (8001854 <main+0x2fc>)
 80015de:	f002 f845 	bl	800366c <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b9d      	ldr	r3, [pc, #628]	; (800185c <main+0x304>)
 80015e8:	701a      	strb	r2, [r3, #0]

  // CONFIGURAÇÃO DE SENSORES
	MPU6050_Config();
 80015ea:	f000 fc97 	bl	8001f1c <MPU6050_Config>
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80015ee:	489c      	ldr	r0, [pc, #624]	; (8001860 <main+0x308>)
 80015f0:	f001 fd78 	bl	80030e4 <HAL_DMA_IRQHandler>

	BMP280_Config(0x02, 0x05, 0x03, 0x00, 0x04);
 80015f4:	2304      	movs	r3, #4
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	2203      	movs	r2, #3
 80015fc:	2105      	movs	r1, #5
 80015fe:	2002      	movs	r0, #2
 8001600:	f001 f93c 	bl	800287c <BMP280_Config>
 * 	uint16_t i;
	for (i = 0; i < 6; i++) {
		memcpy(&data[i], &data_ad[i],1);
	}
*/
	while (HAL_DMA_GetState(&hdma_i2c1_rx) != HAL_DMA_STATE_READY);
 8001604:	bf00      	nop
 8001606:	4896      	ldr	r0, [pc, #600]	; (8001860 <main+0x308>)
 8001608:	f001 fe72 	bl	80032f0 <HAL_DMA_GetState>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d1f9      	bne.n	8001606 <main+0xae>
	{
		read_accel();
 8001612:	f000 fcd9 	bl	8001fc8 <read_accel>
	}
	uint8_t dado[6];

	FRAM_ID();
 8001616:	f7ff fee7 	bl	80013e8 <FRAM_ID>
	FRAM_enablewrite();
 800161a:	f7ff ff07 	bl	800142c <FRAM_enablewrite>
	FRAM_Write(0x6000, dado, 6);
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2206      	movs	r2, #6
 8001622:	4619      	mov	r1, r3
 8001624:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8001628:	f7ff ff1a 	bl	8001460 <FRAM_Write>
	FRAM_Read(0x6000, datareceive, 6);
 800162c:	2206      	movs	r2, #6
 800162e:	498d      	ldr	r1, [pc, #564]	; (8001864 <main+0x30c>)
 8001630:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8001634:	f7ff ff52 	bl	80014dc <FRAM_Read>

	BMP280_Measure(temp, press);
 8001638:	498b      	ldr	r1, [pc, #556]	; (8001868 <main+0x310>)
 800163a:	488c      	ldr	r0, [pc, #560]	; (800186c <main+0x314>)
 800163c:	f001 f9c4 	bl	80029c8 <BMP280_Measure>
	Measure_alt(altitude);
 8001640:	4883      	ldr	r0, [pc, #524]	; (8001850 <main+0x2f8>)
 8001642:	f001 fa1d 	bl	8002a80 <Measure_alt>

		}

	}
*/
	HAL_Delay(100);
 8001646:	2064      	movs	r0, #100	; 0x64
 8001648:	f001 faea 	bl	8002c20 <HAL_Delay>

	switch (current_state) {
 800164c:	7ffb      	ldrb	r3, [r7, #31]
 800164e:	2b05      	cmp	r3, #5
 8001650:	d8d8      	bhi.n	8001604 <main+0xac>
 8001652:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <main+0x100>)
 8001654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001658:	08001671 	.word	0x08001671
 800165c:	0800169f 	.word	0x0800169f
 8001660:	0800170f 	.word	0x0800170f
 8001664:	08001729 	.word	0x08001729
 8001668:	08001761 	.word	0x08001761
 800166c:	080017bb 	.word	0x080017bb
      case PAUSADO:
        if (button == 1 && pin_state1 == GPIO_PIN_RESET &&  pin_state2 == GPIO_PIN_RESET)
 8001670:	4b7f      	ldr	r3, [pc, #508]	; (8001870 <main+0x318>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10d      	bne.n	8001694 <main+0x13c>
 8001678:	4b77      	ldr	r3, [pc, #476]	; (8001858 <main+0x300>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d109      	bne.n	8001694 <main+0x13c>
 8001680:	4b76      	ldr	r3, [pc, #472]	; (800185c <main+0x304>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <main+0x13c>
        {
        	// as duas cargas estao conectadas e entra em aguardar lançamento
           data.altitude_inicial = altitude[1];
 8001688:	4b71      	ldr	r3, [pc, #452]	; (8001850 <main+0x2f8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	617b      	str	r3, [r7, #20]
           current_state = AGUARDANDO_LANCAMENTO;
 800168e:	2301      	movs	r3, #1
 8001690:	77fb      	strb	r3, [r7, #31]
 8001692:	e004      	b.n	800169e <main+0x146>
        }
        else
        {
        	start_recording = 0;
 8001694:	4b77      	ldr	r3, [pc, #476]	; (8001874 <main+0x31c>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
        	current_state = PAUSADO;
 800169a:	2300      	movs	r3, #0
 800169c:	77fb      	strb	r3, [r7, #31]
        }

      case AGUARDANDO_LANCAMENTO:
        if(data.aceleracao > 0 && data.altitude_data != data.altitude_inicial)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f04f 0100 	mov.w	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fcd9 	bl	800105c <__aeabi_fcmpgt>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <main+0x170>
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fca8 	bl	800100c <__aeabi_fcmpeq>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <main+0x170>
        {
        	current_state = LANCADO;
 80016c2:	2302      	movs	r3, #2
 80016c4:	77fb      	strb	r3, [r7, #31]

        	start_recording = 1;

        	current_state = AGUARDANDO_LANCAMENTO;
        }
        break;
 80016c6:	e0bc      	b.n	8001842 <main+0x2ea>
        else if (data.aceleracao == 0 && data.altitude_data == data.altitude_inicial)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fc9c 	bl	800100c <__aeabi_fcmpeq>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d100      	bne.n	80016dc <main+0x184>
        break;
 80016da:	e0b2      	b.n	8001842 <main+0x2ea>
        else if (data.aceleracao == 0 && data.altitude_data == data.altitude_inicial)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fc92 	bl	800100c <__aeabi_fcmpeq>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <main+0x198>
        break;
 80016ee:	e0a8      	b.n	8001842 <main+0x2ea>
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //LED
 80016f0:	2108      	movs	r1, #8
 80016f2:	4858      	ldr	r0, [pc, #352]	; (8001854 <main+0x2fc>)
 80016f4:	f001 ffe9 	bl	80036ca <HAL_GPIO_TogglePin>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);//BUZER
 80016f8:	2201      	movs	r2, #1
 80016fa:	2110      	movs	r1, #16
 80016fc:	4855      	ldr	r0, [pc, #340]	; (8001854 <main+0x2fc>)
 80016fe:	f001 ffcc 	bl	800369a <HAL_GPIO_WritePin>
        	start_recording = 1;
 8001702:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <main+0x31c>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
        	current_state = AGUARDANDO_LANCAMENTO;
 8001708:	2301      	movs	r3, #1
 800170a:	77fb      	strb	r3, [r7, #31]
        break;
 800170c:	e099      	b.n	8001842 <main+0x2ea>

      case LANCADO:
        if (data.aceleracao > 0)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f04f 0100 	mov.w	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fca1 	bl	800105c <__aeabi_fcmpgt>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d100      	bne.n	8001722 <main+0x1ca>
        {
        	current_state = VOANDO_ACELERADO;
        }
        break;
 8001720:	e08f      	b.n	8001842 <main+0x2ea>
        	current_state = VOANDO_ACELERADO;
 8001722:	2303      	movs	r3, #3
 8001724:	77fb      	strb	r3, [r7, #31]
        break;
 8001726:	e08c      	b.n	8001842 <main+0x2ea>

      case VOANDO_ACELERADO:
        if (data.aceleracao < -9.8)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fe74 	bl	8000418 <__aeabi_f2d>
 8001730:	a345      	add	r3, pc, #276	; (adr r3, 8001848 <main+0x2f0>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7ff f939 	bl	80009ac <__aeabi_dcmplt>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <main+0x1ee>
        {
        	current_state = VOANDO_RETARDADO;
 8001740:	2304      	movs	r3, #4
 8001742:	77fb      	strb	r3, [r7, #31]
        }
        else if (data.aceleracao > 0)
        {
        	current_state = VOANDO_ACELERADO;
        }
        break;
 8001744:	e07d      	b.n	8001842 <main+0x2ea>
        else if (data.aceleracao > 0)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f04f 0100 	mov.w	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fc85 	bl	800105c <__aeabi_fcmpgt>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d100      	bne.n	800175a <main+0x202>
        break;
 8001758:	e073      	b.n	8001842 <main+0x2ea>
        	current_state = VOANDO_ACELERADO;
 800175a:	2303      	movs	r3, #3
 800175c:	77fb      	strb	r3, [r7, #31]
        break;
 800175e:	e070      	b.n	8001842 <main+0x2ea>

      case VOANDO_RETARDADO:
        if (data.aceleracao > -9.8) {
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe58 	bl	8000418 <__aeabi_f2d>
 8001768:	a337      	add	r3, pc, #220	; (adr r3, 8001848 <main+0x2f0>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7ff f93b 	bl	80009e8 <__aeabi_dcmpgt>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <main+0x22a>
        	current_state = VOANDO_ACELERADO;
 8001778:	2303      	movs	r3, #3
 800177a:	77fb      	strb	r3, [r7, #31]
			data.ultima_altitude = data.altitude_data;
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	61bb      	str	r3, [r7, #24]
        }
        else if (data.aceleracao < 0)
        {
        	current_state = PARAQUEDAS_ACIONADO;
        }
        break;
 8001780:	e05f      	b.n	8001842 <main+0x2ea>
        else if (data.aceleracao < -9.8)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fe47 	bl	8000418 <__aeabi_f2d>
 800178a:	a32f      	add	r3, pc, #188	; (adr r3, 8001848 <main+0x2f0>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7ff f90c 	bl	80009ac <__aeabi_dcmplt>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <main+0x248>
        	current_state = VOANDO_RETARDADO;
 800179a:	2304      	movs	r3, #4
 800179c:	77fb      	strb	r3, [r7, #31]
        break;
 800179e:	e050      	b.n	8001842 <main+0x2ea>
        else if (data.aceleracao < 0)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f04f 0100 	mov.w	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fc3a 	bl	8001020 <__aeabi_fcmplt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d100      	bne.n	80017b4 <main+0x25c>
        break;
 80017b2:	e046      	b.n	8001842 <main+0x2ea>
        	current_state = PARAQUEDAS_ACIONADO;
 80017b4:	2305      	movs	r3, #5
 80017b6:	77fb      	strb	r3, [r7, #31]
        break;
 80017b8:	e043      	b.n	8001842 <main+0x2ea>

      case PARAQUEDAS_ACIONADO:
        if (data.aceleracao < -9.8 && data.aceleracao < 0)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe2b 	bl	8000418 <__aeabi_f2d>
 80017c2:	a321      	add	r3, pc, #132	; (adr r3, 8001848 <main+0x2f0>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7ff f8f0 	bl	80009ac <__aeabi_dcmplt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d017      	beq.n	8001802 <main+0x2aa>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f04f 0100 	mov.w	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fc21 	bl	8001020 <__aeabi_fcmplt>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00e      	beq.n	8001802 <main+0x2aa>
        {
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // ACIONA CARGA 1 = 1;
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ea:	481a      	ldr	r0, [pc, #104]	; (8001854 <main+0x2fc>)
 80017ec:	f001 ff55 	bl	800369a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); //ACIONA CARGA 2 = 1; paraquedas on
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f6:	4817      	ldr	r0, [pc, #92]	; (8001854 <main+0x2fc>)
 80017f8:	f001 ff4f 	bl	800369a <HAL_GPIO_WritePin>
        	current_state = PARAQUEDAS_ACIONADO;
 80017fc:	2305      	movs	r3, #5
 80017fe:	77fb      	strb	r3, [r7, #31]
 8001800:	e01e      	b.n	8001840 <main+0x2e8>
        }
        //revisar esse elseif
        else if (data.altitude_data == data.altitude_inicial && data.aceleracao == 0 && pin_state1 == GPIO_PIN_SET &&  pin_state2 == GPIO_PIN_SET)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fbff 	bl	800100c <__aeabi_fcmpeq>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d013      	beq.n	800183c <main+0x2e4>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fbf6 	bl	800100c <__aeabi_fcmpeq>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00a      	beq.n	800183c <main+0x2e4>
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <main+0x300>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d106      	bne.n	800183c <main+0x2e4>
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <main+0x304>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d102      	bne.n	800183c <main+0x2e4>
        {
        	current_state = PAUSADO;
 8001836:	2300      	movs	r3, #0
 8001838:	77fb      	strb	r3, [r7, #31]
 800183a:	e001      	b.n	8001840 <main+0x2e8>
        }
        else
        {
        //  printf("O paraquedas foi acionado a uma altitude de %.2f metros.\n", veiculo.ultima_altitude);
        	return 0;
 800183c:	2300      	movs	r3, #0
 800183e:	e01b      	b.n	8001878 <main+0x320>
        }
        break;
 8001840:	bf00      	nop
  {
 8001842:	e6df      	b.n	8001604 <main+0xac>
 8001844:	f3af 8000 	nop.w
 8001848:	9999999a 	.word	0x9999999a
 800184c:	c0239999 	.word	0xc0239999
 8001850:	2000022c 	.word	0x2000022c
 8001854:	40010c00 	.word	0x40010c00
 8001858:	20000232 	.word	0x20000232
 800185c:	20000233 	.word	0x20000233
 8001860:	2000013c 	.word	0x2000013c
 8001864:	2000021c 	.word	0x2000021c
 8001868:	20000228 	.word	0x20000228
 800186c:	20000224 	.word	0x20000224
 8001870:	20000230 	.word	0x20000230
 8001874:	20000231 	.word	0x20000231
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001878:	4618      	mov	r0, r3
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b090      	sub	sp, #64	; 0x40
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 0318 	add.w	r3, r7, #24
 800188a:	2228      	movs	r2, #40	; 0x28
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f006 fee2 	bl	8008658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b0:	2301      	movs	r3, #1
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b4:	2302      	movs	r3, #2
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fd57 	bl	800637c <HAL_RCC_OscConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80018d4:	f000 f964 	bl	8001ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d8:	230f      	movs	r3, #15
 80018da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018dc:	2302      	movs	r3, #2
 80018de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2102      	movs	r1, #2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 ffc4 	bl	8006880 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018fe:	f000 f94f 	bl	8001ba0 <Error_Handler>
  }
}
 8001902:	bf00      	nop
 8001904:	3740      	adds	r7, #64	; 0x40
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <MX_I2C1_Init+0x50>)
 8001912:	4a13      	ldr	r2, [pc, #76]	; (8001960 <MX_I2C1_Init+0x54>)
 8001914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_I2C1_Init+0x50>)
 8001918:	4a12      	ldr	r2, [pc, #72]	; (8001964 <MX_I2C1_Init+0x58>)
 800191a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MX_I2C1_Init+0x50>)
 800192a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800192e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <MX_I2C1_Init+0x50>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_I2C1_Init+0x50>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <MX_I2C1_Init+0x50>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_I2C1_Init+0x50>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001948:	4804      	ldr	r0, [pc, #16]	; (800195c <MX_I2C1_Init+0x50>)
 800194a:	f001 fed7 	bl	80036fc <HAL_I2C_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001954:	f000 f924 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000094 	.word	0x20000094
 8001960:	40005400 	.word	0x40005400
 8001964:	00061a80 	.word	0x00061a80

08001968 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_I2C2_Init+0x50>)
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <MX_I2C2_Init+0x54>)
 8001970:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_I2C2_Init+0x50>)
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <MX_I2C2_Init+0x58>)
 8001976:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_I2C2_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_I2C2_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_I2C2_Init+0x50>)
 8001986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800198a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <MX_I2C2_Init+0x50>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_I2C2_Init+0x50>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <MX_I2C2_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_I2C2_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <MX_I2C2_Init+0x50>)
 80019a6:	f001 fea9 	bl	80036fc <HAL_I2C_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019b0:	f000 f8f6 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200000e8 	.word	0x200000e8
 80019bc:	40005800 	.word	0x40005800
 80019c0:	00061a80 	.word	0x00061a80

080019c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_SPI1_Init+0x64>)
 80019ca:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <MX_SPI1_Init+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <MX_SPI1_Init+0x64>)
 80019d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_SPI1_Init+0x64>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <MX_SPI1_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_SPI1_Init+0x64>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_SPI1_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_SPI1_Init+0x64>)
 80019f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_SPI1_Init+0x64>)
 80019f8:	2218      	movs	r2, #24
 80019fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <MX_SPI1_Init+0x64>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_SPI1_Init+0x64>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <MX_SPI1_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_SPI1_Init+0x64>)
 8001a10:	220a      	movs	r2, #10
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <MX_SPI1_Init+0x64>)
 8001a16:	f005 f8cb 	bl	8006bb0 <HAL_SPI_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a20:	f000 f8be 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000180 	.word	0x20000180
 8001a2c:	40013000 	.word	0x40013000

08001a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_USART2_UART_Init+0x50>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a68:	f005 fe0e 	bl	8007688 <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a72:	f000 f895 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200001d8 	.word	0x200001d8
 8001a80:	40004400 	.word	0x40004400

08001a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_DMA_Init+0x38>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <MX_DMA_Init+0x38>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6153      	str	r3, [r2, #20]
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_DMA_Init+0x38>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2011      	movs	r0, #17
 8001aa8:	f001 f9b5 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001aac:	2011      	movs	r0, #17
 8001aae:	f001 f9ce 	bl	8002e4e <HAL_NVIC_EnableIRQ>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a2e      	ldr	r2, [pc, #184]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001ada:	f043 0320 	orr.w	r3, r3, #32
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001b0a:	f043 0308 	orr.w	r3, r3, #8
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f243 0119 	movw	r1, #12313	; 0x3019
 8001b22:	481d      	ldr	r0, [pc, #116]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001b24:	f001 fdb9 	bl	800369a <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b2e:	481b      	ldr	r0, [pc, #108]	; (8001b9c <MX_GPIO_Init+0xdc>)
 8001b30:	f001 fdb3 	bl	800369a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB12 PB13 PB3
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8001b34:	f243 0319 	movw	r3, #12313	; 0x3019
 8001b38:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4812      	ldr	r0, [pc, #72]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001b4e:	f001 fc09 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b52:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	4619      	mov	r1, r3
 8001b66:	480c      	ldr	r0, [pc, #48]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001b68:	f001 fbfc 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_GPIO_Init+0xdc>)
 8001b86:	f001 fbed 	bl	8003364 <HAL_GPIO_Init>

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	40010800 	.word	0x40010800

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <Error_Handler+0x8>
	...

08001bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6193      	str	r3, [r2, #24]
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_MspInit+0x60>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_MspInit+0x60>)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010000 	.word	0x40010000

08001c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a46      	ldr	r2, [pc, #280]	; (8001d44 <HAL_I2C_MspInit+0x134>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d152      	bne.n	8001cd6 <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	4b45      	ldr	r3, [pc, #276]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a44      	ldr	r2, [pc, #272]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c48:	23c0      	movs	r3, #192	; 0xc0
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4c:	2312      	movs	r3, #18
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	4619      	mov	r1, r3
 8001c5a:	483c      	ldr	r0, [pc, #240]	; (8001d4c <HAL_I2C_MspInit+0x13c>)
 8001c5c:	f001 fb82 	bl	8003364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c60:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	4a38      	ldr	r2, [pc, #224]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001c66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c6a:	61d3      	str	r3, [r2, #28]
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001c7a:	4a36      	ldr	r2, [pc, #216]	; (8001d54 <HAL_I2C_MspInit+0x144>)
 8001c7c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c84:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c90:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c96:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ca8:	4829      	ldr	r0, [pc, #164]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001caa:	f001 f8eb 	bl	8002e84 <HAL_DMA_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001cb4:	f7ff ff74 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a25      	ldr	r2, [pc, #148]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8001cbe:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <HAL_I2C_MspInit+0x140>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	201f      	movs	r0, #31
 8001cca:	f001 f8a4 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cce:	201f      	movs	r0, #31
 8001cd0:	f001 f8bd 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cd4:	e031      	b.n	8001d3a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <HAL_I2C_MspInit+0x148>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d12c      	bne.n	8001d3a <HAL_I2C_MspInit+0x12a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001ce6:	f043 0308 	orr.w	r3, r3, #8
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cf8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfe:	2312      	movs	r3, #18
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 0318 	add.w	r3, r7, #24
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480f      	ldr	r0, [pc, #60]	; (8001d4c <HAL_I2C_MspInit+0x13c>)
 8001d0e:	f001 fb29 	bl	8003364 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d1c:	61d3      	str	r3, [r2, #28]
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_I2C_MspInit+0x138>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2021      	movs	r0, #33	; 0x21
 8001d30:	f001 f871 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d34:	2021      	movs	r0, #33	; 0x21
 8001d36:	f001 f88a 	bl	8002e4e <HAL_NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40005400 	.word	0x40005400
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010c00 	.word	0x40010c00
 8001d50:	2000013c 	.word	0x2000013c
 8001d54:	40020080 	.word	0x40020080
 8001d58:	40005800 	.word	0x40005800

08001d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_SPI_MspInit+0x88>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d12f      	bne.n	8001ddc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dac:	23a0      	movs	r3, #160	; 0xa0
 8001dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480b      	ldr	r0, [pc, #44]	; (8001dec <HAL_SPI_MspInit+0x90>)
 8001dc0:	f001 fad0 	bl	8003364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dc4:	2340      	movs	r3, #64	; 0x40
 8001dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <HAL_SPI_MspInit+0x90>)
 8001dd8:	f001 fac4 	bl	8003364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40013000 	.word	0x40013000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010800 	.word	0x40010800

08001df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_UART_MspInit+0x88>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d12f      	bne.n	8001e70 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_UART_MspInit+0x8c>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_UART_MspInit+0x8c>)
 8001e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1a:	61d3      	str	r3, [r2, #28]
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_UART_MspInit+0x8c>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_UART_MspInit+0x8c>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <HAL_UART_MspInit+0x8c>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_UART_MspInit+0x8c>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e40:	2304      	movs	r3, #4
 8001e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4619      	mov	r1, r3
 8001e52:	480b      	ldr	r0, [pc, #44]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e54:	f001 fa86 	bl	8003364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e6c:	f001 fa7a 	bl	8003364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40004400 	.word	0x40004400
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010800 	.word	0x40010800

08001e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <NMI_Handler+0x4>

08001e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <HardFault_Handler+0x4>

08001e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <MemManage_Handler+0x4>

08001e96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eca:	f000 fe8d 	bl	8002be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA1_Channel7_IRQHandler+0x10>)
 8001eda:	f001 f903 	bl	80030e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000013c 	.word	0x2000013c

08001ee8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <I2C1_EV_IRQHandler+0x10>)
 8001eee:	f002 fa29 	bl	8004344 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000094 	.word	0x20000094

08001efc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <I2C2_EV_IRQHandler+0x10>)
 8001f02:	f002 fa1f 	bl	8004344 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200000e8 	.word	0x200000e8

08001f10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <MPU6050_Config>:
uint16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW, Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;
AccelData acc_data;
GyroData gy_data;

void MPU6050_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af04      	add	r7, sp, #16
	//MPU6050

	uint8_t check;
	uint8_t data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000); 	// WHO_AM_I ~ 6050
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	1dfb      	adds	r3, r7, #7
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2301      	movs	r3, #1
 8001f32:	2275      	movs	r2, #117	; 0x75
 8001f34:	21d0      	movs	r1, #208	; 0xd0
 8001f36:	4823      	ldr	r0, [pc, #140]	; (8001fc4 <MPU6050_Config+0xa8>)
 8001f38:	f001 fe1e 	bl	8003b78 <HAL_I2C_Mem_Read>
	//HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1);

	if (check == 104) // devise is present
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	2b68      	cmp	r3, #104	; 0x68
 8001f40:	d13b      	bne.n	8001fba <MPU6050_Config+0x9e>
	{
		// power management register 0x6B we should write all 0s to wake the sensor up
		data = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	9302      	str	r3, [sp, #8]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	1dbb      	adds	r3, r7, #6
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2301      	movs	r3, #1
 8001f56:	226b      	movs	r2, #107	; 0x6b
 8001f58:	21d0      	movs	r1, #208	; 0xd0
 8001f5a:	481a      	ldr	r0, [pc, #104]	; (8001fc4 <MPU6050_Config+0xa8>)
 8001f5c:	f001 fd12 	bl	8003984 <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1);

		// set DATA RATE of 1KHz by writing SMPLRT_DIV register
		data  =  0x07;
 8001f60:	2307      	movs	r3, #7
 8001f62:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	1dbb      	adds	r3, r7, #6
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2301      	movs	r3, #1
 8001f74:	2219      	movs	r2, #25
 8001f76:	21d0      	movs	r1, #208	; 0xd0
 8001f78:	4812      	ldr	r0, [pc, #72]	; (8001fc4 <MPU6050_Config+0xa8>)
 8001f7a:	f001 fd03 	bl	8003984 <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1);

		// set accelerometer e gyroscopic configuration in ACCEL_CONFIG and GYRO_CONFIG
		data = 0x00;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	2301      	movs	r3, #1
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	1dbb      	adds	r3, r7, #6
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	2219      	movs	r2, #25
 8001f94:	21d0      	movs	r1, #208	; 0xd0
 8001f96:	480b      	ldr	r0, [pc, #44]	; (8001fc4 <MPU6050_Config+0xa8>)
 8001f98:	f001 fcf4 	bl	8003984 <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1);

		data = 0x00;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8001fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	1dbb      	adds	r3, r7, #6
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2301      	movs	r3, #1
 8001fb0:	221b      	movs	r2, #27
 8001fb2:	21d0      	movs	r1, #208	; 0xd0
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <MPU6050_Config+0xa8>)
 8001fb6:	f001 fce5 	bl	8003984 <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write_DMA(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1);
	}
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000094 	.word	0x20000094

08001fc8 <read_accel>:

void read_accel(void)
//void read_accel(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af02      	add	r7, sp, #8
	uint8_t rec_data[6];

	// Lê 6 BYTES de dados a partir do registrador ACCEL_XOUT_H [ACELERÔMETRO]
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data, 6, 1000);
	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data, 6);
 8001fce:	2306      	movs	r3, #6
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	223b      	movs	r2, #59	; 0x3b
 8001fda:	21d0      	movs	r1, #208	; 0xd0
 8001fdc:	482e      	ldr	r0, [pc, #184]	; (8002098 <read_accel+0xd0>)
 8001fde:	f002 f833 	bl	8004048 <HAL_I2C_Mem_Read_DMA>

	/* converter os valores RAW em aceleração em 'g'
	   dividir de acordo com o valor Full scale definido em FS_SEL
	   FS_SEL = 0. Então, deve ser dividido por 16384 */

	Accel_X_RAW = (int16_t)(rec_data[0] << 8 | rec_data [1]);
 8001fe2:	783b      	ldrb	r3, [r7, #0]
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <read_accel+0xd4>)
 8001ff4:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(rec_data[2] << 8 | rec_data [3]);
 8001ff6:	78bb      	ldrb	r3, [r7, #2]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b21b      	sxth	r3, r3
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <read_accel+0xd8>)
 8002008:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(rec_data[4] << 8 | rec_data [5]);
 800200a:	793b      	ldrb	r3, [r7, #4]
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	b21a      	sxth	r2, r3
 8002010:	797b      	ldrb	r3, [r7, #5]
 8002012:	b21b      	sxth	r3, r3
 8002014:	4313      	orrs	r3, r2
 8002016:	b21b      	sxth	r3, r3
 8002018:	b29a      	uxth	r2, r3
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <read_accel+0xdc>)
 800201c:	801a      	strh	r2, [r3, #0]

	acc_data.Ax = Accel_X_RAW/16384.0;  // get the float g
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <read_accel+0xd4>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe f9e6 	bl	80003f4 <__aeabi_i2d>
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <read_accel+0xe0>)
 800202e:	f7fe fb75 	bl	800071c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fcf5 	bl	8000a28 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	4a1a      	ldr	r2, [pc, #104]	; (80020ac <read_accel+0xe4>)
 8002042:	6013      	str	r3, [r2, #0]
	acc_data.Ay = Accel_Y_RAW/16384.0;
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <read_accel+0xd8>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f9d3 	bl	80003f4 <__aeabi_i2d>
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <read_accel+0xe0>)
 8002054:	f7fe fb62 	bl	800071c <__aeabi_ddiv>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fce2 	bl	8000a28 <__aeabi_d2f>
 8002064:	4603      	mov	r3, r0
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <read_accel+0xe4>)
 8002068:	6053      	str	r3, [r2, #4]
	acc_data.Az = Accel_Z_RAW/16384.0;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <read_accel+0xdc>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe f9c0 	bl	80003f4 <__aeabi_i2d>
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <read_accel+0xe0>)
 800207a:	f7fe fb4f 	bl	800071c <__aeabi_ddiv>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fccf 	bl	8000a28 <__aeabi_d2f>
 800208a:	4603      	mov	r3, r0
 800208c:	4a07      	ldr	r2, [pc, #28]	; (80020ac <read_accel+0xe4>)
 800208e:	6093      	str	r3, [r2, #8]
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000094 	.word	0x20000094
 800209c:	20000234 	.word	0x20000234
 80020a0:	20000236 	.word	0x20000236
 80020a4:	20000238 	.word	0x20000238
 80020a8:	40d00000 	.word	0x40d00000
 80020ac:	2000023c 	.word	0x2000023c

080020b0 <dataRead>:


// leitura de corte, sao dados armazenados na memoria do sensor (ja vem de fabrica) e precisam ser utilizados para calculos dos novos valores

void dataRead(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	; 0x30
 80020b4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, 0x88, 1, trimdata, 25, 1000);
 80020b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ba:	9302      	str	r3, [sp, #8]
 80020bc:	2319      	movs	r3, #25
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	463b      	mov	r3, r7
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2301      	movs	r3, #1
 80020c6:	2288      	movs	r2, #136	; 0x88
 80020c8:	21ec      	movs	r1, #236	; 0xec
 80020ca:	483a      	ldr	r0, [pc, #232]	; (80021b4 <dataRead+0x104>)
 80020cc:	f001 fd54 	bl	8003b78 <HAL_I2C_Mem_Read>

	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	783b      	ldrb	r3, [r7, #0]
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21b      	sxth	r3, r3
 80020de:	b29a      	uxth	r2, r3
 80020e0:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <dataRead+0x108>)
 80020e2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	78bb      	ldrb	r3, [r7, #2]
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	4b32      	ldr	r3, [pc, #200]	; (80021bc <dataRead+0x10c>)
 80020f4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80020f6:	797b      	ldrb	r3, [r7, #5]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	b21a      	sxth	r2, r3
 80020fc:	793b      	ldrb	r3, [r7, #4]
 80020fe:	b21b      	sxth	r3, r3
 8002100:	4313      	orrs	r3, r2
 8002102:	b21a      	sxth	r2, r3
 8002104:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <dataRead+0x110>)
 8002106:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	b21a      	sxth	r2, r3
 800210e:	797b      	ldrb	r3, [r7, #5]
 8002110:	b21b      	sxth	r3, r3
 8002112:	4313      	orrs	r3, r2
 8002114:	b21b      	sxth	r3, r3
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <dataRead+0x114>)
 800211a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800211c:	7a7b      	ldrb	r3, [r7, #9]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	b21a      	sxth	r2, r3
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	b21b      	sxth	r3, r3
 8002126:	4313      	orrs	r3, r2
 8002128:	b21a      	sxth	r2, r3
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <dataRead+0x118>)
 800212c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800212e:	7afb      	ldrb	r3, [r7, #11]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	b21a      	sxth	r2, r3
 8002134:	7abb      	ldrb	r3, [r7, #10]
 8002136:	b21b      	sxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b21a      	sxth	r2, r3
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <dataRead+0x11c>)
 800213e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8002140:	7b7b      	ldrb	r3, [r7, #13]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	b21a      	sxth	r2, r3
 8002146:	7b3b      	ldrb	r3, [r7, #12]
 8002148:	b21b      	sxth	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b21a      	sxth	r2, r3
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <dataRead+0x120>)
 8002150:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	b21a      	sxth	r2, r3
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	b21b      	sxth	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b21a      	sxth	r2, r3
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <dataRead+0x124>)
 8002162:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8002164:	7c7b      	ldrb	r3, [r7, #17]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	7c3b      	ldrb	r3, [r7, #16]
 800216c:	b21b      	sxth	r3, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	b21a      	sxth	r2, r3
 8002172:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <dataRead+0x128>)
 8002174:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	b21a      	sxth	r2, r3
 800217c:	7cbb      	ldrb	r3, [r7, #18]
 800217e:	b21b      	sxth	r3, r3
 8002180:	4313      	orrs	r3, r2
 8002182:	b21a      	sxth	r2, r3
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <dataRead+0x12c>)
 8002186:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8002188:	7d7b      	ldrb	r3, [r7, #21]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	b21a      	sxth	r2, r3
 800218e:	7d3b      	ldrb	r3, [r7, #20]
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21a      	sxth	r2, r3
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <dataRead+0x130>)
 8002198:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	7dbb      	ldrb	r3, [r7, #22]
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <dataRead+0x134>)
 80021aa:	801a      	strh	r2, [r3, #0]

}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200000e8 	.word	0x200000e8
 80021b8:	20000254 	.word	0x20000254
 80021bc:	20000258 	.word	0x20000258
 80021c0:	2000025a 	.word	0x2000025a
 80021c4:	20000256 	.word	0x20000256
 80021c8:	2000025c 	.word	0x2000025c
 80021cc:	2000025e 	.word	0x2000025e
 80021d0:	20000260 	.word	0x20000260
 80021d4:	20000262 	.word	0x20000262
 80021d8:	20000264 	.word	0x20000264
 80021dc:	20000266 	.word	0x20000266
 80021e0:	20000268 	.word	0x20000268
 80021e4:	2000026a 	.word	0x2000026a

080021e8 <BMPReadRaw>:

int BMPReadRaw(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af04      	add	r7, sp, #16
	uint8_t Data[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BMP280_ADD, ID_REG, 1, &chipID, 1, 1000);
 80021ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f2:	9302      	str	r3, [sp, #8]
 80021f4:	2301      	movs	r3, #1
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <BMPReadRaw+0x80>)
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2301      	movs	r3, #1
 80021fe:	22d0      	movs	r2, #208	; 0xd0
 8002200:	21ec      	movs	r1, #236	; 0xec
 8002202:	481a      	ldr	r0, [pc, #104]	; (800226c <BMPReadRaw+0x84>)
 8002204:	f001 fcb8 	bl	8003b78 <HAL_I2C_Mem_Read>

	if (chipID == 0x58) //“id” register contains the chip identification number chip_id[7:0], which is 0x58
 8002208:	4b17      	ldr	r3, [pc, #92]	; (8002268 <BMPReadRaw+0x80>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b58      	cmp	r3, #88	; 0x58
 800220e:	d124      	bne.n	800225a <BMPReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFC
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, PRESS_MSB_REG, 1, Data, 6, 1000);
 8002210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	2306      	movs	r3, #6
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	463b      	mov	r3, r7
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2301      	movs	r3, #1
 8002220:	22f7      	movs	r2, #247	; 0xf7
 8002222:	21ec      	movs	r1, #236	; 0xec
 8002224:	4811      	ldr	r0, [pc, #68]	; (800226c <BMPReadRaw+0x84>)
 8002226:	f001 fca7 	bl	8003b78 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (Data[0]<<12)|(Data[1]<<4)|(Data[2]>>4);
 800222a:	783b      	ldrb	r3, [r7, #0]
 800222c:	031a      	lsls	r2, r3, #12
 800222e:	787b      	ldrb	r3, [r7, #1]
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	4313      	orrs	r3, r2
 8002234:	78ba      	ldrb	r2, [r7, #2]
 8002236:	0912      	lsrs	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	4313      	orrs	r3, r2
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <BMPReadRaw+0x88>)
 800223e:	6013      	str	r3, [r2, #0]
		tRaw = (Data[3]<<12)|(Data[4]<<4)|(Data[5]>>4);
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	031a      	lsls	r2, r3, #12
 8002244:	793b      	ldrb	r3, [r7, #4]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	4313      	orrs	r3, r2
 800224a:	797a      	ldrb	r2, [r7, #5]
 800224c:	0912      	lsrs	r2, r2, #4
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	4313      	orrs	r3, r2
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <BMPReadRaw+0x8c>)
 8002254:	6013      	str	r3, [r2, #0]

		return 0;
 8002256:	2300      	movs	r3, #0
 8002258:	e001      	b.n	800225e <BMPReadRaw+0x76>
	}

	else return -1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000248 	.word	0x20000248
 800226c:	200000e8 	.word	0x200000e8
 8002270:	20000250 	.word	0x20000250
 8002274:	2000024c 	.word	0x2000024c

08002278 <bmp280_compensate_T_int32>:

int32_t t_fine;
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2)) >> 11;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	10da      	asrs	r2, r3, #3
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <bmp280_compensate_T_int32+0x70>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	4a17      	ldr	r2, [pc, #92]	; (80022ec <bmp280_compensate_T_int32+0x74>)
 800228e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	12db      	asrs	r3, r3, #11
 8002298:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1))) >> 12)*((int32_t)dig_T3)) >> 14;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	111b      	asrs	r3, r3, #4
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <bmp280_compensate_T_int32+0x70>)
 80022a0:	8812      	ldrh	r2, [r2, #0]
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	1112      	asrs	r2, r2, #4
 80022a8:	490f      	ldr	r1, [pc, #60]	; (80022e8 <bmp280_compensate_T_int32+0x70>)
 80022aa:	8809      	ldrh	r1, [r1, #0]
 80022ac:	1a52      	subs	r2, r2, r1
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	131b      	asrs	r3, r3, #12
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <bmp280_compensate_T_int32+0x78>)
 80022b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	139b      	asrs	r3, r3, #14
 80022c0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <bmp280_compensate_T_int32+0x7c>)
 80022ca:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <bmp280_compensate_T_int32+0x7c>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	3380      	adds	r3, #128	; 0x80
 80022d8:	121b      	asrs	r3, r3, #8
 80022da:	60fb      	str	r3, [r7, #12]
	return T;
 80022dc:	68fb      	ldr	r3, [r7, #12]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000254 	.word	0x20000254
 80022ec:	20000258 	.word	0x20000258
 80022f0:	2000025a 	.word	0x2000025a
 80022f4:	2000026c 	.word	0x2000026c

080022f8 <bmp280_compensate_P_int32>:


int32_t bmp280_compensate_P_int32(int32_t adc_P)
{
 80022f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022fc:	b0ca      	sub	sp, #296	; 0x128
 80022fe:	af00      	add	r7, sp, #0
 8002300:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine)-128000;
 8002304:	4bae      	ldr	r3, [pc, #696]	; (80025c0 <bmp280_compensate_P_int32+0x2c8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	17da      	asrs	r2, r3, #31
 800230a:	461c      	mov	r4, r3
 800230c:	4615      	mov	r5, r2
 800230e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8002312:	f145 3bff 	adc.w	fp, r5, #4294967295
 8002316:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800231a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800231e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002322:	fb03 f102 	mul.w	r1, r3, r2
 8002326:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800232a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	18ca      	adds	r2, r1, r3
 8002334:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002338:	fba3 8903 	umull	r8, r9, r3, r3
 800233c:	eb02 0309 	add.w	r3, r2, r9
 8002340:	4699      	mov	r9, r3
 8002342:	4ba0      	ldr	r3, [pc, #640]	; (80025c4 <bmp280_compensate_P_int32+0x2cc>)
 8002344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002348:	b21b      	sxth	r3, r3
 800234a:	17da      	asrs	r2, r3, #31
 800234c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002350:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002354:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002358:	4603      	mov	r3, r0
 800235a:	fb03 f209 	mul.w	r2, r3, r9
 800235e:	460b      	mov	r3, r1
 8002360:	fb08 f303 	mul.w	r3, r8, r3
 8002364:	4413      	add	r3, r2
 8002366:	4602      	mov	r2, r0
 8002368:	fba8 2102 	umull	r2, r1, r8, r2
 800236c:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8002370:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002374:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002378:	4413      	add	r3, r2
 800237a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800237e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8002382:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8002386:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 +((var1*(int64_t)dig_P5) << 17);
 800238a:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <bmp280_compensate_P_int32+0x2d0>)
 800238c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002390:	b21b      	sxth	r3, r3
 8002392:	17da      	asrs	r2, r3, #31
 8002394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002398:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800239c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023a0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80023a4:	462a      	mov	r2, r5
 80023a6:	fb02 f203 	mul.w	r2, r2, r3
 80023aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023ae:	4621      	mov	r1, r4
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	441a      	add	r2, r3
 80023b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023ba:	4621      	mov	r1, r4
 80023bc:	fba3 3101 	umull	r3, r1, r3, r1
 80023c0:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80023c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80023c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023cc:	18d3      	adds	r3, r2, r3
 80023ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80023de:	462b      	mov	r3, r5
 80023e0:	0459      	lsls	r1, r3, #17
 80023e2:	4622      	mov	r2, r4
 80023e4:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80023e8:	4623      	mov	r3, r4
 80023ea:	0458      	lsls	r0, r3, #17
 80023ec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80023f0:	1814      	adds	r4, r2, r0
 80023f2:	643c      	str	r4, [r7, #64]	; 0x40
 80023f4:	414b      	adcs	r3, r1
 80023f6:	647b      	str	r3, [r7, #68]	; 0x44
 80023f8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80023fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4) << 35);
 8002400:	4b72      	ldr	r3, [pc, #456]	; (80025cc <bmp280_compensate_P_int32+0x2d4>)
 8002402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002406:	b21b      	sxth	r3, r3
 8002408:	17da      	asrs	r2, r3, #31
 800240a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800240e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002412:	f04f 0000 	mov.w	r0, #0
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800241e:	00d9      	lsls	r1, r3, #3
 8002420:	2000      	movs	r0, #0
 8002422:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002426:	1814      	adds	r4, r2, r0
 8002428:	63bc      	str	r4, [r7, #56]	; 0x38
 800242a:	414b      	adcs	r3, r1
 800242c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800242e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002432:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3) >>8) + ((var1 * (int64_t)dig_P2) <<12);
 8002436:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800243a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800243e:	fb03 f102 	mul.w	r1, r3, r2
 8002442:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002446:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	18ca      	adds	r2, r1, r3
 8002450:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002454:	fba3 3103 	umull	r3, r1, r3, r3
 8002458:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800245c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800246a:	4b59      	ldr	r3, [pc, #356]	; (80025d0 <bmp280_compensate_P_int32+0x2d8>)
 800246c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002470:	b21b      	sxth	r3, r3
 8002472:	17da      	asrs	r2, r3, #31
 8002474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002478:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800247c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8002480:	4622      	mov	r2, r4
 8002482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002486:	4641      	mov	r1, r8
 8002488:	fb01 f202 	mul.w	r2, r1, r2
 800248c:	464d      	mov	r5, r9
 800248e:	4618      	mov	r0, r3
 8002490:	4621      	mov	r1, r4
 8002492:	4603      	mov	r3, r0
 8002494:	fb03 f305 	mul.w	r3, r3, r5
 8002498:	4413      	add	r3, r2
 800249a:	4602      	mov	r2, r0
 800249c:	4641      	mov	r1, r8
 800249e:	fba2 2101 	umull	r2, r1, r2, r1
 80024a2:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80024a6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80024aa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80024ae:	4413      	add	r3, r2
 80024b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80024b4:	f04f 0000 	mov.w	r0, #0
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80024c0:	4623      	mov	r3, r4
 80024c2:	0a18      	lsrs	r0, r3, #8
 80024c4:	462a      	mov	r2, r5
 80024c6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80024ca:	462b      	mov	r3, r5
 80024cc:	1219      	asrs	r1, r3, #8
 80024ce:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <bmp280_compensate_P_int32+0x2dc>)
 80024d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	17da      	asrs	r2, r3, #31
 80024d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80024e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024e4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80024e8:	464a      	mov	r2, r9
 80024ea:	fb02 f203 	mul.w	r2, r2, r3
 80024ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80024f2:	4644      	mov	r4, r8
 80024f4:	fb04 f303 	mul.w	r3, r4, r3
 80024f8:	441a      	add	r2, r3
 80024fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024fe:	4644      	mov	r4, r8
 8002500:	fba3 3404 	umull	r3, r4, r3, r4
 8002504:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8002508:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800250c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002510:	18d3      	adds	r3, r2, r3
 8002512:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002522:	464c      	mov	r4, r9
 8002524:	0323      	lsls	r3, r4, #12
 8002526:	46c4      	mov	ip, r8
 8002528:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 800252c:	4644      	mov	r4, r8
 800252e:	0322      	lsls	r2, r4, #12
 8002530:	1884      	adds	r4, r0, r2
 8002532:	633c      	str	r4, [r7, #48]	; 0x30
 8002534:	eb41 0303 	adc.w	r3, r1, r3
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
 800253a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800253e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) <<47)+var1))*((int64_t)dig_P1) >>33;
 8002542:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002546:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800254a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800254e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002552:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <bmp280_compensate_P_int32+0x2e0>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	2200      	movs	r2, #0
 800255a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800255e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002562:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8002566:	4622      	mov	r2, r4
 8002568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800256c:	4641      	mov	r1, r8
 800256e:	fb01 f202 	mul.w	r2, r1, r2
 8002572:	464d      	mov	r5, r9
 8002574:	4618      	mov	r0, r3
 8002576:	4621      	mov	r1, r4
 8002578:	4603      	mov	r3, r0
 800257a:	fb03 f305 	mul.w	r3, r3, r5
 800257e:	4413      	add	r3, r2
 8002580:	4602      	mov	r2, r0
 8002582:	4641      	mov	r1, r8
 8002584:	fba2 2101 	umull	r2, r1, r2, r1
 8002588:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800258c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002590:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002594:	4413      	add	r3, r2
 8002596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80025a6:	4629      	mov	r1, r5
 80025a8:	104a      	asrs	r2, r1, #1
 80025aa:	4629      	mov	r1, r5
 80025ac:	17cb      	asrs	r3, r1, #31
 80025ae:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 80025b2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80025b6:	4313      	orrs	r3, r2
 80025b8:	d110      	bne.n	80025dc <bmp280_compensate_P_int32+0x2e4>
			{
				return 0; // avoid exception caused by division by zero
 80025ba:	2300      	movs	r3, #0
 80025bc:	e152      	b.n	8002864 <bmp280_compensate_P_int32+0x56c>
 80025be:	bf00      	nop
 80025c0:	2000026c 	.word	0x2000026c
 80025c4:	20000264 	.word	0x20000264
 80025c8:	20000262 	.word	0x20000262
 80025cc:	20000260 	.word	0x20000260
 80025d0:	2000025e 	.word	0x2000025e
 80025d4:	2000025c 	.word	0x2000025c
 80025d8:	20000256 	.word	0x20000256
			}

	p = 1048576-adc_P;
 80025dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025e0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80025e4:	17da      	asrs	r2, r3, #31
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025ea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80025ee:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80025f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025f6:	105b      	asrs	r3, r3, #1
 80025f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002600:	07db      	lsls	r3, r3, #31
 8002602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002606:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800260a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800260e:	4604      	mov	r4, r0
 8002610:	1aa4      	subs	r4, r4, r2
 8002612:	67bc      	str	r4, [r7, #120]	; 0x78
 8002614:	eb61 0303 	sbc.w	r3, r1, r3
 8002618:	67fb      	str	r3, [r7, #124]	; 0x7c
 800261a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800261e:	4622      	mov	r2, r4
 8002620:	462b      	mov	r3, r5
 8002622:	1891      	adds	r1, r2, r2
 8002624:	6239      	str	r1, [r7, #32]
 8002626:	415b      	adcs	r3, r3
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800262e:	4621      	mov	r1, r4
 8002630:	1851      	adds	r1, r2, r1
 8002632:	61b9      	str	r1, [r7, #24]
 8002634:	4629      	mov	r1, r5
 8002636:	414b      	adcs	r3, r1
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002646:	4649      	mov	r1, r9
 8002648:	018b      	lsls	r3, r1, #6
 800264a:	4641      	mov	r1, r8
 800264c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002650:	4641      	mov	r1, r8
 8002652:	018a      	lsls	r2, r1, #6
 8002654:	4641      	mov	r1, r8
 8002656:	1889      	adds	r1, r1, r2
 8002658:	6139      	str	r1, [r7, #16]
 800265a:	4649      	mov	r1, r9
 800265c:	eb43 0101 	adc.w	r1, r3, r1
 8002660:	6179      	str	r1, [r7, #20]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800266e:	4649      	mov	r1, r9
 8002670:	008b      	lsls	r3, r1, #2
 8002672:	46c4      	mov	ip, r8
 8002674:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002678:	4641      	mov	r1, r8
 800267a:	008a      	lsls	r2, r1, #2
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	4603      	mov	r3, r0
 8002682:	4622      	mov	r2, r4
 8002684:	189b      	adds	r3, r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	460b      	mov	r3, r1
 800268a:	462a      	mov	r2, r5
 800268c:	eb42 0303 	adc.w	r3, r2, r3
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800269e:	4649      	mov	r1, r9
 80026a0:	008b      	lsls	r3, r1, #2
 80026a2:	46c4      	mov	ip, r8
 80026a4:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80026a8:	4641      	mov	r1, r8
 80026aa:	008a      	lsls	r2, r1, #2
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	4603      	mov	r3, r0
 80026b2:	4622      	mov	r2, r4
 80026b4:	189b      	adds	r3, r3, r2
 80026b6:	673b      	str	r3, [r7, #112]	; 0x70
 80026b8:	462b      	mov	r3, r5
 80026ba:	460a      	mov	r2, r1
 80026bc:	eb42 0303 	adc.w	r3, r2, r3
 80026c0:	677b      	str	r3, [r7, #116]	; 0x74
 80026c2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80026c6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80026ca:	f7fe fcd1 	bl	8001070 <__aeabi_ldivmod>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80026d6:	4b66      	ldr	r3, [pc, #408]	; (8002870 <bmp280_compensate_P_int32+0x578>)
 80026d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026dc:	b21b      	sxth	r3, r3
 80026de:	17da      	asrs	r2, r3, #31
 80026e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80026e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026e4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80026e8:	f04f 0000 	mov.w	r0, #0
 80026ec:	f04f 0100 	mov.w	r1, #0
 80026f0:	0b50      	lsrs	r0, r2, #13
 80026f2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80026f6:	1359      	asrs	r1, r3, #13
 80026f8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80026fc:	462b      	mov	r3, r5
 80026fe:	fb00 f203 	mul.w	r2, r0, r3
 8002702:	4623      	mov	r3, r4
 8002704:	fb03 f301 	mul.w	r3, r3, r1
 8002708:	4413      	add	r3, r2
 800270a:	4622      	mov	r2, r4
 800270c:	fba2 2100 	umull	r2, r1, r2, r0
 8002710:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8002714:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002718:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800271c:	4413      	add	r3, r2
 800271e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002722:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002726:	f04f 0000 	mov.w	r0, #0
 800272a:	f04f 0100 	mov.w	r1, #0
 800272e:	0b50      	lsrs	r0, r2, #13
 8002730:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002734:	1359      	asrs	r1, r3, #13
 8002736:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800273a:	462b      	mov	r3, r5
 800273c:	fb00 f203 	mul.w	r2, r0, r3
 8002740:	4623      	mov	r3, r4
 8002742:	fb03 f301 	mul.w	r3, r3, r1
 8002746:	4413      	add	r3, r2
 8002748:	4622      	mov	r2, r4
 800274a:	fba2 2100 	umull	r2, r1, r2, r0
 800274e:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8002752:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8002756:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800275a:	4413      	add	r3, r2
 800275c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800276c:	4621      	mov	r1, r4
 800276e:	0e4a      	lsrs	r2, r1, #25
 8002770:	4620      	mov	r0, r4
 8002772:	4629      	mov	r1, r5
 8002774:	460c      	mov	r4, r1
 8002776:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 800277a:	164b      	asrs	r3, r1, #25
 800277c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8002780:	4b3c      	ldr	r3, [pc, #240]	; (8002874 <bmp280_compensate_P_int32+0x57c>)
 8002782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002786:	b21b      	sxth	r3, r3
 8002788:	17da      	asrs	r2, r3, #31
 800278a:	663b      	str	r3, [r7, #96]	; 0x60
 800278c:	667a      	str	r2, [r7, #100]	; 0x64
 800278e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002792:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002796:	462a      	mov	r2, r5
 8002798:	fb02 f203 	mul.w	r2, r2, r3
 800279c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027a0:	4621      	mov	r1, r4
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80027ac:	4621      	mov	r1, r4
 80027ae:	fba2 2101 	umull	r2, r1, r2, r1
 80027b2:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80027b6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80027ba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80027be:	4413      	add	r3, r2
 80027c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80027d0:	4621      	mov	r1, r4
 80027d2:	0cca      	lsrs	r2, r1, #19
 80027d4:	4620      	mov	r0, r4
 80027d6:	4629      	mov	r1, r5
 80027d8:	460c      	mov	r4, r1
 80027da:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80027de:	14cb      	asrs	r3, r1, #19
 80027e0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80027e4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80027e8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80027ec:	1884      	adds	r4, r0, r2
 80027ee:	65bc      	str	r4, [r7, #88]	; 0x58
 80027f0:	eb41 0303 	adc.w	r3, r1, r3
 80027f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027f6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80027fa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80027fe:	4621      	mov	r1, r4
 8002800:	1889      	adds	r1, r1, r2
 8002802:	6539      	str	r1, [r7, #80]	; 0x50
 8002804:	4629      	mov	r1, r5
 8002806:	eb43 0101 	adc.w	r1, r3, r1
 800280a:	6579      	str	r1, [r7, #84]	; 0x54
 800280c:	f04f 0000 	mov.w	r0, #0
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002818:	4623      	mov	r3, r4
 800281a:	0a18      	lsrs	r0, r3, #8
 800281c:	462a      	mov	r2, r5
 800281e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8002822:	462b      	mov	r3, r5
 8002824:	1219      	asrs	r1, r3, #8
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <bmp280_compensate_P_int32+0x580>)
 8002828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800282c:	b21b      	sxth	r3, r3
 800282e:	17da      	asrs	r2, r3, #31
 8002830:	64bb      	str	r3, [r7, #72]	; 0x48
 8002832:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8002840:	464c      	mov	r4, r9
 8002842:	0123      	lsls	r3, r4, #4
 8002844:	46c4      	mov	ip, r8
 8002846:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 800284a:	4644      	mov	r4, r8
 800284c:	0122      	lsls	r2, r4, #4
 800284e:	1884      	adds	r4, r0, r2
 8002850:	603c      	str	r4, [r7, #0]
 8002852:	eb41 0303 	adc.w	r3, r1, r3
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	e9d7 3400 	ldrd	r3, r4, [r7]
 800285c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (int64_t)p;
 8002860:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110

}
 8002864:	4618      	mov	r0, r3
 8002866:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800286a:	46bd      	mov	sp, r7
 800286c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002870:	2000026a 	.word	0x2000026a
 8002874:	20000268 	.word	0x20000268
 8002878:	20000266 	.word	0x20000266

0800287c <BMP280_Config>:


int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af04      	add	r7, sp, #16
 8002882:	4604      	mov	r4, r0
 8002884:	4608      	mov	r0, r1
 8002886:	4611      	mov	r1, r2
 8002888:	461a      	mov	r2, r3
 800288a:	4623      	mov	r3, r4
 800288c:	71fb      	strb	r3, [r7, #7]
 800288e:	4603      	mov	r3, r0
 8002890:	71bb      	strb	r3, [r7, #6]
 8002892:	460b      	mov	r3, r1
 8002894:	717b      	strb	r3, [r7, #5]
 8002896:	4613      	mov	r3, r2
 8002898:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	dataRead();
 800289a:	f7ff fc09 	bl	80020b0 <dataRead>

	uint8_t datatowrite = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80028a6:	23b6      	movs	r3, #182	; 0xb6
 80028a8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	2301      	movs	r3, #1
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	f107 030f 	add.w	r3, r7, #15
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	22e0      	movs	r2, #224	; 0xe0
 80028be:	21ec      	movs	r1, #236	; 0xec
 80028c0:	4840      	ldr	r0, [pc, #256]	; (80029c4 <BMP280_Config+0x148>)
 80028c2:	f001 f85f 	bl	8003984 <HAL_I2C_Mem_Write>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <BMP280_Config+0x56>
	{
		return -1;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295
 80028d0:	e074      	b.n	80029bc <BMP280_Config+0x140>
	}

	HAL_Delay (100);
 80028d2:	2064      	movs	r0, #100	; 0x64
 80028d4:	f000 f9a4 	bl	8002c20 <HAL_Delay>


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80028d8:	793b      	ldrb	r3, [r7, #4]
 80028da:	015b      	lsls	r3, r3, #5
 80028dc:	b25a      	sxtb	r2, r3
 80028de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	b25b      	sxtb	r3, r3
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	2301      	movs	r3, #1
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	f107 030f 	add.w	r3, r7, #15
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2301      	movs	r3, #1
 8002900:	22f5      	movs	r2, #245	; 0xf5
 8002902:	21ec      	movs	r1, #236	; 0xec
 8002904:	482f      	ldr	r0, [pc, #188]	; (80029c4 <BMP280_Config+0x148>)
 8002906:	f001 f83d 	bl	8003984 <HAL_I2C_Mem_Write>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <BMP280_Config+0x9a>
	{
		return -1;
 8002910:	f04f 33ff 	mov.w	r3, #4294967295
 8002914:	e052      	b.n	80029bc <BMP280_Config+0x140>
	}
	HAL_Delay (100);
 8002916:	2064      	movs	r0, #100	; 0x64
 8002918:	f000 f982 	bl	8002c20 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, CONFIG_REG, 1, &datacheck, 1, 1000);
 800291c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002920:	9302      	str	r3, [sp, #8]
 8002922:	2301      	movs	r3, #1
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	f107 030e 	add.w	r3, r7, #14
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2301      	movs	r3, #1
 800292e:	22f5      	movs	r2, #245	; 0xf5
 8002930:	21ec      	movs	r1, #236	; 0xec
 8002932:	4824      	ldr	r0, [pc, #144]	; (80029c4 <BMP280_Config+0x148>)
 8002934:	f001 f920 	bl	8003b78 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8002938:	7bba      	ldrb	r2, [r7, #14]
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	429a      	cmp	r2, r3
 800293e:	d002      	beq.n	8002946 <BMP280_Config+0xca>
	{
		return -1;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
 8002944:	e03a      	b.n	80029bc <BMP280_Config+0x140>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	015b      	lsls	r3, r3, #5
 800294a:	b25a      	sxtb	r2, r3
 800294c:	79bb      	ldrb	r3, [r7, #6]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	b25b      	sxtb	r3, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	b25a      	sxtb	r2, r3
 8002956:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800295a:	4313      	orrs	r3, r2
 800295c:	b25b      	sxtb	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8002962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	2301      	movs	r3, #1
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	f107 030f 	add.w	r3, r7, #15
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2301      	movs	r3, #1
 8002974:	22f4      	movs	r2, #244	; 0xf4
 8002976:	21ec      	movs	r1, #236	; 0xec
 8002978:	4812      	ldr	r0, [pc, #72]	; (80029c4 <BMP280_Config+0x148>)
 800297a:	f001 f803 	bl	8003984 <HAL_I2C_Mem_Write>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <BMP280_Config+0x10e>
	{
		return -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	e018      	b.n	80029bc <BMP280_Config+0x140>
	}
	HAL_Delay (100);
 800298a:	2064      	movs	r0, #100	; 0x64
 800298c:	f000 f948 	bl	8002c20 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8002990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	2301      	movs	r3, #1
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	f107 030e 	add.w	r3, r7, #14
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2301      	movs	r3, #1
 80029a2:	22f4      	movs	r2, #244	; 0xf4
 80029a4:	21ec      	movs	r1, #236	; 0xec
 80029a6:	4807      	ldr	r0, [pc, #28]	; (80029c4 <BMP280_Config+0x148>)
 80029a8:	f001 f8e6 	bl	8003b78 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80029ac:	7bba      	ldrb	r2, [r7, #14]
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d002      	beq.n	80029ba <BMP280_Config+0x13e>
	{
		return -1;
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295
 80029b8:	e000      	b.n	80029bc <BMP280_Config+0x140>
	}

	return 0;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd90      	pop	{r4, r7, pc}
 80029c4:	200000e8 	.word	0x200000e8

080029c8 <BMP280_Measure>:
/* measure the temp, pressure
 * the values will be stored in the parameters passed to the function
 */

void BMP280_Measure(float *temperature, float *pressure)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
	const int32_t INVALID_RAW_VALUE = 0x800000;
 80029d2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80029d6:	60fb      	str	r3, [r7, #12]

	if (BMPReadRaw() == 0)
 80029d8:	f7ff fc06 	bl	80021e8 <BMPReadRaw>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d13b      	bne.n	8002a5a <BMP280_Measure+0x92>
	{
		  if (tRaw != INVALID_RAW_VALUE) {
 80029e2:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <BMP280_Measure+0xac>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d017      	beq.n	8002a1c <BMP280_Measure+0x54>
			  *temperature = (bmp280_compensate_T_int32 (tRaw))/100.0;  // temp x100
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <BMP280_Measure+0xac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fc41 	bl	8002278 <bmp280_compensate_T_int32>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fcfb 	bl	80003f4 <__aeabi_i2d>
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <BMP280_Measure+0xb0>)
 8002a04:	f7fd fe8a 	bl	800071c <__aeabi_ddiv>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f7fe f80a 	bl	8000a28 <__aeabi_d2f>
 8002a14:	4602      	mov	r2, r0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e003      	b.n	8002a24 <BMP280_Measure+0x5c>
			  }
		  else *temperature = 1; // value in case temp measurement was disabled
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a22:	601a      	str	r2, [r3, #0]

		  if (pRaw != INVALID_RAW_VALUE) {
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <BMP280_Measure+0xb4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d010      	beq.n	8002a50 <BMP280_Measure+0x88>
			  *pressure = (bmp280_compensate_P_int32 (pRaw))/256;  //  Pa
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <BMP280_Measure+0xb4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fc60 	bl	80022f8 <bmp280_compensate_P_int32>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	da00      	bge.n	8002a40 <BMP280_Measure+0x78>
 8002a3e:	33ff      	adds	r3, #255	; 0xff
 8002a40:	121b      	asrs	r3, r3, #8
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f8fa 	bl	8000c3c <__aeabi_i2f>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	601a      	str	r2, [r3, #0]

	else
	{
		*temperature = *pressure = 1;
	}
}
 8002a4e:	e00c      	b.n	8002a6a <BMP280_Measure+0xa2>
			  *pressure = 1; // value in case temp measurement was disabled
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a56:	601a      	str	r2, [r3, #0]
}
 8002a58:	e007      	b.n	8002a6a <BMP280_Measure+0xa2>
		*temperature = *pressure = 1;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	601a      	str	r2, [r3, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000024c 	.word	0x2000024c
 8002a78:	40590000 	.word	0x40590000
 8002a7c:	20000250 	.word	0x20000250

08002a80 <Measure_alt>:

// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa

void Measure_alt(float *altitude )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	float pressure_calc[1],temperature_calc[1];
	float pressureSeaLevel = 101325; // pressão ao nível do mar em Pascals
 8002a88:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <Measure_alt+0x88>)
 8002a8a:	617b      	str	r3, [r7, #20]

	BMP280_Measure(temperature_calc, pressure_calc);
 8002a8c:	f107 0210 	add.w	r2, r7, #16
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ff96 	bl	80029c8 <BMP280_Measure>

	*altitude = (float)(44330 * (1 - pow((*pressure_calc / pressureSeaLevel), (1 / 5.255))));
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6979      	ldr	r1, [r7, #20]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe f9d3 	bl	8000e4c <__aeabi_fdiv>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fcb5 	bl	8000418 <__aeabi_f2d>
 8002aae:	a312      	add	r3, pc, #72	; (adr r3, 8002af8 <Measure_alt+0x78>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f004 fec4 	bl	8007840 <pow>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	f04f 0000 	mov.w	r0, #0
 8002ac0:	4912      	ldr	r1, [pc, #72]	; (8002b0c <Measure_alt+0x8c>)
 8002ac2:	f7fd fb49 	bl	8000158 <__aeabi_dsub>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	a30c      	add	r3, pc, #48	; (adr r3, 8002b00 <Measure_alt+0x80>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fcf8 	bl	80004c8 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fd ffa2 	bl	8000a28 <__aeabi_d2f>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	601a      	str	r2, [r3, #0]
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	f3af 8000 	nop.w
 8002af8:	ccd9456c 	.word	0xccd9456c
 8002afc:	3fc85b95 	.word	0x3fc85b95
 8002b00:	00000000 	.word	0x00000000
 8002b04:	40e5a540 	.word	0x40e5a540
 8002b08:	47c5e680 	.word	0x47c5e680
 8002b0c:	3ff00000 	.word	0x3ff00000

08002b10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b12:	490d      	ldr	r1, [pc, #52]	; (8002b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b18:	e002      	b.n	8002b20 <LoopCopyDataInit>

08002b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1e:	3304      	adds	r3, #4

08002b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b24:	d3f9      	bcc.n	8002b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b28:	4c0a      	ldr	r4, [pc, #40]	; (8002b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b2c:	e001      	b.n	8002b32 <LoopFillZerobss>

08002b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b30:	3204      	adds	r2, #4

08002b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b34:	d3fb      	bcc.n	8002b2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b36:	f7ff f9eb 	bl	8001f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b3a:	f005 fd69 	bl	8008610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b3e:	f7fe fd0b 	bl	8001558 <main>
  bx lr
 8002b42:	4770      	bx	lr
  ldr r0, =_sdata
 8002b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002b4c:	080086e8 	.word	0x080086e8
  ldr r2, =_sbss
 8002b50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002b54:	20000274 	.word	0x20000274

08002b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b58:	e7fe      	b.n	8002b58 <ADC1_2_IRQHandler>
	...

08002b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_Init+0x28>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <HAL_Init+0x28>)
 8002b66:	f043 0310 	orr.w	r3, r3, #16
 8002b6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f000 f947 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b72:	200f      	movs	r0, #15
 8002b74:	f000 f808 	bl	8002b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b78:	f7ff f818 	bl	8001bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40022000 	.word	0x40022000

08002b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_InitTick+0x54>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_InitTick+0x58>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f95f 	bl	8002e6a <HAL_SYSTICK_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00e      	b.n	8002bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d80a      	bhi.n	8002bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f000 f927 	bl	8002e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc8:	4a06      	ldr	r2, [pc, #24]	; (8002be4 <HAL_InitTick+0x5c>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000004 	.word	0x20000004
 8002be0:	2000000c 	.word	0x2000000c
 8002be4:	20000008 	.word	0x20000008

08002be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_IncTick+0x1c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_IncTick+0x20>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a03      	ldr	r2, [pc, #12]	; (8002c08 <HAL_IncTick+0x20>)
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	2000000c 	.word	0x2000000c
 8002c08:	20000270 	.word	0x20000270

08002c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c10:	4b02      	ldr	r3, [pc, #8]	; (8002c1c <HAL_GetTick+0x10>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	20000270 	.word	0x20000270

08002c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff fff0 	bl	8002c0c <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d005      	beq.n	8002c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_Delay+0x44>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c46:	bf00      	nop
 8002c48:	f7ff ffe0 	bl	8002c0c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d8f7      	bhi.n	8002c48 <HAL_Delay+0x28>
  {
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2000000c 	.word	0x2000000c

08002c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	; (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60d3      	str	r3, [r2, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0307 	and.w	r3, r3, #7
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4906      	ldr	r1, [pc, #24]	; (8002d00 <__NVIC_EnableIRQ+0x34>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db0a      	blt.n	8002d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	490c      	ldr	r1, [pc, #48]	; (8002d50 <__NVIC_SetPriority+0x4c>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	0112      	lsls	r2, r2, #4
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	440b      	add	r3, r1
 8002d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d2c:	e00a      	b.n	8002d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <__NVIC_SetPriority+0x50>)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	440b      	add	r3, r1
 8002d42:	761a      	strb	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f1c3 0307 	rsb	r3, r3, #7
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	bf28      	it	cs
 8002d76:	2304      	movcs	r3, #4
 8002d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <NVIC_EncodePriority+0x30>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3b03      	subs	r3, #3
 8002d86:	e000      	b.n	8002d8a <NVIC_EncodePriority+0x32>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	4313      	orrs	r3, r2
         );
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dcc:	d301      	bcc.n	8002dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00f      	b.n	8002df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <SysTick_Config+0x40>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dda:	210f      	movs	r1, #15
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f7ff ff90 	bl	8002d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <SysTick_Config+0x40>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dea:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <SysTick_Config+0x40>)
 8002dec:	2207      	movs	r2, #7
 8002dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff2d 	bl	8002c68 <__NVIC_SetPriorityGrouping>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff42 	bl	8002cb0 <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff90 	bl	8002d58 <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff5f 	bl	8002d04 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff35 	bl	8002ccc <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffa2 	bl	8002dbc <SysTick_Config>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e043      	b.n	8002f22 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_DMA_Init+0xa8>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_DMA_Init+0xac>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_DMA_Init+0xb0>)
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ece:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ed2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	bffdfff8 	.word	0xbffdfff8
 8002f30:	cccccccd 	.word	0xcccccccd
 8002f34:	40020000 	.word	0x40020000

08002f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_DMA_Start_IT+0x20>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e04a      	b.n	8002fee <HAL_DMA_Start_IT+0xb6>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d13a      	bne.n	8002fe0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f9ba 	bl	8003308 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 020e 	orr.w	r2, r2, #14
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e00f      	b.n	8002fce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0204 	bic.w	r2, r2, #4
 8002fbc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 020a 	orr.w	r2, r2, #10
 8002fcc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e005      	b.n	8002fec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800300a:	2b02      	cmp	r3, #2
 800300c:	d005      	beq.n	800301a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2204      	movs	r2, #4
 8003012:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
 8003018:	e051      	b.n	80030be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 020e 	bic.w	r2, r2, #14
 8003028:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a22      	ldr	r2, [pc, #136]	; (80030c8 <HAL_DMA_Abort_IT+0xd0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d029      	beq.n	8003098 <HAL_DMA_Abort_IT+0xa0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a20      	ldr	r2, [pc, #128]	; (80030cc <HAL_DMA_Abort_IT+0xd4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d022      	beq.n	8003094 <HAL_DMA_Abort_IT+0x9c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1f      	ldr	r2, [pc, #124]	; (80030d0 <HAL_DMA_Abort_IT+0xd8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d01a      	beq.n	800308e <HAL_DMA_Abort_IT+0x96>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1d      	ldr	r2, [pc, #116]	; (80030d4 <HAL_DMA_Abort_IT+0xdc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d012      	beq.n	8003088 <HAL_DMA_Abort_IT+0x90>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <HAL_DMA_Abort_IT+0xe0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00a      	beq.n	8003082 <HAL_DMA_Abort_IT+0x8a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1a      	ldr	r2, [pc, #104]	; (80030dc <HAL_DMA_Abort_IT+0xe4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d102      	bne.n	800307c <HAL_DMA_Abort_IT+0x84>
 8003076:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800307a:	e00e      	b.n	800309a <HAL_DMA_Abort_IT+0xa2>
 800307c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003080:	e00b      	b.n	800309a <HAL_DMA_Abort_IT+0xa2>
 8003082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003086:	e008      	b.n	800309a <HAL_DMA_Abort_IT+0xa2>
 8003088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308c:	e005      	b.n	800309a <HAL_DMA_Abort_IT+0xa2>
 800308e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003092:	e002      	b.n	800309a <HAL_DMA_Abort_IT+0xa2>
 8003094:	2310      	movs	r3, #16
 8003096:	e000      	b.n	800309a <HAL_DMA_Abort_IT+0xa2>
 8003098:	2301      	movs	r3, #1
 800309a:	4a11      	ldr	r2, [pc, #68]	; (80030e0 <HAL_DMA_Abort_IT+0xe8>)
 800309c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
    } 
  }
  return status;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40020008 	.word	0x40020008
 80030cc:	4002001c 	.word	0x4002001c
 80030d0:	40020030 	.word	0x40020030
 80030d4:	40020044 	.word	0x40020044
 80030d8:	40020058 	.word	0x40020058
 80030dc:	4002006c 	.word	0x4002006c
 80030e0:	40020000 	.word	0x40020000

080030e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	2204      	movs	r2, #4
 8003102:	409a      	lsls	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d04f      	beq.n	80031ac <HAL_DMA_IRQHandler+0xc8>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d04a      	beq.n	80031ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0204 	bic.w	r2, r2, #4
 8003132:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a66      	ldr	r2, [pc, #408]	; (80032d4 <HAL_DMA_IRQHandler+0x1f0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d029      	beq.n	8003192 <HAL_DMA_IRQHandler+0xae>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <HAL_DMA_IRQHandler+0x1f4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <HAL_DMA_IRQHandler+0xaa>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a63      	ldr	r2, [pc, #396]	; (80032dc <HAL_DMA_IRQHandler+0x1f8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01a      	beq.n	8003188 <HAL_DMA_IRQHandler+0xa4>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a62      	ldr	r2, [pc, #392]	; (80032e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d012      	beq.n	8003182 <HAL_DMA_IRQHandler+0x9e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a60      	ldr	r2, [pc, #384]	; (80032e4 <HAL_DMA_IRQHandler+0x200>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00a      	beq.n	800317c <HAL_DMA_IRQHandler+0x98>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a5f      	ldr	r2, [pc, #380]	; (80032e8 <HAL_DMA_IRQHandler+0x204>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d102      	bne.n	8003176 <HAL_DMA_IRQHandler+0x92>
 8003170:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003174:	e00e      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 8003176:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800317a:	e00b      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 800317c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003180:	e008      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 8003182:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003186:	e005      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 8003188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800318c:	e002      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 800318e:	2340      	movs	r3, #64	; 0x40
 8003190:	e000      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 8003192:	2304      	movs	r3, #4
 8003194:	4a55      	ldr	r2, [pc, #340]	; (80032ec <HAL_DMA_IRQHandler+0x208>)
 8003196:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8094 	beq.w	80032ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031aa:	e08e      	b.n	80032ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2202      	movs	r2, #2
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d056      	beq.n	800326a <HAL_DMA_IRQHandler+0x186>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d051      	beq.n	800326a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 020a 	bic.w	r2, r2, #10
 80031e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a38      	ldr	r2, [pc, #224]	; (80032d4 <HAL_DMA_IRQHandler+0x1f0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d029      	beq.n	800324a <HAL_DMA_IRQHandler+0x166>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a37      	ldr	r2, [pc, #220]	; (80032d8 <HAL_DMA_IRQHandler+0x1f4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <HAL_DMA_IRQHandler+0x162>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a35      	ldr	r2, [pc, #212]	; (80032dc <HAL_DMA_IRQHandler+0x1f8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01a      	beq.n	8003240 <HAL_DMA_IRQHandler+0x15c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a34      	ldr	r2, [pc, #208]	; (80032e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d012      	beq.n	800323a <HAL_DMA_IRQHandler+0x156>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a32      	ldr	r2, [pc, #200]	; (80032e4 <HAL_DMA_IRQHandler+0x200>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00a      	beq.n	8003234 <HAL_DMA_IRQHandler+0x150>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <HAL_DMA_IRQHandler+0x204>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d102      	bne.n	800322e <HAL_DMA_IRQHandler+0x14a>
 8003228:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800322c:	e00e      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 800322e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003232:	e00b      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 8003234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003238:	e008      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 800323a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800323e:	e005      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 8003240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003244:	e002      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 8003246:	2320      	movs	r3, #32
 8003248:	e000      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 800324a:	2302      	movs	r3, #2
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <HAL_DMA_IRQHandler+0x208>)
 800324e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	2b00      	cmp	r3, #0
 800325e:	d034      	beq.n	80032ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003268:	e02f      	b.n	80032ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2208      	movs	r2, #8
 8003270:	409a      	lsls	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d028      	beq.n	80032cc <HAL_DMA_IRQHandler+0x1e8>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d023      	beq.n	80032cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 020e 	bic.w	r2, r2, #14
 8003292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
    }
  }
  return;
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
}
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40020008 	.word	0x40020008
 80032d8:	4002001c 	.word	0x4002001c
 80032dc:	40020030 	.word	0x40020030
 80032e0:	40020044 	.word	0x40020044
 80032e4:	40020058 	.word	0x40020058
 80032e8:	4002006c 	.word	0x4002006c
 80032ec:	40020000 	.word	0x40020000

080032f0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f202 	lsl.w	r2, r1, r2
 8003324:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b10      	cmp	r3, #16
 8003334:	d108      	bne.n	8003348 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003346:	e007      	b.n	8003358 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
	...

08003364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003364:	b480      	push	{r7}
 8003366:	b08b      	sub	sp, #44	; 0x2c
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003376:	e169      	b.n	800364c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003378:	2201      	movs	r2, #1
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	429a      	cmp	r2, r3
 8003392:	f040 8158 	bne.w	8003646 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4a9a      	ldr	r2, [pc, #616]	; (8003604 <HAL_GPIO_Init+0x2a0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d05e      	beq.n	800345e <HAL_GPIO_Init+0xfa>
 80033a0:	4a98      	ldr	r2, [pc, #608]	; (8003604 <HAL_GPIO_Init+0x2a0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d875      	bhi.n	8003492 <HAL_GPIO_Init+0x12e>
 80033a6:	4a98      	ldr	r2, [pc, #608]	; (8003608 <HAL_GPIO_Init+0x2a4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d058      	beq.n	800345e <HAL_GPIO_Init+0xfa>
 80033ac:	4a96      	ldr	r2, [pc, #600]	; (8003608 <HAL_GPIO_Init+0x2a4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d86f      	bhi.n	8003492 <HAL_GPIO_Init+0x12e>
 80033b2:	4a96      	ldr	r2, [pc, #600]	; (800360c <HAL_GPIO_Init+0x2a8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d052      	beq.n	800345e <HAL_GPIO_Init+0xfa>
 80033b8:	4a94      	ldr	r2, [pc, #592]	; (800360c <HAL_GPIO_Init+0x2a8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d869      	bhi.n	8003492 <HAL_GPIO_Init+0x12e>
 80033be:	4a94      	ldr	r2, [pc, #592]	; (8003610 <HAL_GPIO_Init+0x2ac>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d04c      	beq.n	800345e <HAL_GPIO_Init+0xfa>
 80033c4:	4a92      	ldr	r2, [pc, #584]	; (8003610 <HAL_GPIO_Init+0x2ac>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d863      	bhi.n	8003492 <HAL_GPIO_Init+0x12e>
 80033ca:	4a92      	ldr	r2, [pc, #584]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d046      	beq.n	800345e <HAL_GPIO_Init+0xfa>
 80033d0:	4a90      	ldr	r2, [pc, #576]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d85d      	bhi.n	8003492 <HAL_GPIO_Init+0x12e>
 80033d6:	2b12      	cmp	r3, #18
 80033d8:	d82a      	bhi.n	8003430 <HAL_GPIO_Init+0xcc>
 80033da:	2b12      	cmp	r3, #18
 80033dc:	d859      	bhi.n	8003492 <HAL_GPIO_Init+0x12e>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <HAL_GPIO_Init+0x80>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	0800345f 	.word	0x0800345f
 80033e8:	08003439 	.word	0x08003439
 80033ec:	0800344b 	.word	0x0800344b
 80033f0:	0800348d 	.word	0x0800348d
 80033f4:	08003493 	.word	0x08003493
 80033f8:	08003493 	.word	0x08003493
 80033fc:	08003493 	.word	0x08003493
 8003400:	08003493 	.word	0x08003493
 8003404:	08003493 	.word	0x08003493
 8003408:	08003493 	.word	0x08003493
 800340c:	08003493 	.word	0x08003493
 8003410:	08003493 	.word	0x08003493
 8003414:	08003493 	.word	0x08003493
 8003418:	08003493 	.word	0x08003493
 800341c:	08003493 	.word	0x08003493
 8003420:	08003493 	.word	0x08003493
 8003424:	08003493 	.word	0x08003493
 8003428:	08003441 	.word	0x08003441
 800342c:	08003455 	.word	0x08003455
 8003430:	4a79      	ldr	r2, [pc, #484]	; (8003618 <HAL_GPIO_Init+0x2b4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003436:	e02c      	b.n	8003492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	623b      	str	r3, [r7, #32]
          break;
 800343e:	e029      	b.n	8003494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	3304      	adds	r3, #4
 8003446:	623b      	str	r3, [r7, #32]
          break;
 8003448:	e024      	b.n	8003494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	3308      	adds	r3, #8
 8003450:	623b      	str	r3, [r7, #32]
          break;
 8003452:	e01f      	b.n	8003494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	330c      	adds	r3, #12
 800345a:	623b      	str	r3, [r7, #32]
          break;
 800345c:	e01a      	b.n	8003494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003466:	2304      	movs	r3, #4
 8003468:	623b      	str	r3, [r7, #32]
          break;
 800346a:	e013      	b.n	8003494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003474:	2308      	movs	r3, #8
 8003476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	611a      	str	r2, [r3, #16]
          break;
 800347e:	e009      	b.n	8003494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003480:	2308      	movs	r3, #8
 8003482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	615a      	str	r2, [r3, #20]
          break;
 800348a:	e003      	b.n	8003494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800348c:	2300      	movs	r3, #0
 800348e:	623b      	str	r3, [r7, #32]
          break;
 8003490:	e000      	b.n	8003494 <HAL_GPIO_Init+0x130>
          break;
 8003492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2bff      	cmp	r3, #255	; 0xff
 8003498:	d801      	bhi.n	800349e <HAL_GPIO_Init+0x13a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	e001      	b.n	80034a2 <HAL_GPIO_Init+0x13e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2bff      	cmp	r3, #255	; 0xff
 80034a8:	d802      	bhi.n	80034b0 <HAL_GPIO_Init+0x14c>
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	e002      	b.n	80034b6 <HAL_GPIO_Init+0x152>
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	3b08      	subs	r3, #8
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	210f      	movs	r1, #15
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	401a      	ands	r2, r3
 80034c8:	6a39      	ldr	r1, [r7, #32]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	431a      	orrs	r2, r3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80b1 	beq.w	8003646 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034e4:	4b4d      	ldr	r3, [pc, #308]	; (800361c <HAL_GPIO_Init+0x2b8>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	4a4c      	ldr	r2, [pc, #304]	; (800361c <HAL_GPIO_Init+0x2b8>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6193      	str	r3, [r2, #24]
 80034f0:	4b4a      	ldr	r3, [pc, #296]	; (800361c <HAL_GPIO_Init+0x2b8>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034fc:	4a48      	ldr	r2, [pc, #288]	; (8003620 <HAL_GPIO_Init+0x2bc>)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a40      	ldr	r2, [pc, #256]	; (8003624 <HAL_GPIO_Init+0x2c0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d013      	beq.n	8003550 <HAL_GPIO_Init+0x1ec>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <HAL_GPIO_Init+0x2c4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00d      	beq.n	800354c <HAL_GPIO_Init+0x1e8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a3e      	ldr	r2, [pc, #248]	; (800362c <HAL_GPIO_Init+0x2c8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d007      	beq.n	8003548 <HAL_GPIO_Init+0x1e4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a3d      	ldr	r2, [pc, #244]	; (8003630 <HAL_GPIO_Init+0x2cc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d101      	bne.n	8003544 <HAL_GPIO_Init+0x1e0>
 8003540:	2303      	movs	r3, #3
 8003542:	e006      	b.n	8003552 <HAL_GPIO_Init+0x1ee>
 8003544:	2304      	movs	r3, #4
 8003546:	e004      	b.n	8003552 <HAL_GPIO_Init+0x1ee>
 8003548:	2302      	movs	r3, #2
 800354a:	e002      	b.n	8003552 <HAL_GPIO_Init+0x1ee>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_GPIO_Init+0x1ee>
 8003550:	2300      	movs	r3, #0
 8003552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003554:	f002 0203 	and.w	r2, r2, #3
 8003558:	0092      	lsls	r2, r2, #2
 800355a:	4093      	lsls	r3, r2
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003562:	492f      	ldr	r1, [pc, #188]	; (8003620 <HAL_GPIO_Init+0x2bc>)
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d006      	beq.n	800358a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800357c:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	492c      	ldr	r1, [pc, #176]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	e006      	b.n	8003598 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800358a:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	43db      	mvns	r3, r3
 8003592:	4928      	ldr	r1, [pc, #160]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 8003594:	4013      	ands	r3, r2
 8003596:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d006      	beq.n	80035b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035a4:	4b23      	ldr	r3, [pc, #140]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	4922      	ldr	r1, [pc, #136]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
 80035b0:	e006      	b.n	80035c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	491e      	ldr	r1, [pc, #120]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 80035bc:	4013      	ands	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d006      	beq.n	80035da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	4918      	ldr	r1, [pc, #96]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]
 80035d8:	e006      	b.n	80035e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	4914      	ldr	r1, [pc, #80]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d021      	beq.n	8003638 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	490e      	ldr	r1, [pc, #56]	; (8003634 <HAL_GPIO_Init+0x2d0>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60cb      	str	r3, [r1, #12]
 8003600:	e021      	b.n	8003646 <HAL_GPIO_Init+0x2e2>
 8003602:	bf00      	nop
 8003604:	10320000 	.word	0x10320000
 8003608:	10310000 	.word	0x10310000
 800360c:	10220000 	.word	0x10220000
 8003610:	10210000 	.word	0x10210000
 8003614:	10120000 	.word	0x10120000
 8003618:	10110000 	.word	0x10110000
 800361c:	40021000 	.word	0x40021000
 8003620:	40010000 	.word	0x40010000
 8003624:	40010800 	.word	0x40010800
 8003628:	40010c00 	.word	0x40010c00
 800362c:	40011000 	.word	0x40011000
 8003630:	40011400 	.word	0x40011400
 8003634:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_GPIO_Init+0x304>)
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	43db      	mvns	r3, r3
 8003640:	4909      	ldr	r1, [pc, #36]	; (8003668 <HAL_GPIO_Init+0x304>)
 8003642:	4013      	ands	r3, r2
 8003644:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	3301      	adds	r3, #1
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	f47f ae8e 	bne.w	8003378 <HAL_GPIO_Init+0x14>
  }
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	372c      	adds	r7, #44	; 0x2c
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	40010400 	.word	0x40010400

0800366c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	e001      	b.n	800368e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	807b      	strh	r3, [r7, #2]
 80036a6:	4613      	mov	r3, r2
 80036a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036aa:	787b      	ldrb	r3, [r7, #1]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036b0:	887a      	ldrh	r2, [r7, #2]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036b6:	e003      	b.n	80036c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036b8:	887b      	ldrh	r3, [r7, #2]
 80036ba:	041a      	lsls	r2, r3, #16
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	611a      	str	r2, [r3, #16]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr

080036ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036dc:	887a      	ldrh	r2, [r7, #2]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4013      	ands	r3, r2
 80036e2:	041a      	lsls	r2, r3, #16
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	400b      	ands	r3, r1
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	611a      	str	r2, [r3, #16]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e12b      	b.n	8003966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe fa74 	bl	8001c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	; 0x24
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003760:	f003 f9e0 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4a81      	ldr	r2, [pc, #516]	; (8003970 <HAL_I2C_Init+0x274>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d807      	bhi.n	8003780 <HAL_I2C_Init+0x84>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a80      	ldr	r2, [pc, #512]	; (8003974 <HAL_I2C_Init+0x278>)
 8003774:	4293      	cmp	r3, r2
 8003776:	bf94      	ite	ls
 8003778:	2301      	movls	r3, #1
 800377a:	2300      	movhi	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e006      	b.n	800378e <HAL_I2C_Init+0x92>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a7d      	ldr	r2, [pc, #500]	; (8003978 <HAL_I2C_Init+0x27c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	bf94      	ite	ls
 8003788:	2301      	movls	r3, #1
 800378a:	2300      	movhi	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0e7      	b.n	8003966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a78      	ldr	r2, [pc, #480]	; (800397c <HAL_I2C_Init+0x280>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0c9b      	lsrs	r3, r3, #18
 80037a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a6a      	ldr	r2, [pc, #424]	; (8003970 <HAL_I2C_Init+0x274>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d802      	bhi.n	80037d0 <HAL_I2C_Init+0xd4>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3301      	adds	r3, #1
 80037ce:	e009      	b.n	80037e4 <HAL_I2C_Init+0xe8>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	4a69      	ldr	r2, [pc, #420]	; (8003980 <HAL_I2C_Init+0x284>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	3301      	adds	r3, #1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	495c      	ldr	r1, [pc, #368]	; (8003970 <HAL_I2C_Init+0x274>)
 8003800:	428b      	cmp	r3, r1
 8003802:	d819      	bhi.n	8003838 <HAL_I2C_Init+0x13c>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e59      	subs	r1, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003818:	400b      	ands	r3, r1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_I2C_Init+0x138>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1e59      	subs	r1, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fbb1 f3f3 	udiv	r3, r1, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003832:	e051      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003834:	2304      	movs	r3, #4
 8003836:	e04f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <HAL_I2C_Init+0x168>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	440b      	add	r3, r1
 800384e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e012      	b.n	800388a <HAL_I2C_Init+0x18e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	0099      	lsls	r1, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	fbb0 f3f3 	udiv	r3, r0, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x196>
 800388e:	2301      	movs	r3, #1
 8003890:	e022      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10e      	bne.n	80038b8 <HAL_I2C_Init+0x1bc>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e58      	subs	r0, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	440b      	add	r3, r1
 80038a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	0099      	lsls	r1, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	6809      	ldr	r1, [r1, #0]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6911      	ldr	r1, [r2, #16]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68d2      	ldr	r2, [r2, #12]
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	000186a0 	.word	0x000186a0
 8003974:	001e847f 	.word	0x001e847f
 8003978:	003d08ff 	.word	0x003d08ff
 800397c:	431bde83 	.word	0x431bde83
 8003980:	10624dd3 	.word	0x10624dd3

08003984 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	461a      	mov	r2, r3
 8003992:	4603      	mov	r3, r0
 8003994:	817b      	strh	r3, [r7, #10]
 8003996:	460b      	mov	r3, r1
 8003998:	813b      	strh	r3, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800399e:	f7ff f935 	bl	8002c0c <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	f040 80d9 	bne.w	8003b64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	2319      	movs	r3, #25
 80039b8:	2201      	movs	r2, #1
 80039ba:	496d      	ldr	r1, [pc, #436]	; (8003b70 <HAL_I2C_Mem_Write+0x1ec>)
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f002 fab5 	bl	8005f2c <I2C_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
 80039ca:	e0cc      	b.n	8003b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_I2C_Mem_Write+0x56>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e0c5      	b.n	8003b66 <HAL_I2C_Mem_Write+0x1e2>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d007      	beq.n	8003a00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2221      	movs	r2, #33	; 0x21
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2240      	movs	r2, #64	; 0x40
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a4d      	ldr	r2, [pc, #308]	; (8003b74 <HAL_I2C_Mem_Write+0x1f0>)
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a42:	88f8      	ldrh	r0, [r7, #6]
 8003a44:	893a      	ldrh	r2, [r7, #8]
 8003a46:	8979      	ldrh	r1, [r7, #10]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	4603      	mov	r3, r0
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f001 ff38 	bl	80058c8 <I2C_RequestMemoryWrite>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d052      	beq.n	8003b04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e081      	b.n	8003b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f002 fb36 	bl	80060d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d107      	bne.n	8003a8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e06b      	b.n	8003b66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d11b      	bne.n	8003b04 <HAL_I2C_Mem_Write+0x180>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d017      	beq.n	8003b04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1aa      	bne.n	8003a62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f002 fb22 	bl	800615a <I2C_WaitOnBTFFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d107      	bne.n	8003b34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e016      	b.n	8003b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	00100002 	.word	0x00100002
 8003b74:	ffff0000 	.word	0xffff0000

08003b78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08c      	sub	sp, #48	; 0x30
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	817b      	strh	r3, [r7, #10]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	813b      	strh	r3, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b96:	f7ff f839 	bl	8002c0c <HAL_GetTick>
 8003b9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	f040 8244 	bne.w	8004032 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2319      	movs	r3, #25
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	4982      	ldr	r1, [pc, #520]	; (8003dbc <HAL_I2C_Mem_Read+0x244>)
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f002 f9b9 	bl	8005f2c <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e237      	b.n	8004034 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2C_Mem_Read+0x5a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e230      	b.n	8004034 <HAL_I2C_Mem_Read+0x4bc>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d007      	beq.n	8003bf8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2222      	movs	r2, #34	; 0x22
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2240      	movs	r2, #64	; 0x40
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a62      	ldr	r2, [pc, #392]	; (8003dc0 <HAL_I2C_Mem_Read+0x248>)
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c3a:	88f8      	ldrh	r0, [r7, #6]
 8003c3c:	893a      	ldrh	r2, [r7, #8]
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4603      	mov	r3, r0
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f001 fed2 	bl	80059f4 <I2C_RequestMemoryRead>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e1ec      	b.n	8004034 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d113      	bne.n	8003c8a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e1c0      	b.n	800400c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d11e      	bne.n	8003cd0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ca2:	b672      	cpsid	i
}
 8003ca4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ccc:	b662      	cpsie	i
}
 8003cce:	e035      	b.n	8003d3c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d11e      	bne.n	8003d16 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce8:	b672      	cpsid	i
}
 8003cea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d12:	b662      	cpsie	i
}
 8003d14:	e012      	b.n	8003d3c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003d3c:	e166      	b.n	800400c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	f200 811f 	bhi.w	8003f86 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d123      	bne.n	8003d98 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f002 fa73 	bl	8006240 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e167      	b.n	8004034 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d96:	e139      	b.n	800400c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d152      	bne.n	8003e46 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	2200      	movs	r2, #0
 8003da8:	4906      	ldr	r1, [pc, #24]	; (8003dc4 <HAL_I2C_Mem_Read+0x24c>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f002 f8be 	bl	8005f2c <I2C_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e13c      	b.n	8004034 <HAL_I2C_Mem_Read+0x4bc>
 8003dba:	bf00      	nop
 8003dbc:	00100002 	.word	0x00100002
 8003dc0:	ffff0000 	.word	0xffff0000
 8003dc4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc8:	b672      	cpsid	i
}
 8003dca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e0e:	b662      	cpsie	i
}
 8003e10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e44:	e0e2      	b.n	800400c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	497b      	ldr	r1, [pc, #492]	; (800403c <HAL_I2C_Mem_Read+0x4c4>)
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f002 f86b 	bl	8005f2c <I2C_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0e9      	b.n	8004034 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e70:	b672      	cpsid	i
}
 8003e72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ea6:	4b66      	ldr	r3, [pc, #408]	; (8004040 <HAL_I2C_Mem_Read+0x4c8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	08db      	lsrs	r3, r3, #3
 8003eac:	4a65      	ldr	r2, [pc, #404]	; (8004044 <HAL_I2C_Mem_Read+0x4cc>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0a1a      	lsrs	r2, r3, #8
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	00da      	lsls	r2, r3, #3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d118      	bne.n	8003efe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f043 0220 	orr.w	r2, r3, #32
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003eee:	b662      	cpsie	i
}
 8003ef0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e09a      	b.n	8004034 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d1d9      	bne.n	8003ec0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f4e:	b662      	cpsie	i
}
 8003f50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f84:	e042      	b.n	800400c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f002 f958 	bl	8006240 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e04c      	b.n	8004034 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d118      	bne.n	800400c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	f47f ae94 	bne.w	8003d3e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e000      	b.n	8004034 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004032:	2302      	movs	r3, #2
  }
}
 8004034:	4618      	mov	r0, r3
 8004036:	3728      	adds	r7, #40	; 0x28
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	00010004 	.word	0x00010004
 8004040:	20000004 	.word	0x20000004
 8004044:	14f8b589 	.word	0x14f8b589

08004048 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08c      	sub	sp, #48	; 0x30
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	4603      	mov	r3, r0
 8004058:	817b      	strh	r3, [r7, #10]
 800405a:	460b      	mov	r3, r1
 800405c:	813b      	strh	r3, [r7, #8]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004062:	f7fe fdd3 	bl	8002c0c <HAL_GetTick>
 8004066:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b20      	cmp	r3, #32
 8004076:	f040 8160 	bne.w	800433a <HAL_I2C_Mem_Read_DMA+0x2f2>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800407a:	4b9c      	ldr	r3, [pc, #624]	; (80042ec <HAL_I2C_Mem_Read_DMA+0x2a4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	08db      	lsrs	r3, r3, #3
 8004080:	4a9b      	ldr	r2, [pc, #620]	; (80042f0 <HAL_I2C_Mem_Read_DMA+0x2a8>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0a1a      	lsrs	r2, r3, #8
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009a      	lsls	r2, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	3b01      	subs	r3, #1
 8004098:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d116      	bne.n	80040ce <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f043 0220 	orr.w	r2, r3, #32
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e136      	b.n	800433c <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d0db      	beq.n	8004094 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_I2C_Mem_Read_DMA+0xa2>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e128      	b.n	800433c <HAL_I2C_Mem_Read_DMA+0x2f4>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d007      	beq.n	8004110 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800411e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2222      	movs	r2, #34	; 0x22
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2240      	movs	r2, #64	; 0x40
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004140:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4a69      	ldr	r2, [pc, #420]	; (80042f4 <HAL_I2C_Mem_Read_DMA+0x2ac>)
 8004150:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80b8 	beq.w	80042cc <HAL_I2C_Mem_Read_DMA+0x284>
    {
      if (hi2c->hdmarx != NULL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	2b00      	cmp	r3, #0
 8004162:	d024      	beq.n	80041ae <HAL_I2C_Mem_Read_DMA+0x166>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	4a63      	ldr	r2, [pc, #396]	; (80042f8 <HAL_I2C_Mem_Read_DMA+0x2b0>)
 800416a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	4a62      	ldr	r2, [pc, #392]	; (80042fc <HAL_I2C_Mem_Read_DMA+0x2b4>)
 8004172:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	2200      	movs	r2, #0
 800417a:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	2200      	movs	r2, #0
 8004182:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3310      	adds	r3, #16
 800418e:	4619      	mov	r1, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	461a      	mov	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	f7fe fecd 	bl	8002f38 <HAL_DMA_Start_IT>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80041a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d17b      	bne.n	80042a4 <HAL_I2C_Mem_Read_DMA+0x25c>
 80041ac:	e013      	b.n	80041d6 <HAL_I2C_Mem_Read_DMA+0x18e>
        hi2c->State     = HAL_I2C_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0b2      	b.n	800433c <HAL_I2C_Mem_Read_DMA+0x2f4>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80041d6:	88f8      	ldrh	r0, [r7, #6]
 80041d8:	893a      	ldrh	r2, [r7, #8]
 80041da:	8979      	ldrh	r1, [r7, #10]
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	2323      	movs	r3, #35	; 0x23
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	4603      	mov	r3, r0
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f001 fc04 	bl	80059f4 <I2C_RequestMemoryRead>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d023      	beq.n	800423a <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fefe 	bl	8002ff8 <HAL_DMA_Abort_IT>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	2200      	movs	r2, #0
 8004208:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004218:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e080      	b.n	800433c <HAL_I2C_Mem_Read_DMA+0x2f4>
        }

        if (hi2c->XferSize == 1U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	2b01      	cmp	r3, #1
 8004240:	d108      	bne.n	8004254 <HAL_I2C_Mem_Read_DMA+0x20c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e007      	b.n	8004264 <HAL_I2C_Mem_Read_DMA+0x21c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004262:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004264:	2300      	movs	r3, #0
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004290:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	e048      	b.n	8004336 <HAL_I2C_Mem_Read_DMA+0x2ee>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	f043 0210 	orr.w	r2, r3, #16
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e037      	b.n	800433c <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80042cc:	88f8      	ldrh	r0, [r7, #6]
 80042ce:	893a      	ldrh	r2, [r7, #8]
 80042d0:	8979      	ldrh	r1, [r7, #10]
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	2323      	movs	r3, #35	; 0x23
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	4603      	mov	r3, r0
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f001 fb89 	bl	80059f4 <I2C_RequestMemoryRead>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <HAL_I2C_Mem_Read_DMA+0x2b8>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e027      	b.n	800433c <HAL_I2C_Mem_Read_DMA+0x2f4>
 80042ec:	20000004 	.word	0x20000004
 80042f0:	14f8b589 	.word	0x14f8b589
 80042f4:	ffff0000 	.word	0xffff0000
 80042f8:	08005bc5 	.word	0x08005bc5
 80042fc:	08005d6f 	.word	0x08005d6f
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004324:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e000      	b.n	800433c <HAL_I2C_Mem_Read_DMA+0x2f4>
  }
  else
  {
    return HAL_BUSY;
 800433a:	2302      	movs	r3, #2
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004364:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2b10      	cmp	r3, #16
 8004372:	d003      	beq.n	800437c <HAL_I2C_EV_IRQHandler+0x38>
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	f040 80c1 	bne.w	80044fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10d      	bne.n	80043b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800439c:	d003      	beq.n	80043a6 <HAL_I2C_EV_IRQHandler+0x62>
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80043a4:	d101      	bne.n	80043aa <HAL_I2C_EV_IRQHandler+0x66>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <HAL_I2C_EV_IRQHandler+0x68>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f000 8132 	beq.w	8004616 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x92>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	0a5b      	lsrs	r3, r3, #9
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d006      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f001 ffbd 	bl	8006348 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fcc8 	bl	8004d64 <I2C_Master_SB>
 80043d4:	e092      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	08db      	lsrs	r3, r3, #3
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fd3d 	bl	8004e6e <I2C_Master_ADD10>
 80043f4:	e082      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_I2C_EV_IRQHandler+0xd2>
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	0a5b      	lsrs	r3, r3, #9
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fd56 	bl	8004ec0 <I2C_Master_ADDR>
 8004414:	e072      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	089b      	lsrs	r3, r3, #2
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03b      	beq.n	800449a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004430:	f000 80f3 	beq.w	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	09db      	lsrs	r3, r3, #7
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00f      	beq.n	8004460 <HAL_I2C_EV_IRQHandler+0x11c>
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	0a9b      	lsrs	r3, r3, #10
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_I2C_EV_IRQHandler+0x11c>
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	089b      	lsrs	r3, r3, #2
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f942 	bl	80046e2 <I2C_MasterTransmit_TXE>
 800445e:	e04d      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80d6 	beq.w	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	0a5b      	lsrs	r3, r3, #9
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80cf 	beq.w	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800447c:	7bbb      	ldrb	r3, [r7, #14]
 800447e:	2b21      	cmp	r3, #33	; 0x21
 8004480:	d103      	bne.n	800448a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9c9 	bl	800481a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004488:	e0c7      	b.n	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	f040 80c4 	bne.w	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa37 	bl	8004906 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004498:	e0bf      	b.n	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a8:	f000 80b7 	beq.w	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	099b      	lsrs	r3, r3, #6
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00f      	beq.n	80044d8 <HAL_I2C_EV_IRQHandler+0x194>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	0a9b      	lsrs	r3, r3, #10
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <HAL_I2C_EV_IRQHandler+0x194>
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 faac 	bl	8004a2e <I2C_MasterReceive_RXNE>
 80044d6:	e011      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 809a 	beq.w	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	0a5b      	lsrs	r3, r3, #9
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8093 	beq.w	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fb4b 	bl	8004b90 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044fa:	e08e      	b.n	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
 80044fc:	e08d      	b.n	800461a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	e007      	b.n	8004520 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d012      	beq.n	8004552 <HAL_I2C_EV_IRQHandler+0x20e>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	0a5b      	lsrs	r3, r3, #9
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00c      	beq.n	8004552 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004548:	69b9      	ldr	r1, [r7, #24]
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 ff0f 	bl	800536e <I2C_Slave_ADDR>
 8004550:	e066      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_I2C_EV_IRQHandler+0x22e>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	0a5b      	lsrs	r3, r3, #9
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 ff4a 	bl	8005404 <I2C_Slave_STOPF>
 8004570:	e056      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004572:	7bbb      	ldrb	r3, [r7, #14]
 8004574:	2b21      	cmp	r3, #33	; 0x21
 8004576:	d002      	beq.n	800457e <HAL_I2C_EV_IRQHandler+0x23a>
 8004578:	7bbb      	ldrb	r3, [r7, #14]
 800457a:	2b29      	cmp	r3, #41	; 0x29
 800457c:	d125      	bne.n	80045ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	09db      	lsrs	r3, r3, #7
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00f      	beq.n	80045aa <HAL_I2C_EV_IRQHandler+0x266>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	0a9b      	lsrs	r3, r3, #10
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <HAL_I2C_EV_IRQHandler+0x266>
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	089b      	lsrs	r3, r3, #2
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fe27 	bl	80051f6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045a8:	e039      	b.n	800461e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d033      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0x2da>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	0a5b      	lsrs	r3, r3, #9
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d02d      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fe54 	bl	8005270 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045c8:	e029      	b.n	800461e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00f      	beq.n	80045f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	0a9b      	lsrs	r3, r3, #10
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fe5e 	bl	80052b0 <I2C_SlaveReceive_RXNE>
 80045f4:	e014      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00e      	beq.n	8004620 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	0a5b      	lsrs	r3, r3, #9
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fe8c 	bl	800532c <I2C_SlaveReceive_BTF>
 8004614:	e004      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004616:	bf00      	nop
 8004618:	e002      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800461e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	70fb      	strb	r3, [r7, #3]
 800467a:	4613      	mov	r3, r2
 800467c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr

080046e2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d150      	bne.n	80047aa <I2C_MasterTransmit_TXE+0xc8>
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b21      	cmp	r3, #33	; 0x21
 800470c:	d14d      	bne.n	80047aa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d01d      	beq.n	8004750 <I2C_MasterTransmit_TXE+0x6e>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b20      	cmp	r3, #32
 8004718:	d01a      	beq.n	8004750 <I2C_MasterTransmit_TXE+0x6e>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004720:	d016      	beq.n	8004750 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004730:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2211      	movs	r2, #17
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff6c 	bl	8004626 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800474e:	e060      	b.n	8004812 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800475e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d107      	bne.n	800479a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff ff81 	bl	800469a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004798:	e03b      	b.n	8004812 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff ff3f 	bl	8004626 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047a8:	e033      	b.n	8004812 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b21      	cmp	r3, #33	; 0x21
 80047ae:	d005      	beq.n	80047bc <I2C_MasterTransmit_TXE+0xda>
 80047b0:	7bbb      	ldrb	r3, [r7, #14]
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d12d      	bne.n	8004812 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	2b22      	cmp	r3, #34	; 0x22
 80047ba:	d12a      	bne.n	8004812 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d108      	bne.n	80047d8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80047d6:	e01c      	b.n	8004812 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	d103      	bne.n	80047ec <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f88e 	bl	8004906 <I2C_MemoryTransmit_TXE_BTF>
}
 80047ea:	e012      	b.n	8004812 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004810:	e7ff      	b.n	8004812 <I2C_MasterTransmit_TXE+0x130>
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b21      	cmp	r3, #33	; 0x21
 8004832:	d164      	bne.n	80048fe <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d012      	beq.n	8004864 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004862:	e04c      	b.n	80048fe <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d01d      	beq.n	80048a6 <I2C_MasterTransmit_BTF+0x8c>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b20      	cmp	r3, #32
 800486e:	d01a      	beq.n	80048a6 <I2C_MasterTransmit_BTF+0x8c>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004876:	d016      	beq.n	80048a6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004886:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2211      	movs	r2, #17
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fec1 	bl	8004626 <HAL_I2C_MasterTxCpltCallback>
}
 80048a4:	e02b      	b.n	80048fe <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d107      	bne.n	80048f0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fed6 	bl	800469a <HAL_I2C_MemTxCpltCallback>
}
 80048ee:	e006      	b.n	80048fe <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fe94 	bl	8004626 <HAL_I2C_MasterTxCpltCallback>
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491a:	2b00      	cmp	r3, #0
 800491c:	d11d      	bne.n	800495a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	2b01      	cmp	r3, #1
 8004924:	d10b      	bne.n	800493e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492a:	b2da      	uxtb	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004936:	1c9a      	adds	r2, r3, #2
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800493c:	e073      	b.n	8004a26 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004942:	b29b      	uxth	r3, r3
 8004944:	121b      	asrs	r3, r3, #8
 8004946:	b2da      	uxtb	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004958:	e065      	b.n	8004a26 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495e:	2b01      	cmp	r3, #1
 8004960:	d10b      	bne.n	800497a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004966:	b2da      	uxtb	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004978:	e055      	b.n	8004a26 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497e:	2b02      	cmp	r3, #2
 8004980:	d151      	bne.n	8004a26 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b22      	cmp	r3, #34	; 0x22
 8004986:	d10d      	bne.n	80049a4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004996:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049a2:	e040      	b.n	8004a26 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d015      	beq.n	80049da <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b21      	cmp	r3, #33	; 0x21
 80049b2:	d112      	bne.n	80049da <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049d8:	e025      	b.n	8004a26 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d120      	bne.n	8004a26 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b21      	cmp	r3, #33	; 0x21
 80049e8:	d11d      	bne.n	8004a26 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a08:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fe3a 	bl	800469a <HAL_I2C_MemTxCpltCallback>
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b22      	cmp	r3, #34	; 0x22
 8004a40:	f040 80a2 	bne.w	8004b88 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d921      	bls.n	8004a96 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	f040 8082 	bne.w	8004b88 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a92:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004a94:	e078      	b.n	8004b88 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d074      	beq.n	8004b88 <I2C_MasterReceive_RXNE+0x15a>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d002      	beq.n	8004aaa <I2C_MasterReceive_RXNE+0x7c>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d16e      	bne.n	8004b88 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f001 fb96 	bl	80061dc <I2C_WaitOnSTOPRequestThroughIT>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d142      	bne.n	8004b3c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ad4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d10a      	bne.n	8004b26 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fdc4 	bl	80046ac <HAL_I2C_MemRxCpltCallback>
}
 8004b24:	e030      	b.n	8004b88 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2212      	movs	r2, #18
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fd7f 	bl	8004638 <HAL_I2C_MasterRxCpltCallback>
}
 8004b3a:	e025      	b.n	8004b88 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b4a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fd9b 	bl	80046be <HAL_I2C_ErrorCallback>
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d11b      	bne.n	8004be0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004bde:	e0bd      	b.n	8004d5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d129      	bne.n	8004c3e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d00a      	beq.n	8004c16 <I2C_MasterReceive_BTF+0x86>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d007      	beq.n	8004c16 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c14:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c3c:	e08e      	b.n	8004d5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d176      	bne.n	8004d36 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d002      	beq.n	8004c54 <I2C_MasterReceive_BTF+0xc4>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d108      	bne.n	8004c66 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e019      	b.n	8004c9a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d002      	beq.n	8004c72 <I2C_MasterReceive_BTF+0xe2>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d108      	bne.n	8004c84 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e00a      	b.n	8004c9a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d007      	beq.n	8004c9a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c98:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cf4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d10a      	bne.n	8004d20 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fcc7 	bl	80046ac <HAL_I2C_MemRxCpltCallback>
}
 8004d1e:	e01d      	b.n	8004d5c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2212      	movs	r2, #18
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fc82 	bl	8004638 <HAL_I2C_MasterRxCpltCallback>
}
 8004d34:	e012      	b.n	8004d5c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d117      	bne.n	8004da8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d90:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004d92:	e067      	b.n	8004e64 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	611a      	str	r2, [r3, #16]
}
 8004da6:	e05d      	b.n	8004e64 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db0:	d133      	bne.n	8004e1a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b21      	cmp	r3, #33	; 0x21
 8004dbc:	d109      	bne.n	8004dd2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dce:	611a      	str	r2, [r3, #16]
 8004dd0:	e008      	b.n	8004de4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d004      	beq.n	8004df6 <I2C_Master_SB+0x92>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d032      	beq.n	8004e64 <I2C_Master_SB+0x100>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d02d      	beq.n	8004e64 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e16:	605a      	str	r2, [r3, #4]
}
 8004e18:	e024      	b.n	8004e64 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10e      	bne.n	8004e40 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	11db      	asrs	r3, r3, #7
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f003 0306 	and.w	r3, r3, #6
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	f063 030f 	orn	r3, r3, #15
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	611a      	str	r2, [r3, #16]
}
 8004e3e:	e011      	b.n	8004e64 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d10d      	bne.n	8004e64 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	11db      	asrs	r3, r3, #7
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f003 0306 	and.w	r3, r3, #6
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f063 030e 	orn	r3, r3, #14
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	611a      	str	r2, [r3, #16]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr

08004e6e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <I2C_Master_ADD10+0x26>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d108      	bne.n	8004ea6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00c      	beq.n	8004eb6 <I2C_Master_ADD10+0x48>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb4:	605a      	str	r2, [r3, #4]
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b091      	sub	sp, #68	; 0x44
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ece:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b22      	cmp	r3, #34	; 0x22
 8004ee8:	f040 8174 	bne.w	80051d4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10f      	bne.n	8004f14 <I2C_Master_ADDR+0x54>
 8004ef4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d10b      	bne.n	8004f14 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efc:	2300      	movs	r3, #0
 8004efe:	633b      	str	r3, [r7, #48]	; 0x30
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	e16b      	b.n	80051ec <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d11d      	bne.n	8004f58 <I2C_Master_ADDR+0x98>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f24:	d118      	bne.n	8004f58 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f26:	2300      	movs	r3, #0
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f4a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	651a      	str	r2, [r3, #80]	; 0x50
 8004f56:	e149      	b.n	80051ec <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d113      	bne.n	8004f8a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f62:	2300      	movs	r3, #0
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e120      	b.n	80051cc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	f040 808a 	bne.w	80050aa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f9c:	d137      	bne.n	800500e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fac:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbc:	d113      	bne.n	8004fe6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fcc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	e0f2      	b.n	80051cc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	623b      	str	r3, [r7, #32]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	623b      	str	r3, [r7, #32]
 8004ffa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	e0de      	b.n	80051cc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	2b08      	cmp	r3, #8
 8005012:	d02e      	beq.n	8005072 <I2C_Master_ADDR+0x1b2>
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	2b20      	cmp	r3, #32
 8005018:	d02b      	beq.n	8005072 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800501a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501c:	2b12      	cmp	r3, #18
 800501e:	d102      	bne.n	8005026 <I2C_Master_ADDR+0x166>
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	2b01      	cmp	r3, #1
 8005024:	d125      	bne.n	8005072 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	2b04      	cmp	r3, #4
 800502a:	d00e      	beq.n	800504a <I2C_Master_ADDR+0x18a>
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	2b02      	cmp	r3, #2
 8005030:	d00b      	beq.n	800504a <I2C_Master_ADDR+0x18a>
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b10      	cmp	r3, #16
 8005036:	d008      	beq.n	800504a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e007      	b.n	800505a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005058:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	61fb      	str	r3, [r7, #28]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	e0ac      	b.n	80051cc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005080:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e090      	b.n	80051cc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d158      	bne.n	8005166 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d021      	beq.n	80050fe <I2C_Master_ADDR+0x23e>
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d01e      	beq.n	80050fe <I2C_Master_ADDR+0x23e>
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	2b10      	cmp	r3, #16
 80050c4:	d01b      	beq.n	80050fe <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e012      	b.n	8005124 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800512e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005132:	d14b      	bne.n	80051cc <I2C_Master_ADDR+0x30c>
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800513a:	d00b      	beq.n	8005154 <I2C_Master_ADDR+0x294>
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	2b01      	cmp	r3, #1
 8005140:	d008      	beq.n	8005154 <I2C_Master_ADDR+0x294>
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	2b08      	cmp	r3, #8
 8005146:	d005      	beq.n	8005154 <I2C_Master_ADDR+0x294>
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	2b10      	cmp	r3, #16
 800514c:	d002      	beq.n	8005154 <I2C_Master_ADDR+0x294>
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2b20      	cmp	r3, #32
 8005152:	d13b      	bne.n	80051cc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005162:	605a      	str	r2, [r3, #4]
 8005164:	e032      	b.n	80051cc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005174:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005184:	d117      	bne.n	80051b6 <I2C_Master_ADDR+0x2f6>
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800518c:	d00b      	beq.n	80051a6 <I2C_Master_ADDR+0x2e6>
 800518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005190:	2b01      	cmp	r3, #1
 8005192:	d008      	beq.n	80051a6 <I2C_Master_ADDR+0x2e6>
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	2b08      	cmp	r3, #8
 8005198:	d005      	beq.n	80051a6 <I2C_Master_ADDR+0x2e6>
 800519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519c:	2b10      	cmp	r3, #16
 800519e:	d002      	beq.n	80051a6 <I2C_Master_ADDR+0x2e6>
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d107      	bne.n	80051b6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80051d2:	e00b      	b.n	80051ec <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	60bb      	str	r3, [r7, #8]
 80051e8:	68bb      	ldr	r3, [r7, #8]
}
 80051ea:	e7ff      	b.n	80051ec <I2C_Master_ADDR+0x32c>
 80051ec:	bf00      	nop
 80051ee:	3744      	adds	r7, #68	; 0x44
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005204:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d02b      	beq.n	8005268 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	781a      	ldrb	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d114      	bne.n	8005268 <I2C_SlaveTransmit_TXE+0x72>
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b29      	cmp	r3, #41	; 0x29
 8005242:	d111      	bne.n	8005268 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005252:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2221      	movs	r2, #33	; 0x21
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2228      	movs	r2, #40	; 0x28
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff f9f1 	bl	800464a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d011      	beq.n	80052a6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	781a      	ldrb	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d02c      	beq.n	8005324 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d114      	bne.n	8005324 <I2C_SlaveReceive_RXNE+0x74>
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	2b2a      	cmp	r3, #42	; 0x2a
 80052fe:	d111      	bne.n	8005324 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2222      	movs	r2, #34	; 0x22
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2228      	movs	r2, #40	; 0x28
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff f99c 	bl	800465c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005378:	2300      	movs	r3, #0
 800537a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005388:	2b28      	cmp	r3, #40	; 0x28
 800538a:	d127      	bne.n	80053dc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	089b      	lsrs	r3, r3, #2
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	09db      	lsrs	r3, r3, #7
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	81bb      	strh	r3, [r7, #12]
 80053be:	e002      	b.n	80053c6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80053ce:	89ba      	ldrh	r2, [r7, #12]
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff f94a 	bl	800466e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80053da:	e00e      	b.n	80053fa <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053dc:	2300      	movs	r3, #0
 80053de:	60bb      	str	r3, [r7, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	60bb      	str	r3, [r7, #8]
 80053f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005422:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005424:	2300      	movs	r3, #0
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	60bb      	str	r3, [r7, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005450:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005460:	d172      	bne.n	8005548 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2b22      	cmp	r3, #34	; 0x22
 8005466:	d002      	beq.n	800546e <I2C_Slave_STOPF+0x6a>
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b2a      	cmp	r3, #42	; 0x2a
 800546c:	d135      	bne.n	80054da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	b29a      	uxth	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f043 0204 	orr.w	r2, r3, #4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fd ff22 	bl	80032f0 <HAL_DMA_GetState>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d049      	beq.n	8005546 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	4a69      	ldr	r2, [pc, #420]	; (800565c <I2C_Slave_STOPF+0x258>)
 80054b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fd fd9a 	bl	8002ff8 <HAL_DMA_Abort_IT>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d03d      	beq.n	8005546 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054d4:	4610      	mov	r0, r2
 80054d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054d8:	e035      	b.n	8005546 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f043 0204 	orr.w	r2, r3, #4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800550c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005512:	4618      	mov	r0, r3
 8005514:	f7fd feec 	bl	80032f0 <HAL_DMA_GetState>
 8005518:	4603      	mov	r3, r0
 800551a:	2b01      	cmp	r3, #1
 800551c:	d014      	beq.n	8005548 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	4a4e      	ldr	r2, [pc, #312]	; (800565c <I2C_Slave_STOPF+0x258>)
 8005524:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552a:	4618      	mov	r0, r3
 800552c:	f7fd fd64 	bl	8002ff8 <HAL_DMA_Abort_IT>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d008      	beq.n	8005548 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005540:	4610      	mov	r0, r2
 8005542:	4798      	blx	r3
 8005544:	e000      	b.n	8005548 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005546:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d03e      	beq.n	80055d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b04      	cmp	r3, #4
 800555e:	d112      	bne.n	8005586 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d112      	bne.n	80055ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	f043 0204 	orr.w	r2, r3, #4
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f843 	bl	8005664 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80055de:	e039      	b.n	8005654 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b2a      	cmp	r3, #42	; 0x2a
 80055e4:	d109      	bne.n	80055fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2228      	movs	r2, #40	; 0x28
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff f831 	bl	800465c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b28      	cmp	r3, #40	; 0x28
 8005604:	d111      	bne.n	800562a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a15      	ldr	r2, [pc, #84]	; (8005660 <I2C_Slave_STOPF+0x25c>)
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff f830 	bl	8004688 <HAL_I2C_ListenCpltCallback>
}
 8005628:	e014      	b.n	8005654 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	2b22      	cmp	r3, #34	; 0x22
 8005630:	d002      	beq.n	8005638 <I2C_Slave_STOPF+0x234>
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2b22      	cmp	r3, #34	; 0x22
 8005636:	d10d      	bne.n	8005654 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff f804 	bl	800465c <HAL_I2C_SlaveRxCpltCallback>
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	08005ddd 	.word	0x08005ddd
 8005660:	ffff0000 	.word	0xffff0000

08005664 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005672:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800567a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800567c:	7bbb      	ldrb	r3, [r7, #14]
 800567e:	2b10      	cmp	r3, #16
 8005680:	d002      	beq.n	8005688 <I2C_ITError+0x24>
 8005682:	7bbb      	ldrb	r3, [r7, #14]
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d10a      	bne.n	800569e <I2C_ITError+0x3a>
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b22      	cmp	r3, #34	; 0x22
 800568c:	d107      	bne.n	800569e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800569c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056a4:	2b28      	cmp	r3, #40	; 0x28
 80056a6:	d107      	bne.n	80056b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2228      	movs	r2, #40	; 0x28
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056b6:	e015      	b.n	80056e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c6:	d00a      	beq.n	80056de <I2C_ITError+0x7a>
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	2b60      	cmp	r3, #96	; 0x60
 80056cc:	d007      	beq.n	80056de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f2:	d161      	bne.n	80057b8 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005702:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800570c:	2b01      	cmp	r3, #1
 800570e:	d020      	beq.n	8005752 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005714:	4a6a      	ldr	r2, [pc, #424]	; (80058c0 <I2C_ITError+0x25c>)
 8005716:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571c:	4618      	mov	r0, r3
 800571e:	f7fd fc6b 	bl	8002ff8 <HAL_DMA_Abort_IT>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8089 	beq.w	800583c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800574c:	4610      	mov	r0, r2
 800574e:	4798      	blx	r3
 8005750:	e074      	b.n	800583c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	4a5a      	ldr	r2, [pc, #360]	; (80058c0 <I2C_ITError+0x25c>)
 8005758:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	4618      	mov	r0, r3
 8005760:	f7fd fc4a 	bl	8002ff8 <HAL_DMA_Abort_IT>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d068      	beq.n	800583c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d10b      	bne.n	8005790 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0201 	bic.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057b2:	4610      	mov	r0, r2
 80057b4:	4798      	blx	r3
 80057b6:	e041      	b.n	800583c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b60      	cmp	r3, #96	; 0x60
 80057c2:	d125      	bne.n	8005810 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d10b      	bne.n	80057f8 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fe ff61 	bl	80046d0 <HAL_I2C_AbortCpltCallback>
 800580e:	e015      	b.n	800583c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d10b      	bne.n	8005836 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fe ff41 	bl	80046be <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10e      	bne.n	800586a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005878:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005880:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b04      	cmp	r3, #4
 800588c:	d113      	bne.n	80058b6 <I2C_ITError+0x252>
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b28      	cmp	r3, #40	; 0x28
 8005892:	d110      	bne.n	80058b6 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a0b      	ldr	r2, [pc, #44]	; (80058c4 <I2C_ITError+0x260>)
 8005898:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fe fee9 	bl	8004688 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	08005ddd 	.word	0x08005ddd
 80058c4:	ffff0000 	.word	0xffff0000

080058c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	4608      	mov	r0, r1
 80058d2:	4611      	mov	r1, r2
 80058d4:	461a      	mov	r2, r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	817b      	strh	r3, [r7, #10]
 80058da:	460b      	mov	r3, r1
 80058dc:	813b      	strh	r3, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fb14 	bl	8005f2c <I2C_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00d      	beq.n	8005926 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005918:	d103      	bne.n	8005922 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e05f      	b.n	80059e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005926:	897b      	ldrh	r3, [r7, #10]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	461a      	mov	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005934:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	492d      	ldr	r1, [pc, #180]	; (80059f0 <I2C_RequestMemoryWrite+0x128>)
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fb4c 	bl	8005fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e04c      	b.n	80059e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005964:	6a39      	ldr	r1, [r7, #32]
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fbb6 	bl	80060d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	2b04      	cmp	r3, #4
 8005978:	d107      	bne.n	800598a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005988:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e02b      	b.n	80059e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d105      	bne.n	80059a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005994:	893b      	ldrh	r3, [r7, #8]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	611a      	str	r2, [r3, #16]
 800599e:	e021      	b.n	80059e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059a0:	893b      	ldrh	r3, [r7, #8]
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b0:	6a39      	ldr	r1, [r7, #32]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fb90 	bl	80060d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00d      	beq.n	80059da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d107      	bne.n	80059d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e005      	b.n	80059e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059da:	893b      	ldrh	r3, [r7, #8]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	00010002 	.word	0x00010002

080059f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	4608      	mov	r0, r1
 80059fe:	4611      	mov	r1, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	817b      	strh	r3, [r7, #10]
 8005a06:	460b      	mov	r3, r1
 8005a08:	813b      	strh	r3, [r7, #8]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fa76 	bl	8005f2c <I2C_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a54:	d103      	bne.n	8005a5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e0aa      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a62:	897b      	ldrh	r3, [r7, #10]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	4952      	ldr	r1, [pc, #328]	; (8005bc0 <I2C_RequestMemoryRead+0x1cc>)
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 faae 	bl	8005fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e097      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa0:	6a39      	ldr	r1, [r7, #32]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fb18 	bl	80060d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d107      	bne.n	8005ac6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e076      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d105      	bne.n	8005adc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad0:	893b      	ldrh	r3, [r7, #8]
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	611a      	str	r2, [r3, #16]
 8005ada:	e021      	b.n	8005b20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005adc:	893b      	ldrh	r3, [r7, #8]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 faf2 	bl	80060d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00d      	beq.n	8005b16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d107      	bne.n	8005b12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e050      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b16:	893b      	ldrh	r3, [r7, #8]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b22:	6a39      	ldr	r1, [r7, #32]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fad7 	bl	80060d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00d      	beq.n	8005b4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d107      	bne.n	8005b48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e035      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f9df 	bl	8005f2c <I2C_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00d      	beq.n	8005b90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b82:	d103      	bne.n	8005b8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e013      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b90:	897b      	ldrh	r3, [r7, #10]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	6a3a      	ldr	r2, [r7, #32]
 8005ba4:	4906      	ldr	r1, [pc, #24]	; (8005bc0 <I2C_RequestMemoryRead+0x1cc>)
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fa17 	bl	8005fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	00010002 	.word	0x00010002

08005bc4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bf6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c04:	2200      	movs	r2, #0
 8005c06:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	2200      	movs	r2, #0
 8005c16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005c18:	7cfb      	ldrb	r3, [r7, #19]
 8005c1a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005c1e:	2b21      	cmp	r3, #33	; 0x21
 8005c20:	d007      	beq.n	8005c32 <I2C_DMAXferCplt+0x6e>
 8005c22:	7cfb      	ldrb	r3, [r7, #19]
 8005c24:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005c28:	2b22      	cmp	r3, #34	; 0x22
 8005c2a:	d131      	bne.n	8005c90 <I2C_DMAXferCplt+0xcc>
 8005c2c:	7cbb      	ldrb	r3, [r7, #18]
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d12e      	bne.n	8005c90 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c40:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2200      	movs	r2, #0
 8005c46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005c48:	7cfb      	ldrb	r3, [r7, #19]
 8005c4a:	2b29      	cmp	r3, #41	; 0x29
 8005c4c:	d10a      	bne.n	8005c64 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2221      	movs	r2, #33	; 0x21
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2228      	movs	r2, #40	; 0x28
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c5c:	6978      	ldr	r0, [r7, #20]
 8005c5e:	f7fe fcf4 	bl	800464a <HAL_I2C_SlaveTxCpltCallback>
 8005c62:	e00c      	b.n	8005c7e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c64:	7cfb      	ldrb	r3, [r7, #19]
 8005c66:	2b2a      	cmp	r3, #42	; 0x2a
 8005c68:	d109      	bne.n	8005c7e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2222      	movs	r2, #34	; 0x22
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2228      	movs	r2, #40	; 0x28
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c78:	6978      	ldr	r0, [r7, #20]
 8005c7a:	f7fe fcef 	bl	800465c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005c8c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c8e:	e06a      	b.n	8005d66 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d064      	beq.n	8005d66 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d107      	bne.n	8005cb6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cc4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ccc:	d009      	beq.n	8005ce2 <I2C_DMAXferCplt+0x11e>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d006      	beq.n	8005ce2 <I2C_DMAXferCplt+0x11e>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005cda:	d002      	beq.n	8005ce2 <I2C_DMAXferCplt+0x11e>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d107      	bne.n	8005cf2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d00:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d10:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005d20:	6978      	ldr	r0, [r7, #20]
 8005d22:	f7fe fccc 	bl	80046be <HAL_I2C_ErrorCallback>
}
 8005d26:	e01e      	b.n	8005d66 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d10a      	bne.n	8005d52 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005d4a:	6978      	ldr	r0, [r7, #20]
 8005d4c:	f7fe fcae 	bl	80046ac <HAL_I2C_MemRxCpltCallback>
}
 8005d50:	e009      	b.n	8005d66 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2212      	movs	r2, #18
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d60:	6978      	ldr	r0, [r7, #20]
 8005d62:	f7fe fc69 	bl	8004638 <HAL_I2C_MasterRxCpltCallback>
}
 8005d66:	bf00      	nop
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	2200      	movs	r2, #0
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	2200      	movs	r2, #0
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005daa:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f043 0210 	orr.w	r2, r3, #16
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7fe fc75 	bl	80046be <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005df6:	4b4b      	ldr	r3, [pc, #300]	; (8005f24 <I2C_DMAAbort+0x148>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	08db      	lsrs	r3, r3, #3
 8005dfc:	4a4a      	ldr	r2, [pc, #296]	; (8005f28 <I2C_DMAAbort+0x14c>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	0a1a      	lsrs	r2, r3, #8
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	00da      	lsls	r2, r3, #3
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f043 0220 	orr.w	r2, r3, #32
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e22:	e00a      	b.n	8005e3a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e38:	d0ea      	beq.n	8005e10 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	2200      	movs	r2, #0
 8005e48:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	2200      	movs	r2, #0
 8005e58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e68:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b60      	cmp	r3, #96	; 0x60
 8005eaa:	d10e      	bne.n	8005eca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ec2:	6978      	ldr	r0, [r7, #20]
 8005ec4:	f7fe fc04 	bl	80046d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ec8:	e027      	b.n	8005f1a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005eca:	7cfb      	ldrb	r3, [r7, #19]
 8005ecc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ed0:	2b28      	cmp	r3, #40	; 0x28
 8005ed2:	d117      	bne.n	8005f04 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ef2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2228      	movs	r2, #40	; 0x28
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f02:	e007      	b.n	8005f14 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f14:	6978      	ldr	r0, [r7, #20]
 8005f16:	f7fe fbd2 	bl	80046be <HAL_I2C_ErrorCallback>
}
 8005f1a:	bf00      	nop
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000004 	.word	0x20000004
 8005f28:	14f8b589 	.word	0x14f8b589

08005f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f3c:	e025      	b.n	8005f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d021      	beq.n	8005f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f46:	f7fc fe61 	bl	8002c0c <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d302      	bcc.n	8005f5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d116      	bne.n	8005f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f043 0220 	orr.w	r2, r3, #32
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e023      	b.n	8005fd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d10d      	bne.n	8005fb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	43da      	mvns	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bf0c      	ite	eq
 8005fa6:	2301      	moveq	r3, #1
 8005fa8:	2300      	movne	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	e00c      	b.n	8005fca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	43da      	mvns	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bf0c      	ite	eq
 8005fc2:	2301      	moveq	r3, #1
 8005fc4:	2300      	movne	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d0b6      	beq.n	8005f3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
 8005fe6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fe8:	e051      	b.n	800608e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff8:	d123      	bne.n	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006008:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006012:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f043 0204 	orr.w	r2, r3, #4
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e046      	b.n	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d021      	beq.n	800608e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604a:	f7fc fddf 	bl	8002c0c <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d302      	bcc.n	8006060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d116      	bne.n	800608e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f043 0220 	orr.w	r2, r3, #32
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e020      	b.n	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	0c1b      	lsrs	r3, r3, #16
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	d10c      	bne.n	80060b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	43da      	mvns	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4013      	ands	r3, r2
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bf14      	ite	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	2300      	moveq	r3, #0
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	e00b      	b.n	80060ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	43da      	mvns	r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	4013      	ands	r3, r2
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d18d      	bne.n	8005fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060e4:	e02d      	b.n	8006142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 f900 	bl	80062ec <I2C_IsAcknowledgeFailed>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e02d      	b.n	8006152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d021      	beq.n	8006142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fe:	f7fc fd85 	bl	8002c0c <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	429a      	cmp	r2, r3
 800610c:	d302      	bcc.n	8006114 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d116      	bne.n	8006142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f043 0220 	orr.w	r2, r3, #32
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e007      	b.n	8006152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614c:	2b80      	cmp	r3, #128	; 0x80
 800614e:	d1ca      	bne.n	80060e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006166:	e02d      	b.n	80061c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 f8bf 	bl	80062ec <I2C_IsAcknowledgeFailed>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e02d      	b.n	80061d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d021      	beq.n	80061c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006180:	f7fc fd44 	bl	8002c0c <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	429a      	cmp	r2, r3
 800618e:	d302      	bcc.n	8006196 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d116      	bne.n	80061c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e007      	b.n	80061d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d1ca      	bne.n	8006168 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80061e8:	4b13      	ldr	r3, [pc, #76]	; (8006238 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	08db      	lsrs	r3, r3, #3
 80061ee:	4a13      	ldr	r2, [pc, #76]	; (800623c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80061f0:	fba2 2303 	umull	r2, r3, r2, r3
 80061f4:	0a1a      	lsrs	r2, r3, #8
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3b01      	subs	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d107      	bne.n	800621a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	f043 0220 	orr.w	r2, r3, #32
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e008      	b.n	800622c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006228:	d0e9      	beq.n	80061fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20000004 	.word	0x20000004
 800623c:	14f8b589 	.word	0x14f8b589

08006240 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800624c:	e042      	b.n	80062d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b10      	cmp	r3, #16
 800625a:	d119      	bne.n	8006290 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0210 	mvn.w	r2, #16
 8006264:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e029      	b.n	80062e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006290:	f7fc fcbc 	bl	8002c0c <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	429a      	cmp	r2, r3
 800629e:	d302      	bcc.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d116      	bne.n	80062d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	f043 0220 	orr.w	r2, r3, #32
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e007      	b.n	80062e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d1b5      	bne.n	800624e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006302:	d11b      	bne.n	800633c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800630c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	f043 0204 	orr.w	r2, r3, #4
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	bc80      	pop	{r7}
 8006346:	4770      	bx	lr

08006348 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006358:	d103      	bne.n	8006362 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006360:	e007      	b.n	8006372 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800636a:	d102      	bne.n	8006372 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2208      	movs	r2, #8
 8006370:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e272      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8087 	beq.w	80064aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800639c:	4b92      	ldr	r3, [pc, #584]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d00c      	beq.n	80063c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063a8:	4b8f      	ldr	r3, [pc, #572]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d112      	bne.n	80063da <HAL_RCC_OscConfig+0x5e>
 80063b4:	4b8c      	ldr	r3, [pc, #560]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c0:	d10b      	bne.n	80063da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c2:	4b89      	ldr	r3, [pc, #548]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d06c      	beq.n	80064a8 <HAL_RCC_OscConfig+0x12c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d168      	bne.n	80064a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e24c      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e2:	d106      	bne.n	80063f2 <HAL_RCC_OscConfig+0x76>
 80063e4:	4b80      	ldr	r3, [pc, #512]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a7f      	ldr	r2, [pc, #508]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	e02e      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10c      	bne.n	8006414 <HAL_RCC_OscConfig+0x98>
 80063fa:	4b7b      	ldr	r3, [pc, #492]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a7a      	ldr	r2, [pc, #488]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	4b78      	ldr	r3, [pc, #480]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a77      	ldr	r2, [pc, #476]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800640c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	e01d      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800641c:	d10c      	bne.n	8006438 <HAL_RCC_OscConfig+0xbc>
 800641e:	4b72      	ldr	r3, [pc, #456]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a71      	ldr	r2, [pc, #452]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	4b6f      	ldr	r3, [pc, #444]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6e      	ldr	r2, [pc, #440]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	e00b      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 8006438:	4b6b      	ldr	r3, [pc, #428]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a6a      	ldr	r2, [pc, #424]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800643e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b68      	ldr	r3, [pc, #416]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a67      	ldr	r2, [pc, #412]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800644a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d013      	beq.n	8006480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fc fbd8 	bl	8002c0c <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006460:	f7fc fbd4 	bl	8002c0c <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	; 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e200      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006472:	4b5d      	ldr	r3, [pc, #372]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCC_OscConfig+0xe4>
 800647e:	e014      	b.n	80064aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006480:	f7fc fbc4 	bl	8002c0c <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006488:	f7fc fbc0 	bl	8002c0c <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b64      	cmp	r3, #100	; 0x64
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e1ec      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649a:	4b53      	ldr	r3, [pc, #332]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f0      	bne.n	8006488 <HAL_RCC_OscConfig+0x10c>
 80064a6:	e000      	b.n	80064aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d063      	beq.n	800657e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064b6:	4b4c      	ldr	r3, [pc, #304]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064c2:	4b49      	ldr	r3, [pc, #292]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 030c 	and.w	r3, r3, #12
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d11c      	bne.n	8006508 <HAL_RCC_OscConfig+0x18c>
 80064ce:	4b46      	ldr	r3, [pc, #280]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d116      	bne.n	8006508 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064da:	4b43      	ldr	r3, [pc, #268]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_RCC_OscConfig+0x176>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d001      	beq.n	80064f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e1c0      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f2:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4939      	ldr	r1, [pc, #228]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006502:	4313      	orrs	r3, r2
 8006504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006506:	e03a      	b.n	800657e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d020      	beq.n	8006552 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006510:	4b36      	ldr	r3, [pc, #216]	; (80065ec <HAL_RCC_OscConfig+0x270>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006516:	f7fc fb79 	bl	8002c0c <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800651e:	f7fc fb75 	bl	8002c0c <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e1a1      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006530:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653c:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4927      	ldr	r1, [pc, #156]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800654c:	4313      	orrs	r3, r2
 800654e:	600b      	str	r3, [r1, #0]
 8006550:	e015      	b.n	800657e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006552:	4b26      	ldr	r3, [pc, #152]	; (80065ec <HAL_RCC_OscConfig+0x270>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006558:	f7fc fb58 	bl	8002c0c <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006560:	f7fc fb54 	bl	8002c0c <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e180      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006572:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d03a      	beq.n	8006600 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d019      	beq.n	80065c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006592:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <HAL_RCC_OscConfig+0x274>)
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006598:	f7fc fb38 	bl	8002c0c <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a0:	f7fc fb34 	bl	8002c0c <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e160      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065be:	2001      	movs	r0, #1
 80065c0:	f000 fad8 	bl	8006b74 <RCC_Delay>
 80065c4:	e01c      	b.n	8006600 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c6:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <HAL_RCC_OscConfig+0x274>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065cc:	f7fc fb1e 	bl	8002c0c <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d2:	e00f      	b.n	80065f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d4:	f7fc fb1a 	bl	8002c0c <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d908      	bls.n	80065f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e146      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
 80065e6:	bf00      	nop
 80065e8:	40021000 	.word	0x40021000
 80065ec:	42420000 	.word	0x42420000
 80065f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f4:	4b92      	ldr	r3, [pc, #584]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e9      	bne.n	80065d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80a6 	beq.w	800675a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660e:	2300      	movs	r3, #0
 8006610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006612:	4b8b      	ldr	r3, [pc, #556]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800661e:	4b88      	ldr	r3, [pc, #544]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	4a87      	ldr	r2, [pc, #540]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006628:	61d3      	str	r3, [r2, #28]
 800662a:	4b85      	ldr	r3, [pc, #532]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006636:	2301      	movs	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663a:	4b82      	ldr	r3, [pc, #520]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d118      	bne.n	8006678 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006646:	4b7f      	ldr	r3, [pc, #508]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a7e      	ldr	r2, [pc, #504]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 800664c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006652:	f7fc fadb 	bl	8002c0c <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665a:	f7fc fad7 	bl	8002c0c <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b64      	cmp	r3, #100	; 0x64
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e103      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	4b75      	ldr	r3, [pc, #468]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d106      	bne.n	800668e <HAL_RCC_OscConfig+0x312>
 8006680:	4b6f      	ldr	r3, [pc, #444]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	4a6e      	ldr	r2, [pc, #440]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6213      	str	r3, [r2, #32]
 800668c:	e02d      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x334>
 8006696:	4b6a      	ldr	r3, [pc, #424]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	4a69      	ldr	r2, [pc, #420]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	6213      	str	r3, [r2, #32]
 80066a2:	4b67      	ldr	r3, [pc, #412]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	4a66      	ldr	r2, [pc, #408]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066a8:	f023 0304 	bic.w	r3, r3, #4
 80066ac:	6213      	str	r3, [r2, #32]
 80066ae:	e01c      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d10c      	bne.n	80066d2 <HAL_RCC_OscConfig+0x356>
 80066b8:	4b61      	ldr	r3, [pc, #388]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	4a60      	ldr	r2, [pc, #384]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066be:	f043 0304 	orr.w	r3, r3, #4
 80066c2:	6213      	str	r3, [r2, #32]
 80066c4:	4b5e      	ldr	r3, [pc, #376]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	4a5d      	ldr	r2, [pc, #372]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066ca:	f043 0301 	orr.w	r3, r3, #1
 80066ce:	6213      	str	r3, [r2, #32]
 80066d0:	e00b      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 80066d2:	4b5b      	ldr	r3, [pc, #364]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	4a5a      	ldr	r2, [pc, #360]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	6213      	str	r3, [r2, #32]
 80066de:	4b58      	ldr	r3, [pc, #352]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	4a57      	ldr	r2, [pc, #348]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d015      	beq.n	800671e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f2:	f7fc fa8b 	bl	8002c0c <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fc fa87 	bl	8002c0c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e0b1      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006710:	4b4b      	ldr	r3, [pc, #300]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0ee      	beq.n	80066fa <HAL_RCC_OscConfig+0x37e>
 800671c:	e014      	b.n	8006748 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800671e:	f7fc fa75 	bl	8002c0c <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fc fa71 	bl	8002c0c <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	; 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e09b      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673c:	4b40      	ldr	r3, [pc, #256]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1ee      	bne.n	8006726 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d105      	bne.n	800675a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800674e:	4b3c      	ldr	r3, [pc, #240]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	4a3b      	ldr	r2, [pc, #236]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006758:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8087 	beq.w	8006872 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006764:	4b36      	ldr	r3, [pc, #216]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b08      	cmp	r3, #8
 800676e:	d061      	beq.n	8006834 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d146      	bne.n	8006806 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006778:	4b33      	ldr	r3, [pc, #204]	; (8006848 <HAL_RCC_OscConfig+0x4cc>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7fc fa45 	bl	8002c0c <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006786:	f7fc fa41 	bl	8002c0c <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e06d      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006798:	4b29      	ldr	r3, [pc, #164]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1f0      	bne.n	8006786 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ac:	d108      	bne.n	80067c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4921      	ldr	r1, [pc, #132]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067c0:	4b1f      	ldr	r3, [pc, #124]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a19      	ldr	r1, [r3, #32]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	430b      	orrs	r3, r1
 80067d2:	491b      	ldr	r1, [pc, #108]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d8:	4b1b      	ldr	r3, [pc, #108]	; (8006848 <HAL_RCC_OscConfig+0x4cc>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067de:	f7fc fa15 	bl	8002c0c <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e6:	f7fc fa11 	bl	8002c0c <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e03d      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x46a>
 8006804:	e035      	b.n	8006872 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006806:	4b10      	ldr	r3, [pc, #64]	; (8006848 <HAL_RCC_OscConfig+0x4cc>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680c:	f7fc f9fe 	bl	8002c0c <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006814:	f7fc f9fa 	bl	8002c0c <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e026      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCC_OscConfig+0x498>
 8006832:	e01e      	b.n	8006872 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d107      	bne.n	800684c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e019      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
 8006840:	40021000 	.word	0x40021000
 8006844:	40007000 	.word	0x40007000
 8006848:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800684c:	4b0b      	ldr	r3, [pc, #44]	; (800687c <HAL_RCC_OscConfig+0x500>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	429a      	cmp	r2, r3
 800685e:	d106      	bne.n	800686e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800686a:	429a      	cmp	r2, r3
 800686c:	d001      	beq.n	8006872 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40021000 	.word	0x40021000

08006880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0d0      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006894:	4b6a      	ldr	r3, [pc, #424]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d910      	bls.n	80068c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a2:	4b67      	ldr	r3, [pc, #412]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f023 0207 	bic.w	r2, r3, #7
 80068aa:	4965      	ldr	r1, [pc, #404]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b2:	4b63      	ldr	r3, [pc, #396]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0b8      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d020      	beq.n	8006912 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068dc:	4b59      	ldr	r3, [pc, #356]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	4a58      	ldr	r2, [pc, #352]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068f4:	4b53      	ldr	r3, [pc, #332]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4a52      	ldr	r2, [pc, #328]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006900:	4b50      	ldr	r3, [pc, #320]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	494d      	ldr	r1, [pc, #308]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 800690e:	4313      	orrs	r3, r2
 8006910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d040      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d107      	bne.n	8006936 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006926:	4b47      	ldr	r3, [pc, #284]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d115      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e07f      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d107      	bne.n	800694e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693e:	4b41      	ldr	r3, [pc, #260]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e073      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800694e:	4b3d      	ldr	r3, [pc, #244]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e06b      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800695e:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f023 0203 	bic.w	r2, r3, #3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4936      	ldr	r1, [pc, #216]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	4313      	orrs	r3, r2
 800696e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006970:	f7fc f94c 	bl	8002c0c <HAL_GetTick>
 8006974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006976:	e00a      	b.n	800698e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006978:	f7fc f948 	bl	8002c0c <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f241 3288 	movw	r2, #5000	; 0x1388
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e053      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698e:	4b2d      	ldr	r3, [pc, #180]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f003 020c 	and.w	r2, r3, #12
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	429a      	cmp	r2, r3
 800699e:	d1eb      	bne.n	8006978 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069a0:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d210      	bcs.n	80069d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ae:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f023 0207 	bic.w	r2, r3, #7
 80069b6:	4922      	ldr	r1, [pc, #136]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d001      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e032      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069dc:	4b19      	ldr	r3, [pc, #100]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4916      	ldr	r1, [pc, #88]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	490e      	ldr	r1, [pc, #56]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a0e:	f000 f821 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	091b      	lsrs	r3, r3, #4
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	490a      	ldr	r1, [pc, #40]	; (8006a48 <HAL_RCC_ClockConfig+0x1c8>)
 8006a20:	5ccb      	ldrb	r3, [r1, r3]
 8006a22:	fa22 f303 	lsr.w	r3, r2, r3
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <HAL_RCC_ClockConfig+0x1cc>)
 8006a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <HAL_RCC_ClockConfig+0x1d0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fc f8aa 	bl	8002b88 <HAL_InitTick>

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40022000 	.word	0x40022000
 8006a44:	40021000 	.word	0x40021000
 8006a48:	08008690 	.word	0x08008690
 8006a4c:	20000004 	.word	0x20000004
 8006a50:	20000008 	.word	0x20000008

08006a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a54:	b490      	push	{r4, r7}
 8006a56:	b08a      	sub	sp, #40	; 0x28
 8006a58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a5a:	4b29      	ldr	r3, [pc, #164]	; (8006b00 <HAL_RCC_GetSysClockFreq+0xac>)
 8006a5c:	1d3c      	adds	r4, r7, #4
 8006a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a64:	f240 2301 	movw	r3, #513	; 0x201
 8006a68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	2300      	movs	r3, #0
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a7e:	4b21      	ldr	r3, [pc, #132]	; (8006b04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d002      	beq.n	8006a94 <HAL_RCC_GetSysClockFreq+0x40>
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d003      	beq.n	8006a9a <HAL_RCC_GetSysClockFreq+0x46>
 8006a92:	e02b      	b.n	8006aec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a94:	4b1c      	ldr	r3, [pc, #112]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a96:	623b      	str	r3, [r7, #32]
      break;
 8006a98:	e02b      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	0c9b      	lsrs	r3, r3, #18
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	3328      	adds	r3, #40	; 0x28
 8006aa4:	443b      	add	r3, r7
 8006aa6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006aaa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d012      	beq.n	8006adc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ab6:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	0c5b      	lsrs	r3, r3, #17
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	3328      	adds	r3, #40	; 0x28
 8006ac2:	443b      	add	r3, r7
 8006ac4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ac8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	4a0e      	ldr	r2, [pc, #56]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ace:	fb03 f202 	mul.w	r2, r3, r2
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8006ada:	e004      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4a0b      	ldr	r2, [pc, #44]	; (8006b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	623b      	str	r3, [r7, #32]
      break;
 8006aea:	e002      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006aee:	623b      	str	r3, [r7, #32]
      break;
 8006af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006af2:	6a3b      	ldr	r3, [r7, #32]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3728      	adds	r7, #40	; 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc90      	pop	{r4, r7}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	08008680 	.word	0x08008680
 8006b04:	40021000 	.word	0x40021000
 8006b08:	007a1200 	.word	0x007a1200
 8006b0c:	003d0900 	.word	0x003d0900

08006b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b14:	4b02      	ldr	r3, [pc, #8]	; (8006b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b16:	681b      	ldr	r3, [r3, #0]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr
 8006b20:	20000004 	.word	0x20000004

08006b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b28:	f7ff fff2 	bl	8006b10 <HAL_RCC_GetHCLKFreq>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	4903      	ldr	r1, [pc, #12]	; (8006b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b3a:	5ccb      	ldrb	r3, [r1, r3]
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40021000 	.word	0x40021000
 8006b48:	080086a0 	.word	0x080086a0

08006b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b50:	f7ff ffde 	bl	8006b10 <HAL_RCC_GetHCLKFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	0adb      	lsrs	r3, r3, #11
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	4903      	ldr	r1, [pc, #12]	; (8006b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	080086a0 	.word	0x080086a0

08006b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <RCC_Delay+0x34>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <RCC_Delay+0x38>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	0a5b      	lsrs	r3, r3, #9
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b90:	bf00      	nop
  }
  while (Delay --);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1e5a      	subs	r2, r3, #1
 8006b96:	60fa      	str	r2, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f9      	bne.n	8006b90 <RCC_Delay+0x1c>
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr
 8006ba8:	20000004 	.word	0x20000004
 8006bac:	10624dd3 	.word	0x10624dd3

08006bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e076      	b.n	8006cb0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d108      	bne.n	8006bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bd2:	d009      	beq.n	8006be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	61da      	str	r2, [r3, #28]
 8006bda:	e005      	b.n	8006be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7fb f8aa 	bl	8001d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6c:	ea42 0103 	orr.w	r1, r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	0c1a      	lsrs	r2, r3, #16
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f002 0204 	and.w	r2, r2, #4
 8006c8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b088      	sub	sp, #32
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_SPI_Transmit+0x22>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e126      	b.n	8006f28 <HAL_SPI_Transmit+0x270>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce2:	f7fb ff93 	bl	8002c0c <HAL_GetTick>
 8006ce6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
 8006cea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d002      	beq.n	8006cfe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cfc:	e10b      	b.n	8006f16 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_SPI_Transmit+0x52>
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d0e:	e102      	b.n	8006f16 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2203      	movs	r2, #3
 8006d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d56:	d10f      	bne.n	8006d78 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d82:	2b40      	cmp	r3, #64	; 0x40
 8006d84:	d007      	beq.n	8006d96 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d9e:	d14b      	bne.n	8006e38 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_SPI_Transmit+0xf6>
 8006da8:	8afb      	ldrh	r3, [r7, #22]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d13e      	bne.n	8006e2c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	881a      	ldrh	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	1c9a      	adds	r2, r3, #2
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dd2:	e02b      	b.n	8006e2c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d112      	bne.n	8006e08 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de6:	881a      	ldrh	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	1c9a      	adds	r2, r3, #2
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e06:	e011      	b.n	8006e2c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e08:	f7fb ff00 	bl	8002c0c <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d803      	bhi.n	8006e20 <HAL_SPI_Transmit+0x168>
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d102      	bne.n	8006e26 <HAL_SPI_Transmit+0x16e>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e2a:	e074      	b.n	8006f16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1ce      	bne.n	8006dd4 <HAL_SPI_Transmit+0x11c>
 8006e36:	e04c      	b.n	8006ed2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_SPI_Transmit+0x18e>
 8006e40:	8afb      	ldrh	r3, [r7, #22]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d140      	bne.n	8006ec8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	7812      	ldrb	r2, [r2, #0]
 8006e52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e6c:	e02c      	b.n	8006ec8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d113      	bne.n	8006ea4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	330c      	adds	r3, #12
 8006e86:	7812      	ldrb	r2, [r2, #0]
 8006e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ea2:	e011      	b.n	8006ec8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ea4:	f7fb feb2 	bl	8002c0c <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d803      	bhi.n	8006ebc <HAL_SPI_Transmit+0x204>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eba:	d102      	bne.n	8006ec2 <HAL_SPI_Transmit+0x20a>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d102      	bne.n	8006ec8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ec6:	e026      	b.n	8006f16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1cd      	bne.n	8006e6e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fbb8 	bl	800764c <SPI_EndRxTxTransaction>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	77fb      	strb	r3, [r7, #31]
 8006f12:	e000      	b.n	8006f16 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006f14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f4c:	d112      	bne.n	8006f74 <HAL_SPI_Receive+0x44>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10e      	bne.n	8006f74 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2204      	movs	r2, #4
 8006f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f5e:	88fa      	ldrh	r2, [r7, #6]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	4613      	mov	r3, r2
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 f8f1 	bl	8007152 <HAL_SPI_TransmitReceive>
 8006f70:	4603      	mov	r3, r0
 8006f72:	e0ea      	b.n	800714a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_SPI_Receive+0x52>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e0e3      	b.n	800714a <HAL_SPI_Receive+0x21a>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f8a:	f7fb fe3f 	bl	8002c0c <HAL_GetTick>
 8006f8e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d002      	beq.n	8006fa2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fa0:	e0ca      	b.n	8007138 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <HAL_SPI_Receive+0x7e>
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d102      	bne.n	8006fb4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fb2:	e0c1      	b.n	8007138 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2204      	movs	r2, #4
 8006fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffa:	d10f      	bne.n	800701c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800700a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800701a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	d007      	beq.n	800703a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007038:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d162      	bne.n	8007108 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007042:	e02e      	b.n	80070a2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b01      	cmp	r3, #1
 8007050:	d115      	bne.n	800707e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f103 020c 	add.w	r2, r3, #12
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800707c:	e011      	b.n	80070a2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800707e:	f7fb fdc5 	bl	8002c0c <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d803      	bhi.n	8007096 <HAL_SPI_Receive+0x166>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007094:	d102      	bne.n	800709c <HAL_SPI_Receive+0x16c>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070a0:	e04a      	b.n	8007138 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1cb      	bne.n	8007044 <HAL_SPI_Receive+0x114>
 80070ac:	e031      	b.n	8007112 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d113      	bne.n	80070e4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	b292      	uxth	r2, r2
 80070c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	1c9a      	adds	r2, r3, #2
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070e2:	e011      	b.n	8007108 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070e4:	f7fb fd92 	bl	8002c0c <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d803      	bhi.n	80070fc <HAL_SPI_Receive+0x1cc>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d102      	bne.n	8007102 <HAL_SPI_Receive+0x1d2>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d102      	bne.n	8007108 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007106:	e017      	b.n	8007138 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1cd      	bne.n	80070ae <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 fa46 	bl	80075a8 <SPI_EndRxTransaction>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	75fb      	strb	r3, [r7, #23]
 8007134:	e000      	b.n	8007138 <HAL_SPI_Receive+0x208>
  }

error :
 8007136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b08c      	sub	sp, #48	; 0x30
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
 800715e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007160:	2301      	movs	r3, #1
 8007162:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_SPI_TransmitReceive+0x26>
 8007174:	2302      	movs	r3, #2
 8007176:	e18a      	b.n	800748e <HAL_SPI_TransmitReceive+0x33c>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007180:	f7fb fd44 	bl	8002c0c <HAL_GetTick>
 8007184:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800718c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007196:	887b      	ldrh	r3, [r7, #2]
 8007198:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800719a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d00f      	beq.n	80071c2 <HAL_SPI_TransmitReceive+0x70>
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071a8:	d107      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d103      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x68>
 80071b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d003      	beq.n	80071c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80071ba:	2302      	movs	r3, #2
 80071bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071c0:	e15b      	b.n	800747a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_SPI_TransmitReceive+0x82>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <HAL_SPI_TransmitReceive+0x82>
 80071ce:	887b      	ldrh	r3, [r7, #2]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d103      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071da:	e14e      	b.n	800747a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d003      	beq.n	80071f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2205      	movs	r2, #5
 80071ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	887a      	ldrh	r2, [r7, #2]
 8007200:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	887a      	ldrh	r2, [r7, #2]
 8007206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	887a      	ldrh	r2, [r7, #2]
 8007212:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	887a      	ldrh	r2, [r7, #2]
 8007218:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007230:	2b40      	cmp	r3, #64	; 0x40
 8007232:	d007      	beq.n	8007244 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800724c:	d178      	bne.n	8007340 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_SPI_TransmitReceive+0x10a>
 8007256:	8b7b      	ldrh	r3, [r7, #26]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d166      	bne.n	800732a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	881a      	ldrh	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726c:	1c9a      	adds	r2, r3, #2
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007280:	e053      	b.n	800732a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b02      	cmp	r3, #2
 800728e:	d11b      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x176>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007294:	b29b      	uxth	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d016      	beq.n	80072c8 <HAL_SPI_TransmitReceive+0x176>
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d113      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	881a      	ldrh	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	1c9a      	adds	r2, r3, #2
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	3b01      	subs	r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d119      	bne.n	800730a <HAL_SPI_TransmitReceive+0x1b8>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d014      	beq.n	800730a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	b292      	uxth	r2, r2
 80072ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	1c9a      	adds	r2, r3, #2
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007306:	2301      	movs	r3, #1
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800730a:	f7fb fc7f 	bl	8002c0c <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007316:	429a      	cmp	r2, r3
 8007318:	d807      	bhi.n	800732a <HAL_SPI_TransmitReceive+0x1d8>
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007320:	d003      	beq.n	800732a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007328:	e0a7      	b.n	800747a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1a6      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x130>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1a1      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x130>
 800733e:	e07c      	b.n	800743a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_SPI_TransmitReceive+0x1fc>
 8007348:	8b7b      	ldrh	r3, [r7, #26]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d16b      	bne.n	8007426 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	330c      	adds	r3, #12
 8007358:	7812      	ldrb	r2, [r2, #0]
 800735a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007374:	e057      	b.n	8007426 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b02      	cmp	r3, #2
 8007382:	d11c      	bne.n	80073be <HAL_SPI_TransmitReceive+0x26c>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d017      	beq.n	80073be <HAL_SPI_TransmitReceive+0x26c>
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d114      	bne.n	80073be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	330c      	adds	r3, #12
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d119      	bne.n	8007400 <HAL_SPI_TransmitReceive+0x2ae>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d014      	beq.n	8007400 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	b2d2      	uxtb	r2, r2
 80073e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073fc:	2301      	movs	r3, #1
 80073fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007400:	f7fb fc04 	bl	8002c0c <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800740c:	429a      	cmp	r2, r3
 800740e:	d803      	bhi.n	8007418 <HAL_SPI_TransmitReceive+0x2c6>
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007416:	d102      	bne.n	800741e <HAL_SPI_TransmitReceive+0x2cc>
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2b00      	cmp	r3, #0
 800741c:	d103      	bne.n	8007426 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007424:	e029      	b.n	800747a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1a2      	bne.n	8007376 <HAL_SPI_TransmitReceive+0x224>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d19d      	bne.n	8007376 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800743a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f904 	bl	800764c <SPI_EndRxTxTransaction>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d006      	beq.n	8007458 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007456:	e010      	b.n	800747a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10b      	bne.n	8007478 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007460:	2300      	movs	r3, #0
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	e000      	b.n	800747a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007478:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800748a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800748e:	4618      	mov	r0, r3
 8007490:	3730      	adds	r7, #48	; 0x30
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074a8:	f7fb fbb0 	bl	8002c0c <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	4413      	add	r3, r2
 80074b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074b8:	f7fb fba8 	bl	8002c0c <HAL_GetTick>
 80074bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074be:	4b39      	ldr	r3, [pc, #228]	; (80075a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	015b      	lsls	r3, r3, #5
 80074c4:	0d1b      	lsrs	r3, r3, #20
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	fb02 f303 	mul.w	r3, r2, r3
 80074cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ce:	e054      	b.n	800757a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d6:	d050      	beq.n	800757a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074d8:	f7fb fb98 	bl	8002c0c <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d902      	bls.n	80074ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d13d      	bne.n	800756a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007506:	d111      	bne.n	800752c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007510:	d004      	beq.n	800751c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751a:	d107      	bne.n	800752c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800752a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007534:	d10f      	bne.n	8007556 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e017      	b.n	800759a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	3b01      	subs	r3, #1
 8007578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	4013      	ands	r3, r2
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	429a      	cmp	r2, r3
 8007588:	bf0c      	ite	eq
 800758a:	2301      	moveq	r3, #1
 800758c:	2300      	movne	r3, #0
 800758e:	b2db      	uxtb	r3, r3
 8007590:	461a      	mov	r2, r3
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	429a      	cmp	r2, r3
 8007596:	d19b      	bne.n	80074d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3720      	adds	r7, #32
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000004 	.word	0x20000004

080075a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075bc:	d111      	bne.n	80075e2 <SPI_EndRxTransaction+0x3a>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c6:	d004      	beq.n	80075d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d0:	d107      	bne.n	80075e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ea:	d117      	bne.n	800761c <SPI_EndRxTransaction+0x74>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f4:	d112      	bne.n	800761c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	2101      	movs	r1, #1
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f7ff ff49 	bl	8007498 <SPI_WaitFlagStateUntilTimeout>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01a      	beq.n	8007642 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007610:	f043 0220 	orr.w	r2, r3, #32
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e013      	b.n	8007644 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2200      	movs	r2, #0
 8007624:	2180      	movs	r1, #128	; 0x80
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7ff ff36 	bl	8007498 <SPI_WaitFlagStateUntilTimeout>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d007      	beq.n	8007642 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007636:	f043 0220 	orr.w	r2, r3, #32
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e000      	b.n	8007644 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2200      	movs	r2, #0
 8007660:	2180      	movs	r1, #128	; 0x80
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f7ff ff18 	bl	8007498 <SPI_WaitFlagStateUntilTimeout>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d007      	beq.n	800767e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007672:	f043 0220 	orr.w	r2, r3, #32
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e000      	b.n	8007680 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e03f      	b.n	800771a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fa fb9e 	bl	8001df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2224      	movs	r2, #36	; 0x24
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f829 	bl	8007724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695a      	ldr	r2, [r3, #20]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800775e:	f023 030c 	bic.w	r3, r3, #12
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	68b9      	ldr	r1, [r7, #8]
 8007768:	430b      	orrs	r3, r1
 800776a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a2c      	ldr	r2, [pc, #176]	; (8007838 <UART_SetConfig+0x114>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d103      	bne.n	8007794 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800778c:	f7ff f9de 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	e002      	b.n	800779a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007794:	f7ff f9c6 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 8007798:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	009a      	lsls	r2, r3, #2
 80077a4:	441a      	add	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b0:	4a22      	ldr	r2, [pc, #136]	; (800783c <UART_SetConfig+0x118>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	095b      	lsrs	r3, r3, #5
 80077b8:	0119      	lsls	r1, r3, #4
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4613      	mov	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	009a      	lsls	r2, r3, #2
 80077c4:	441a      	add	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80077d0:	4b1a      	ldr	r3, [pc, #104]	; (800783c <UART_SetConfig+0x118>)
 80077d2:	fba3 0302 	umull	r0, r3, r3, r2
 80077d6:	095b      	lsrs	r3, r3, #5
 80077d8:	2064      	movs	r0, #100	; 0x64
 80077da:	fb00 f303 	mul.w	r3, r0, r3
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	3332      	adds	r3, #50	; 0x32
 80077e4:	4a15      	ldr	r2, [pc, #84]	; (800783c <UART_SetConfig+0x118>)
 80077e6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077f0:	4419      	add	r1, r3
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4613      	mov	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	009a      	lsls	r2, r3, #2
 80077fc:	441a      	add	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	fbb2 f2f3 	udiv	r2, r2, r3
 8007808:	4b0c      	ldr	r3, [pc, #48]	; (800783c <UART_SetConfig+0x118>)
 800780a:	fba3 0302 	umull	r0, r3, r3, r2
 800780e:	095b      	lsrs	r3, r3, #5
 8007810:	2064      	movs	r0, #100	; 0x64
 8007812:	fb00 f303 	mul.w	r3, r0, r3
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	3332      	adds	r3, #50	; 0x32
 800781c:	4a07      	ldr	r2, [pc, #28]	; (800783c <UART_SetConfig+0x118>)
 800781e:	fba2 2303 	umull	r2, r3, r2, r3
 8007822:	095b      	lsrs	r3, r3, #5
 8007824:	f003 020f 	and.w	r2, r3, #15
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	440a      	add	r2, r1
 800782e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007830:	bf00      	nop
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	40013800 	.word	0x40013800
 800783c:	51eb851f 	.word	0x51eb851f

08007840 <pow>:
 8007840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007844:	4614      	mov	r4, r2
 8007846:	461d      	mov	r5, r3
 8007848:	4680      	mov	r8, r0
 800784a:	4689      	mov	r9, r1
 800784c:	f000 f860 	bl	8007910 <__ieee754_pow>
 8007850:	4622      	mov	r2, r4
 8007852:	4606      	mov	r6, r0
 8007854:	460f      	mov	r7, r1
 8007856:	462b      	mov	r3, r5
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f7f9 f8ce 	bl	80009fc <__aeabi_dcmpun>
 8007860:	bbc8      	cbnz	r0, 80078d6 <pow+0x96>
 8007862:	2200      	movs	r2, #0
 8007864:	2300      	movs	r3, #0
 8007866:	4640      	mov	r0, r8
 8007868:	4649      	mov	r1, r9
 800786a:	f7f9 f895 	bl	8000998 <__aeabi_dcmpeq>
 800786e:	b1b8      	cbz	r0, 80078a0 <pow+0x60>
 8007870:	2200      	movs	r2, #0
 8007872:	2300      	movs	r3, #0
 8007874:	4620      	mov	r0, r4
 8007876:	4629      	mov	r1, r5
 8007878:	f7f9 f88e 	bl	8000998 <__aeabi_dcmpeq>
 800787c:	2800      	cmp	r0, #0
 800787e:	d141      	bne.n	8007904 <pow+0xc4>
 8007880:	4620      	mov	r0, r4
 8007882:	4629      	mov	r1, r5
 8007884:	f000 fe39 	bl	80084fa <finite>
 8007888:	b328      	cbz	r0, 80078d6 <pow+0x96>
 800788a:	2200      	movs	r2, #0
 800788c:	2300      	movs	r3, #0
 800788e:	4620      	mov	r0, r4
 8007890:	4629      	mov	r1, r5
 8007892:	f7f9 f88b 	bl	80009ac <__aeabi_dcmplt>
 8007896:	b1f0      	cbz	r0, 80078d6 <pow+0x96>
 8007898:	f000 feb4 	bl	8008604 <__errno>
 800789c:	2322      	movs	r3, #34	; 0x22
 800789e:	e019      	b.n	80078d4 <pow+0x94>
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f000 fe29 	bl	80084fa <finite>
 80078a8:	b9c8      	cbnz	r0, 80078de <pow+0x9e>
 80078aa:	4640      	mov	r0, r8
 80078ac:	4649      	mov	r1, r9
 80078ae:	f000 fe24 	bl	80084fa <finite>
 80078b2:	b1a0      	cbz	r0, 80078de <pow+0x9e>
 80078b4:	4620      	mov	r0, r4
 80078b6:	4629      	mov	r1, r5
 80078b8:	f000 fe1f 	bl	80084fa <finite>
 80078bc:	b178      	cbz	r0, 80078de <pow+0x9e>
 80078be:	4632      	mov	r2, r6
 80078c0:	463b      	mov	r3, r7
 80078c2:	4630      	mov	r0, r6
 80078c4:	4639      	mov	r1, r7
 80078c6:	f7f9 f899 	bl	80009fc <__aeabi_dcmpun>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d0e4      	beq.n	8007898 <pow+0x58>
 80078ce:	f000 fe99 	bl	8008604 <__errno>
 80078d2:	2321      	movs	r3, #33	; 0x21
 80078d4:	6003      	str	r3, [r0, #0]
 80078d6:	4630      	mov	r0, r6
 80078d8:	4639      	mov	r1, r7
 80078da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078de:	2200      	movs	r2, #0
 80078e0:	2300      	movs	r3, #0
 80078e2:	4630      	mov	r0, r6
 80078e4:	4639      	mov	r1, r7
 80078e6:	f7f9 f857 	bl	8000998 <__aeabi_dcmpeq>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d0f3      	beq.n	80078d6 <pow+0x96>
 80078ee:	4640      	mov	r0, r8
 80078f0:	4649      	mov	r1, r9
 80078f2:	f000 fe02 	bl	80084fa <finite>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d0ed      	beq.n	80078d6 <pow+0x96>
 80078fa:	4620      	mov	r0, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	f000 fdfc 	bl	80084fa <finite>
 8007902:	e7c8      	b.n	8007896 <pow+0x56>
 8007904:	2600      	movs	r6, #0
 8007906:	4f01      	ldr	r7, [pc, #4]	; (800790c <pow+0xcc>)
 8007908:	e7e5      	b.n	80078d6 <pow+0x96>
 800790a:	bf00      	nop
 800790c:	3ff00000 	.word	0x3ff00000

08007910 <__ieee754_pow>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	b093      	sub	sp, #76	; 0x4c
 8007916:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800791a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800791e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007922:	4689      	mov	r9, r1
 8007924:	ea56 0102 	orrs.w	r1, r6, r2
 8007928:	4680      	mov	r8, r0
 800792a:	d111      	bne.n	8007950 <__ieee754_pow+0x40>
 800792c:	1803      	adds	r3, r0, r0
 800792e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8007932:	4152      	adcs	r2, r2
 8007934:	4299      	cmp	r1, r3
 8007936:	4b82      	ldr	r3, [pc, #520]	; (8007b40 <__ieee754_pow+0x230>)
 8007938:	4193      	sbcs	r3, r2
 800793a:	f080 84b9 	bcs.w	80082b0 <__ieee754_pow+0x9a0>
 800793e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	f7f8 fc09 	bl	800015c <__adddf3>
 800794a:	4683      	mov	fp, r0
 800794c:	468c      	mov	ip, r1
 800794e:	e06f      	b.n	8007a30 <__ieee754_pow+0x120>
 8007950:	4b7c      	ldr	r3, [pc, #496]	; (8007b44 <__ieee754_pow+0x234>)
 8007952:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007956:	429c      	cmp	r4, r3
 8007958:	464d      	mov	r5, r9
 800795a:	4682      	mov	sl, r0
 800795c:	dc06      	bgt.n	800796c <__ieee754_pow+0x5c>
 800795e:	d101      	bne.n	8007964 <__ieee754_pow+0x54>
 8007960:	2800      	cmp	r0, #0
 8007962:	d1ec      	bne.n	800793e <__ieee754_pow+0x2e>
 8007964:	429e      	cmp	r6, r3
 8007966:	dc01      	bgt.n	800796c <__ieee754_pow+0x5c>
 8007968:	d10f      	bne.n	800798a <__ieee754_pow+0x7a>
 800796a:	b172      	cbz	r2, 800798a <__ieee754_pow+0x7a>
 800796c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007970:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007974:	ea55 050a 	orrs.w	r5, r5, sl
 8007978:	d1e1      	bne.n	800793e <__ieee754_pow+0x2e>
 800797a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800797e:	18db      	adds	r3, r3, r3
 8007980:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007984:	4152      	adcs	r2, r2
 8007986:	429d      	cmp	r5, r3
 8007988:	e7d5      	b.n	8007936 <__ieee754_pow+0x26>
 800798a:	2d00      	cmp	r5, #0
 800798c:	da39      	bge.n	8007a02 <__ieee754_pow+0xf2>
 800798e:	4b6e      	ldr	r3, [pc, #440]	; (8007b48 <__ieee754_pow+0x238>)
 8007990:	429e      	cmp	r6, r3
 8007992:	dc52      	bgt.n	8007a3a <__ieee754_pow+0x12a>
 8007994:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007998:	429e      	cmp	r6, r3
 800799a:	f340 849c 	ble.w	80082d6 <__ieee754_pow+0x9c6>
 800799e:	1533      	asrs	r3, r6, #20
 80079a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80079a4:	2b14      	cmp	r3, #20
 80079a6:	dd0f      	ble.n	80079c8 <__ieee754_pow+0xb8>
 80079a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80079ac:	fa22 f103 	lsr.w	r1, r2, r3
 80079b0:	fa01 f303 	lsl.w	r3, r1, r3
 80079b4:	4293      	cmp	r3, r2
 80079b6:	f040 848e 	bne.w	80082d6 <__ieee754_pow+0x9c6>
 80079ba:	f001 0101 	and.w	r1, r1, #1
 80079be:	f1c1 0302 	rsb	r3, r1, #2
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	b182      	cbz	r2, 80079e8 <__ieee754_pow+0xd8>
 80079c6:	e05d      	b.n	8007a84 <__ieee754_pow+0x174>
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	d159      	bne.n	8007a80 <__ieee754_pow+0x170>
 80079cc:	f1c3 0314 	rsb	r3, r3, #20
 80079d0:	fa46 f103 	asr.w	r1, r6, r3
 80079d4:	fa01 f303 	lsl.w	r3, r1, r3
 80079d8:	42b3      	cmp	r3, r6
 80079da:	f040 8479 	bne.w	80082d0 <__ieee754_pow+0x9c0>
 80079de:	f001 0101 	and.w	r1, r1, #1
 80079e2:	f1c1 0302 	rsb	r3, r1, #2
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	4b58      	ldr	r3, [pc, #352]	; (8007b4c <__ieee754_pow+0x23c>)
 80079ea:	429e      	cmp	r6, r3
 80079ec:	d132      	bne.n	8007a54 <__ieee754_pow+0x144>
 80079ee:	2f00      	cmp	r7, #0
 80079f0:	f280 846a 	bge.w	80082c8 <__ieee754_pow+0x9b8>
 80079f4:	4642      	mov	r2, r8
 80079f6:	464b      	mov	r3, r9
 80079f8:	2000      	movs	r0, #0
 80079fa:	4954      	ldr	r1, [pc, #336]	; (8007b4c <__ieee754_pow+0x23c>)
 80079fc:	f7f8 fe8e 	bl	800071c <__aeabi_ddiv>
 8007a00:	e7a3      	b.n	800794a <__ieee754_pow+0x3a>
 8007a02:	2300      	movs	r3, #0
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	2a00      	cmp	r2, #0
 8007a08:	d13c      	bne.n	8007a84 <__ieee754_pow+0x174>
 8007a0a:	4b4e      	ldr	r3, [pc, #312]	; (8007b44 <__ieee754_pow+0x234>)
 8007a0c:	429e      	cmp	r6, r3
 8007a0e:	d1eb      	bne.n	80079e8 <__ieee754_pow+0xd8>
 8007a10:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007a14:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007a18:	ea53 030a 	orrs.w	r3, r3, sl
 8007a1c:	f000 8448 	beq.w	80082b0 <__ieee754_pow+0x9a0>
 8007a20:	4b4b      	ldr	r3, [pc, #300]	; (8007b50 <__ieee754_pow+0x240>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	dd0b      	ble.n	8007a3e <__ieee754_pow+0x12e>
 8007a26:	2f00      	cmp	r7, #0
 8007a28:	f2c0 8448 	blt.w	80082bc <__ieee754_pow+0x9ac>
 8007a2c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007a30:	4658      	mov	r0, fp
 8007a32:	4661      	mov	r1, ip
 8007a34:	b013      	add	sp, #76	; 0x4c
 8007a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e7e2      	b.n	8007a04 <__ieee754_pow+0xf4>
 8007a3e:	2f00      	cmp	r7, #0
 8007a40:	f04f 0b00 	mov.w	fp, #0
 8007a44:	f04f 0c00 	mov.w	ip, #0
 8007a48:	daf2      	bge.n	8007a30 <__ieee754_pow+0x120>
 8007a4a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007a4e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007a52:	e7ed      	b.n	8007a30 <__ieee754_pow+0x120>
 8007a54:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007a58:	d106      	bne.n	8007a68 <__ieee754_pow+0x158>
 8007a5a:	4642      	mov	r2, r8
 8007a5c:	464b      	mov	r3, r9
 8007a5e:	4640      	mov	r0, r8
 8007a60:	4649      	mov	r1, r9
 8007a62:	f7f8 fd31 	bl	80004c8 <__aeabi_dmul>
 8007a66:	e770      	b.n	800794a <__ieee754_pow+0x3a>
 8007a68:	4b3a      	ldr	r3, [pc, #232]	; (8007b54 <__ieee754_pow+0x244>)
 8007a6a:	429f      	cmp	r7, r3
 8007a6c:	d10a      	bne.n	8007a84 <__ieee754_pow+0x174>
 8007a6e:	2d00      	cmp	r5, #0
 8007a70:	db08      	blt.n	8007a84 <__ieee754_pow+0x174>
 8007a72:	4640      	mov	r0, r8
 8007a74:	4649      	mov	r1, r9
 8007a76:	b013      	add	sp, #76	; 0x4c
 8007a78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	f000 bc5e 	b.w	800833c <__ieee754_sqrt>
 8007a80:	2300      	movs	r3, #0
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4640      	mov	r0, r8
 8007a86:	4649      	mov	r1, r9
 8007a88:	f000 fd34 	bl	80084f4 <fabs>
 8007a8c:	4683      	mov	fp, r0
 8007a8e:	468c      	mov	ip, r1
 8007a90:	f1ba 0f00 	cmp.w	sl, #0
 8007a94:	d128      	bne.n	8007ae8 <__ieee754_pow+0x1d8>
 8007a96:	b124      	cbz	r4, 8007aa2 <__ieee754_pow+0x192>
 8007a98:	4b2c      	ldr	r3, [pc, #176]	; (8007b4c <__ieee754_pow+0x23c>)
 8007a9a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d122      	bne.n	8007ae8 <__ieee754_pow+0x1d8>
 8007aa2:	2f00      	cmp	r7, #0
 8007aa4:	da07      	bge.n	8007ab6 <__ieee754_pow+0x1a6>
 8007aa6:	465a      	mov	r2, fp
 8007aa8:	4663      	mov	r3, ip
 8007aaa:	2000      	movs	r0, #0
 8007aac:	4927      	ldr	r1, [pc, #156]	; (8007b4c <__ieee754_pow+0x23c>)
 8007aae:	f7f8 fe35 	bl	800071c <__aeabi_ddiv>
 8007ab2:	4683      	mov	fp, r0
 8007ab4:	468c      	mov	ip, r1
 8007ab6:	2d00      	cmp	r5, #0
 8007ab8:	daba      	bge.n	8007a30 <__ieee754_pow+0x120>
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007ac0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007ac4:	4323      	orrs	r3, r4
 8007ac6:	d108      	bne.n	8007ada <__ieee754_pow+0x1ca>
 8007ac8:	465a      	mov	r2, fp
 8007aca:	4663      	mov	r3, ip
 8007acc:	4658      	mov	r0, fp
 8007ace:	4661      	mov	r1, ip
 8007ad0:	f7f8 fb42 	bl	8000158 <__aeabi_dsub>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	e790      	b.n	80079fc <__ieee754_pow+0xec>
 8007ada:	9b00      	ldr	r3, [sp, #0]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d1a7      	bne.n	8007a30 <__ieee754_pow+0x120>
 8007ae0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007ae4:	469c      	mov	ip, r3
 8007ae6:	e7a3      	b.n	8007a30 <__ieee754_pow+0x120>
 8007ae8:	0feb      	lsrs	r3, r5, #31
 8007aea:	3b01      	subs	r3, #1
 8007aec:	930c      	str	r3, [sp, #48]	; 0x30
 8007aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007af0:	9b00      	ldr	r3, [sp, #0]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	d104      	bne.n	8007b00 <__ieee754_pow+0x1f0>
 8007af6:	4642      	mov	r2, r8
 8007af8:	464b      	mov	r3, r9
 8007afa:	4640      	mov	r0, r8
 8007afc:	4649      	mov	r1, r9
 8007afe:	e7e7      	b.n	8007ad0 <__ieee754_pow+0x1c0>
 8007b00:	4b15      	ldr	r3, [pc, #84]	; (8007b58 <__ieee754_pow+0x248>)
 8007b02:	429e      	cmp	r6, r3
 8007b04:	f340 80f6 	ble.w	8007cf4 <__ieee754_pow+0x3e4>
 8007b08:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007b0c:	429e      	cmp	r6, r3
 8007b0e:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <__ieee754_pow+0x240>)
 8007b10:	dd09      	ble.n	8007b26 <__ieee754_pow+0x216>
 8007b12:	429c      	cmp	r4, r3
 8007b14:	dc0c      	bgt.n	8007b30 <__ieee754_pow+0x220>
 8007b16:	2f00      	cmp	r7, #0
 8007b18:	da0c      	bge.n	8007b34 <__ieee754_pow+0x224>
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	b013      	add	sp, #76	; 0x4c
 8007b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b22:	f000 bce2 	b.w	80084ea <__math_oflow>
 8007b26:	429c      	cmp	r4, r3
 8007b28:	dbf5      	blt.n	8007b16 <__ieee754_pow+0x206>
 8007b2a:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <__ieee754_pow+0x23c>)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	dd15      	ble.n	8007b5c <__ieee754_pow+0x24c>
 8007b30:	2f00      	cmp	r7, #0
 8007b32:	dcf2      	bgt.n	8007b1a <__ieee754_pow+0x20a>
 8007b34:	2000      	movs	r0, #0
 8007b36:	b013      	add	sp, #76	; 0x4c
 8007b38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	f000 bcd0 	b.w	80084e0 <__math_uflow>
 8007b40:	fff00000 	.word	0xfff00000
 8007b44:	7ff00000 	.word	0x7ff00000
 8007b48:	433fffff 	.word	0x433fffff
 8007b4c:	3ff00000 	.word	0x3ff00000
 8007b50:	3fefffff 	.word	0x3fefffff
 8007b54:	3fe00000 	.word	0x3fe00000
 8007b58:	41e00000 	.word	0x41e00000
 8007b5c:	4661      	mov	r1, ip
 8007b5e:	2200      	movs	r2, #0
 8007b60:	4658      	mov	r0, fp
 8007b62:	4b5f      	ldr	r3, [pc, #380]	; (8007ce0 <__ieee754_pow+0x3d0>)
 8007b64:	f7f8 faf8 	bl	8000158 <__aeabi_dsub>
 8007b68:	a355      	add	r3, pc, #340	; (adr r3, 8007cc0 <__ieee754_pow+0x3b0>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	4604      	mov	r4, r0
 8007b70:	460d      	mov	r5, r1
 8007b72:	f7f8 fca9 	bl	80004c8 <__aeabi_dmul>
 8007b76:	a354      	add	r3, pc, #336	; (adr r3, 8007cc8 <__ieee754_pow+0x3b8>)
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	460f      	mov	r7, r1
 8007b80:	4620      	mov	r0, r4
 8007b82:	4629      	mov	r1, r5
 8007b84:	f7f8 fca0 	bl	80004c8 <__aeabi_dmul>
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4682      	mov	sl, r0
 8007b8c:	468b      	mov	fp, r1
 8007b8e:	4620      	mov	r0, r4
 8007b90:	4629      	mov	r1, r5
 8007b92:	4b54      	ldr	r3, [pc, #336]	; (8007ce4 <__ieee754_pow+0x3d4>)
 8007b94:	f7f8 fc98 	bl	80004c8 <__aeabi_dmul>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	a14c      	add	r1, pc, #304	; (adr r1, 8007cd0 <__ieee754_pow+0x3c0>)
 8007b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ba2:	f7f8 fad9 	bl	8000158 <__aeabi_dsub>
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	462b      	mov	r3, r5
 8007baa:	f7f8 fc8d 	bl	80004c8 <__aeabi_dmul>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	494c      	ldr	r1, [pc, #304]	; (8007ce8 <__ieee754_pow+0x3d8>)
 8007bb6:	f7f8 facf 	bl	8000158 <__aeabi_dsub>
 8007bba:	4622      	mov	r2, r4
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	4689      	mov	r9, r1
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	f7f8 fc7f 	bl	80004c8 <__aeabi_dmul>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4640      	mov	r0, r8
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	f7f8 fc79 	bl	80004c8 <__aeabi_dmul>
 8007bd6:	a340      	add	r3, pc, #256	; (adr r3, 8007cd8 <__ieee754_pow+0x3c8>)
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f7f8 fc74 	bl	80004c8 <__aeabi_dmul>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4650      	mov	r0, sl
 8007be6:	4659      	mov	r1, fp
 8007be8:	f7f8 fab6 	bl	8000158 <__aeabi_dsub>
 8007bec:	f04f 0a00 	mov.w	sl, #0
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	f7f8 faae 	bl	800015c <__adddf3>
 8007c00:	4632      	mov	r2, r6
 8007c02:	463b      	mov	r3, r7
 8007c04:	4650      	mov	r0, sl
 8007c06:	468b      	mov	fp, r1
 8007c08:	f7f8 faa6 	bl	8000158 <__aeabi_dsub>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4620      	mov	r0, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	f7f8 faa0 	bl	8000158 <__aeabi_dsub>
 8007c18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c1c:	9b00      	ldr	r3, [sp, #0]
 8007c1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c20:	3b01      	subs	r3, #1
 8007c22:	4313      	orrs	r3, r2
 8007c24:	f04f 0600 	mov.w	r6, #0
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	bf0c      	ite	eq
 8007c2e:	4b2f      	ldreq	r3, [pc, #188]	; (8007cec <__ieee754_pow+0x3dc>)
 8007c30:	4b2b      	ldrne	r3, [pc, #172]	; (8007ce0 <__ieee754_pow+0x3d0>)
 8007c32:	4604      	mov	r4, r0
 8007c34:	460d      	mov	r5, r1
 8007c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c3a:	e9cd 2300 	strd	r2, r3, [sp]
 8007c3e:	4632      	mov	r2, r6
 8007c40:	463b      	mov	r3, r7
 8007c42:	f7f8 fa89 	bl	8000158 <__aeabi_dsub>
 8007c46:	4652      	mov	r2, sl
 8007c48:	465b      	mov	r3, fp
 8007c4a:	f7f8 fc3d 	bl	80004c8 <__aeabi_dmul>
 8007c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c52:	4680      	mov	r8, r0
 8007c54:	4689      	mov	r9, r1
 8007c56:	4620      	mov	r0, r4
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7f8 fc35 	bl	80004c8 <__aeabi_dmul>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4640      	mov	r0, r8
 8007c64:	4649      	mov	r1, r9
 8007c66:	f7f8 fa79 	bl	800015c <__adddf3>
 8007c6a:	4632      	mov	r2, r6
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	4680      	mov	r8, r0
 8007c70:	4689      	mov	r9, r1
 8007c72:	4650      	mov	r0, sl
 8007c74:	4659      	mov	r1, fp
 8007c76:	f7f8 fc27 	bl	80004c8 <__aeabi_dmul>
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	460d      	mov	r5, r1
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4602      	mov	r2, r0
 8007c82:	4649      	mov	r1, r9
 8007c84:	4640      	mov	r0, r8
 8007c86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007c8a:	f7f8 fa67 	bl	800015c <__adddf3>
 8007c8e:	4b18      	ldr	r3, [pc, #96]	; (8007cf0 <__ieee754_pow+0x3e0>)
 8007c90:	4682      	mov	sl, r0
 8007c92:	4299      	cmp	r1, r3
 8007c94:	460f      	mov	r7, r1
 8007c96:	460e      	mov	r6, r1
 8007c98:	f340 82e5 	ble.w	8008266 <__ieee754_pow+0x956>
 8007c9c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007ca0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007ca4:	4303      	orrs	r3, r0
 8007ca6:	f000 81df 	beq.w	8008068 <__ieee754_pow+0x758>
 8007caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f7f8 fe7b 	bl	80009ac <__aeabi_dcmplt>
 8007cb6:	3800      	subs	r0, #0
 8007cb8:	bf18      	it	ne
 8007cba:	2001      	movne	r0, #1
 8007cbc:	e72e      	b.n	8007b1c <__ieee754_pow+0x20c>
 8007cbe:	bf00      	nop
 8007cc0:	60000000 	.word	0x60000000
 8007cc4:	3ff71547 	.word	0x3ff71547
 8007cc8:	f85ddf44 	.word	0xf85ddf44
 8007ccc:	3e54ae0b 	.word	0x3e54ae0b
 8007cd0:	55555555 	.word	0x55555555
 8007cd4:	3fd55555 	.word	0x3fd55555
 8007cd8:	652b82fe 	.word	0x652b82fe
 8007cdc:	3ff71547 	.word	0x3ff71547
 8007ce0:	3ff00000 	.word	0x3ff00000
 8007ce4:	3fd00000 	.word	0x3fd00000
 8007ce8:	3fe00000 	.word	0x3fe00000
 8007cec:	bff00000 	.word	0xbff00000
 8007cf0:	408fffff 	.word	0x408fffff
 8007cf4:	4bd2      	ldr	r3, [pc, #840]	; (8008040 <__ieee754_pow+0x730>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	402b      	ands	r3, r5
 8007cfa:	b943      	cbnz	r3, 8007d0e <__ieee754_pow+0x3fe>
 8007cfc:	4658      	mov	r0, fp
 8007cfe:	4661      	mov	r1, ip
 8007d00:	4bd0      	ldr	r3, [pc, #832]	; (8008044 <__ieee754_pow+0x734>)
 8007d02:	f7f8 fbe1 	bl	80004c8 <__aeabi_dmul>
 8007d06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007d0a:	4683      	mov	fp, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	1523      	asrs	r3, r4, #20
 8007d10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d14:	4413      	add	r3, r2
 8007d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d18:	4bcb      	ldr	r3, [pc, #812]	; (8008048 <__ieee754_pow+0x738>)
 8007d1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007d1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007d22:	429c      	cmp	r4, r3
 8007d24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007d28:	dd08      	ble.n	8007d3c <__ieee754_pow+0x42c>
 8007d2a:	4bc8      	ldr	r3, [pc, #800]	; (800804c <__ieee754_pow+0x73c>)
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	f340 8199 	ble.w	8008064 <__ieee754_pow+0x754>
 8007d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d34:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007d38:	3301      	adds	r3, #1
 8007d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d3c:	2600      	movs	r6, #0
 8007d3e:	00f3      	lsls	r3, r6, #3
 8007d40:	930d      	str	r3, [sp, #52]	; 0x34
 8007d42:	4bc3      	ldr	r3, [pc, #780]	; (8008050 <__ieee754_pow+0x740>)
 8007d44:	4658      	mov	r0, fp
 8007d46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d4e:	4629      	mov	r1, r5
 8007d50:	461a      	mov	r2, r3
 8007d52:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007d56:	4623      	mov	r3, r4
 8007d58:	f7f8 f9fe 	bl	8000158 <__aeabi_dsub>
 8007d5c:	46da      	mov	sl, fp
 8007d5e:	462b      	mov	r3, r5
 8007d60:	4652      	mov	r2, sl
 8007d62:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007d66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d6a:	f7f8 f9f7 	bl	800015c <__adddf3>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	2000      	movs	r0, #0
 8007d74:	49b7      	ldr	r1, [pc, #732]	; (8008054 <__ieee754_pow+0x744>)
 8007d76:	f7f8 fcd1 	bl	800071c <__aeabi_ddiv>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d82:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d86:	f7f8 fb9f 	bl	80004c8 <__aeabi_dmul>
 8007d8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d8e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007d92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d96:	2300      	movs	r3, #0
 8007d98:	2200      	movs	r2, #0
 8007d9a:	46ab      	mov	fp, r5
 8007d9c:	106d      	asrs	r5, r5, #1
 8007d9e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007da8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007dac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007db0:	4640      	mov	r0, r8
 8007db2:	4649      	mov	r1, r9
 8007db4:	4614      	mov	r4, r2
 8007db6:	461d      	mov	r5, r3
 8007db8:	f7f8 fb86 	bl	80004c8 <__aeabi_dmul>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007dc4:	f7f8 f9c8 	bl	8000158 <__aeabi_dsub>
 8007dc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007dcc:	4606      	mov	r6, r0
 8007dce:	460f      	mov	r7, r1
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	f7f8 f9c0 	bl	8000158 <__aeabi_dsub>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4650      	mov	r0, sl
 8007dde:	4659      	mov	r1, fp
 8007de0:	f7f8 f9ba 	bl	8000158 <__aeabi_dsub>
 8007de4:	4642      	mov	r2, r8
 8007de6:	464b      	mov	r3, r9
 8007de8:	f7f8 fb6e 	bl	80004c8 <__aeabi_dmul>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4630      	mov	r0, r6
 8007df2:	4639      	mov	r1, r7
 8007df4:	f7f8 f9b0 	bl	8000158 <__aeabi_dsub>
 8007df8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dfc:	f7f8 fb64 	bl	80004c8 <__aeabi_dmul>
 8007e00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	f7f8 fb5c 	bl	80004c8 <__aeabi_dmul>
 8007e10:	a379      	add	r3, pc, #484	; (adr r3, 8007ff8 <__ieee754_pow+0x6e8>)
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	4604      	mov	r4, r0
 8007e18:	460d      	mov	r5, r1
 8007e1a:	f7f8 fb55 	bl	80004c8 <__aeabi_dmul>
 8007e1e:	a378      	add	r3, pc, #480	; (adr r3, 8008000 <__ieee754_pow+0x6f0>)
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f7f8 f99a 	bl	800015c <__adddf3>
 8007e28:	4622      	mov	r2, r4
 8007e2a:	462b      	mov	r3, r5
 8007e2c:	f7f8 fb4c 	bl	80004c8 <__aeabi_dmul>
 8007e30:	a375      	add	r3, pc, #468	; (adr r3, 8008008 <__ieee754_pow+0x6f8>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f7f8 f991 	bl	800015c <__adddf3>
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	462b      	mov	r3, r5
 8007e3e:	f7f8 fb43 	bl	80004c8 <__aeabi_dmul>
 8007e42:	a373      	add	r3, pc, #460	; (adr r3, 8008010 <__ieee754_pow+0x700>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 f988 	bl	800015c <__adddf3>
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	462b      	mov	r3, r5
 8007e50:	f7f8 fb3a 	bl	80004c8 <__aeabi_dmul>
 8007e54:	a370      	add	r3, pc, #448	; (adr r3, 8008018 <__ieee754_pow+0x708>)
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	f7f8 f97f 	bl	800015c <__adddf3>
 8007e5e:	4622      	mov	r2, r4
 8007e60:	462b      	mov	r3, r5
 8007e62:	f7f8 fb31 	bl	80004c8 <__aeabi_dmul>
 8007e66:	a36e      	add	r3, pc, #440	; (adr r3, 8008020 <__ieee754_pow+0x710>)
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f7f8 f976 	bl	800015c <__adddf3>
 8007e70:	4622      	mov	r2, r4
 8007e72:	4606      	mov	r6, r0
 8007e74:	460f      	mov	r7, r1
 8007e76:	462b      	mov	r3, r5
 8007e78:	4620      	mov	r0, r4
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	f7f8 fb24 	bl	80004c8 <__aeabi_dmul>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fb1e 	bl	80004c8 <__aeabi_dmul>
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	460d      	mov	r5, r1
 8007e90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e94:	4642      	mov	r2, r8
 8007e96:	464b      	mov	r3, r9
 8007e98:	f7f8 f960 	bl	800015c <__adddf3>
 8007e9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ea0:	f7f8 fb12 	bl	80004c8 <__aeabi_dmul>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	f7f8 f958 	bl	800015c <__adddf3>
 8007eac:	4642      	mov	r2, r8
 8007eae:	4606      	mov	r6, r0
 8007eb0:	460f      	mov	r7, r1
 8007eb2:	464b      	mov	r3, r9
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	f7f8 fb06 	bl	80004c8 <__aeabi_dmul>
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4b66      	ldr	r3, [pc, #408]	; (8008058 <__ieee754_pow+0x748>)
 8007ec0:	4682      	mov	sl, r0
 8007ec2:	468b      	mov	fp, r1
 8007ec4:	f7f8 f94a 	bl	800015c <__adddf3>
 8007ec8:	4632      	mov	r2, r6
 8007eca:	463b      	mov	r3, r7
 8007ecc:	f7f8 f946 	bl	800015c <__adddf3>
 8007ed0:	2400      	movs	r4, #0
 8007ed2:	460d      	mov	r5, r1
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4640      	mov	r0, r8
 8007eda:	4649      	mov	r1, r9
 8007edc:	f7f8 faf4 	bl	80004c8 <__aeabi_dmul>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	4689      	mov	r9, r1
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	4629      	mov	r1, r5
 8007eea:	4b5b      	ldr	r3, [pc, #364]	; (8008058 <__ieee754_pow+0x748>)
 8007eec:	f7f8 f934 	bl	8000158 <__aeabi_dsub>
 8007ef0:	4652      	mov	r2, sl
 8007ef2:	465b      	mov	r3, fp
 8007ef4:	f7f8 f930 	bl	8000158 <__aeabi_dsub>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4630      	mov	r0, r6
 8007efe:	4639      	mov	r1, r7
 8007f00:	f7f8 f92a 	bl	8000158 <__aeabi_dsub>
 8007f04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f08:	f7f8 fade 	bl	80004c8 <__aeabi_dmul>
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	4606      	mov	r6, r0
 8007f10:	460f      	mov	r7, r1
 8007f12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f16:	462b      	mov	r3, r5
 8007f18:	f7f8 fad6 	bl	80004c8 <__aeabi_dmul>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4630      	mov	r0, r6
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 f91a 	bl	800015c <__adddf3>
 8007f28:	2400      	movs	r4, #0
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	460f      	mov	r7, r1
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4640      	mov	r0, r8
 8007f34:	4649      	mov	r1, r9
 8007f36:	f7f8 f911 	bl	800015c <__adddf3>
 8007f3a:	a33b      	add	r3, pc, #236	; (adr r3, 8008028 <__ieee754_pow+0x718>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	4620      	mov	r0, r4
 8007f42:	460d      	mov	r5, r1
 8007f44:	f7f8 fac0 	bl	80004c8 <__aeabi_dmul>
 8007f48:	4642      	mov	r2, r8
 8007f4a:	464b      	mov	r3, r9
 8007f4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f50:	4620      	mov	r0, r4
 8007f52:	4629      	mov	r1, r5
 8007f54:	f7f8 f900 	bl	8000158 <__aeabi_dsub>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	4639      	mov	r1, r7
 8007f60:	f7f8 f8fa 	bl	8000158 <__aeabi_dsub>
 8007f64:	a332      	add	r3, pc, #200	; (adr r3, 8008030 <__ieee754_pow+0x720>)
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f7f8 faad 	bl	80004c8 <__aeabi_dmul>
 8007f6e:	a332      	add	r3, pc, #200	; (adr r3, 8008038 <__ieee754_pow+0x728>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4606      	mov	r6, r0
 8007f76:	460f      	mov	r7, r1
 8007f78:	4620      	mov	r0, r4
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f7f8 faa4 	bl	80004c8 <__aeabi_dmul>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4630      	mov	r0, r6
 8007f86:	4639      	mov	r1, r7
 8007f88:	f7f8 f8e8 	bl	800015c <__adddf3>
 8007f8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f8e:	4b33      	ldr	r3, [pc, #204]	; (800805c <__ieee754_pow+0x74c>)
 8007f90:	f04f 0a00 	mov.w	sl, #0
 8007f94:	4413      	add	r3, r2
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f7f8 f8df 	bl	800015c <__adddf3>
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007fa2:	4689      	mov	r9, r1
 8007fa4:	f7f8 fa26 	bl	80003f4 <__aeabi_i2d>
 8007fa8:	4604      	mov	r4, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fae:	4b2c      	ldr	r3, [pc, #176]	; (8008060 <__ieee754_pow+0x750>)
 8007fb0:	4413      	add	r3, r2
 8007fb2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007fb6:	4642      	mov	r2, r8
 8007fb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fbc:	464b      	mov	r3, r9
 8007fbe:	f7f8 f8cd 	bl	800015c <__adddf3>
 8007fc2:	4632      	mov	r2, r6
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	f7f8 f8c9 	bl	800015c <__adddf3>
 8007fca:	4622      	mov	r2, r4
 8007fcc:	462b      	mov	r3, r5
 8007fce:	f7f8 f8c5 	bl	800015c <__adddf3>
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	468b      	mov	fp, r1
 8007fda:	f7f8 f8bd 	bl	8000158 <__aeabi_dsub>
 8007fde:	4632      	mov	r2, r6
 8007fe0:	463b      	mov	r3, r7
 8007fe2:	f7f8 f8b9 	bl	8000158 <__aeabi_dsub>
 8007fe6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fea:	f7f8 f8b5 	bl	8000158 <__aeabi_dsub>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	e60d      	b.n	8007c14 <__ieee754_pow+0x304>
 8007ff8:	4a454eef 	.word	0x4a454eef
 8007ffc:	3fca7e28 	.word	0x3fca7e28
 8008000:	93c9db65 	.word	0x93c9db65
 8008004:	3fcd864a 	.word	0x3fcd864a
 8008008:	a91d4101 	.word	0xa91d4101
 800800c:	3fd17460 	.word	0x3fd17460
 8008010:	518f264d 	.word	0x518f264d
 8008014:	3fd55555 	.word	0x3fd55555
 8008018:	db6fabff 	.word	0xdb6fabff
 800801c:	3fdb6db6 	.word	0x3fdb6db6
 8008020:	33333303 	.word	0x33333303
 8008024:	3fe33333 	.word	0x3fe33333
 8008028:	e0000000 	.word	0xe0000000
 800802c:	3feec709 	.word	0x3feec709
 8008030:	dc3a03fd 	.word	0xdc3a03fd
 8008034:	3feec709 	.word	0x3feec709
 8008038:	145b01f5 	.word	0x145b01f5
 800803c:	be3e2fe0 	.word	0xbe3e2fe0
 8008040:	7ff00000 	.word	0x7ff00000
 8008044:	43400000 	.word	0x43400000
 8008048:	0003988e 	.word	0x0003988e
 800804c:	000bb679 	.word	0x000bb679
 8008050:	080086a8 	.word	0x080086a8
 8008054:	3ff00000 	.word	0x3ff00000
 8008058:	40080000 	.word	0x40080000
 800805c:	080086c8 	.word	0x080086c8
 8008060:	080086b8 	.word	0x080086b8
 8008064:	2601      	movs	r6, #1
 8008066:	e66a      	b.n	8007d3e <__ieee754_pow+0x42e>
 8008068:	a39d      	add	r3, pc, #628	; (adr r3, 80082e0 <__ieee754_pow+0x9d0>)
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	f7f8 f873 	bl	800015c <__adddf3>
 8008076:	4622      	mov	r2, r4
 8008078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800807c:	462b      	mov	r3, r5
 800807e:	4650      	mov	r0, sl
 8008080:	4639      	mov	r1, r7
 8008082:	f7f8 f869 	bl	8000158 <__aeabi_dsub>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800808e:	f7f8 fcab 	bl	80009e8 <__aeabi_dcmpgt>
 8008092:	2800      	cmp	r0, #0
 8008094:	f47f ae09 	bne.w	8007caa <__ieee754_pow+0x39a>
 8008098:	4aa3      	ldr	r2, [pc, #652]	; (8008328 <__ieee754_pow+0xa18>)
 800809a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800809e:	4293      	cmp	r3, r2
 80080a0:	f340 8101 	ble.w	80082a6 <__ieee754_pow+0x996>
 80080a4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80080a8:	2000      	movs	r0, #0
 80080aa:	151b      	asrs	r3, r3, #20
 80080ac:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80080b0:	fa4a f303 	asr.w	r3, sl, r3
 80080b4:	4433      	add	r3, r6
 80080b6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80080ba:	4f9c      	ldr	r7, [pc, #624]	; (800832c <__ieee754_pow+0xa1c>)
 80080bc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80080c0:	4117      	asrs	r7, r2
 80080c2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80080c6:	ea23 0107 	bic.w	r1, r3, r7
 80080ca:	f1c2 0214 	rsb	r2, r2, #20
 80080ce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80080d2:	460b      	mov	r3, r1
 80080d4:	fa4a fa02 	asr.w	sl, sl, r2
 80080d8:	2e00      	cmp	r6, #0
 80080da:	4602      	mov	r2, r0
 80080dc:	4629      	mov	r1, r5
 80080de:	4620      	mov	r0, r4
 80080e0:	bfb8      	it	lt
 80080e2:	f1ca 0a00 	rsblt	sl, sl, #0
 80080e6:	f7f8 f837 	bl	8000158 <__aeabi_dsub>
 80080ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080f2:	2400      	movs	r4, #0
 80080f4:	4642      	mov	r2, r8
 80080f6:	464b      	mov	r3, r9
 80080f8:	f7f8 f830 	bl	800015c <__adddf3>
 80080fc:	a37a      	add	r3, pc, #488	; (adr r3, 80082e8 <__ieee754_pow+0x9d8>)
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	4620      	mov	r0, r4
 8008104:	460d      	mov	r5, r1
 8008106:	f7f8 f9df 	bl	80004c8 <__aeabi_dmul>
 800810a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800810e:	4606      	mov	r6, r0
 8008110:	460f      	mov	r7, r1
 8008112:	4620      	mov	r0, r4
 8008114:	4629      	mov	r1, r5
 8008116:	f7f8 f81f 	bl	8000158 <__aeabi_dsub>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4640      	mov	r0, r8
 8008120:	4649      	mov	r1, r9
 8008122:	f7f8 f819 	bl	8000158 <__aeabi_dsub>
 8008126:	a372      	add	r3, pc, #456	; (adr r3, 80082f0 <__ieee754_pow+0x9e0>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f8 f9cc 	bl	80004c8 <__aeabi_dmul>
 8008130:	a371      	add	r3, pc, #452	; (adr r3, 80082f8 <__ieee754_pow+0x9e8>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	4680      	mov	r8, r0
 8008138:	4689      	mov	r9, r1
 800813a:	4620      	mov	r0, r4
 800813c:	4629      	mov	r1, r5
 800813e:	f7f8 f9c3 	bl	80004c8 <__aeabi_dmul>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4640      	mov	r0, r8
 8008148:	4649      	mov	r1, r9
 800814a:	f7f8 f807 	bl	800015c <__adddf3>
 800814e:	4604      	mov	r4, r0
 8008150:	460d      	mov	r5, r1
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	4630      	mov	r0, r6
 8008158:	4639      	mov	r1, r7
 800815a:	f7f7 ffff 	bl	800015c <__adddf3>
 800815e:	4632      	mov	r2, r6
 8008160:	463b      	mov	r3, r7
 8008162:	4680      	mov	r8, r0
 8008164:	4689      	mov	r9, r1
 8008166:	f7f7 fff7 	bl	8000158 <__aeabi_dsub>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4620      	mov	r0, r4
 8008170:	4629      	mov	r1, r5
 8008172:	f7f7 fff1 	bl	8000158 <__aeabi_dsub>
 8008176:	4642      	mov	r2, r8
 8008178:	4606      	mov	r6, r0
 800817a:	460f      	mov	r7, r1
 800817c:	464b      	mov	r3, r9
 800817e:	4640      	mov	r0, r8
 8008180:	4649      	mov	r1, r9
 8008182:	f7f8 f9a1 	bl	80004c8 <__aeabi_dmul>
 8008186:	a35e      	add	r3, pc, #376	; (adr r3, 8008300 <__ieee754_pow+0x9f0>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	4604      	mov	r4, r0
 800818e:	460d      	mov	r5, r1
 8008190:	f7f8 f99a 	bl	80004c8 <__aeabi_dmul>
 8008194:	a35c      	add	r3, pc, #368	; (adr r3, 8008308 <__ieee754_pow+0x9f8>)
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	f7f7 ffdd 	bl	8000158 <__aeabi_dsub>
 800819e:	4622      	mov	r2, r4
 80081a0:	462b      	mov	r3, r5
 80081a2:	f7f8 f991 	bl	80004c8 <__aeabi_dmul>
 80081a6:	a35a      	add	r3, pc, #360	; (adr r3, 8008310 <__ieee754_pow+0xa00>)
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	f7f7 ffd6 	bl	800015c <__adddf3>
 80081b0:	4622      	mov	r2, r4
 80081b2:	462b      	mov	r3, r5
 80081b4:	f7f8 f988 	bl	80004c8 <__aeabi_dmul>
 80081b8:	a357      	add	r3, pc, #348	; (adr r3, 8008318 <__ieee754_pow+0xa08>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f7f7 ffcb 	bl	8000158 <__aeabi_dsub>
 80081c2:	4622      	mov	r2, r4
 80081c4:	462b      	mov	r3, r5
 80081c6:	f7f8 f97f 	bl	80004c8 <__aeabi_dmul>
 80081ca:	a355      	add	r3, pc, #340	; (adr r3, 8008320 <__ieee754_pow+0xa10>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f7 ffc4 	bl	800015c <__adddf3>
 80081d4:	4622      	mov	r2, r4
 80081d6:	462b      	mov	r3, r5
 80081d8:	f7f8 f976 	bl	80004c8 <__aeabi_dmul>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4640      	mov	r0, r8
 80081e2:	4649      	mov	r1, r9
 80081e4:	f7f7 ffb8 	bl	8000158 <__aeabi_dsub>
 80081e8:	4604      	mov	r4, r0
 80081ea:	460d      	mov	r5, r1
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4640      	mov	r0, r8
 80081f2:	4649      	mov	r1, r9
 80081f4:	f7f8 f968 	bl	80004c8 <__aeabi_dmul>
 80081f8:	2200      	movs	r2, #0
 80081fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008202:	4620      	mov	r0, r4
 8008204:	4629      	mov	r1, r5
 8008206:	f7f7 ffa7 	bl	8000158 <__aeabi_dsub>
 800820a:	4602      	mov	r2, r0
 800820c:	460b      	mov	r3, r1
 800820e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008212:	f7f8 fa83 	bl	800071c <__aeabi_ddiv>
 8008216:	4632      	mov	r2, r6
 8008218:	4604      	mov	r4, r0
 800821a:	460d      	mov	r5, r1
 800821c:	463b      	mov	r3, r7
 800821e:	4640      	mov	r0, r8
 8008220:	4649      	mov	r1, r9
 8008222:	f7f8 f951 	bl	80004c8 <__aeabi_dmul>
 8008226:	4632      	mov	r2, r6
 8008228:	463b      	mov	r3, r7
 800822a:	f7f7 ff97 	bl	800015c <__adddf3>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	4620      	mov	r0, r4
 8008234:	4629      	mov	r1, r5
 8008236:	f7f7 ff8f 	bl	8000158 <__aeabi_dsub>
 800823a:	4642      	mov	r2, r8
 800823c:	464b      	mov	r3, r9
 800823e:	f7f7 ff8b 	bl	8000158 <__aeabi_dsub>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	2000      	movs	r0, #0
 8008248:	4939      	ldr	r1, [pc, #228]	; (8008330 <__ieee754_pow+0xa20>)
 800824a:	f7f7 ff85 	bl	8000158 <__aeabi_dsub>
 800824e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008252:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008256:	da29      	bge.n	80082ac <__ieee754_pow+0x99c>
 8008258:	4652      	mov	r2, sl
 800825a:	f000 f955 	bl	8008508 <scalbn>
 800825e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008262:	f7ff bbfe 	b.w	8007a62 <__ieee754_pow+0x152>
 8008266:	4b33      	ldr	r3, [pc, #204]	; (8008334 <__ieee754_pow+0xa24>)
 8008268:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800826c:	429f      	cmp	r7, r3
 800826e:	f77f af13 	ble.w	8008098 <__ieee754_pow+0x788>
 8008272:	4b31      	ldr	r3, [pc, #196]	; (8008338 <__ieee754_pow+0xa28>)
 8008274:	440b      	add	r3, r1
 8008276:	4303      	orrs	r3, r0
 8008278:	d009      	beq.n	800828e <__ieee754_pow+0x97e>
 800827a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800827e:	2200      	movs	r2, #0
 8008280:	2300      	movs	r3, #0
 8008282:	f7f8 fb93 	bl	80009ac <__aeabi_dcmplt>
 8008286:	3800      	subs	r0, #0
 8008288:	bf18      	it	ne
 800828a:	2001      	movne	r0, #1
 800828c:	e453      	b.n	8007b36 <__ieee754_pow+0x226>
 800828e:	4622      	mov	r2, r4
 8008290:	462b      	mov	r3, r5
 8008292:	f7f7 ff61 	bl	8000158 <__aeabi_dsub>
 8008296:	4642      	mov	r2, r8
 8008298:	464b      	mov	r3, r9
 800829a:	f7f8 fb9b 	bl	80009d4 <__aeabi_dcmpge>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f43f aefa 	beq.w	8008098 <__ieee754_pow+0x788>
 80082a4:	e7e9      	b.n	800827a <__ieee754_pow+0x96a>
 80082a6:	f04f 0a00 	mov.w	sl, #0
 80082aa:	e720      	b.n	80080ee <__ieee754_pow+0x7de>
 80082ac:	4621      	mov	r1, r4
 80082ae:	e7d6      	b.n	800825e <__ieee754_pow+0x94e>
 80082b0:	f04f 0b00 	mov.w	fp, #0
 80082b4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008330 <__ieee754_pow+0xa20>
 80082b8:	f7ff bbba 	b.w	8007a30 <__ieee754_pow+0x120>
 80082bc:	f04f 0b00 	mov.w	fp, #0
 80082c0:	f04f 0c00 	mov.w	ip, #0
 80082c4:	f7ff bbb4 	b.w	8007a30 <__ieee754_pow+0x120>
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	f7ff bb3d 	b.w	800794a <__ieee754_pow+0x3a>
 80082d0:	9200      	str	r2, [sp, #0]
 80082d2:	f7ff bb89 	b.w	80079e8 <__ieee754_pow+0xd8>
 80082d6:	2300      	movs	r3, #0
 80082d8:	f7ff bb73 	b.w	80079c2 <__ieee754_pow+0xb2>
 80082dc:	f3af 8000 	nop.w
 80082e0:	652b82fe 	.word	0x652b82fe
 80082e4:	3c971547 	.word	0x3c971547
 80082e8:	00000000 	.word	0x00000000
 80082ec:	3fe62e43 	.word	0x3fe62e43
 80082f0:	fefa39ef 	.word	0xfefa39ef
 80082f4:	3fe62e42 	.word	0x3fe62e42
 80082f8:	0ca86c39 	.word	0x0ca86c39
 80082fc:	be205c61 	.word	0xbe205c61
 8008300:	72bea4d0 	.word	0x72bea4d0
 8008304:	3e663769 	.word	0x3e663769
 8008308:	c5d26bf1 	.word	0xc5d26bf1
 800830c:	3ebbbd41 	.word	0x3ebbbd41
 8008310:	af25de2c 	.word	0xaf25de2c
 8008314:	3f11566a 	.word	0x3f11566a
 8008318:	16bebd93 	.word	0x16bebd93
 800831c:	3f66c16c 	.word	0x3f66c16c
 8008320:	5555553e 	.word	0x5555553e
 8008324:	3fc55555 	.word	0x3fc55555
 8008328:	3fe00000 	.word	0x3fe00000
 800832c:	000fffff 	.word	0x000fffff
 8008330:	3ff00000 	.word	0x3ff00000
 8008334:	4090cbff 	.word	0x4090cbff
 8008338:	3f6f3400 	.word	0x3f6f3400

0800833c <__ieee754_sqrt>:
 800833c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008498 <__ieee754_sqrt+0x15c>
 8008340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008344:	ea3c 0c01 	bics.w	ip, ip, r1
 8008348:	4606      	mov	r6, r0
 800834a:	460d      	mov	r5, r1
 800834c:	460c      	mov	r4, r1
 800834e:	460a      	mov	r2, r1
 8008350:	4607      	mov	r7, r0
 8008352:	4603      	mov	r3, r0
 8008354:	d10f      	bne.n	8008376 <__ieee754_sqrt+0x3a>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	f7f8 f8b5 	bl	80004c8 <__aeabi_dmul>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4630      	mov	r0, r6
 8008364:	4629      	mov	r1, r5
 8008366:	f7f7 fef9 	bl	800015c <__adddf3>
 800836a:	4606      	mov	r6, r0
 800836c:	460d      	mov	r5, r1
 800836e:	4630      	mov	r0, r6
 8008370:	4629      	mov	r1, r5
 8008372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008376:	2900      	cmp	r1, #0
 8008378:	dc0e      	bgt.n	8008398 <__ieee754_sqrt+0x5c>
 800837a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800837e:	ea5c 0707 	orrs.w	r7, ip, r7
 8008382:	d0f4      	beq.n	800836e <__ieee754_sqrt+0x32>
 8008384:	b141      	cbz	r1, 8008398 <__ieee754_sqrt+0x5c>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	f7f7 fee5 	bl	8000158 <__aeabi_dsub>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	f7f8 f9c3 	bl	800071c <__aeabi_ddiv>
 8008396:	e7e8      	b.n	800836a <__ieee754_sqrt+0x2e>
 8008398:	1521      	asrs	r1, r4, #20
 800839a:	d075      	beq.n	8008488 <__ieee754_sqrt+0x14c>
 800839c:	07cc      	lsls	r4, r1, #31
 800839e:	f04f 0400 	mov.w	r4, #0
 80083a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80083a6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80083aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80083ae:	bf5e      	ittt	pl
 80083b0:	0fd9      	lsrpl	r1, r3, #31
 80083b2:	005b      	lslpl	r3, r3, #1
 80083b4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80083b8:	0fd9      	lsrs	r1, r3, #31
 80083ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80083be:	2516      	movs	r5, #22
 80083c0:	4620      	mov	r0, r4
 80083c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083c6:	107f      	asrs	r7, r7, #1
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	1846      	adds	r6, r0, r1
 80083cc:	4296      	cmp	r6, r2
 80083ce:	bfde      	ittt	le
 80083d0:	1b92      	suble	r2, r2, r6
 80083d2:	1870      	addle	r0, r6, r1
 80083d4:	1864      	addle	r4, r4, r1
 80083d6:	0052      	lsls	r2, r2, #1
 80083d8:	3d01      	subs	r5, #1
 80083da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80083de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80083e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083e6:	d1f0      	bne.n	80083ca <__ieee754_sqrt+0x8e>
 80083e8:	4629      	mov	r1, r5
 80083ea:	f04f 0e20 	mov.w	lr, #32
 80083ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80083f2:	4282      	cmp	r2, r0
 80083f4:	eb06 0c05 	add.w	ip, r6, r5
 80083f8:	dc02      	bgt.n	8008400 <__ieee754_sqrt+0xc4>
 80083fa:	d113      	bne.n	8008424 <__ieee754_sqrt+0xe8>
 80083fc:	459c      	cmp	ip, r3
 80083fe:	d811      	bhi.n	8008424 <__ieee754_sqrt+0xe8>
 8008400:	f1bc 0f00 	cmp.w	ip, #0
 8008404:	eb0c 0506 	add.w	r5, ip, r6
 8008408:	da43      	bge.n	8008492 <__ieee754_sqrt+0x156>
 800840a:	2d00      	cmp	r5, #0
 800840c:	db41      	blt.n	8008492 <__ieee754_sqrt+0x156>
 800840e:	f100 0801 	add.w	r8, r0, #1
 8008412:	1a12      	subs	r2, r2, r0
 8008414:	4640      	mov	r0, r8
 8008416:	459c      	cmp	ip, r3
 8008418:	bf88      	it	hi
 800841a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800841e:	eba3 030c 	sub.w	r3, r3, ip
 8008422:	4431      	add	r1, r6
 8008424:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008428:	f1be 0e01 	subs.w	lr, lr, #1
 800842c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008430:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008434:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008438:	d1db      	bne.n	80083f2 <__ieee754_sqrt+0xb6>
 800843a:	4313      	orrs	r3, r2
 800843c:	d006      	beq.n	800844c <__ieee754_sqrt+0x110>
 800843e:	1c48      	adds	r0, r1, #1
 8008440:	bf0b      	itete	eq
 8008442:	4671      	moveq	r1, lr
 8008444:	3101      	addne	r1, #1
 8008446:	3401      	addeq	r4, #1
 8008448:	f021 0101 	bicne.w	r1, r1, #1
 800844c:	1063      	asrs	r3, r4, #1
 800844e:	0849      	lsrs	r1, r1, #1
 8008450:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008454:	07e2      	lsls	r2, r4, #31
 8008456:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800845a:	bf48      	it	mi
 800845c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008460:	460e      	mov	r6, r1
 8008462:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008466:	e782      	b.n	800836e <__ieee754_sqrt+0x32>
 8008468:	0ada      	lsrs	r2, r3, #11
 800846a:	3815      	subs	r0, #21
 800846c:	055b      	lsls	r3, r3, #21
 800846e:	2a00      	cmp	r2, #0
 8008470:	d0fa      	beq.n	8008468 <__ieee754_sqrt+0x12c>
 8008472:	02d5      	lsls	r5, r2, #11
 8008474:	d50a      	bpl.n	800848c <__ieee754_sqrt+0x150>
 8008476:	f1c1 0420 	rsb	r4, r1, #32
 800847a:	fa23 f404 	lsr.w	r4, r3, r4
 800847e:	1e4d      	subs	r5, r1, #1
 8008480:	408b      	lsls	r3, r1
 8008482:	4322      	orrs	r2, r4
 8008484:	1b41      	subs	r1, r0, r5
 8008486:	e789      	b.n	800839c <__ieee754_sqrt+0x60>
 8008488:	4608      	mov	r0, r1
 800848a:	e7f0      	b.n	800846e <__ieee754_sqrt+0x132>
 800848c:	0052      	lsls	r2, r2, #1
 800848e:	3101      	adds	r1, #1
 8008490:	e7ef      	b.n	8008472 <__ieee754_sqrt+0x136>
 8008492:	4680      	mov	r8, r0
 8008494:	e7bd      	b.n	8008412 <__ieee754_sqrt+0xd6>
 8008496:	bf00      	nop
 8008498:	7ff00000 	.word	0x7ff00000

0800849c <with_errno>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	4604      	mov	r4, r0
 80084a0:	460d      	mov	r5, r1
 80084a2:	4616      	mov	r6, r2
 80084a4:	f000 f8ae 	bl	8008604 <__errno>
 80084a8:	4629      	mov	r1, r5
 80084aa:	6006      	str	r6, [r0, #0]
 80084ac:	4620      	mov	r0, r4
 80084ae:	bd70      	pop	{r4, r5, r6, pc}

080084b0 <xflow>:
 80084b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084b2:	4615      	mov	r5, r2
 80084b4:	461c      	mov	r4, r3
 80084b6:	b180      	cbz	r0, 80084da <xflow+0x2a>
 80084b8:	4610      	mov	r0, r2
 80084ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80084be:	e9cd 0100 	strd	r0, r1, [sp]
 80084c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084c6:	4628      	mov	r0, r5
 80084c8:	4621      	mov	r1, r4
 80084ca:	f7f7 fffd 	bl	80004c8 <__aeabi_dmul>
 80084ce:	2222      	movs	r2, #34	; 0x22
 80084d0:	b003      	add	sp, #12
 80084d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084d6:	f7ff bfe1 	b.w	800849c <with_errno>
 80084da:	4610      	mov	r0, r2
 80084dc:	4619      	mov	r1, r3
 80084de:	e7ee      	b.n	80084be <xflow+0xe>

080084e0 <__math_uflow>:
 80084e0:	2200      	movs	r2, #0
 80084e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084e6:	f7ff bfe3 	b.w	80084b0 <xflow>

080084ea <__math_oflow>:
 80084ea:	2200      	movs	r2, #0
 80084ec:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80084f0:	f7ff bfde 	b.w	80084b0 <xflow>

080084f4 <fabs>:
 80084f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084f8:	4770      	bx	lr

080084fa <finite>:
 80084fa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80084fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008502:	0fc0      	lsrs	r0, r0, #31
 8008504:	4770      	bx	lr
	...

08008508 <scalbn>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800850e:	4604      	mov	r4, r0
 8008510:	460d      	mov	r5, r1
 8008512:	4617      	mov	r7, r2
 8008514:	460b      	mov	r3, r1
 8008516:	b996      	cbnz	r6, 800853e <scalbn+0x36>
 8008518:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800851c:	4303      	orrs	r3, r0
 800851e:	d039      	beq.n	8008594 <scalbn+0x8c>
 8008520:	4b33      	ldr	r3, [pc, #204]	; (80085f0 <scalbn+0xe8>)
 8008522:	2200      	movs	r2, #0
 8008524:	f7f7 ffd0 	bl	80004c8 <__aeabi_dmul>
 8008528:	4b32      	ldr	r3, [pc, #200]	; (80085f4 <scalbn+0xec>)
 800852a:	4604      	mov	r4, r0
 800852c:	429f      	cmp	r7, r3
 800852e:	460d      	mov	r5, r1
 8008530:	da0f      	bge.n	8008552 <scalbn+0x4a>
 8008532:	a32b      	add	r3, pc, #172	; (adr r3, 80085e0 <scalbn+0xd8>)
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f7f7 ffc6 	bl	80004c8 <__aeabi_dmul>
 800853c:	e006      	b.n	800854c <scalbn+0x44>
 800853e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008542:	4296      	cmp	r6, r2
 8008544:	d10a      	bne.n	800855c <scalbn+0x54>
 8008546:	4602      	mov	r2, r0
 8008548:	f7f7 fe08 	bl	800015c <__adddf3>
 800854c:	4604      	mov	r4, r0
 800854e:	460d      	mov	r5, r1
 8008550:	e020      	b.n	8008594 <scalbn+0x8c>
 8008552:	460b      	mov	r3, r1
 8008554:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008558:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800855c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008560:	19b9      	adds	r1, r7, r6
 8008562:	4291      	cmp	r1, r2
 8008564:	dd0e      	ble.n	8008584 <scalbn+0x7c>
 8008566:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800856a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800856e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008572:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008576:	4820      	ldr	r0, [pc, #128]	; (80085f8 <scalbn+0xf0>)
 8008578:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800857c:	a31a      	add	r3, pc, #104	; (adr r3, 80085e8 <scalbn+0xe0>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	e7d9      	b.n	8008538 <scalbn+0x30>
 8008584:	2900      	cmp	r1, #0
 8008586:	dd08      	ble.n	800859a <scalbn+0x92>
 8008588:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800858c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008590:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800859e:	da12      	bge.n	80085c6 <scalbn+0xbe>
 80085a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80085a4:	429f      	cmp	r7, r3
 80085a6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80085aa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80085ae:	dcdc      	bgt.n	800856a <scalbn+0x62>
 80085b0:	a30b      	add	r3, pc, #44	; (adr r3, 80085e0 <scalbn+0xd8>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80085ba:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80085be:	480f      	ldr	r0, [pc, #60]	; (80085fc <scalbn+0xf4>)
 80085c0:	f041 011f 	orr.w	r1, r1, #31
 80085c4:	e7b8      	b.n	8008538 <scalbn+0x30>
 80085c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80085ca:	3136      	adds	r1, #54	; 0x36
 80085cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80085d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80085d4:	4620      	mov	r0, r4
 80085d6:	4629      	mov	r1, r5
 80085d8:	2200      	movs	r2, #0
 80085da:	4b09      	ldr	r3, [pc, #36]	; (8008600 <scalbn+0xf8>)
 80085dc:	e7ac      	b.n	8008538 <scalbn+0x30>
 80085de:	bf00      	nop
 80085e0:	c2f8f359 	.word	0xc2f8f359
 80085e4:	01a56e1f 	.word	0x01a56e1f
 80085e8:	8800759c 	.word	0x8800759c
 80085ec:	7e37e43c 	.word	0x7e37e43c
 80085f0:	43500000 	.word	0x43500000
 80085f4:	ffff3cb0 	.word	0xffff3cb0
 80085f8:	8800759c 	.word	0x8800759c
 80085fc:	c2f8f359 	.word	0xc2f8f359
 8008600:	3c900000 	.word	0x3c900000

08008604 <__errno>:
 8008604:	4b01      	ldr	r3, [pc, #4]	; (800860c <__errno+0x8>)
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000010 	.word	0x20000010

08008610 <__libc_init_array>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	2600      	movs	r6, #0
 8008614:	4d0c      	ldr	r5, [pc, #48]	; (8008648 <__libc_init_array+0x38>)
 8008616:	4c0d      	ldr	r4, [pc, #52]	; (800864c <__libc_init_array+0x3c>)
 8008618:	1b64      	subs	r4, r4, r5
 800861a:	10a4      	asrs	r4, r4, #2
 800861c:	42a6      	cmp	r6, r4
 800861e:	d109      	bne.n	8008634 <__libc_init_array+0x24>
 8008620:	f000 f822 	bl	8008668 <_init>
 8008624:	2600      	movs	r6, #0
 8008626:	4d0a      	ldr	r5, [pc, #40]	; (8008650 <__libc_init_array+0x40>)
 8008628:	4c0a      	ldr	r4, [pc, #40]	; (8008654 <__libc_init_array+0x44>)
 800862a:	1b64      	subs	r4, r4, r5
 800862c:	10a4      	asrs	r4, r4, #2
 800862e:	42a6      	cmp	r6, r4
 8008630:	d105      	bne.n	800863e <__libc_init_array+0x2e>
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	f855 3b04 	ldr.w	r3, [r5], #4
 8008638:	4798      	blx	r3
 800863a:	3601      	adds	r6, #1
 800863c:	e7ee      	b.n	800861c <__libc_init_array+0xc>
 800863e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008642:	4798      	blx	r3
 8008644:	3601      	adds	r6, #1
 8008646:	e7f2      	b.n	800862e <__libc_init_array+0x1e>
 8008648:	080086e0 	.word	0x080086e0
 800864c:	080086e0 	.word	0x080086e0
 8008650:	080086e0 	.word	0x080086e0
 8008654:	080086e4 	.word	0x080086e4

08008658 <memset>:
 8008658:	4603      	mov	r3, r0
 800865a:	4402      	add	r2, r0
 800865c:	4293      	cmp	r3, r2
 800865e:	d100      	bne.n	8008662 <memset+0xa>
 8008660:	4770      	bx	lr
 8008662:	f803 1b01 	strb.w	r1, [r3], #1
 8008666:	e7f9      	b.n	800865c <memset+0x4>

08008668 <_init>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	bf00      	nop
 800866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866e:	bc08      	pop	{r3}
 8008670:	469e      	mov	lr, r3
 8008672:	4770      	bx	lr

08008674 <_fini>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	bf00      	nop
 8008678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867a:	bc08      	pop	{r3}
 800867c:	469e      	mov	lr, r3
 800867e:	4770      	bx	lr
