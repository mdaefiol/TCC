
COMPLETO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  0800be08  0800be08  0001be08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db70  0800db70  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800db70  0800db70  0001db70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db78  0800db78  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db78  0800db78  0001db78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db7c  0800db7c  0001db7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800db80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020220  2**0
                  CONTENTS
 10 .bss          00000778  20000220  20000220  00020220  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000998  20000998  00020220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfe1  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000211f  00000000  00000000  0002c231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000998  00000000  00000000  0002ede0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d65  00000000  00000000  0002f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc14  00000000  00000000  000524dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1fd8  00000000  00000000  000600f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001320c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000435c  00000000  00000000  0013211c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bdec 	.word	0x0800bdec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800bdec 	.word	0x0800bdec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <bmp280_init_user_params>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

void bmp280_init_user_params(bmp280_params_t *params, BMP280_Mode u_mode, BMP280_Filter u_filter, BMP280_Oversampling u_press_over, BMP280_Oversampling u_temp_over, BMP280_Oversampling u_humi_over, BMP280_StandbyTime u_standby) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	4608      	mov	r0, r1
 80010a2:	4611      	mov	r1, r2
 80010a4:	461a      	mov	r2, r3
 80010a6:	4603      	mov	r3, r0
 80010a8:	70fb      	strb	r3, [r7, #3]
 80010aa:	460b      	mov	r3, r1
 80010ac:	70bb      	strb	r3, [r7, #2]
 80010ae:	4613      	mov	r3, r2
 80010b0:	707b      	strb	r3, [r7, #1]
	params->mode = u_mode;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	701a      	strb	r2, [r3, #0]
	params->filter = u_filter;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	78ba      	ldrb	r2, [r7, #2]
 80010bc:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = u_press_over;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	787a      	ldrb	r2, [r7, #1]
 80010c2:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = u_temp_over;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7c3a      	ldrb	r2, [r7, #16]
 80010c8:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = u_humi_over;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7d3a      	ldrb	r2, [r7, #20]
 80010ce:	711a      	strb	r2, [r3, #4]
	params->standby = u_standby;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7e3a      	ldrb	r2, [r7, #24]
 80010d4:	715a      	strb	r2, [r3, #5]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b08a      	sub	sp, #40	; 0x28
 80010e6:	af04      	add	r7, sp, #16
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	460b      	mov	r3, r1
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010fc:	7afb      	ldrb	r3, [r7, #11]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	8af9      	ldrh	r1, [r7, #22]
 8001102:	f241 3388 	movw	r3, #5000	; 0x1388
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2302      	movs	r3, #2
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	f004 f8e6 	bl	80052e4 <HAL_I2C_Mem_Read>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10b      	bne.n	8001136 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800111e:	7d7b      	ldrb	r3, [r7, #21]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	b21a      	sxth	r2, r3
 8001124:	7d3b      	ldrb	r3, [r7, #20]
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21b      	sxth	r3, r3
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	801a      	strh	r2, [r3, #0]
		return true;
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <read_register16+0x56>
	} else
		return false;
 8001136:	2300      	movs	r3, #0

}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b08b      	sub	sp, #44	; 0x2c
 8001144:	af04      	add	r7, sp, #16
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	461a      	mov	r2, r3
 800114c:	460b      	mov	r3, r1
 800114e:	72fb      	strb	r3, [r7, #11]
 8001150:	4613      	mov	r3, r2
 8001152:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001160:	7afb      	ldrb	r3, [r7, #11]
 8001162:	b29a      	uxth	r2, r3
 8001164:	7abb      	ldrb	r3, [r7, #10]
 8001166:	b29b      	uxth	r3, r3
 8001168:	8af9      	ldrh	r1, [r7, #22]
 800116a:	f241 3488 	movw	r4, #5000	; 0x1388
 800116e:	9402      	str	r4, [sp, #8]
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	f004 f8b4 	bl	80052e4 <HAL_I2C_Mem_Read>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <read_data+0x46>
		return 0;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <read_data+0x48>
	else
		return 1;
 8001186:	2301      	movs	r3, #1

}
 8001188:	4618      	mov	r0, r3
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}

08001190 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	461a      	mov	r2, r3
 800119c:	2188      	movs	r1, #136	; 0x88
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff9f 	bl	80010e2 <read_register16>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d06f      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3302      	adds	r3, #2
 80011ae:	461a      	mov	r2, r3
 80011b0:	218a      	movs	r1, #138	; 0x8a
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff95 	bl	80010e2 <read_register16>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d065      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3304      	adds	r3, #4
 80011c2:	461a      	mov	r2, r3
 80011c4:	218c      	movs	r1, #140	; 0x8c
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff8b 	bl	80010e2 <read_register16>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d05b      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3306      	adds	r3, #6
 80011d6:	461a      	mov	r2, r3
 80011d8:	218e      	movs	r1, #142	; 0x8e
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff81 	bl	80010e2 <read_register16>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d051      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3308      	adds	r3, #8
 80011ea:	461a      	mov	r2, r3
 80011ec:	2190      	movs	r1, #144	; 0x90
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff77 	bl	80010e2 <read_register16>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d047      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	330a      	adds	r3, #10
 80011fe:	461a      	mov	r2, r3
 8001200:	2192      	movs	r1, #146	; 0x92
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ff6d 	bl	80010e2 <read_register16>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d03d      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	330c      	adds	r3, #12
 8001212:	461a      	mov	r2, r3
 8001214:	2194      	movs	r1, #148	; 0x94
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff63 	bl	80010e2 <read_register16>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d033      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	330e      	adds	r3, #14
 8001226:	461a      	mov	r2, r3
 8001228:	2196      	movs	r1, #150	; 0x96
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff59 	bl	80010e2 <read_register16>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d029      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3310      	adds	r3, #16
 800123a:	461a      	mov	r2, r3
 800123c:	2198      	movs	r1, #152	; 0x98
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff4f 	bl	80010e2 <read_register16>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d01f      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3312      	adds	r3, #18
 800124e:	461a      	mov	r2, r3
 8001250:	219a      	movs	r1, #154	; 0x9a
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff45 	bl	80010e2 <read_register16>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d015      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3314      	adds	r3, #20
 8001262:	461a      	mov	r2, r3
 8001264:	219c      	movs	r1, #156	; 0x9c
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ff3b 	bl	80010e2 <read_register16>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001276:	461a      	mov	r2, r3
 8001278:	219e      	movs	r1, #158	; 0x9e
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff31 	bl	80010e2 <read_register16>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <read_calibration_data+0xfa>

		return true;
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <read_calibration_data+0xfc>
	}

	return false;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f103 0218 	add.w	r2, r3, #24
 80012a2:	2301      	movs	r3, #1
 80012a4:	21a1      	movs	r1, #161	; 0xa1
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff4a 	bl	8001140 <read_data>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d14b      	bne.n	800134a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	331a      	adds	r3, #26
 80012b6:	461a      	mov	r2, r3
 80012b8:	21e1      	movs	r1, #225	; 0xe1
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff11 	bl	80010e2 <read_register16>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d041      	beq.n	800134a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f103 021c 	add.w	r2, r3, #28
 80012cc:	2301      	movs	r3, #1
 80012ce:	21e3      	movs	r1, #227	; 0xe3
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff35 	bl	8001140 <read_data>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d136      	bne.n	800134a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80012dc:	f107 030e 	add.w	r3, r7, #14
 80012e0:	461a      	mov	r2, r3
 80012e2:	21e4      	movs	r1, #228	; 0xe4
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fefc 	bl	80010e2 <read_register16>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d02c      	beq.n	800134a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	461a      	mov	r2, r3
 80012f6:	21e5      	movs	r1, #229	; 0xe5
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fef2 	bl	80010e2 <read_register16>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d022      	beq.n	800134a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800130a:	2301      	movs	r3, #1
 800130c:	21e7      	movs	r1, #231	; 0xe7
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff16 	bl	8001140 <read_data>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d117      	bne.n	800134a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800131a:	89fb      	ldrh	r3, [r7, #14]
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	b21b      	sxth	r3, r3
 8001320:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001324:	b21a      	sxth	r2, r3
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	121b      	asrs	r3, r3, #8
 800132a:	b21b      	sxth	r3, r3
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21a      	sxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800133a:	89bb      	ldrh	r3, [r7, #12]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	b29b      	uxth	r3, r3
 8001340:	b21a      	sxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	841a      	strh	r2, [r3, #32]

		return true;
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <read_hum_calibration_data+0xb8>
	}

	return false;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af04      	add	r7, sp, #16
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
 8001360:	4613      	mov	r3, r2
 8001362:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	b29a      	uxth	r2, r3
 8001374:	89f9      	ldrh	r1, [r7, #14]
 8001376:	f242 7310 	movw	r3, #10000	; 0x2710
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2301      	movs	r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	1cbb      	adds	r3, r7, #2
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	f003 feb3 	bl	80050f0 <HAL_I2C_Mem_Write>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <write_register8+0x40>
		return false;
 8001390:	2300      	movs	r3, #0
 8001392:	e000      	b.n	8001396 <write_register8+0x42>
	else
		return true;
 8001394:	2301      	movs	r3, #1
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013ac:	2b76      	cmp	r3, #118	; 0x76
 80013ae:	d005      	beq.n	80013bc <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013b4:	2b77      	cmp	r3, #119	; 0x77
 80013b6:	d001      	beq.n	80013bc <bmp280_init+0x1e>

		return false;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e099      	b.n	80014f0 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013c2:	2301      	movs	r3, #1
 80013c4:	21d0      	movs	r1, #208	; 0xd0
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff feba 	bl	8001140 <read_data>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <bmp280_init+0x38>
		return false;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e08c      	b.n	80014f0 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013dc:	2b58      	cmp	r3, #88	; 0x58
 80013de:	d006      	beq.n	80013ee <bmp280_init+0x50>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013e6:	2b60      	cmp	r3, #96	; 0x60
 80013e8:	d001      	beq.n	80013ee <bmp280_init+0x50>

		return false;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e080      	b.n	80014f0 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80013ee:	22b6      	movs	r2, #182	; 0xb6
 80013f0:	21e0      	movs	r1, #224	; 0xe0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffae 	bl	8001354 <write_register8>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <bmp280_init+0x64>
		return false;
 80013fe:	2300      	movs	r3, #0
 8001400:	e076      	b.n	80014f0 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001402:	f107 020c 	add.w	r2, r7, #12
 8001406:	2301      	movs	r3, #1
 8001408:	21f3      	movs	r1, #243	; 0xf3
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fe98 	bl	8001140 <read_data>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f5      	bne.n	8001402 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001416:	7b3b      	ldrb	r3, [r7, #12]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff feb5 	bl	8001190 <read_calibration_data>
 8001426:	4603      	mov	r3, r0
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d100      	bne.n	8001434 <bmp280_init+0x96>
 8001432:	e001      	b.n	8001438 <bmp280_init+0x9a>
		return false;
 8001434:	2300      	movs	r3, #0
 8001436:	e05b      	b.n	80014f0 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800143e:	2b60      	cmp	r3, #96	; 0x60
 8001440:	d10a      	bne.n	8001458 <bmp280_init+0xba>
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff26 	bl	8001294 <read_hum_calibration_data>
 8001448:	4603      	mov	r3, r0
 800144a:	f083 0301 	eor.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <bmp280_init+0xba>
		return false;
 8001454:	2300      	movs	r3, #0
 8001456:	e04b      	b.n	80014f0 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	795b      	ldrb	r3, [r3, #5]
 800145c:	015b      	lsls	r3, r3, #5
 800145e:	b25a      	sxtb	r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	785b      	ldrb	r3, [r3, #1]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	b25b      	sxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	461a      	mov	r2, r3
 8001472:	21f5      	movs	r1, #245	; 0xf5
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff6d 	bl	8001354 <write_register8>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <bmp280_init+0xe6>
		return false;
 8001480:	2300      	movs	r3, #0
 8001482:	e035      	b.n	80014f0 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d102      	bne.n	8001492 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	78db      	ldrb	r3, [r3, #3]
 8001496:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001498:	b25a      	sxtb	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	789b      	ldrb	r3, [r3, #2]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b25a      	sxtb	r2, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014b0:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014b8:	2b60      	cmp	r3, #96	; 0x60
 80014ba:	d10d      	bne.n	80014d8 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80014c2:	7b7b      	ldrb	r3, [r7, #13]
 80014c4:	461a      	mov	r2, r3
 80014c6:	21f2      	movs	r1, #242	; 0xf2
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff43 	bl	8001354 <write_register8>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <bmp280_init+0x13a>
			return false;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e00b      	b.n	80014f0 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	461a      	mov	r2, r3
 80014dc:	21f4      	movs	r1, #244	; 0xf4
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff38 	bl	8001354 <write_register8>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <bmp280_init+0x150>
		return false;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <bmp280_init+0x152>
	}

	return true;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	10da      	asrs	r2, r3, #3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001516:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800151a:	12db      	asrs	r3, r3, #11
 800151c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	111b      	asrs	r3, r3, #4
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	8812      	ldrh	r2, [r2, #0]
 8001526:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	1112      	asrs	r2, r2, #4
 800152c:	68f9      	ldr	r1, [r7, #12]
 800152e:	8809      	ldrh	r1, [r1, #0]
 8001530:	1a52      	subs	r2, r2, r1
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800153e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001542:	139b      	asrs	r3, r3, #14
 8001544:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	441a      	add	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3380      	adds	r3, #128	; 0x80
 800155c:	121b      	asrs	r3, r3, #8
}
 800155e:	4618      	mov	r0, r3
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800156a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800156e:	b0cc      	sub	sp, #304	; 0x130
 8001570:	af00      	add	r7, sp, #0
 8001572:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001576:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800157a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800157e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001582:	17da      	asrs	r2, r3, #31
 8001584:	461c      	mov	r4, r3
 8001586:	4615      	mov	r5, r2
 8001588:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800158c:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001590:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001594:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001598:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800159c:	fb03 f102 	mul.w	r1, r3, r2
 80015a0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	18ca      	adds	r2, r1, r3
 80015ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015b2:	fba3 8903 	umull	r8, r9, r3, r3
 80015b6:	eb02 0309 	add.w	r3, r2, r9
 80015ba:	4699      	mov	r9, r3
 80015bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015c0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	17da      	asrs	r2, r3, #31
 80015c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015d0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015d4:	4603      	mov	r3, r0
 80015d6:	fb03 f209 	mul.w	r2, r3, r9
 80015da:	460b      	mov	r3, r1
 80015dc:	fb08 f303 	mul.w	r3, r8, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	4602      	mov	r2, r0
 80015e4:	fba8 1202 	umull	r1, r2, r8, r2
 80015e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015ec:	460a      	mov	r2, r1
 80015ee:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015f6:	4413      	add	r3, r2
 80015f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015fc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001600:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001604:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800160c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001610:	b21b      	sxth	r3, r3
 8001612:	17da      	asrs	r2, r3, #31
 8001614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001618:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800161c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001620:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001624:	462a      	mov	r2, r5
 8001626:	fb02 f203 	mul.w	r2, r2, r3
 800162a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800162e:	4621      	mov	r1, r4
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	441a      	add	r2, r3
 8001636:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800163a:	4621      	mov	r1, r4
 800163c:	fba3 1301 	umull	r1, r3, r3, r1
 8001640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001644:	460b      	mov	r3, r1
 8001646:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800164a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800164e:	18d3      	adds	r3, r2, r3
 8001650:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001654:	f04f 0000 	mov.w	r0, #0
 8001658:	f04f 0100 	mov.w	r1, #0
 800165c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001660:	462b      	mov	r3, r5
 8001662:	0459      	lsls	r1, r3, #17
 8001664:	4623      	mov	r3, r4
 8001666:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800166a:	4623      	mov	r3, r4
 800166c:	0458      	lsls	r0, r3, #17
 800166e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001672:	1814      	adds	r4, r2, r0
 8001674:	643c      	str	r4, [r7, #64]	; 0x40
 8001676:	414b      	adcs	r3, r1
 8001678:	647b      	str	r3, [r7, #68]	; 0x44
 800167a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800167e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001686:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800168a:	b21b      	sxth	r3, r3
 800168c:	17da      	asrs	r2, r3, #31
 800168e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001692:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016a2:	00d9      	lsls	r1, r3, #3
 80016a4:	2000      	movs	r0, #0
 80016a6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016aa:	1814      	adds	r4, r2, r0
 80016ac:	63bc      	str	r4, [r7, #56]	; 0x38
 80016ae:	414b      	adcs	r3, r1
 80016b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016b2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016b6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80016ba:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80016be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016c2:	fb03 f102 	mul.w	r1, r3, r2
 80016c6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80016ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	18ca      	adds	r2, r1, r3
 80016d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016d8:	fba3 1303 	umull	r1, r3, r3, r3
 80016dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016e0:	460b      	mov	r3, r1
 80016e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016ea:	18d3      	adds	r3, r2, r3
 80016ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	17da      	asrs	r2, r3, #31
 80016fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001700:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001704:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001708:	462b      	mov	r3, r5
 800170a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800170e:	4642      	mov	r2, r8
 8001710:	fb02 f203 	mul.w	r2, r2, r3
 8001714:	464b      	mov	r3, r9
 8001716:	4621      	mov	r1, r4
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	4622      	mov	r2, r4
 8001720:	4641      	mov	r1, r8
 8001722:	fba2 1201 	umull	r1, r2, r2, r1
 8001726:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800172a:	460a      	mov	r2, r1
 800172c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001730:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001734:	4413      	add	r3, r2
 8001736:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001746:	4623      	mov	r3, r4
 8001748:	0a18      	lsrs	r0, r3, #8
 800174a:	462b      	mov	r3, r5
 800174c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001750:	462b      	mov	r3, r5
 8001752:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001758:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800175c:	b21b      	sxth	r3, r3
 800175e:	17da      	asrs	r2, r3, #31
 8001760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001764:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001768:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800176c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001770:	464a      	mov	r2, r9
 8001772:	fb02 f203 	mul.w	r2, r2, r3
 8001776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800177a:	4644      	mov	r4, r8
 800177c:	fb04 f303 	mul.w	r3, r4, r3
 8001780:	441a      	add	r2, r3
 8001782:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001786:	4644      	mov	r4, r8
 8001788:	fba3 4304 	umull	r4, r3, r3, r4
 800178c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001790:	4623      	mov	r3, r4
 8001792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001796:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800179a:	18d3      	adds	r3, r2, r3
 800179c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017ac:	464c      	mov	r4, r9
 80017ae:	0323      	lsls	r3, r4, #12
 80017b0:	4644      	mov	r4, r8
 80017b2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017b6:	4644      	mov	r4, r8
 80017b8:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017ba:	1884      	adds	r4, r0, r2
 80017bc:	633c      	str	r4, [r7, #48]	; 0x30
 80017be:	eb41 0303 	adc.w	r3, r1, r3
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
 80017c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017c8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80017cc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80017d0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017d4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017d8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017e0:	88db      	ldrh	r3, [r3, #6]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	2200      	movs	r2, #0
 80017e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017ea:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017f2:	462b      	mov	r3, r5
 80017f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017f8:	4642      	mov	r2, r8
 80017fa:	fb02 f203 	mul.w	r2, r2, r3
 80017fe:	464b      	mov	r3, r9
 8001800:	4621      	mov	r1, r4
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	4622      	mov	r2, r4
 800180a:	4641      	mov	r1, r8
 800180c:	fba2 1201 	umull	r1, r2, r2, r1
 8001810:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001814:	460a      	mov	r2, r1
 8001816:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800181a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800181e:	4413      	add	r3, r2
 8001820:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001830:	4629      	mov	r1, r5
 8001832:	104a      	asrs	r2, r1, #1
 8001834:	4629      	mov	r1, r5
 8001836:	17cb      	asrs	r3, r1, #31
 8001838:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 800183c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001840:	4313      	orrs	r3, r2
 8001842:	d101      	bne.n	8001848 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001844:	2300      	movs	r3, #0
 8001846:	e148      	b.n	8001ada <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001848:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800184c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001850:	17da      	asrs	r2, r3, #31
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
 8001854:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001856:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800185a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800185e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001862:	105b      	asrs	r3, r3, #1
 8001864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001868:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800186c:	07db      	lsls	r3, r3, #31
 800186e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001872:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001876:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800187a:	4621      	mov	r1, r4
 800187c:	1a89      	subs	r1, r1, r2
 800187e:	67b9      	str	r1, [r7, #120]	; 0x78
 8001880:	4629      	mov	r1, r5
 8001882:	eb61 0303 	sbc.w	r3, r1, r3
 8001886:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001888:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800188c:	4622      	mov	r2, r4
 800188e:	462b      	mov	r3, r5
 8001890:	1891      	adds	r1, r2, r2
 8001892:	6239      	str	r1, [r7, #32]
 8001894:	415b      	adcs	r3, r3
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
 8001898:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800189c:	4621      	mov	r1, r4
 800189e:	1851      	adds	r1, r2, r1
 80018a0:	61b9      	str	r1, [r7, #24]
 80018a2:	4629      	mov	r1, r5
 80018a4:	414b      	adcs	r3, r1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b4:	4649      	mov	r1, r9
 80018b6:	018b      	lsls	r3, r1, #6
 80018b8:	4641      	mov	r1, r8
 80018ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018be:	4641      	mov	r1, r8
 80018c0:	018a      	lsls	r2, r1, #6
 80018c2:	4641      	mov	r1, r8
 80018c4:	1889      	adds	r1, r1, r2
 80018c6:	6139      	str	r1, [r7, #16]
 80018c8:	4649      	mov	r1, r9
 80018ca:	eb43 0101 	adc.w	r1, r3, r1
 80018ce:	6179      	str	r1, [r7, #20]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018dc:	4649      	mov	r1, r9
 80018de:	008b      	lsls	r3, r1, #2
 80018e0:	4641      	mov	r1, r8
 80018e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018e6:	4641      	mov	r1, r8
 80018e8:	008a      	lsls	r2, r1, #2
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	4622      	mov	r2, r4
 80018f2:	189b      	adds	r3, r3, r2
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	460b      	mov	r3, r1
 80018f8:	462a      	mov	r2, r5
 80018fa:	eb42 0303 	adc.w	r3, r2, r3
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800190c:	4649      	mov	r1, r9
 800190e:	008b      	lsls	r3, r1, #2
 8001910:	4641      	mov	r1, r8
 8001912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001916:	4641      	mov	r1, r8
 8001918:	008a      	lsls	r2, r1, #2
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	4603      	mov	r3, r0
 8001920:	4622      	mov	r2, r4
 8001922:	189b      	adds	r3, r3, r2
 8001924:	673b      	str	r3, [r7, #112]	; 0x70
 8001926:	462b      	mov	r3, r5
 8001928:	460a      	mov	r2, r1
 800192a:	eb42 0303 	adc.w	r3, r2, r3
 800192e:	677b      	str	r3, [r7, #116]	; 0x74
 8001930:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001934:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001938:	f7ff f9a6 	bl	8000c88 <__aeabi_ldivmod>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001948:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800194c:	b21b      	sxth	r3, r3
 800194e:	17da      	asrs	r2, r3, #31
 8001950:	66bb      	str	r3, [r7, #104]	; 0x68
 8001952:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001954:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001958:	f04f 0000 	mov.w	r0, #0
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	0b50      	lsrs	r0, r2, #13
 8001962:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001966:	1359      	asrs	r1, r3, #13
 8001968:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800196c:	462b      	mov	r3, r5
 800196e:	fb00 f203 	mul.w	r2, r0, r3
 8001972:	4623      	mov	r3, r4
 8001974:	fb03 f301 	mul.w	r3, r3, r1
 8001978:	4413      	add	r3, r2
 800197a:	4622      	mov	r2, r4
 800197c:	fba2 1200 	umull	r1, r2, r2, r0
 8001980:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001984:	460a      	mov	r2, r1
 8001986:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800198a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800198e:	4413      	add	r3, r2
 8001990:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001994:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001998:	f04f 0000 	mov.w	r0, #0
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	0b50      	lsrs	r0, r2, #13
 80019a2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a6:	1359      	asrs	r1, r3, #13
 80019a8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019ac:	462b      	mov	r3, r5
 80019ae:	fb00 f203 	mul.w	r2, r0, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	fb03 f301 	mul.w	r3, r3, r1
 80019b8:	4413      	add	r3, r2
 80019ba:	4622      	mov	r2, r4
 80019bc:	fba2 1200 	umull	r1, r2, r2, r0
 80019c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019c4:	460a      	mov	r2, r1
 80019c6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019ca:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019ce:	4413      	add	r3, r2
 80019d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019e0:	4621      	mov	r1, r4
 80019e2:	0e4a      	lsrs	r2, r1, #25
 80019e4:	4629      	mov	r1, r5
 80019e6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019ea:	4629      	mov	r1, r5
 80019ec:	164b      	asrs	r3, r1, #25
 80019ee:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80019f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019f6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	17da      	asrs	r2, r3, #31
 80019fe:	663b      	str	r3, [r7, #96]	; 0x60
 8001a00:	667a      	str	r2, [r7, #100]	; 0x64
 8001a02:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a06:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a0a:	462a      	mov	r2, r5
 8001a0c:	fb02 f203 	mul.w	r2, r2, r3
 8001a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a14:	4621      	mov	r1, r4
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a20:	4621      	mov	r1, r4
 8001a22:	fba2 1201 	umull	r1, r2, r2, r1
 8001a26:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a30:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a46:	4621      	mov	r1, r4
 8001a48:	0cca      	lsrs	r2, r1, #19
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a50:	4629      	mov	r1, r5
 8001a52:	14cb      	asrs	r3, r1, #19
 8001a54:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001a58:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001a5c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001a60:	1884      	adds	r4, r0, r2
 8001a62:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a64:	eb41 0303 	adc.w	r3, r1, r3
 8001a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a6a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a6e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a72:	4621      	mov	r1, r4
 8001a74:	1889      	adds	r1, r1, r2
 8001a76:	6539      	str	r1, [r7, #80]	; 0x50
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb43 0101 	adc.w	r1, r3, r1
 8001a7e:	6579      	str	r1, [r7, #84]	; 0x54
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	0a18      	lsrs	r0, r3, #8
 8001a90:	462b      	mov	r3, r5
 8001a92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a96:	462b      	mov	r3, r5
 8001a98:	1219      	asrs	r1, r3, #8
 8001a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a9e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	17da      	asrs	r2, r3, #31
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aa8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001ab6:	464c      	mov	r4, r9
 8001ab8:	0123      	lsls	r3, r4, #4
 8001aba:	4644      	mov	r4, r8
 8001abc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ac0:	4644      	mov	r4, r8
 8001ac2:	0122      	lsls	r2, r4, #4
 8001ac4:	1884      	adds	r4, r0, r2
 8001ac6:	603c      	str	r4, [r7, #0]
 8001ac8:	eb41 0303 	adc.w	r3, r1, r3
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ad2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001ad6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ae6 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001af8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	039a      	lsls	r2, r3, #14
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b04:	051b      	lsls	r3, r3, #20
 8001b06:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b1c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001b24:	4611      	mov	r1, r2
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	fb01 f202 	mul.w	r2, r1, r2
 8001b2c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b2e:	68f9      	ldr	r1, [r7, #12]
 8001b30:	7f09      	ldrb	r1, [r1, #28]
 8001b32:	4608      	mov	r0, r1
 8001b34:	6979      	ldr	r1, [r7, #20]
 8001b36:	fb00 f101 	mul.w	r1, r0, r1
 8001b3a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b3c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b40:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b44:	1292      	asrs	r2, r2, #10
 8001b46:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001b4a:	68f9      	ldr	r1, [r7, #12]
 8001b4c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001b50:	fb01 f202 	mul.w	r2, r1, r2
 8001b54:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b58:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	13db      	asrs	r3, r3, #15
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	13d2      	asrs	r2, r2, #15
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	7e12      	ldrb	r2, [r2, #24]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b84:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b8c:	bfa8      	it	ge
 8001b8e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b92:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	131b      	asrs	r3, r3, #12
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001bb8:	2b60      	cmp	r3, #96	; 0x60
 8001bba:	d007      	beq.n	8001bcc <bmp280_read_fixed+0x28>
		if (humidity)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <bmp280_read_fixed+0x32>
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	e000      	b.n	8001bd8 <bmp280_read_fixed+0x34>
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f107 0218 	add.w	r2, r7, #24
 8001be2:	21f7      	movs	r1, #247	; 0xf7
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7ff faab 	bl	8001140 <read_data>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <bmp280_read_fixed+0x50>
		return false;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e038      	b.n	8001c66 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001bf4:	7e3b      	ldrb	r3, [r7, #24]
 8001bf6:	031a      	lsls	r2, r3, #12
 8001bf8:	7e7b      	ldrb	r3, [r7, #25]
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	7eba      	ldrb	r2, [r7, #26]
 8001c00:	0912      	lsrs	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	4313      	orrs	r3, r2
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001c08:	7efb      	ldrb	r3, [r7, #27]
 8001c0a:	031a      	lsls	r2, r3, #12
 8001c0c:	7f3b      	ldrb	r3, [r7, #28]
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4313      	orrs	r3, r2
 8001c12:	7f7a      	ldrb	r2, [r7, #29]
 8001c14:	0912      	lsrs	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	461a      	mov	r2, r3
 8001c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f7ff fc67 	bl	80014f8 <compensate_temperature>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	461a      	mov	r2, r3
 8001c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff fc97 	bl	800156a <compensate_pressure>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00d      	beq.n	8001c64 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001c48:	7fbb      	ldrb	r3, [r7, #30]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	7ffa      	ldrb	r2, [r7, #31]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	461a      	mov	r2, r3
 8001c56:	6a39      	ldr	r1, [r7, #32]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff ff44 	bl	8001ae6 <compensate_humidity>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001c64:	2301      	movs	r3, #1
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3730      	adds	r7, #48	; 0x30
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <bmp280_read_float+0x1a>
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	e000      	b.n	8001c8c <bmp280_read_float+0x1c>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f107 0218 	add.w	r2, r7, #24
 8001c90:	f107 011c 	add.w	r1, r7, #28
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff ff85 	bl	8001ba4 <bmp280_read_fixed>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d028      	beq.n	8001cf2 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001caa:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001cfc <bmp280_read_float+0x8c>
 8001cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cc2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001d00 <bmp280_read_float+0x90>
 8001cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ce0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001d04 <bmp280_read_float+0x94>
 8001ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <bmp280_read_float+0x84>
	}

	return false;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	42c80000 	.word	0x42c80000
 8001d00:	43800000 	.word	0x43800000
 8001d04:	44800000 	.word	0x44800000

08001d08 <BMP280_GetAlt>:

float BMP280_GetAlt(float pressure)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 44330*(1-((float)pow((pressure/atmPress), 0.19029495718)));
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d68 <BMP280_GetAlt+0x60>
 8001d1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d1e:	ee16 0a90 	vmov	r0, s13
 8001d22:	f7fe fc11 	bl	8000548 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8001d60 <BMP280_GetAlt+0x58>
 8001d2e:	ec43 2b10 	vmov	d0, r2, r3
 8001d32:	f009 f93f 	bl	800afb4 <pow>
 8001d36:	ec53 2b10 	vmov	r2, r3, d0
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7fe ff53 	bl	8000be8 <__aeabi_d2f>
 8001d42:	ee07 0a10 	vmov	s14, r0
 8001d46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001d4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d4e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001d6c <BMP280_GetAlt+0x64>
 8001d52:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001d56:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	ccd745e4 	.word	0xccd745e4
 8001d64:	3fc85b95 	.word	0x3fc85b95
 8001d68:	47c5e680 	.word	0x47c5e680
 8001d6c:	472d2a00 	.word	0x472d2a00

08001d70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d76:	f001 fd7f 	bl	8003878 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d7a:	f000 fe45 	bl	8002a08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d7e:	f000 ff7d 	bl	8002c7c <MX_GPIO_Init>
	MX_DMA_Init();
 8001d82:	f000 ff5b 	bl	8002c3c <MX_DMA_Init>
	MX_ADC1_Init();
 8001d86:	f000 fe9d 	bl	8002ac4 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001d8a:	f000 fefb 	bl	8002b84 <MX_I2C1_Init>
	MX_I2C2_Init();
 8001d8e:	f000 ff27 	bl	8002be0 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8001d92:	2202      	movs	r2, #2
 8001d94:	49bc      	ldr	r1, [pc, #752]	; (8002088 <main+0x318>)
 8001d96:	48bd      	ldr	r0, [pc, #756]	; (800208c <main+0x31c>)
 8001d98:	f001 fe48 	bl	8003a2c <HAL_ADC_Start_DMA>

	bmp280_init_user_params(&bmp280.params, BMP280_MODE_NORMAL,
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	2303      	movs	r3, #3
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	2303      	movs	r3, #3
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2303      	movs	r3, #3
 8001daa:	2200      	movs	r2, #0
 8001dac:	2103      	movs	r1, #3
 8001dae:	48b8      	ldr	r0, [pc, #736]	; (8002090 <main+0x320>)
 8001db0:	f7ff f972 	bl	8001098 <bmp280_init_user_params>
			BMP280_FILTER_OFF, BMP280_STANDARD, BMP280_STANDARD,
			BMP280_STANDARD, BMP280_STANDBY_250);
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001db4:	4bb7      	ldr	r3, [pc, #732]	; (8002094 <main+0x324>)
 8001db6:	2276      	movs	r2, #118	; 0x76
 8001db8:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8001dba:	4bb6      	ldr	r3, [pc, #728]	; (8002094 <main+0x324>)
 8001dbc:	4ab6      	ldr	r2, [pc, #728]	; (8002098 <main+0x328>)
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28

	ssd1306_Init();
 8001dc0:	f001 f808 	bl	8002dd4 <ssd1306_Init>
	ssd1306_SetCursor(X_Orig + X_Offset, W1);
 8001dc4:	2115      	movs	r1, #21
 8001dc6:	2004      	movs	r0, #4
 8001dc8:	f001 f9bc 	bl	8003144 <ssd1306_SetCursor>
	ssd1306_WriteString("Initializing", Font_7x10, White);
 8001dcc:	4ab3      	ldr	r2, [pc, #716]	; (800209c <main+0x32c>)
 8001dce:	2301      	movs	r3, #1
 8001dd0:	ca06      	ldmia	r2, {r1, r2}
 8001dd2:	48b3      	ldr	r0, [pc, #716]	; (80020a0 <main+0x330>)
 8001dd4:	f001 f990 	bl	80030f8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001dd8:	f001 f88a 	bl	8002ef0 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 8001ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de0:	f001 fdbc 	bl	800395c <HAL_Delay>
	ssd1306_WriteString(".", Font_7x10, White);
 8001de4:	4aad      	ldr	r2, [pc, #692]	; (800209c <main+0x32c>)
 8001de6:	2301      	movs	r3, #1
 8001de8:	ca06      	ldmia	r2, {r1, r2}
 8001dea:	48ae      	ldr	r0, [pc, #696]	; (80020a4 <main+0x334>)
 8001dec:	f001 f984 	bl	80030f8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001df0:	f001 f87e 	bl	8002ef0 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 8001df4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001df8:	f001 fdb0 	bl	800395c <HAL_Delay>
	ssd1306_WriteString(".", Font_7x10, White);
 8001dfc:	4aa7      	ldr	r2, [pc, #668]	; (800209c <main+0x32c>)
 8001dfe:	2301      	movs	r3, #1
 8001e00:	ca06      	ldmia	r2, {r1, r2}
 8001e02:	48a8      	ldr	r0, [pc, #672]	; (80020a4 <main+0x334>)
 8001e04:	f001 f978 	bl	80030f8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e08:	f001 f872 	bl	8002ef0 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 8001e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e10:	f001 fda4 	bl	800395c <HAL_Delay>
	ssd1306_WriteString(".", Font_7x10, White);
 8001e14:	4aa1      	ldr	r2, [pc, #644]	; (800209c <main+0x32c>)
 8001e16:	2301      	movs	r3, #1
 8001e18:	ca06      	ldmia	r2, {r1, r2}
 8001e1a:	48a2      	ldr	r0, [pc, #648]	; (80020a4 <main+0x334>)
 8001e1c:	f001 f96c 	bl	80030f8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e20:	f001 f866 	bl	8002ef0 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 8001e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e28:	f001 fd98 	bl	800395c <HAL_Delay>
	ssd1306_Fill(Black);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f001 f83b 	bl	8002ea8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001e32:	f001 f85d 	bl	8002ef0 <ssd1306_UpdateScreen>

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001e36:	e012      	b.n	8001e5e <main+0xee>
		// Escrever mensagem de erro de inicialização no OLED **********************************
		ssd1306_Fill(Black);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f001 f835 	bl	8002ea8 <ssd1306_Fill>
		ssd1306_SetCursor(X_Orig, W1);
 8001e3e:	2115      	movs	r1, #21
 8001e40:	2000      	movs	r0, #0
 8001e42:	f001 f97f 	bl	8003144 <ssd1306_SetCursor>
		ssd1306_WriteString(inicialization_error, Font_7x10, White);
 8001e46:	4a95      	ldr	r2, [pc, #596]	; (800209c <main+0x32c>)
 8001e48:	2301      	movs	r3, #1
 8001e4a:	ca06      	ldmia	r2, {r1, r2}
 8001e4c:	4896      	ldr	r0, [pc, #600]	; (80020a8 <main+0x338>)
 8001e4e:	f001 f953 	bl	80030f8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001e52:	f001 f84d 	bl	8002ef0 <ssd1306_UpdateScreen>
		HAL_Delay(2000);
 8001e56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e5a:	f001 fd7f 	bl	800395c <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001e5e:	498c      	ldr	r1, [pc, #560]	; (8002090 <main+0x320>)
 8001e60:	488c      	ldr	r0, [pc, #560]	; (8002094 <main+0x324>)
 8001e62:	f7ff fa9c 	bl	800139e <bmp280_init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1e2      	bne.n	8001e38 <main+0xc8>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001e72:	e012      	b.n	8001e9a <main+0x12a>
			// Escrever mensagem de erro de medição no OLED **********************************
			ssd1306_Fill(Black);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f001 f817 	bl	8002ea8 <ssd1306_Fill>
			ssd1306_SetCursor(X_Orig, W1);
 8001e7a:	2115      	movs	r1, #21
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f001 f961 	bl	8003144 <ssd1306_SetCursor>
			ssd1306_WriteString(reading_error, Font_7x10, White);
 8001e82:	4a86      	ldr	r2, [pc, #536]	; (800209c <main+0x32c>)
 8001e84:	2301      	movs	r3, #1
 8001e86:	ca06      	ldmia	r2, {r1, r2}
 8001e88:	4888      	ldr	r0, [pc, #544]	; (80020ac <main+0x33c>)
 8001e8a:	f001 f935 	bl	80030f8 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001e8e:	f001 f82f 	bl	8002ef0 <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 8001e92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e96:	f001 fd61 	bl	800395c <HAL_Delay>
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001e9a:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <main+0x340>)
 8001e9c:	4a85      	ldr	r2, [pc, #532]	; (80020b4 <main+0x344>)
 8001e9e:	4986      	ldr	r1, [pc, #536]	; (80020b8 <main+0x348>)
 8001ea0:	487c      	ldr	r0, [pc, #496]	; (8002094 <main+0x324>)
 8001ea2:	f7ff fee5 	bl	8001c70 <bmp280_read_float>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1e0      	bne.n	8001e74 <main+0x104>

		}

		altitude = BMP280_GetAlt(pressure);
 8001eb2:	4b80      	ldr	r3, [pc, #512]	; (80020b4 <main+0x344>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ebc:	f7ff ff24 	bl	8001d08 <BMP280_GetAlt>
 8001ec0:	eef0 7a40 	vmov.f32	s15, s0
 8001ec4:	4b7d      	ldr	r3, [pc, #500]	; (80020bc <main+0x34c>)
 8001ec6:	edc3 7a00 	vstr	s15, [r3]

		if (on_off == 1) {
 8001eca:	4b7d      	ldr	r3, [pc, #500]	; (80020c0 <main+0x350>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	f040 82b7 	bne.w	8002442 <main+0x6d2>
			switch (menu_vertical) {
 8001ed4:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <main+0x354>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	f000 81cc 	beq.w	8002276 <main+0x506>
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	f300 82b6 	bgt.w	8002450 <main+0x6e0>
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d003      	beq.n	8001ef0 <main+0x180>
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	f000 8103 	beq.w	80020f4 <main+0x384>
 8001eee:	e2af      	b.n	8002450 <main+0x6e0>
			case 1: // Temperatura
				switch (menu_horizontal) {
 8001ef0:	4b75      	ldr	r3, [pc, #468]	; (80020c8 <main+0x358>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	f000 8082 	beq.w	8001ffe <main+0x28e>
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	f300 82a3 	bgt.w	8002446 <main+0x6d6>
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d002      	beq.n	8001f0a <main+0x19a>
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d038      	beq.n	8001f7a <main+0x20a>
					ssd1306_SetCursor(X_Orig, W1);
					ssd1306_WriteString(temperature_str, Font_7x10, White);
					ssd1306_UpdateScreen();
					break;
				}
				break;
 8001f08:	e29d      	b.n	8002446 <main+0x6d6>
					if (!has_cleaned_var) {
 8001f0a:	4b70      	ldr	r3, [pc, #448]	; (80020cc <main+0x35c>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	f083 0301 	eor.w	r3, r3, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d011      	beq.n	8001f3c <main+0x1cc>
						memset(temperature_str, 0, sizeof(temperature_str));
 8001f18:	2264      	movs	r2, #100	; 0x64
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	486c      	ldr	r0, [pc, #432]	; (80020d0 <main+0x360>)
 8001f1e:	f004 fbf9 	bl	8006714 <memset>
						memset(pressure_str, 0, sizeof(pressure_str));
 8001f22:	2264      	movs	r2, #100	; 0x64
 8001f24:	2100      	movs	r1, #0
 8001f26:	486b      	ldr	r0, [pc, #428]	; (80020d4 <main+0x364>)
 8001f28:	f004 fbf4 	bl	8006714 <memset>
						memset(altitude_str, 0, sizeof(altitude_str));
 8001f2c:	2264      	movs	r2, #100	; 0x64
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4869      	ldr	r0, [pc, #420]	; (80020d8 <main+0x368>)
 8001f32:	f004 fbef 	bl	8006714 <memset>
						has_cleaned_var = true;
 8001f36:	4b65      	ldr	r3, [pc, #404]	; (80020cc <main+0x35c>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
					size_temp = sprintf(temperature_str, "Temp.: %.2f C",
 8001f3c:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <main+0x348>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fb01 	bl	8000548 <__aeabi_f2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4964      	ldr	r1, [pc, #400]	; (80020dc <main+0x36c>)
 8001f4c:	4860      	ldr	r0, [pc, #384]	; (80020d0 <main+0x360>)
 8001f4e:	f005 fa69 	bl	8007424 <siprintf>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <main+0x370>)
 8001f58:	801a      	strh	r2, [r3, #0]
					ssd1306_Fill(Black);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 ffa4 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_SetCursor(X_Orig, W1);
 8001f60:	2115      	movs	r1, #21
 8001f62:	2000      	movs	r0, #0
 8001f64:	f001 f8ee 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString(temperature_str, Font_7x10, White);
 8001f68:	4a4c      	ldr	r2, [pc, #304]	; (800209c <main+0x32c>)
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	ca06      	ldmia	r2, {r1, r2}
 8001f6e:	4858      	ldr	r0, [pc, #352]	; (80020d0 <main+0x360>)
 8001f70:	f001 f8c2 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001f74:	f000 ffbc 	bl	8002ef0 <ssd1306_UpdateScreen>
					break;
 8001f78:	e07e      	b.n	8002078 <main+0x308>
					if (!has_cleaned_var) {
 8001f7a:	4b54      	ldr	r3, [pc, #336]	; (80020cc <main+0x35c>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	f083 0301 	eor.w	r3, r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d011      	beq.n	8001fac <main+0x23c>
						memset(temperature_str, 0, sizeof(temperature_str));
 8001f88:	2264      	movs	r2, #100	; 0x64
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4850      	ldr	r0, [pc, #320]	; (80020d0 <main+0x360>)
 8001f8e:	f004 fbc1 	bl	8006714 <memset>
						memset(pressure_str, 0, sizeof(pressure_str));
 8001f92:	2264      	movs	r2, #100	; 0x64
 8001f94:	2100      	movs	r1, #0
 8001f96:	484f      	ldr	r0, [pc, #316]	; (80020d4 <main+0x364>)
 8001f98:	f004 fbbc 	bl	8006714 <memset>
						memset(altitude_str, 0, sizeof(altitude_str));
 8001f9c:	2264      	movs	r2, #100	; 0x64
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	484d      	ldr	r0, [pc, #308]	; (80020d8 <main+0x368>)
 8001fa2:	f004 fbb7 	bl	8006714 <memset>
						has_cleaned_var = true;
 8001fa6:	4b49      	ldr	r3, [pc, #292]	; (80020cc <main+0x35c>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
							((temperature * ((float) 9 / 5)) + 32));
 8001fac:	4b42      	ldr	r3, [pc, #264]	; (80020b8 <main+0x348>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80020e4 <main+0x374>
 8001fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fba:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80020e8 <main+0x378>
 8001fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
					size_temp = sprintf(temperature_str, "Temp.: %.2f F",
 8001fc2:	ee17 0a90 	vmov	r0, s15
 8001fc6:	f7fe fabf 	bl	8000548 <__aeabi_f2d>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4947      	ldr	r1, [pc, #284]	; (80020ec <main+0x37c>)
 8001fd0:	483f      	ldr	r0, [pc, #252]	; (80020d0 <main+0x360>)
 8001fd2:	f005 fa27 	bl	8007424 <siprintf>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <main+0x370>)
 8001fdc:	801a      	strh	r2, [r3, #0]
					ssd1306_Fill(Black);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f000 ff62 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_SetCursor(X_Orig, W1);
 8001fe4:	2115      	movs	r1, #21
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f001 f8ac 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString(temperature_str, Font_7x10, White);
 8001fec:	4a2b      	ldr	r2, [pc, #172]	; (800209c <main+0x32c>)
 8001fee:	2301      	movs	r3, #1
 8001ff0:	ca06      	ldmia	r2, {r1, r2}
 8001ff2:	4837      	ldr	r0, [pc, #220]	; (80020d0 <main+0x360>)
 8001ff4:	f001 f880 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001ff8:	f000 ff7a 	bl	8002ef0 <ssd1306_UpdateScreen>
					break;
 8001ffc:	e03c      	b.n	8002078 <main+0x308>
					if (!has_cleaned_var) {
 8001ffe:	4b33      	ldr	r3, [pc, #204]	; (80020cc <main+0x35c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	f083 0301 	eor.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d011      	beq.n	8002030 <main+0x2c0>
						memset(temperature_str, 0, sizeof(temperature_str));
 800200c:	2264      	movs	r2, #100	; 0x64
 800200e:	2100      	movs	r1, #0
 8002010:	482f      	ldr	r0, [pc, #188]	; (80020d0 <main+0x360>)
 8002012:	f004 fb7f 	bl	8006714 <memset>
						memset(pressure_str, 0, sizeof(pressure_str));
 8002016:	2264      	movs	r2, #100	; 0x64
 8002018:	2100      	movs	r1, #0
 800201a:	482e      	ldr	r0, [pc, #184]	; (80020d4 <main+0x364>)
 800201c:	f004 fb7a 	bl	8006714 <memset>
						memset(altitude_str, 0, sizeof(altitude_str));
 8002020:	2264      	movs	r2, #100	; 0x64
 8002022:	2100      	movs	r1, #0
 8002024:	482c      	ldr	r0, [pc, #176]	; (80020d8 <main+0x368>)
 8002026:	f004 fb75 	bl	8006714 <memset>
						has_cleaned_var = true;
 800202a:	4b28      	ldr	r3, [pc, #160]	; (80020cc <main+0x35c>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
					size_temp = sprintf(temperature_str, "Temp.: %.2f K",
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <main+0x348>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa87 	bl	8000548 <__aeabi_f2d>
 800203a:	a311      	add	r3, pc, #68	; (adr r3, 8002080 <main+0x310>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe f924 	bl	800028c <__adddf3>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4929      	ldr	r1, [pc, #164]	; (80020f0 <main+0x380>)
 800204a:	4821      	ldr	r0, [pc, #132]	; (80020d0 <main+0x360>)
 800204c:	f005 f9ea 	bl	8007424 <siprintf>
 8002050:	4603      	mov	r3, r0
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <main+0x370>)
 8002056:	801a      	strh	r2, [r3, #0]
					ssd1306_Fill(Black);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 ff25 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_SetCursor(X_Orig, W1);
 800205e:	2115      	movs	r1, #21
 8002060:	2000      	movs	r0, #0
 8002062:	f001 f86f 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString(temperature_str, Font_7x10, White);
 8002066:	4a0d      	ldr	r2, [pc, #52]	; (800209c <main+0x32c>)
 8002068:	2301      	movs	r3, #1
 800206a:	ca06      	ldmia	r2, {r1, r2}
 800206c:	4818      	ldr	r0, [pc, #96]	; (80020d0 <main+0x360>)
 800206e:	f001 f843 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002072:	f000 ff3d 	bl	8002ef0 <ssd1306_UpdateScreen>
					break;
 8002076:	bf00      	nop
				break;
 8002078:	e1e5      	b.n	8002446 <main+0x6d6>
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w
 8002080:	66666666 	.word	0x66666666
 8002084:	40711266 	.word	0x40711266
 8002088:	2000038c 	.word	0x2000038c
 800208c:	2000023c 	.word	0x2000023c
 8002090:	200003c0 	.word	0x200003c0
 8002094:	20000394 	.word	0x20000394
 8002098:	200002e4 	.word	0x200002e4
 800209c:	20000038 	.word	0x20000038
 80020a0:	0800be08 	.word	0x0800be08
 80020a4:	0800be18 	.word	0x0800be18
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000020 	.word	0x20000020
 80020b0:	200003d0 	.word	0x200003d0
 80020b4:	200003c8 	.word	0x200003c8
 80020b8:	200003cc 	.word	0x200003cc
 80020bc:	200003d4 	.word	0x200003d4
 80020c0:	2000056a 	.word	0x2000056a
 80020c4:	20000568 	.word	0x20000568
 80020c8:	20000569 	.word	0x20000569
 80020cc:	2000056c 	.word	0x2000056c
 80020d0:	2000043c 	.word	0x2000043c
 80020d4:	200003d8 	.word	0x200003d8
 80020d8:	200004a0 	.word	0x200004a0
 80020dc:	0800be1c 	.word	0x0800be1c
 80020e0:	2000056e 	.word	0x2000056e
 80020e4:	3fe66666 	.word	0x3fe66666
 80020e8:	42000000 	.word	0x42000000
 80020ec:	0800be2c 	.word	0x0800be2c
 80020f0:	0800be3c 	.word	0x0800be3c

			case 2: // Pressão
				switch (menu_horizontal) {
 80020f4:	4ba1      	ldr	r3, [pc, #644]	; (800237c <main+0x60c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d07d      	beq.n	80021f8 <main+0x488>
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	f300 81a4 	bgt.w	800244a <main+0x6da>
 8002102:	2b01      	cmp	r3, #1
 8002104:	d002      	beq.n	800210c <main+0x39c>
 8002106:	2b02      	cmp	r3, #2
 8002108:	d038      	beq.n	800217c <main+0x40c>
					ssd1306_SetCursor(X_Orig, W1);
					ssd1306_WriteString(pressure_str, Font_7x10, White);
					ssd1306_UpdateScreen();
					break;
				}
				break;
 800210a:	e19e      	b.n	800244a <main+0x6da>
					if (!has_cleaned_var) {
 800210c:	4b9c      	ldr	r3, [pc, #624]	; (8002380 <main+0x610>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f083 0301 	eor.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d011      	beq.n	800213e <main+0x3ce>
						memset(temperature_str, 0, sizeof(temperature_str));
 800211a:	2264      	movs	r2, #100	; 0x64
 800211c:	2100      	movs	r1, #0
 800211e:	4899      	ldr	r0, [pc, #612]	; (8002384 <main+0x614>)
 8002120:	f004 faf8 	bl	8006714 <memset>
						memset(pressure_str, 0, sizeof(pressure_str));
 8002124:	2264      	movs	r2, #100	; 0x64
 8002126:	2100      	movs	r1, #0
 8002128:	4897      	ldr	r0, [pc, #604]	; (8002388 <main+0x618>)
 800212a:	f004 faf3 	bl	8006714 <memset>
						memset(altitude_str, 0, sizeof(altitude_str));
 800212e:	2264      	movs	r2, #100	; 0x64
 8002130:	2100      	movs	r1, #0
 8002132:	4896      	ldr	r0, [pc, #600]	; (800238c <main+0x61c>)
 8002134:	f004 faee 	bl	8006714 <memset>
						has_cleaned_var = true;
 8002138:	4b91      	ldr	r3, [pc, #580]	; (8002380 <main+0x610>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
					size_press = sprintf(pressure_str, "Pres.: %.2f Pa",
 800213e:	4b94      	ldr	r3, [pc, #592]	; (8002390 <main+0x620>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa00 	bl	8000548 <__aeabi_f2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4991      	ldr	r1, [pc, #580]	; (8002394 <main+0x624>)
 800214e:	488e      	ldr	r0, [pc, #568]	; (8002388 <main+0x618>)
 8002150:	f005 f968 	bl	8007424 <siprintf>
 8002154:	4603      	mov	r3, r0
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b8f      	ldr	r3, [pc, #572]	; (8002398 <main+0x628>)
 800215a:	801a      	strh	r2, [r3, #0]
					ssd1306_Fill(Black);
 800215c:	2000      	movs	r0, #0
 800215e:	f000 fea3 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_SetCursor(X_Orig, W1);
 8002162:	2115      	movs	r1, #21
 8002164:	2000      	movs	r0, #0
 8002166:	f000 ffed 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString(pressure_str, Font_7x10, White);
 800216a:	4a8c      	ldr	r2, [pc, #560]	; (800239c <main+0x62c>)
 800216c:	2301      	movs	r3, #1
 800216e:	ca06      	ldmia	r2, {r1, r2}
 8002170:	4885      	ldr	r0, [pc, #532]	; (8002388 <main+0x618>)
 8002172:	f000 ffc1 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002176:	f000 febb 	bl	8002ef0 <ssd1306_UpdateScreen>
					break;
 800217a:	e07b      	b.n	8002274 <main+0x504>
					if (!has_cleaned_var) {
 800217c:	4b80      	ldr	r3, [pc, #512]	; (8002380 <main+0x610>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f083 0301 	eor.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d011      	beq.n	80021ae <main+0x43e>
						memset(temperature_str, 0, sizeof(temperature_str));
 800218a:	2264      	movs	r2, #100	; 0x64
 800218c:	2100      	movs	r1, #0
 800218e:	487d      	ldr	r0, [pc, #500]	; (8002384 <main+0x614>)
 8002190:	f004 fac0 	bl	8006714 <memset>
						memset(pressure_str, 0, sizeof(pressure_str));
 8002194:	2264      	movs	r2, #100	; 0x64
 8002196:	2100      	movs	r1, #0
 8002198:	487b      	ldr	r0, [pc, #492]	; (8002388 <main+0x618>)
 800219a:	f004 fabb 	bl	8006714 <memset>
						memset(altitude_str, 0, sizeof(altitude_str));
 800219e:	2264      	movs	r2, #100	; 0x64
 80021a0:	2100      	movs	r1, #0
 80021a2:	487a      	ldr	r0, [pc, #488]	; (800238c <main+0x61c>)
 80021a4:	f004 fab6 	bl	8006714 <memset>
						has_cleaned_var = true;
 80021a8:	4b75      	ldr	r3, [pc, #468]	; (8002380 <main+0x610>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
							(pressure / (float) atmPress));
 80021ae:	4b78      	ldr	r3, [pc, #480]	; (8002390 <main+0x620>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80023a0 <main+0x630>
 80021b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
					size_press = sprintf(pressure_str, "Pres.: %.4f atm",
 80021bc:	ee16 0a90 	vmov	r0, s13
 80021c0:	f7fe f9c2 	bl	8000548 <__aeabi_f2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4976      	ldr	r1, [pc, #472]	; (80023a4 <main+0x634>)
 80021ca:	486f      	ldr	r0, [pc, #444]	; (8002388 <main+0x618>)
 80021cc:	f005 f92a 	bl	8007424 <siprintf>
 80021d0:	4603      	mov	r3, r0
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b70      	ldr	r3, [pc, #448]	; (8002398 <main+0x628>)
 80021d6:	801a      	strh	r2, [r3, #0]
					ssd1306_Fill(Black);
 80021d8:	2000      	movs	r0, #0
 80021da:	f000 fe65 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_SetCursor(X_Orig, W1);
 80021de:	2115      	movs	r1, #21
 80021e0:	2000      	movs	r0, #0
 80021e2:	f000 ffaf 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString(pressure_str, Font_7x10, White);
 80021e6:	4a6d      	ldr	r2, [pc, #436]	; (800239c <main+0x62c>)
 80021e8:	2301      	movs	r3, #1
 80021ea:	ca06      	ldmia	r2, {r1, r2}
 80021ec:	4866      	ldr	r0, [pc, #408]	; (8002388 <main+0x618>)
 80021ee:	f000 ff83 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 80021f2:	f000 fe7d 	bl	8002ef0 <ssd1306_UpdateScreen>
					break;
 80021f6:	e03d      	b.n	8002274 <main+0x504>
					if (!has_cleaned_var) {
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <main+0x610>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d011      	beq.n	800222a <main+0x4ba>
						memset(temperature_str, 0, sizeof(temperature_str));
 8002206:	2264      	movs	r2, #100	; 0x64
 8002208:	2100      	movs	r1, #0
 800220a:	485e      	ldr	r0, [pc, #376]	; (8002384 <main+0x614>)
 800220c:	f004 fa82 	bl	8006714 <memset>
						memset(pressure_str, 0, sizeof(pressure_str));
 8002210:	2264      	movs	r2, #100	; 0x64
 8002212:	2100      	movs	r1, #0
 8002214:	485c      	ldr	r0, [pc, #368]	; (8002388 <main+0x618>)
 8002216:	f004 fa7d 	bl	8006714 <memset>
						memset(altitude_str, 0, sizeof(altitude_str));
 800221a:	2264      	movs	r2, #100	; 0x64
 800221c:	2100      	movs	r1, #0
 800221e:	485b      	ldr	r0, [pc, #364]	; (800238c <main+0x61c>)
 8002220:	f004 fa78 	bl	8006714 <memset>
						has_cleaned_var = true;
 8002224:	4b56      	ldr	r3, [pc, #344]	; (8002380 <main+0x610>)
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
							(pressure / (float) 133));
 800222a:	4b59      	ldr	r3, [pc, #356]	; (8002390 <main+0x620>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80023a8 <main+0x638>
 8002234:	eec7 6a87 	vdiv.f32	s13, s15, s14
					size_press = sprintf(pressure_str, "Pres.: %.2f Torr",
 8002238:	ee16 0a90 	vmov	r0, s13
 800223c:	f7fe f984 	bl	8000548 <__aeabi_f2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4959      	ldr	r1, [pc, #356]	; (80023ac <main+0x63c>)
 8002246:	4850      	ldr	r0, [pc, #320]	; (8002388 <main+0x618>)
 8002248:	f005 f8ec 	bl	8007424 <siprintf>
 800224c:	4603      	mov	r3, r0
 800224e:	b29a      	uxth	r2, r3
 8002250:	4b51      	ldr	r3, [pc, #324]	; (8002398 <main+0x628>)
 8002252:	801a      	strh	r2, [r3, #0]
					ssd1306_Fill(Black);
 8002254:	2000      	movs	r0, #0
 8002256:	f000 fe27 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_SetCursor(X_Orig, W1);
 800225a:	2115      	movs	r1, #21
 800225c:	2000      	movs	r0, #0
 800225e:	f000 ff71 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString(pressure_str, Font_7x10, White);
 8002262:	4a4e      	ldr	r2, [pc, #312]	; (800239c <main+0x62c>)
 8002264:	2301      	movs	r3, #1
 8002266:	ca06      	ldmia	r2, {r1, r2}
 8002268:	4847      	ldr	r0, [pc, #284]	; (8002388 <main+0x618>)
 800226a:	f000 ff45 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 800226e:	f000 fe3f 	bl	8002ef0 <ssd1306_UpdateScreen>
					break;
 8002272:	bf00      	nop
				break;
 8002274:	e0e9      	b.n	800244a <main+0x6da>

			case 3: // Altitude
				switch (menu_horizontal) {
 8002276:	4b41      	ldr	r3, [pc, #260]	; (800237c <main+0x60c>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b03      	cmp	r3, #3
 800227c:	f000 80a2 	beq.w	80023c4 <main+0x654>
 8002280:	2b03      	cmp	r3, #3
 8002282:	f300 80e4 	bgt.w	800244e <main+0x6de>
 8002286:	2b01      	cmp	r3, #1
 8002288:	d002      	beq.n	8002290 <main+0x520>
 800228a:	2b02      	cmp	r3, #2
 800228c:	d038      	beq.n	8002300 <main+0x590>
					ssd1306_SetCursor(X_Orig, W1);
					ssd1306_WriteString(altitude_str, Font_7x10, White);
					ssd1306_UpdateScreen();
					break;
				}
				break;
 800228e:	e0de      	b.n	800244e <main+0x6de>
					if (!has_cleaned_var) {
 8002290:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <main+0x610>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	f083 0301 	eor.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d011      	beq.n	80022c2 <main+0x552>
						memset(temperature_str, 0, sizeof(temperature_str));
 800229e:	2264      	movs	r2, #100	; 0x64
 80022a0:	2100      	movs	r1, #0
 80022a2:	4838      	ldr	r0, [pc, #224]	; (8002384 <main+0x614>)
 80022a4:	f004 fa36 	bl	8006714 <memset>
						memset(pressure_str, 0, sizeof(pressure_str));
 80022a8:	2264      	movs	r2, #100	; 0x64
 80022aa:	2100      	movs	r1, #0
 80022ac:	4836      	ldr	r0, [pc, #216]	; (8002388 <main+0x618>)
 80022ae:	f004 fa31 	bl	8006714 <memset>
						memset(altitude_str, 0, sizeof(altitude_str));
 80022b2:	2264      	movs	r2, #100	; 0x64
 80022b4:	2100      	movs	r1, #0
 80022b6:	4835      	ldr	r0, [pc, #212]	; (800238c <main+0x61c>)
 80022b8:	f004 fa2c 	bl	8006714 <memset>
						has_cleaned_var = true;
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <main+0x610>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
					size_alt = sprintf(altitude_str, "Alt.: %.2f m", altitude);
 80022c2:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <main+0x640>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe f93e 	bl	8000548 <__aeabi_f2d>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4938      	ldr	r1, [pc, #224]	; (80023b4 <main+0x644>)
 80022d2:	482e      	ldr	r0, [pc, #184]	; (800238c <main+0x61c>)
 80022d4:	f005 f8a6 	bl	8007424 <siprintf>
 80022d8:	4603      	mov	r3, r0
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <main+0x648>)
 80022de:	801a      	strh	r2, [r3, #0]
					ssd1306_Fill(Black);
 80022e0:	2000      	movs	r0, #0
 80022e2:	f000 fde1 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_SetCursor(X_Orig, W1);
 80022e6:	2115      	movs	r1, #21
 80022e8:	2000      	movs	r0, #0
 80022ea:	f000 ff2b 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString(altitude_str, Font_7x10, White);
 80022ee:	4a2b      	ldr	r2, [pc, #172]	; (800239c <main+0x62c>)
 80022f0:	2301      	movs	r3, #1
 80022f2:	ca06      	ldmia	r2, {r1, r2}
 80022f4:	4825      	ldr	r0, [pc, #148]	; (800238c <main+0x61c>)
 80022f6:	f000 feff 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 80022fa:	f000 fdf9 	bl	8002ef0 <ssd1306_UpdateScreen>
					break;
 80022fe:	e09f      	b.n	8002440 <main+0x6d0>
					if (!has_cleaned_var) {
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <main+0x610>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f083 0301 	eor.w	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d011      	beq.n	8002332 <main+0x5c2>
						memset(temperature_str, 0, sizeof(temperature_str));
 800230e:	2264      	movs	r2, #100	; 0x64
 8002310:	2100      	movs	r1, #0
 8002312:	481c      	ldr	r0, [pc, #112]	; (8002384 <main+0x614>)
 8002314:	f004 f9fe 	bl	8006714 <memset>
						memset(pressure_str, 0, sizeof(pressure_str));
 8002318:	2264      	movs	r2, #100	; 0x64
 800231a:	2100      	movs	r1, #0
 800231c:	481a      	ldr	r0, [pc, #104]	; (8002388 <main+0x618>)
 800231e:	f004 f9f9 	bl	8006714 <memset>
						memset(altitude_str, 0, sizeof(altitude_str));
 8002322:	2264      	movs	r2, #100	; 0x64
 8002324:	2100      	movs	r1, #0
 8002326:	4819      	ldr	r0, [pc, #100]	; (800238c <main+0x61c>)
 8002328:	f004 f9f4 	bl	8006714 <memset>
						has_cleaned_var = true;
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <main+0x610>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
							(altitude * (float) 39.37));
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <main+0x640>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80023bc <main+0x64c>
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
					size_alt = sprintf(altitude_str, "Alt.: %.2f in",
 8002340:	ee17 0a90 	vmov	r0, s15
 8002344:	f7fe f900 	bl	8000548 <__aeabi_f2d>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	491c      	ldr	r1, [pc, #112]	; (80023c0 <main+0x650>)
 800234e:	480f      	ldr	r0, [pc, #60]	; (800238c <main+0x61c>)
 8002350:	f005 f868 	bl	8007424 <siprintf>
 8002354:	4603      	mov	r3, r0
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <main+0x648>)
 800235a:	801a      	strh	r2, [r3, #0]
					ssd1306_Fill(Black);
 800235c:	2000      	movs	r0, #0
 800235e:	f000 fda3 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_SetCursor(X_Orig, W1);
 8002362:	2115      	movs	r1, #21
 8002364:	2000      	movs	r0, #0
 8002366:	f000 feed 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString(altitude_str, Font_7x10, White);
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <main+0x62c>)
 800236c:	2301      	movs	r3, #1
 800236e:	ca06      	ldmia	r2, {r1, r2}
 8002370:	4806      	ldr	r0, [pc, #24]	; (800238c <main+0x61c>)
 8002372:	f000 fec1 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002376:	f000 fdbb 	bl	8002ef0 <ssd1306_UpdateScreen>
					break;
 800237a:	e061      	b.n	8002440 <main+0x6d0>
 800237c:	20000569 	.word	0x20000569
 8002380:	2000056c 	.word	0x2000056c
 8002384:	2000043c 	.word	0x2000043c
 8002388:	200003d8 	.word	0x200003d8
 800238c:	200004a0 	.word	0x200004a0
 8002390:	200003c8 	.word	0x200003c8
 8002394:	0800be4c 	.word	0x0800be4c
 8002398:	20000570 	.word	0x20000570
 800239c:	20000038 	.word	0x20000038
 80023a0:	47c5e680 	.word	0x47c5e680
 80023a4:	0800be5c 	.word	0x0800be5c
 80023a8:	43050000 	.word	0x43050000
 80023ac:	0800be6c 	.word	0x0800be6c
 80023b0:	200003d4 	.word	0x200003d4
 80023b4:	0800be80 	.word	0x0800be80
 80023b8:	20000572 	.word	0x20000572
 80023bc:	421d7ae1 	.word	0x421d7ae1
 80023c0:	0800be90 	.word	0x0800be90
					if (!has_cleaned_var) {
 80023c4:	4bc0      	ldr	r3, [pc, #768]	; (80026c8 <main+0x958>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d011      	beq.n	80023f6 <main+0x686>
						memset(temperature_str, 0, sizeof(temperature_str));
 80023d2:	2264      	movs	r2, #100	; 0x64
 80023d4:	2100      	movs	r1, #0
 80023d6:	48bd      	ldr	r0, [pc, #756]	; (80026cc <main+0x95c>)
 80023d8:	f004 f99c 	bl	8006714 <memset>
						memset(pressure_str, 0, sizeof(pressure_str));
 80023dc:	2264      	movs	r2, #100	; 0x64
 80023de:	2100      	movs	r1, #0
 80023e0:	48bb      	ldr	r0, [pc, #748]	; (80026d0 <main+0x960>)
 80023e2:	f004 f997 	bl	8006714 <memset>
						memset(altitude_str, 0, sizeof(altitude_str));
 80023e6:	2264      	movs	r2, #100	; 0x64
 80023e8:	2100      	movs	r1, #0
 80023ea:	48ba      	ldr	r0, [pc, #744]	; (80026d4 <main+0x964>)
 80023ec:	f004 f992 	bl	8006714 <memset>
						has_cleaned_var = true;
 80023f0:	4bb5      	ldr	r3, [pc, #724]	; (80026c8 <main+0x958>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
							(altitude * (float) 3.281));
 80023f6:	4bb8      	ldr	r3, [pc, #736]	; (80026d8 <main+0x968>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80026dc <main+0x96c>
 8002400:	ee67 7a87 	vmul.f32	s15, s15, s14
					size_alt = sprintf(altitude_str, "Alt.: %.2f ft",
 8002404:	ee17 0a90 	vmov	r0, s15
 8002408:	f7fe f89e 	bl	8000548 <__aeabi_f2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	49b3      	ldr	r1, [pc, #716]	; (80026e0 <main+0x970>)
 8002412:	48b0      	ldr	r0, [pc, #704]	; (80026d4 <main+0x964>)
 8002414:	f005 f806 	bl	8007424 <siprintf>
 8002418:	4603      	mov	r3, r0
 800241a:	b29a      	uxth	r2, r3
 800241c:	4bb1      	ldr	r3, [pc, #708]	; (80026e4 <main+0x974>)
 800241e:	801a      	strh	r2, [r3, #0]
					ssd1306_Fill(Black);
 8002420:	2000      	movs	r0, #0
 8002422:	f000 fd41 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_SetCursor(X_Orig, W1);
 8002426:	2115      	movs	r1, #21
 8002428:	2000      	movs	r0, #0
 800242a:	f000 fe8b 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString(altitude_str, Font_7x10, White);
 800242e:	4aae      	ldr	r2, [pc, #696]	; (80026e8 <main+0x978>)
 8002430:	2301      	movs	r3, #1
 8002432:	ca06      	ldmia	r2, {r1, r2}
 8002434:	48a7      	ldr	r0, [pc, #668]	; (80026d4 <main+0x964>)
 8002436:	f000 fe5f 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 800243a:	f000 fd59 	bl	8002ef0 <ssd1306_UpdateScreen>
					break;
 800243e:	bf00      	nop
				break;
 8002440:	e005      	b.n	800244e <main+0x6de>
			}
		}
 8002442:	bf00      	nop
 8002444:	e004      	b.n	8002450 <main+0x6e0>
				break;
 8002446:	bf00      	nop
 8002448:	e002      	b.n	8002450 <main+0x6e0>
				break;
 800244a:	bf00      	nop
 800244c:	e000      	b.n	8002450 <main+0x6e0>
				break;
 800244e:	bf00      	nop

		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) // Botão do joystick (pull-up in SW)
 8002450:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002454:	48a5      	ldr	r0, [pc, #660]	; (80026ec <main+0x97c>)
 8002456:	f002 fcd5 	bl	8004e04 <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d11b      	bne.n	8002498 <main+0x728>
				{
			HAL_GPIO_WritePin(xmin_GPIO_Port, xmin_Pin, GPIO_PIN_RESET);
 8002460:	2200      	movs	r2, #0
 8002462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002466:	48a1      	ldr	r0, [pc, #644]	; (80026ec <main+0x97c>)
 8002468:	f002 fce4 	bl	8004e34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(xmax_GPIO_Port, xmax_Pin, GPIO_PIN_RESET);
 800246c:	2200      	movs	r2, #0
 800246e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002472:	489e      	ldr	r0, [pc, #632]	; (80026ec <main+0x97c>)
 8002474:	f002 fcde 	bl	8004e34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ymin_GPIO_Port, ymin_Pin, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800247e:	489b      	ldr	r0, [pc, #620]	; (80026ec <main+0x97c>)
 8002480:	f002 fcd8 	bl	8004e34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ymax_GPIO_Port, ymax_Pin, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800248a:	4898      	ldr	r0, [pc, #608]	; (80026ec <main+0x97c>)
 800248c:	f002 fcd2 	bl	8004e34 <HAL_GPIO_WritePin>

			one_click = true;
 8002490:	4b97      	ldr	r3, [pc, #604]	; (80026f0 <main+0x980>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e14e      	b.n	8002736 <main+0x9c6>
		}

		else {
			// do nothing
			HAL_GPIO_WritePin(xmin_GPIO_Port, xmin_Pin, GPIO_PIN_SET);
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800249e:	4893      	ldr	r0, [pc, #588]	; (80026ec <main+0x97c>)
 80024a0:	f002 fcc8 	bl	8004e34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(xmax_GPIO_Port, xmax_Pin, GPIO_PIN_SET);
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024aa:	4890      	ldr	r0, [pc, #576]	; (80026ec <main+0x97c>)
 80024ac:	f002 fcc2 	bl	8004e34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ymin_GPIO_Port, ymin_Pin, GPIO_PIN_SET);
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024b6:	488d      	ldr	r0, [pc, #564]	; (80026ec <main+0x97c>)
 80024b8:	f002 fcbc 	bl	8004e34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ymax_GPIO_Port, ymax_Pin, GPIO_PIN_SET);
 80024bc:	2201      	movs	r2, #1
 80024be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024c2:	488a      	ldr	r0, [pc, #552]	; (80026ec <main+0x97c>)
 80024c4:	f002 fcb6 	bl	8004e34 <HAL_GPIO_WritePin>

			if (one_click) {
 80024c8:	4b89      	ldr	r3, [pc, #548]	; (80026f0 <main+0x980>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00f      	beq.n	80024f0 <main+0x780>
				on_off++;
 80024d0:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <main+0x984>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	3301      	adds	r3, #1
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b86      	ldr	r3, [pc, #536]	; (80026f4 <main+0x984>)
 80024da:	701a      	strb	r2, [r3, #0]
				if (on_off > 3) {
 80024dc:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <main+0x984>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d902      	bls.n	80024ea <main+0x77a>
					on_off = 0;
 80024e4:	4b83      	ldr	r3, [pc, #524]	; (80026f4 <main+0x984>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
				}

				one_click = false;
 80024ea:	4b81      	ldr	r3, [pc, #516]	; (80026f0 <main+0x980>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
			}

			switch (on_off) {
 80024f0:	4b80      	ldr	r3, [pc, #512]	; (80026f4 <main+0x984>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	f200 811e 	bhi.w	8002736 <main+0x9c6>
 80024fa:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <main+0x790>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	08002511 	.word	0x08002511
 8002504:	08002519 	.word	0x08002519
 8002508:	080025df 	.word	0x080025df
 800250c:	0800268f 	.word	0x0800268f
			case 0:
				started_temp_menu = true;
 8002510:	4b79      	ldr	r3, [pc, #484]	; (80026f8 <main+0x988>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
				break;
 8002516:	e10e      	b.n	8002736 <main+0x9c6>

			case 1: // Liga o display
				if (started_temp_menu) {
 8002518:	4b77      	ldr	r3, [pc, #476]	; (80026f8 <main+0x988>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8109 	beq.w	8002734 <main+0x9c4>
					// Tela inicialização do display com o endereço I2C ************************************
					ssd1306_Fill(Black);
 8002522:	2000      	movs	r0, #0
 8002524:	f000 fcc0 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_SetCursor(X_Orig + X_Offset, W1);
 8002528:	2115      	movs	r1, #21
 800252a:	2004      	movs	r0, #4
 800252c:	f000 fe0a 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString("Welcome, user!", Font_7x10, White);
 8002530:	4a6d      	ldr	r2, [pc, #436]	; (80026e8 <main+0x978>)
 8002532:	2301      	movs	r3, #1
 8002534:	ca06      	ldmia	r2, {r1, r2}
 8002536:	4871      	ldr	r0, [pc, #452]	; (80026fc <main+0x98c>)
 8002538:	f000 fdde 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_SetCursor(X_Orig + X_Offset, W2);
 800253c:	2121      	movs	r1, #33	; 0x21
 800253e:	2004      	movs	r0, #4
 8002540:	f000 fe00 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString("Micro II - UEL.", Font_7x10, White);
 8002544:	4a68      	ldr	r2, [pc, #416]	; (80026e8 <main+0x978>)
 8002546:	2301      	movs	r3, #1
 8002548:	ca06      	ldmia	r2, {r1, r2}
 800254a:	486d      	ldr	r0, [pc, #436]	; (8002700 <main+0x990>)
 800254c:	f000 fdd4 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8002550:	2301      	movs	r3, #1
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	233f      	movs	r3, #63	; 0x3f
 8002556:	227f      	movs	r2, #127	; 0x7f
 8002558:	2101      	movs	r1, #1
 800255a:	2001      	movs	r0, #1
 800255c:	f000 fe76 	bl	800324c <ssd1306_DrawRectangle>
					ssd1306_UpdateScreen();
 8002560:	f000 fcc6 	bl	8002ef0 <ssd1306_UpdateScreen>
					HAL_Delay(2000);
 8002564:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002568:	f001 f9f8 	bl	800395c <HAL_Delay>
					ssd1306_Fill(Black);
 800256c:	2000      	movs	r0, #0
 800256e:	f000 fc9b 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8002572:	f000 fcbd 	bl	8002ef0 <ssd1306_UpdateScreen>

					ssd1306_SetCursor(X_Orig + X_Offset, W1);
 8002576:	2115      	movs	r1, #21
 8002578:	2004      	movs	r0, #4
 800257a:	f000 fde3 	bl	8003144 <ssd1306_SetCursor>
					ssd1306_WriteString("BMP280 Interface.", Font_7x10, White);
 800257e:	4a5a      	ldr	r2, [pc, #360]	; (80026e8 <main+0x978>)
 8002580:	2301      	movs	r3, #1
 8002582:	ca06      	ldmia	r2, {r1, r2}
 8002584:	485f      	ldr	r0, [pc, #380]	; (8002704 <main+0x994>)
 8002586:	f000 fdb7 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_SetCursor(X_Orig + X_Offset, W2);
 800258a:	2121      	movs	r1, #33	; 0x21
 800258c:	2004      	movs	r0, #4
 800258e:	f000 fdd9 	bl	8003144 <ssd1306_SetCursor>
					size_address = sprintf(address_str, "ADDRESS: 0x%02X.",
							bmp280.addr);
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <main+0x998>)
 8002594:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
					size_address = sprintf(address_str, "ADDRESS: 0x%02X.",
 8002596:	461a      	mov	r2, r3
 8002598:	495c      	ldr	r1, [pc, #368]	; (800270c <main+0x99c>)
 800259a:	485d      	ldr	r0, [pc, #372]	; (8002710 <main+0x9a0>)
 800259c:	f004 ff42 	bl	8007424 <siprintf>
 80025a0:	4603      	mov	r3, r0
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <main+0x9a4>)
 80025a6:	801a      	strh	r2, [r3, #0]
					ssd1306_WriteString(address_str, Font_7x10, White);
 80025a8:	4a4f      	ldr	r2, [pc, #316]	; (80026e8 <main+0x978>)
 80025aa:	2301      	movs	r3, #1
 80025ac:	ca06      	ldmia	r2, {r1, r2}
 80025ae:	4858      	ldr	r0, [pc, #352]	; (8002710 <main+0x9a0>)
 80025b0:	f000 fda2 	bl	80030f8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 80025b4:	f000 fc9c 	bl	8002ef0 <ssd1306_UpdateScreen>
					HAL_Delay(2000);
 80025b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025bc:	f001 f9ce 	bl	800395c <HAL_Delay>
					ssd1306_Fill(Black);
 80025c0:	2000      	movs	r0, #0
 80025c2:	f000 fc71 	bl	8002ea8 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 80025c6:	f000 fc93 	bl	8002ef0 <ssd1306_UpdateScreen>

					menu_vertical = 1;
 80025ca:	4b53      	ldr	r3, [pc, #332]	; (8002718 <main+0x9a8>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
					menu_horizontal = 1;
 80025d0:	4b52      	ldr	r3, [pc, #328]	; (800271c <main+0x9ac>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
					started_temp_menu = false;
 80025d6:	4b48      	ldr	r3, [pc, #288]	; (80026f8 <main+0x988>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
				}

				break;
 80025dc:	e0aa      	b.n	8002734 <main+0x9c4>

			case 2: // Teste completo do display (dá pra colocar uma animação/imagem própria, usando o drawbitmap)
				// Animação aleatória
				ssd1306_Fill(Black);
 80025de:	2000      	movs	r0, #0
 80025e0:	f000 fc62 	bl	8002ea8 <ssd1306_Fill>
				ssd1306_DrawBitmap(0, 0, imag1, 128, 64, White);
 80025e4:	2301      	movs	r3, #1
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	2340      	movs	r3, #64	; 0x40
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <main+0x9b0>)
 80025f0:	2100      	movs	r1, #0
 80025f2:	2000      	movs	r0, #0
 80025f4:	f000 fe61 	bl	80032ba <ssd1306_DrawBitmap>
				ssd1306_UpdateScreen();
 80025f8:	f000 fc7a 	bl	8002ef0 <ssd1306_UpdateScreen>
				HAL_Delay(2000);
 80025fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002600:	f001 f9ac 	bl	800395c <HAL_Delay>
				ssd1306_Fill(Black);
 8002604:	2000      	movs	r0, #0
 8002606:	f000 fc4f 	bl	8002ea8 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 800260a:	f000 fc71 	bl	8002ef0 <ssd1306_UpdateScreen>

				ssd1306_DrawBitmap(0, 0, imag2, 128, 64, White);
 800260e:	2301      	movs	r3, #1
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2340      	movs	r3, #64	; 0x40
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	4a42      	ldr	r2, [pc, #264]	; (8002724 <main+0x9b4>)
 800261a:	2100      	movs	r1, #0
 800261c:	2000      	movs	r0, #0
 800261e:	f000 fe4c 	bl	80032ba <ssd1306_DrawBitmap>
				ssd1306_UpdateScreen();
 8002622:	f000 fc65 	bl	8002ef0 <ssd1306_UpdateScreen>
				HAL_Delay(2000);
 8002626:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800262a:	f001 f997 	bl	800395c <HAL_Delay>
				ssd1306_Fill(Black);
 800262e:	2000      	movs	r0, #0
 8002630:	f000 fc3a 	bl	8002ea8 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8002634:	f000 fc5c 	bl	8002ef0 <ssd1306_UpdateScreen>

				ssd1306_DrawBitmap(0, 0, imag3, 128, 64, White);
 8002638:	2301      	movs	r3, #1
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	2340      	movs	r3, #64	; 0x40
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	4a39      	ldr	r2, [pc, #228]	; (8002728 <main+0x9b8>)
 8002644:	2100      	movs	r1, #0
 8002646:	2000      	movs	r0, #0
 8002648:	f000 fe37 	bl	80032ba <ssd1306_DrawBitmap>
				ssd1306_UpdateScreen();
 800264c:	f000 fc50 	bl	8002ef0 <ssd1306_UpdateScreen>
				HAL_Delay(2000);
 8002650:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002654:	f001 f982 	bl	800395c <HAL_Delay>
				ssd1306_Fill(Black);
 8002658:	2000      	movs	r0, #0
 800265a:	f000 fc25 	bl	8002ea8 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 800265e:	f000 fc47 	bl	8002ef0 <ssd1306_UpdateScreen>

				ssd1306_DrawBitmap(0, 0, imag4, 128, 64, White);
 8002662:	2301      	movs	r3, #1
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	2340      	movs	r3, #64	; 0x40
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	4a2f      	ldr	r2, [pc, #188]	; (800272c <main+0x9bc>)
 800266e:	2100      	movs	r1, #0
 8002670:	2000      	movs	r0, #0
 8002672:	f000 fe22 	bl	80032ba <ssd1306_DrawBitmap>
				ssd1306_UpdateScreen();
 8002676:	f000 fc3b 	bl	8002ef0 <ssd1306_UpdateScreen>
				HAL_Delay(2000);
 800267a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800267e:	f001 f96d 	bl	800395c <HAL_Delay>
				ssd1306_Fill(Black);
 8002682:	2000      	movs	r0, #0
 8002684:	f000 fc10 	bl	8002ea8 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8002688:	f000 fc32 	bl	8002ef0 <ssd1306_UpdateScreen>
				break;
 800268c:	e053      	b.n	8002736 <main+0x9c6>

			case 3: // Desliga o display
				ssd1306_Fill(Black);
 800268e:	2000      	movs	r0, #0
 8002690:	f000 fc0a 	bl	8002ea8 <ssd1306_Fill>
				ssd1306_SetCursor(X_Orig, 22);
 8002694:	2116      	movs	r1, #22
 8002696:	2000      	movs	r0, #0
 8002698:	f000 fd54 	bl	8003144 <ssd1306_SetCursor>
				ssd1306_WriteString("See you, user!", Font_7x10, White);
 800269c:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <main+0x978>)
 800269e:	2301      	movs	r3, #1
 80026a0:	ca06      	ldmia	r2, {r1, r2}
 80026a2:	4823      	ldr	r0, [pc, #140]	; (8002730 <main+0x9c0>)
 80026a4:	f000 fd28 	bl	80030f8 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80026a8:	f000 fc22 	bl	8002ef0 <ssd1306_UpdateScreen>
				HAL_Delay(2000);
 80026ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026b0:	f001 f954 	bl	800395c <HAL_Delay>
				ssd1306_Fill(Black);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f000 fbf7 	bl	8002ea8 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80026ba:	f000 fc19 	bl	8002ef0 <ssd1306_UpdateScreen>
				on_off = 0;
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <main+0x984>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
				break;
 80026c4:	e037      	b.n	8002736 <main+0x9c6>
 80026c6:	bf00      	nop
 80026c8:	2000056c 	.word	0x2000056c
 80026cc:	2000043c 	.word	0x2000043c
 80026d0:	200003d8 	.word	0x200003d8
 80026d4:	200004a0 	.word	0x200004a0
 80026d8:	200003d4 	.word	0x200003d4
 80026dc:	4051fbe7 	.word	0x4051fbe7
 80026e0:	0800bea0 	.word	0x0800bea0
 80026e4:	20000572 	.word	0x20000572
 80026e8:	20000038 	.word	0x20000038
 80026ec:	40020c00 	.word	0x40020c00
 80026f0:	20000036 	.word	0x20000036
 80026f4:	2000056a 	.word	0x2000056a
 80026f8:	20000037 	.word	0x20000037
 80026fc:	0800beb0 	.word	0x0800beb0
 8002700:	0800bec0 	.word	0x0800bec0
 8002704:	0800bed0 	.word	0x0800bed0
 8002708:	20000394 	.word	0x20000394
 800270c:	0800bee4 	.word	0x0800bee4
 8002710:	20000504 	.word	0x20000504
 8002714:	20000574 	.word	0x20000574
 8002718:	20000568 	.word	0x20000568
 800271c:	20000569 	.word	0x20000569
 8002720:	0800bf08 	.word	0x0800bf08
 8002724:	0800c308 	.word	0x0800c308
 8002728:	0800c708 	.word	0x0800c708
 800272c:	0800cb08 	.word	0x0800cb08
 8002730:	0800bef8 	.word	0x0800bef8
				break;
 8002734:	bf00      	nop
		// Esquerda: VR[0] < 10 | 2900 < VR [1] < 3000
		// Cima: 2900 < VR [0] < 3000 |  VR [1] < 10
		// Direita: VR[0] > 3000 | 2900 < VR [1] < 3000
		// Baixo: 2900 < VR [0] < 3000 | VR[1] > 3000

		if (on_off) {
 8002736:	4bad      	ldr	r3, [pc, #692]	; (80029ec <main+0xc7c>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f43f abad 	beq.w	8001e9a <main+0x12a>
			if (VR[0] < 20 && 2800 < VR[1] && VR[1] < 3210) // Esquerda
 8002740:	4bab      	ldr	r3, [pc, #684]	; (80029f0 <main+0xc80>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b13      	cmp	r3, #19
 8002746:	d83a      	bhi.n	80027be <main+0xa4e>
 8002748:	4ba9      	ldr	r3, [pc, #676]	; (80029f0 <main+0xc80>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002750:	d935      	bls.n	80027be <main+0xa4e>
 8002752:	4ba7      	ldr	r3, [pc, #668]	; (80029f0 <main+0xc80>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f640 4289 	movw	r2, #3209	; 0xc89
 800275a:	4293      	cmp	r3, r2
 800275c:	d82f      	bhi.n	80027be <main+0xa4e>
					{
				if (has_return_to_middle) {
 800275e:	4ba5      	ldr	r3, [pc, #660]	; (80029f4 <main+0xc84>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <main+0xa1c>
					menu_horizontal--;
 8002766:	4ba4      	ldr	r3, [pc, #656]	; (80029f8 <main+0xc88>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3b01      	subs	r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4ba2      	ldr	r3, [pc, #648]	; (80029f8 <main+0xc88>)
 8002770:	701a      	strb	r2, [r3, #0]
					if (menu_horizontal < 1) {
 8002772:	4ba1      	ldr	r3, [pc, #644]	; (80029f8 <main+0xc88>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <main+0xa10>
						menu_horizontal = 3;
 800277a:	4b9f      	ldr	r3, [pc, #636]	; (80029f8 <main+0xc88>)
 800277c:	2203      	movs	r2, #3
 800277e:	701a      	strb	r2, [r3, #0]
					}

					has_return_to_middle = false;
 8002780:	4b9c      	ldr	r3, [pc, #624]	; (80029f4 <main+0xc84>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
					has_cleaned_var = false;
 8002786:	4b9d      	ldr	r3, [pc, #628]	; (80029fc <main+0xc8c>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
				}

				HAL_GPIO_WritePin(xmin_GPIO_Port, xmin_Pin, GPIO_PIN_SET);
 800278c:	2201      	movs	r2, #1
 800278e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002792:	489b      	ldr	r0, [pc, #620]	; (8002a00 <main+0xc90>)
 8002794:	f002 fb4e 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(xmax_GPIO_Port, xmax_Pin, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800279e:	4898      	ldr	r0, [pc, #608]	; (8002a00 <main+0xc90>)
 80027a0:	f002 fb48 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymin_GPIO_Port, ymin_Pin, GPIO_PIN_RESET);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027aa:	4895      	ldr	r0, [pc, #596]	; (8002a00 <main+0xc90>)
 80027ac:	f002 fb42 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymax_GPIO_Port, ymax_Pin, GPIO_PIN_RESET);
 80027b0:	2200      	movs	r2, #0
 80027b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027b6:	4892      	ldr	r0, [pc, #584]	; (8002a00 <main+0xc90>)
 80027b8:	f002 fb3c 	bl	8004e34 <HAL_GPIO_WritePin>
 80027bc:	e113      	b.n	80029e6 <main+0xc76>
			}

			else if (2850 < VR[0] && VR[0] < 3210 && VR[1] < 20) // Cima
 80027be:	4b8c      	ldr	r3, [pc, #560]	; (80029f0 <main+0xc80>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f640 3222 	movw	r2, #2850	; 0xb22
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d93c      	bls.n	8002844 <main+0xad4>
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <main+0xc80>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f640 4289 	movw	r2, #3209	; 0xc89
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d836      	bhi.n	8002844 <main+0xad4>
 80027d6:	4b86      	ldr	r3, [pc, #536]	; (80029f0 <main+0xc80>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b13      	cmp	r3, #19
 80027dc:	d832      	bhi.n	8002844 <main+0xad4>
					{
				if (has_return_to_middle) {
 80027de:	4b85      	ldr	r3, [pc, #532]	; (80029f4 <main+0xc84>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <main+0xaa2>
					menu_vertical++;
 80027e6:	4b87      	ldr	r3, [pc, #540]	; (8002a04 <main+0xc94>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4b85      	ldr	r3, [pc, #532]	; (8002a04 <main+0xc94>)
 80027f0:	701a      	strb	r2, [r3, #0]
					menu_horizontal = 1; // vai p/ default
 80027f2:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <main+0xc88>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
					if (menu_vertical > 3) {
 80027f8:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <main+0xc94>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d902      	bls.n	8002806 <main+0xa96>
						menu_vertical = 1;
 8002800:	4b80      	ldr	r3, [pc, #512]	; (8002a04 <main+0xc94>)
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
					}

					has_return_to_middle = false;
 8002806:	4b7b      	ldr	r3, [pc, #492]	; (80029f4 <main+0xc84>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
					has_cleaned_var = false;
 800280c:	4b7b      	ldr	r3, [pc, #492]	; (80029fc <main+0xc8c>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
				}

				HAL_GPIO_WritePin(xmin_GPIO_Port, xmin_Pin, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002818:	4879      	ldr	r0, [pc, #484]	; (8002a00 <main+0xc90>)
 800281a:	f002 fb0b 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(xmax_GPIO_Port, xmax_Pin, GPIO_PIN_RESET);
 800281e:	2200      	movs	r2, #0
 8002820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002824:	4876      	ldr	r0, [pc, #472]	; (8002a00 <main+0xc90>)
 8002826:	f002 fb05 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymin_GPIO_Port, ymin_Pin, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002830:	4873      	ldr	r0, [pc, #460]	; (8002a00 <main+0xc90>)
 8002832:	f002 faff 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymax_GPIO_Port, ymax_Pin, GPIO_PIN_SET);
 8002836:	2201      	movs	r2, #1
 8002838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800283c:	4870      	ldr	r0, [pc, #448]	; (8002a00 <main+0xc90>)
 800283e:	f002 faf9 	bl	8004e34 <HAL_GPIO_WritePin>
 8002842:	e0d0      	b.n	80029e6 <main+0xc76>
			}

			else if (VR[0] > 3125 && 2800 < VR[1] && VR[1] < 3210) // Direita
 8002844:	4b6a      	ldr	r3, [pc, #424]	; (80029f0 <main+0xc80>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f640 4235 	movw	r2, #3125	; 0xc35
 800284c:	4293      	cmp	r3, r2
 800284e:	d93a      	bls.n	80028c6 <main+0xb56>
 8002850:	4b67      	ldr	r3, [pc, #412]	; (80029f0 <main+0xc80>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002858:	d935      	bls.n	80028c6 <main+0xb56>
 800285a:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <main+0xc80>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f640 4289 	movw	r2, #3209	; 0xc89
 8002862:	4293      	cmp	r3, r2
 8002864:	d82f      	bhi.n	80028c6 <main+0xb56>
					{
				if (has_return_to_middle) {
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <main+0xc84>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d012      	beq.n	8002894 <main+0xb24>
					menu_horizontal++;
 800286e:	4b62      	ldr	r3, [pc, #392]	; (80029f8 <main+0xc88>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4b60      	ldr	r3, [pc, #384]	; (80029f8 <main+0xc88>)
 8002878:	701a      	strb	r2, [r3, #0]
					if (menu_horizontal > 3) {
 800287a:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <main+0xc88>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d902      	bls.n	8002888 <main+0xb18>
						menu_horizontal = 1;
 8002882:	4b5d      	ldr	r3, [pc, #372]	; (80029f8 <main+0xc88>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
					}

					has_return_to_middle = false;
 8002888:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <main+0xc84>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
					has_cleaned_var = false;
 800288e:	4b5b      	ldr	r3, [pc, #364]	; (80029fc <main+0xc8c>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
				}

				HAL_GPIO_WritePin(xmin_GPIO_Port, xmin_Pin, GPIO_PIN_RESET);
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800289a:	4859      	ldr	r0, [pc, #356]	; (8002a00 <main+0xc90>)
 800289c:	f002 faca 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(xmax_GPIO_Port, xmax_Pin, GPIO_PIN_SET);
 80028a0:	2201      	movs	r2, #1
 80028a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028a6:	4856      	ldr	r0, [pc, #344]	; (8002a00 <main+0xc90>)
 80028a8:	f002 fac4 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymin_GPIO_Port, ymin_Pin, GPIO_PIN_RESET);
 80028ac:	2200      	movs	r2, #0
 80028ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b2:	4853      	ldr	r0, [pc, #332]	; (8002a00 <main+0xc90>)
 80028b4:	f002 fabe 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymax_GPIO_Port, ymax_Pin, GPIO_PIN_RESET);
 80028b8:	2200      	movs	r2, #0
 80028ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028be:	4850      	ldr	r0, [pc, #320]	; (8002a00 <main+0xc90>)
 80028c0:	f002 fab8 	bl	8004e34 <HAL_GPIO_WritePin>
 80028c4:	e08f      	b.n	80029e6 <main+0xc76>
			}

			else if (2800 < VR[0] && VR[0] < 3210 && VR[1] > 3100) // Baixo
 80028c6:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <main+0xc80>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80028ce:	d93e      	bls.n	800294e <main+0xbde>
 80028d0:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <main+0xc80>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f640 4289 	movw	r2, #3209	; 0xc89
 80028d8:	4293      	cmp	r3, r2
 80028da:	d838      	bhi.n	800294e <main+0xbde>
 80028dc:	4b44      	ldr	r3, [pc, #272]	; (80029f0 <main+0xc80>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f640 421c 	movw	r2, #3100	; 0xc1c
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d932      	bls.n	800294e <main+0xbde>
					{
				if (has_return_to_middle) {
 80028e8:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <main+0xc84>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <main+0xbac>
					menu_vertical--;
 80028f0:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <main+0xc94>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <main+0xc94>)
 80028fa:	701a      	strb	r2, [r3, #0]
					menu_horizontal = 1; // vai p/ default
 80028fc:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <main+0xc88>)
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
					if (menu_vertical < 1) {
 8002902:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <main+0xc94>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d102      	bne.n	8002910 <main+0xba0>
						menu_vertical = 3;
 800290a:	4b3e      	ldr	r3, [pc, #248]	; (8002a04 <main+0xc94>)
 800290c:	2203      	movs	r2, #3
 800290e:	701a      	strb	r2, [r3, #0]
					}

					has_return_to_middle = false;
 8002910:	4b38      	ldr	r3, [pc, #224]	; (80029f4 <main+0xc84>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
					has_cleaned_var = false;
 8002916:	4b39      	ldr	r3, [pc, #228]	; (80029fc <main+0xc8c>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
				}

				HAL_GPIO_WritePin(xmin_GPIO_Port, xmin_Pin, GPIO_PIN_RESET);
 800291c:	2200      	movs	r2, #0
 800291e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002922:	4837      	ldr	r0, [pc, #220]	; (8002a00 <main+0xc90>)
 8002924:	f002 fa86 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(xmax_GPIO_Port, xmax_Pin, GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800292e:	4834      	ldr	r0, [pc, #208]	; (8002a00 <main+0xc90>)
 8002930:	f002 fa80 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymin_GPIO_Port, ymin_Pin, GPIO_PIN_SET);
 8002934:	2201      	movs	r2, #1
 8002936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293a:	4831      	ldr	r0, [pc, #196]	; (8002a00 <main+0xc90>)
 800293c:	f002 fa7a 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymax_GPIO_Port, ymax_Pin, GPIO_PIN_RESET);
 8002940:	2200      	movs	r2, #0
 8002942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002946:	482e      	ldr	r0, [pc, #184]	; (8002a00 <main+0xc90>)
 8002948:	f002 fa74 	bl	8004e34 <HAL_GPIO_WritePin>
 800294c:	e04b      	b.n	80029e6 <main+0xc76>
			}

			else if (2950 < VR[0] && VR[0] < 3210 && 2950 < VR[1]
 800294e:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <main+0xc80>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f640 3286 	movw	r2, #2950	; 0xb86
 8002956:	4293      	cmp	r3, r2
 8002958:	d92d      	bls.n	80029b6 <main+0xc46>
 800295a:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <main+0xc80>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f640 4289 	movw	r2, #3209	; 0xc89
 8002962:	4293      	cmp	r3, r2
 8002964:	d827      	bhi.n	80029b6 <main+0xc46>
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <main+0xc80>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f640 3286 	movw	r2, #2950	; 0xb86
 800296e:	4293      	cmp	r3, r2
 8002970:	d921      	bls.n	80029b6 <main+0xc46>
					&& VR[1] < 3075) // Meio
 8002972:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <main+0xc80>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f640 4202 	movw	r2, #3074	; 0xc02
 800297a:	4293      	cmp	r3, r2
 800297c:	d81b      	bhi.n	80029b6 <main+0xc46>
							{
				has_return_to_middle = true;
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <main+0xc84>)
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(xmin_GPIO_Port, xmin_Pin, GPIO_PIN_RESET);
 8002984:	2200      	movs	r2, #0
 8002986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800298a:	481d      	ldr	r0, [pc, #116]	; (8002a00 <main+0xc90>)
 800298c:	f002 fa52 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(xmax_GPIO_Port, xmax_Pin, GPIO_PIN_RESET);
 8002990:	2200      	movs	r2, #0
 8002992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002996:	481a      	ldr	r0, [pc, #104]	; (8002a00 <main+0xc90>)
 8002998:	f002 fa4c 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymin_GPIO_Port, ymin_Pin, GPIO_PIN_RESET);
 800299c:	2200      	movs	r2, #0
 800299e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a2:	4817      	ldr	r0, [pc, #92]	; (8002a00 <main+0xc90>)
 80029a4:	f002 fa46 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymax_GPIO_Port, ymax_Pin, GPIO_PIN_RESET);
 80029a8:	2200      	movs	r2, #0
 80029aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ae:	4814      	ldr	r0, [pc, #80]	; (8002a00 <main+0xc90>)
 80029b0:	f002 fa40 	bl	8004e34 <HAL_GPIO_WritePin>
 80029b4:	e017      	b.n	80029e6 <main+0xc76>
			}

			else {
				// do nothing
				HAL_GPIO_WritePin(xmin_GPIO_Port, xmin_Pin, GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029bc:	4810      	ldr	r0, [pc, #64]	; (8002a00 <main+0xc90>)
 80029be:	f002 fa39 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(xmax_GPIO_Port, xmax_Pin, GPIO_PIN_RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029c8:	480d      	ldr	r0, [pc, #52]	; (8002a00 <main+0xc90>)
 80029ca:	f002 fa33 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymin_GPIO_Port, ymin_Pin, GPIO_PIN_RESET);
 80029ce:	2200      	movs	r2, #0
 80029d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029d4:	480a      	ldr	r0, [pc, #40]	; (8002a00 <main+0xc90>)
 80029d6:	f002 fa2d 	bl	8004e34 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ymax_GPIO_Port, ymax_Pin, GPIO_PIN_RESET);
 80029da:	2200      	movs	r2, #0
 80029dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029e0:	4807      	ldr	r0, [pc, #28]	; (8002a00 <main+0xc90>)
 80029e2:	f002 fa27 	bl	8004e34 <HAL_GPIO_WritePin>
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80029e6:	f7ff ba58 	b.w	8001e9a <main+0x12a>
 80029ea:	bf00      	nop
 80029ec:	2000056a 	.word	0x2000056a
 80029f0:	2000038c 	.word	0x2000038c
 80029f4:	2000056b 	.word	0x2000056b
 80029f8:	20000569 	.word	0x20000569
 80029fc:	2000056c 	.word	0x2000056c
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	20000568 	.word	0x20000568

08002a08 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b094      	sub	sp, #80	; 0x50
 8002a0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002a0e:	f107 0320 	add.w	r3, r7, #32
 8002a12:	2230      	movs	r2, #48	; 0x30
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fe7c 	bl	8006714 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <SystemClock_Config+0xb4>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	4a21      	ldr	r2, [pc, #132]	; (8002abc <SystemClock_Config+0xb4>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <SystemClock_Config+0xb4>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <SystemClock_Config+0xb8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1b      	ldr	r2, [pc, #108]	; (8002ac0 <SystemClock_Config+0xb8>)
 8002a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <SystemClock_Config+0xb8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a6c:	2310      	movs	r3, #16
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002a74:	f107 0320 	add.w	r3, r7, #32
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 f9b5 	bl	8005de8 <HAL_RCC_OscConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <SystemClock_Config+0x80>
		Error_Handler();
 8002a84:	f000 f968 	bl	8002d58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002a88:	230f      	movs	r3, #15
 8002a8a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f003 fc18 	bl	80062d8 <HAL_RCC_ClockConfig>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <SystemClock_Config+0xaa>
		Error_Handler();
 8002aae:	f000 f953 	bl	8002d58 <Error_Handler>
	}
}
 8002ab2:	bf00      	nop
 8002ab4:	3750      	adds	r7, #80	; 0x50
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40007000 	.word	0x40007000

08002ac4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002aca:	463b      	mov	r3, r7
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002ad6:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002ad8:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <MX_ADC1_Init+0xb8>)
 8002ada:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002adc:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ae2:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8002ae8:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002af4:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002afc:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002b04:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <MX_ADC1_Init+0xbc>)
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002b10:	2202      	movs	r2, #2
 8002b12:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002b22:	4815      	ldr	r0, [pc, #84]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002b24:	f000 ff3e 	bl	80039a4 <HAL_ADC_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8002b2e:	f000 f913 	bl	8002d58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002b3a:	2307      	movs	r3, #7
 8002b3c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b3e:	463b      	mov	r3, r7
 8002b40:	4619      	mov	r1, r3
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002b44:	f001 f8a0 	bl	8003c88 <HAL_ADC_ConfigChannel>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8002b4e:	f000 f903 	bl	8002d58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8002b52:	2302      	movs	r3, #2
 8002b54:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8002b56:	2302      	movs	r3, #2
 8002b58:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b5a:	463b      	mov	r3, r7
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4806      	ldr	r0, [pc, #24]	; (8002b78 <MX_ADC1_Init+0xb4>)
 8002b60:	f001 f892 	bl	8003c88 <HAL_ADC_ConfigChannel>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_ADC1_Init+0xaa>
		Error_Handler();
 8002b6a:	f000 f8f5 	bl	8002d58 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000023c 	.word	0x2000023c
 8002b7c:	40012000 	.word	0x40012000
 8002b80:	0f000001 	.word	0x0f000001

08002b84 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002b8a:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <MX_I2C1_Init+0x54>)
 8002b8c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002b90:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <MX_I2C1_Init+0x58>)
 8002b92:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ba6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002bc0:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002bc2:	f002 f951 	bl	8004e68 <HAL_I2C_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002bcc:	f000 f8c4 	bl	8002d58 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200002e4 	.word	0x200002e4
 8002bd8:	40005400 	.word	0x40005400
 8002bdc:	00061a80 	.word	0x00061a80

08002be0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <MX_I2C2_Init+0x50>)
 8002be6:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <MX_I2C2_Init+0x54>)
 8002be8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <MX_I2C2_Init+0x50>)
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <MX_I2C2_Init+0x58>)
 8002bee:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <MX_I2C2_Init+0x50>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <MX_I2C2_Init+0x50>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <MX_I2C2_Init+0x50>)
 8002bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c02:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <MX_I2C2_Init+0x50>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <MX_I2C2_Init+0x50>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <MX_I2C2_Init+0x50>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <MX_I2C2_Init+0x50>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002c1c:	4804      	ldr	r0, [pc, #16]	; (8002c30 <MX_I2C2_Init+0x50>)
 8002c1e:	f002 f923 	bl	8004e68 <HAL_I2C_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_I2C2_Init+0x4c>
		Error_Handler();
 8002c28:	f000 f896 	bl	8002d58 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000338 	.word	0x20000338
 8002c34:	40005800 	.word	0x40005800
 8002c38:	00061a80 	.word	0x00061a80

08002c3c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <MX_DMA_Init+0x3c>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <MX_DMA_Init+0x3c>)
 8002c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <MX_DMA_Init+0x3c>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	2038      	movs	r0, #56	; 0x38
 8002c64:	f001 fb8b 	bl	800437e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c68:	2038      	movs	r0, #56	; 0x38
 8002c6a:	f001 fba4 	bl	80043b6 <HAL_NVIC_EnableIRQ>

}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a2d      	ldr	r2, [pc, #180]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a26      	ldr	r2, [pc, #152]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002cf0:	f043 0308 	orr.w	r3, r3, #8
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <MX_GPIO_Init+0xd4>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, xmin_Pin | ymax_Pin | xmax_Pin | ymin_Pin,
 8002d02:	2200      	movs	r2, #0
 8002d04:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002d08:	4812      	ldr	r0, [pc, #72]	; (8002d54 <MX_GPIO_Init+0xd8>)
 8002d0a:	f002 f893 	bl	8004e34 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PD11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4619      	mov	r1, r3
 8002d22:	480c      	ldr	r0, [pc, #48]	; (8002d54 <MX_GPIO_Init+0xd8>)
 8002d24:	f001 fed2 	bl	8004acc <HAL_GPIO_Init>

	/*Configure GPIO pins : xmin_Pin ymax_Pin xmax_Pin ymin_Pin */
	GPIO_InitStruct.Pin = xmin_Pin | ymax_Pin | xmax_Pin | ymin_Pin;
 8002d28:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002d2c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4804      	ldr	r0, [pc, #16]	; (8002d54 <MX_GPIO_Init+0xd8>)
 8002d42:	f001 fec3 	bl	8004acc <HAL_GPIO_Init>

}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40020c00 	.word	0x40020c00

08002d58 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d5c:	b672      	cpsid	i
}
 8002d5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d60:	e7fe      	b.n	8002d60 <Error_Handler+0x8>

08002d62 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af04      	add	r7, sp, #16
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	2301      	movs	r3, #1
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2301      	movs	r3, #1
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2178      	movs	r1, #120	; 0x78
 8002d8e:	4803      	ldr	r0, [pc, #12]	; (8002d9c <ssd1306_WriteCommand+0x2c>)
 8002d90:	f002 f9ae 	bl	80050f0 <HAL_I2C_Mem_Write>
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000338 	.word	0x20000338

08002da0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af04      	add	r7, sp, #16
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f04f 32ff 	mov.w	r2, #4294967295
 8002db2:	9202      	str	r2, [sp, #8]
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2301      	movs	r3, #1
 8002dbc:	2240      	movs	r2, #64	; 0x40
 8002dbe:	2178      	movs	r1, #120	; 0x78
 8002dc0:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <ssd1306_WriteData+0x30>)
 8002dc2:	f002 f995 	bl	80050f0 <HAL_I2C_Mem_Write>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000338 	.word	0x20000338

08002dd4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002dd8:	f7ff ffc3 	bl	8002d62 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002ddc:	2064      	movs	r0, #100	; 0x64
 8002dde:	f000 fdbd 	bl	800395c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002de2:	2000      	movs	r0, #0
 8002de4:	f000 fad8 	bl	8003398 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002de8:	2020      	movs	r0, #32
 8002dea:	f7ff ffc1 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7ff ffbe 	bl	8002d70 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002df4:	20b0      	movs	r0, #176	; 0xb0
 8002df6:	f7ff ffbb 	bl	8002d70 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002dfa:	20c8      	movs	r0, #200	; 0xc8
 8002dfc:	f7ff ffb8 	bl	8002d70 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7ff ffb5 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002e06:	2010      	movs	r0, #16
 8002e08:	f7ff ffb2 	bl	8002d70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002e0c:	2040      	movs	r0, #64	; 0x40
 8002e0e:	f7ff ffaf 	bl	8002d70 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002e12:	20ff      	movs	r0, #255	; 0xff
 8002e14:	f000 faac 	bl	8003370 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002e18:	20a1      	movs	r0, #161	; 0xa1
 8002e1a:	f7ff ffa9 	bl	8002d70 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002e1e:	20a6      	movs	r0, #166	; 0xa6
 8002e20:	f7ff ffa6 	bl	8002d70 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002e24:	20a8      	movs	r0, #168	; 0xa8
 8002e26:	f7ff ffa3 	bl	8002d70 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002e2a:	203f      	movs	r0, #63	; 0x3f
 8002e2c:	f7ff ffa0 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e30:	20a4      	movs	r0, #164	; 0xa4
 8002e32:	f7ff ff9d 	bl	8002d70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002e36:	20d3      	movs	r0, #211	; 0xd3
 8002e38:	f7ff ff9a 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7ff ff97 	bl	8002d70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e42:	20d5      	movs	r0, #213	; 0xd5
 8002e44:	f7ff ff94 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002e48:	20f0      	movs	r0, #240	; 0xf0
 8002e4a:	f7ff ff91 	bl	8002d70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002e4e:	20d9      	movs	r0, #217	; 0xd9
 8002e50:	f7ff ff8e 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002e54:	2022      	movs	r0, #34	; 0x22
 8002e56:	f7ff ff8b 	bl	8002d70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002e5a:	20da      	movs	r0, #218	; 0xda
 8002e5c:	f7ff ff88 	bl	8002d70 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002e60:	2012      	movs	r0, #18
 8002e62:	f7ff ff85 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002e66:	20db      	movs	r0, #219	; 0xdb
 8002e68:	f7ff ff82 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002e6c:	2020      	movs	r0, #32
 8002e6e:	f7ff ff7f 	bl	8002d70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002e72:	208d      	movs	r0, #141	; 0x8d
 8002e74:	f7ff ff7c 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002e78:	2014      	movs	r0, #20
 8002e7a:	f7ff ff79 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f000 fa8a 	bl	8003398 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f000 f80f 	bl	8002ea8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002e8a:	f000 f831 	bl	8002ef0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <ssd1306_Init+0xd0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <ssd1306_Init+0xd0>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002e9a:	4b02      	ldr	r3, [pc, #8]	; (8002ea4 <ssd1306_Init+0xd0>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	711a      	strb	r2, [r3, #4]
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000978 	.word	0x20000978

08002ea8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	e00d      	b.n	8002ed4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <ssd1306_Fill+0x1a>
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	e000      	b.n	8002ec4 <ssd1306_Fill+0x1c>
 8002ec2:	21ff      	movs	r1, #255	; 0xff
 8002ec4:	4a09      	ldr	r2, [pc, #36]	; (8002eec <ssd1306_Fill+0x44>)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	460a      	mov	r2, r1
 8002ecc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d3ed      	bcc.n	8002eb8 <ssd1306_Fill+0x10>
    }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000578 	.word	0x20000578

08002ef0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	71fb      	strb	r3, [r7, #7]
 8002efa:	e016      	b.n	8002f2a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	3b50      	subs	r3, #80	; 0x50
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff34 	bl	8002d70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7ff ff31 	bl	8002d70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002f0e:	2010      	movs	r0, #16
 8002f10:	f7ff ff2e 	bl	8002d70 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	01db      	lsls	r3, r3, #7
 8002f18:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <ssd1306_UpdateScreen+0x4c>)
 8002f1a:	4413      	add	r3, r2
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff3e 	bl	8002da0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	3301      	adds	r3, #1
 8002f28:	71fb      	strb	r3, [r7, #7]
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b07      	cmp	r3, #7
 8002f2e:	d9e5      	bls.n	8002efc <ssd1306_UpdateScreen+0xc>
    }
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000578 	.word	0x20000578

08002f40 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	71bb      	strb	r3, [r7, #6]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db3d      	blt.n	8002fd6 <ssd1306_DrawPixel+0x96>
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	2b3f      	cmp	r3, #63	; 0x3f
 8002f5e:	d83a      	bhi.n	8002fd6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002f60:	797b      	ldrb	r3, [r7, #5]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d11a      	bne.n	8002f9c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f66:	79fa      	ldrb	r2, [r7, #7]
 8002f68:	79bb      	ldrb	r3, [r7, #6]
 8002f6a:	08db      	lsrs	r3, r3, #3
 8002f6c:	b2d8      	uxtb	r0, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	01db      	lsls	r3, r3, #7
 8002f72:	4413      	add	r3, r2
 8002f74:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <ssd1306_DrawPixel+0xa4>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	b25a      	sxtb	r2, r3
 8002f7a:	79bb      	ldrb	r3, [r7, #6]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	2101      	movs	r1, #1
 8002f82:	fa01 f303 	lsl.w	r3, r1, r3
 8002f86:	b25b      	sxtb	r3, r3
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	b259      	sxtb	r1, r3
 8002f8c:	79fa      	ldrb	r2, [r7, #7]
 8002f8e:	4603      	mov	r3, r0
 8002f90:	01db      	lsls	r3, r3, #7
 8002f92:	4413      	add	r3, r2
 8002f94:	b2c9      	uxtb	r1, r1
 8002f96:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <ssd1306_DrawPixel+0xa4>)
 8002f98:	54d1      	strb	r1, [r2, r3]
 8002f9a:	e01d      	b.n	8002fd8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002f9c:	79fa      	ldrb	r2, [r7, #7]
 8002f9e:	79bb      	ldrb	r3, [r7, #6]
 8002fa0:	08db      	lsrs	r3, r3, #3
 8002fa2:	b2d8      	uxtb	r0, r3
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	01db      	lsls	r3, r3, #7
 8002fa8:	4413      	add	r3, r2
 8002faa:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <ssd1306_DrawPixel+0xa4>)
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	b25a      	sxtb	r2, r3
 8002fb0:	79bb      	ldrb	r3, [r7, #6]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b259      	sxtb	r1, r3
 8002fc6:	79fa      	ldrb	r2, [r7, #7]
 8002fc8:	4603      	mov	r3, r0
 8002fca:	01db      	lsls	r3, r3, #7
 8002fcc:	4413      	add	r3, r2
 8002fce:	b2c9      	uxtb	r1, r1
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <ssd1306_DrawPixel+0xa4>)
 8002fd2:	54d1      	strb	r1, [r2, r3]
 8002fd4:	e000      	b.n	8002fd8 <ssd1306_DrawPixel+0x98>
        return;
 8002fd6:	bf00      	nop
    }
}
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000578 	.word	0x20000578

08002fe8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4604      	mov	r4, r0
 8002ff0:	1d38      	adds	r0, r7, #4
 8002ff2:	e880 0006 	stmia.w	r0, {r1, r2}
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4623      	mov	r3, r4
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b1f      	cmp	r3, #31
 8003004:	d902      	bls.n	800300c <ssd1306_WriteChar+0x24>
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b7e      	cmp	r3, #126	; 0x7e
 800300a:	d901      	bls.n	8003010 <ssd1306_WriteChar+0x28>
        return 0;
 800300c:	2300      	movs	r3, #0
 800300e:	e06d      	b.n	80030ec <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003010:	4b38      	ldr	r3, [pc, #224]	; (80030f4 <ssd1306_WriteChar+0x10c>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	793b      	ldrb	r3, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	2b80      	cmp	r3, #128	; 0x80
 800301c:	dc06      	bgt.n	800302c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800301e:	4b35      	ldr	r3, [pc, #212]	; (80030f4 <ssd1306_WriteChar+0x10c>)
 8003020:	885b      	ldrh	r3, [r3, #2]
 8003022:	461a      	mov	r2, r3
 8003024:	797b      	ldrb	r3, [r7, #5]
 8003026:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	dd01      	ble.n	8003030 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800302c:	2300      	movs	r3, #0
 800302e:	e05d      	b.n	80030ec <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	e04c      	b.n	80030d0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	3b20      	subs	r3, #32
 800303c:	7979      	ldrb	r1, [r7, #5]
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4619      	mov	r1, r3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	440b      	add	r3, r1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	e034      	b.n	80030c0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d012      	beq.n	800308c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003066:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <ssd1306_WriteChar+0x10c>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	4413      	add	r3, r2
 8003072:	b2d8      	uxtb	r0, r3
 8003074:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <ssd1306_WriteChar+0x10c>)
 8003076:	885b      	ldrh	r3, [r3, #2]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	4413      	add	r3, r2
 8003080:	b2db      	uxtb	r3, r3
 8003082:	7bba      	ldrb	r2, [r7, #14]
 8003084:	4619      	mov	r1, r3
 8003086:	f7ff ff5b 	bl	8002f40 <ssd1306_DrawPixel>
 800308a:	e016      	b.n	80030ba <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <ssd1306_WriteChar+0x10c>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	4413      	add	r3, r2
 8003098:	b2d8      	uxtb	r0, r3
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <ssd1306_WriteChar+0x10c>)
 800309c:	885b      	ldrh	r3, [r3, #2]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	b2d9      	uxtb	r1, r3
 80030a8:	7bbb      	ldrb	r3, [r7, #14]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	f7ff ff43 	bl	8002f40 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	3301      	adds	r3, #1
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	793b      	ldrb	r3, [r7, #4]
 80030c2:	461a      	mov	r2, r3
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d3c5      	bcc.n	8003056 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	797b      	ldrb	r3, [r7, #5]
 80030d2:	461a      	mov	r2, r3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d3ad      	bcc.n	8003036 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <ssd1306_WriteChar+0x10c>)
 80030dc:	881a      	ldrh	r2, [r3, #0]
 80030de:	793b      	ldrb	r3, [r7, #4]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <ssd1306_WriteChar+0x10c>)
 80030e8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3724      	adds	r7, #36	; 0x24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd90      	pop	{r4, r7, pc}
 80030f4:	20000978 	.word	0x20000978

080030f8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	1d38      	adds	r0, r7, #4
 8003102:	e880 0006 	stmia.w	r0, {r1, r2}
 8003106:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003108:	e012      	b.n	8003130 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	7818      	ldrb	r0, [r3, #0]
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	1d3a      	adds	r2, r7, #4
 8003112:	ca06      	ldmia	r2, {r1, r2}
 8003114:	f7ff ff68 	bl	8002fe8 <ssd1306_WriteChar>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d002      	beq.n	800312a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	e008      	b.n	800313c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3301      	adds	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e8      	bne.n	800310a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	781b      	ldrb	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	460a      	mov	r2, r1
 800314e:	71fb      	strb	r3, [r7, #7]
 8003150:	4613      	mov	r3, r2
 8003152:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	b29a      	uxth	r2, r3
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <ssd1306_SetCursor+0x2c>)
 800315a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800315c:	79bb      	ldrb	r3, [r7, #6]
 800315e:	b29a      	uxth	r2, r3
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <ssd1306_SetCursor+0x2c>)
 8003162:	805a      	strh	r2, [r3, #2]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	20000978 	.word	0x20000978

08003174 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	4604      	mov	r4, r0
 800317c:	4608      	mov	r0, r1
 800317e:	4611      	mov	r1, r2
 8003180:	461a      	mov	r2, r3
 8003182:	4623      	mov	r3, r4
 8003184:	71fb      	strb	r3, [r7, #7]
 8003186:	4603      	mov	r3, r0
 8003188:	71bb      	strb	r3, [r7, #6]
 800318a:	460b      	mov	r3, r1
 800318c:	717b      	strb	r3, [r7, #5]
 800318e:	4613      	mov	r3, r2
 8003190:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8003192:	797a      	ldrb	r2, [r7, #5]
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	bfb8      	it	lt
 800319c:	425b      	neglt	r3, r3
 800319e:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80031a0:	793a      	ldrb	r2, [r7, #4]
 80031a2:	79bb      	ldrb	r3, [r7, #6]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bfb8      	it	lt
 80031aa:	425b      	neglt	r3, r3
 80031ac:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80031ae:	79fa      	ldrb	r2, [r7, #7]
 80031b0:	797b      	ldrb	r3, [r7, #5]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d201      	bcs.n	80031ba <ssd1306_Line+0x46>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e001      	b.n	80031be <ssd1306_Line+0x4a>
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
 80031be:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80031c0:	79ba      	ldrb	r2, [r7, #6]
 80031c2:	793b      	ldrb	r3, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d201      	bcs.n	80031cc <ssd1306_Line+0x58>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e001      	b.n	80031d0 <ssd1306_Line+0x5c>
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80031da:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80031de:	7939      	ldrb	r1, [r7, #4]
 80031e0:	797b      	ldrb	r3, [r7, #5]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff feac 	bl	8002f40 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80031e8:	e024      	b.n	8003234 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80031ea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80031ee:	79b9      	ldrb	r1, [r7, #6]
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fea4 	bl	8002f40 <ssd1306_DrawPixel>
    error2 = error * 2;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	425b      	negs	r3, r3
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	dd08      	ble.n	800321a <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	b2da      	uxtb	r2, r3
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	4413      	add	r3, r2
 8003218:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	429a      	cmp	r2, r3
 8003220:	da08      	bge.n	8003234 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4413      	add	r3, r2
 8003228:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	79bb      	ldrb	r3, [r7, #6]
 8003230:	4413      	add	r3, r2
 8003232:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8003234:	79fa      	ldrb	r2, [r7, #7]
 8003236:	797b      	ldrb	r3, [r7, #5]
 8003238:	429a      	cmp	r2, r3
 800323a:	d1d6      	bne.n	80031ea <ssd1306_Line+0x76>
 800323c:	79ba      	ldrb	r2, [r7, #6]
 800323e:	793b      	ldrb	r3, [r7, #4]
 8003240:	429a      	cmp	r2, r3
 8003242:	d1d2      	bne.n	80031ea <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8003244:	bf00      	nop
}
 8003246:	3724      	adds	r7, #36	; 0x24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}

0800324c <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b085      	sub	sp, #20
 8003250:	af02      	add	r7, sp, #8
 8003252:	4604      	mov	r4, r0
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4623      	mov	r3, r4
 800325c:	71fb      	strb	r3, [r7, #7]
 800325e:	4603      	mov	r3, r0
 8003260:	71bb      	strb	r3, [r7, #6]
 8003262:	460b      	mov	r3, r1
 8003264:	717b      	strb	r3, [r7, #5]
 8003266:	4613      	mov	r3, r2
 8003268:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800326a:	79bc      	ldrb	r4, [r7, #6]
 800326c:	797a      	ldrb	r2, [r7, #5]
 800326e:	79b9      	ldrb	r1, [r7, #6]
 8003270:	79f8      	ldrb	r0, [r7, #7]
 8003272:	7e3b      	ldrb	r3, [r7, #24]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	4623      	mov	r3, r4
 8003278:	f7ff ff7c 	bl	8003174 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 800327c:	793c      	ldrb	r4, [r7, #4]
 800327e:	797a      	ldrb	r2, [r7, #5]
 8003280:	79b9      	ldrb	r1, [r7, #6]
 8003282:	7978      	ldrb	r0, [r7, #5]
 8003284:	7e3b      	ldrb	r3, [r7, #24]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	4623      	mov	r3, r4
 800328a:	f7ff ff73 	bl	8003174 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 800328e:	793c      	ldrb	r4, [r7, #4]
 8003290:	79fa      	ldrb	r2, [r7, #7]
 8003292:	7939      	ldrb	r1, [r7, #4]
 8003294:	7978      	ldrb	r0, [r7, #5]
 8003296:	7e3b      	ldrb	r3, [r7, #24]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	4623      	mov	r3, r4
 800329c:	f7ff ff6a 	bl	8003174 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 80032a0:	79bc      	ldrb	r4, [r7, #6]
 80032a2:	79fa      	ldrb	r2, [r7, #7]
 80032a4:	7939      	ldrb	r1, [r7, #4]
 80032a6:	79f8      	ldrb	r0, [r7, #7]
 80032a8:	7e3b      	ldrb	r3, [r7, #24]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4623      	mov	r3, r4
 80032ae:	f7ff ff61 	bl	8003174 <ssd1306_Line>

  return;
 80032b2:	bf00      	nop
}
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd90      	pop	{r4, r7, pc}

080032ba <ssd1306_DrawBitmap>:

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	603a      	str	r2, [r7, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4603      	mov	r3, r0
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	460b      	mov	r3, r1
 80032ca:	71bb      	strb	r3, [r7, #6]
 80032cc:	4613      	mov	r3, r2
 80032ce:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80032d0:	797b      	ldrb	r3, [r7, #5]
 80032d2:	3307      	adds	r3, #7
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	da00      	bge.n	80032da <ssd1306_DrawBitmap+0x20>
 80032d8:	3307      	adds	r3, #7
 80032da:	10db      	asrs	r3, r3, #3
 80032dc:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db3e      	blt.n	8003368 <ssd1306_DrawBitmap+0xae>
 80032ea:	79bb      	ldrb	r3, [r7, #6]
 80032ec:	2b3f      	cmp	r3, #63	; 0x3f
 80032ee:	d83b      	bhi.n	8003368 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80032f0:	2300      	movs	r3, #0
 80032f2:	73bb      	strb	r3, [r7, #14]
 80032f4:	e033      	b.n	800335e <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80032f6:	2300      	movs	r3, #0
 80032f8:	737b      	strb	r3, [r7, #13]
 80032fa:	e026      	b.n	800334a <ssd1306_DrawBitmap+0x90>
            if (i & 7)
 80032fc:	7b7b      	ldrb	r3, [r7, #13]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
 800330c:	e00d      	b.n	800332a <ssd1306_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800330e:	7bbb      	ldrb	r3, [r7, #14]
 8003310:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003314:	fb02 f303 	mul.w	r3, r2, r3
 8003318:	7b7a      	ldrb	r2, [r7, #13]
 800331a:	08d2      	lsrs	r2, r2, #3
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	4413      	add	r3, r2
 8003320:	461a      	mov	r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	4413      	add	r3, r2
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 800332a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da08      	bge.n	8003344 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8003332:	79fa      	ldrb	r2, [r7, #7]
 8003334:	7b7b      	ldrb	r3, [r7, #13]
 8003336:	4413      	add	r3, r2
 8003338:	b2db      	uxtb	r3, r3
 800333a:	7f3a      	ldrb	r2, [r7, #28]
 800333c:	79b9      	ldrb	r1, [r7, #6]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fdfe 	bl	8002f40 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8003344:	7b7b      	ldrb	r3, [r7, #13]
 8003346:	3301      	adds	r3, #1
 8003348:	737b      	strb	r3, [r7, #13]
 800334a:	7b7a      	ldrb	r2, [r7, #13]
 800334c:	797b      	ldrb	r3, [r7, #5]
 800334e:	429a      	cmp	r2, r3
 8003350:	d3d4      	bcc.n	80032fc <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	3301      	adds	r3, #1
 8003356:	73bb      	strb	r3, [r7, #14]
 8003358:	79bb      	ldrb	r3, [r7, #6]
 800335a:	3301      	adds	r3, #1
 800335c:	71bb      	strb	r3, [r7, #6]
 800335e:	7bba      	ldrb	r2, [r7, #14]
 8003360:	7e3b      	ldrb	r3, [r7, #24]
 8003362:	429a      	cmp	r2, r3
 8003364:	d3c7      	bcc.n	80032f6 <ssd1306_DrawBitmap+0x3c>
        }
    }
    return;
 8003366:	e000      	b.n	800336a <ssd1306_DrawBitmap+0xb0>
        return;
 8003368:	bf00      	nop
}
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800337a:	2381      	movs	r3, #129	; 0x81
 800337c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fcf5 	bl	8002d70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fcf1 	bl	8002d70 <ssd1306_WriteCommand>
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80033a8:	23af      	movs	r3, #175	; 0xaf
 80033aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <ssd1306_SetDisplayOn+0x38>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	715a      	strb	r2, [r3, #5]
 80033b2:	e004      	b.n	80033be <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80033b4:	23ae      	movs	r3, #174	; 0xae
 80033b6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <ssd1306_SetDisplayOn+0x38>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fcd5 	bl	8002d70 <ssd1306_WriteCommand>
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000978 	.word	0x20000978

080033d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_MspInit+0x4c>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4a0f      	ldr	r2, [pc, #60]	; (8003420 <HAL_MspInit+0x4c>)
 80033e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <HAL_MspInit+0x4c>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_MspInit+0x4c>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a08      	ldr	r2, [pc, #32]	; (8003420 <HAL_MspInit+0x4c>)
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_MspInit+0x4c>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800

08003424 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2f      	ldr	r2, [pc, #188]	; (8003500 <HAL_ADC_MspInit+0xdc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d157      	bne.n	80034f6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <HAL_ADC_MspInit+0xe0>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	4a2d      	ldr	r2, [pc, #180]	; (8003504 <HAL_ADC_MspInit+0xe0>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6453      	str	r3, [r2, #68]	; 0x44
 8003456:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_ADC_MspInit+0xe0>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	4b27      	ldr	r3, [pc, #156]	; (8003504 <HAL_ADC_MspInit+0xe0>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	4a26      	ldr	r2, [pc, #152]	; (8003504 <HAL_ADC_MspInit+0xe0>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_ADC_MspInit+0xe0>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800347e:	2306      	movs	r3, #6
 8003480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003482:	2303      	movs	r3, #3
 8003484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	481d      	ldr	r0, [pc, #116]	; (8003508 <HAL_ADC_MspInit+0xe4>)
 8003492:	f001 fb1b 	bl	8004acc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003496:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_ADC_MspInit+0xe8>)
 8003498:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_ADC_MspInit+0xec>)
 800349a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_ADC_MspInit+0xe8>)
 800349e:	2200      	movs	r2, #0
 80034a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034ae:	4b17      	ldr	r3, [pc, #92]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034ce:	4b0f      	ldr	r3, [pc, #60]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034da:	480c      	ldr	r0, [pc, #48]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034dc:	f000 ff86 	bl	80043ec <HAL_DMA_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80034e6:	f7ff fc37 	bl	8002d58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a07      	ldr	r2, [pc, #28]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38
 80034f0:	4a06      	ldr	r2, [pc, #24]	; (800350c <HAL_ADC_MspInit+0xe8>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034f6:	bf00      	nop
 80034f8:	3728      	adds	r7, #40	; 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40012000 	.word	0x40012000
 8003504:	40023800 	.word	0x40023800
 8003508:	40020000 	.word	0x40020000
 800350c:	20000284 	.word	0x20000284
 8003510:	40026410 	.word	0x40026410

08003514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	; 0x30
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a32      	ldr	r2, [pc, #200]	; (80035fc <HAL_I2C_MspInit+0xe8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d12c      	bne.n	8003590 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_I2C_MspInit+0xec>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a30      	ldr	r2, [pc, #192]	; (8003600 <HAL_I2C_MspInit+0xec>)
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <HAL_I2C_MspInit+0xec>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003552:	23c0      	movs	r3, #192	; 0xc0
 8003554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003556:	2312      	movs	r3, #18
 8003558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355e:	2303      	movs	r3, #3
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003562:	2304      	movs	r3, #4
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003566:	f107 031c 	add.w	r3, r7, #28
 800356a:	4619      	mov	r1, r3
 800356c:	4825      	ldr	r0, [pc, #148]	; (8003604 <HAL_I2C_MspInit+0xf0>)
 800356e:	f001 faad 	bl	8004acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_I2C_MspInit+0xec>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a21      	ldr	r2, [pc, #132]	; (8003600 <HAL_I2C_MspInit+0xec>)
 800357c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <HAL_I2C_MspInit+0xec>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800358e:	e031      	b.n	80035f4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_I2C_MspInit+0xf4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d12c      	bne.n	80035f4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_I2C_MspInit+0xec>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <HAL_I2C_MspInit+0xec>)
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_I2C_MspInit+0xec>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035bc:	2312      	movs	r3, #18
 80035be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c4:	2303      	movs	r3, #3
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80035c8:	2304      	movs	r3, #4
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035cc:	f107 031c 	add.w	r3, r7, #28
 80035d0:	4619      	mov	r1, r3
 80035d2:	480c      	ldr	r0, [pc, #48]	; (8003604 <HAL_I2C_MspInit+0xf0>)
 80035d4:	f001 fa7a 	bl	8004acc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <HAL_I2C_MspInit+0xec>)
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	4a07      	ldr	r2, [pc, #28]	; (8003600 <HAL_I2C_MspInit+0xec>)
 80035e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035e6:	6413      	str	r3, [r2, #64]	; 0x40
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_I2C_MspInit+0xec>)
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
}
 80035f4:	bf00      	nop
 80035f6:	3730      	adds	r7, #48	; 0x30
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40005400 	.word	0x40005400
 8003600:	40023800 	.word	0x40023800
 8003604:	40020400 	.word	0x40020400
 8003608:	40005800 	.word	0x40005800

0800360c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003610:	e7fe      	b.n	8003610 <NMI_Handler+0x4>

08003612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003616:	e7fe      	b.n	8003616 <HardFault_Handler+0x4>

08003618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800361c:	e7fe      	b.n	800361c <MemManage_Handler+0x4>

0800361e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003622:	e7fe      	b.n	8003622 <BusFault_Handler+0x4>

08003624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003628:	e7fe      	b.n	8003628 <UsageFault_Handler+0x4>

0800362a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003646:	b480      	push	{r7}
 8003648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003658:	f000 f960 	bl	800391c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}

08003660 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003664:	4802      	ldr	r0, [pc, #8]	; (8003670 <DMA2_Stream0_IRQHandler+0x10>)
 8003666:	f000 ffc7 	bl	80045f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000284 	.word	0x20000284

08003674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
	return 1;
 8003678:	2301      	movs	r3, #1
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <_kill>:

int _kill(int pid, int sig)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800368e:	f002 ffef 	bl	8006670 <__errno>
 8003692:	4603      	mov	r3, r0
 8003694:	2216      	movs	r2, #22
 8003696:	601a      	str	r2, [r3, #0]
	return -1;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <_exit>:

void _exit (int status)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036ac:	f04f 31ff 	mov.w	r1, #4294967295
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ffe7 	bl	8003684 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036b6:	e7fe      	b.n	80036b6 <_exit+0x12>

080036b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	e00a      	b.n	80036e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036ca:	f3af 8000 	nop.w
 80036ce:	4601      	mov	r1, r0
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	60ba      	str	r2, [r7, #8]
 80036d6:	b2ca      	uxtb	r2, r1
 80036d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	3301      	adds	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	dbf0      	blt.n	80036ca <_read+0x12>
	}

return len;
 80036e8:	687b      	ldr	r3, [r7, #4]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e009      	b.n	8003718 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	60ba      	str	r2, [r7, #8]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	3301      	adds	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	dbf1      	blt.n	8003704 <_write+0x12>
	}
	return len;
 8003720:	687b      	ldr	r3, [r7, #4]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_close>:

int _close(int file)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
	return -1;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003752:	605a      	str	r2, [r3, #4]
	return 0;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <_isatty>:

int _isatty(int file)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
	return 1;
 800376a:	2301      	movs	r3, #1
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
	return 0;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <_sbrk+0x5c>)
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <_sbrk+0x60>)
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <_sbrk+0x64>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <_sbrk+0x64>)
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <_sbrk+0x68>)
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <_sbrk+0x64>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d207      	bcs.n	80037d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c4:	f002 ff54 	bl	8006670 <__errno>
 80037c8:	4603      	mov	r3, r0
 80037ca:	220c      	movs	r2, #12
 80037cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e009      	b.n	80037e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <_sbrk+0x64>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <_sbrk+0x64>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <_sbrk+0x64>)
 80037e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20020000 	.word	0x20020000
 80037f4:	00000400 	.word	0x00000400
 80037f8:	20000980 	.word	0x20000980
 80037fc:	20000998 	.word	0x20000998

08003800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <SystemInit+0x20>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	4a05      	ldr	r2, [pc, #20]	; (8003820 <SystemInit+0x20>)
 800380c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800385c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003828:	480d      	ldr	r0, [pc, #52]	; (8003860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800382a:	490e      	ldr	r1, [pc, #56]	; (8003864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800382c:	4a0e      	ldr	r2, [pc, #56]	; (8003868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800382e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003830:	e002      	b.n	8003838 <LoopCopyDataInit>

08003832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003836:	3304      	adds	r3, #4

08003838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800383a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800383c:	d3f9      	bcc.n	8003832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383e:	4a0b      	ldr	r2, [pc, #44]	; (800386c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003840:	4c0b      	ldr	r4, [pc, #44]	; (8003870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003844:	e001      	b.n	800384a <LoopFillZerobss>

08003846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003848:	3204      	adds	r2, #4

0800384a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800384a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800384c:	d3fb      	bcc.n	8003846 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800384e:	f7ff ffd7 	bl	8003800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003852:	f002 ff13 	bl	800667c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003856:	f7fe fa8b 	bl	8001d70 <main>
  bx  lr    
 800385a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800385c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003864:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003868:	0800db80 	.word	0x0800db80
  ldr r2, =_sbss
 800386c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003870:	20000998 	.word	0x20000998

08003874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003874:	e7fe      	b.n	8003874 <ADC_IRQHandler>
	...

08003878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_Init+0x40>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0d      	ldr	r2, [pc, #52]	; (80038b8 <HAL_Init+0x40>)
 8003882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_Init+0x40>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <HAL_Init+0x40>)
 800388e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_Init+0x40>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <HAL_Init+0x40>)
 800389a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038a0:	2003      	movs	r0, #3
 80038a2:	f000 fd61 	bl	8004368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038a6:	200f      	movs	r0, #15
 80038a8:	f000 f808 	bl	80038bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038ac:	f7ff fd92 	bl	80033d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023c00 	.word	0x40023c00

080038bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <HAL_InitTick+0x54>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_InitTick+0x58>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fd79 	bl	80043d2 <HAL_SYSTICK_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e00e      	b.n	8003908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b0f      	cmp	r3, #15
 80038ee:	d80a      	bhi.n	8003906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f0:	2200      	movs	r2, #0
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	f000 fd41 	bl	800437e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038fc:	4a06      	ldr	r2, [pc, #24]	; (8003918 <HAL_InitTick+0x5c>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000040 	.word	0x20000040
 8003914:	20000048 	.word	0x20000048
 8003918:	20000044 	.word	0x20000044

0800391c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_IncTick+0x20>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_IncTick+0x24>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4413      	add	r3, r2
 800392c:	4a04      	ldr	r2, [pc, #16]	; (8003940 <HAL_IncTick+0x24>)
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000048 	.word	0x20000048
 8003940:	20000984 	.word	0x20000984

08003944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return uwTick;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <HAL_GetTick+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000984 	.word	0x20000984

0800395c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003964:	f7ff ffee 	bl	8003944 <HAL_GetTick>
 8003968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d005      	beq.n	8003982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_Delay+0x44>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003982:	bf00      	nop
 8003984:	f7ff ffde 	bl	8003944 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	429a      	cmp	r2, r3
 8003992:	d8f7      	bhi.n	8003984 <HAL_Delay+0x28>
  {
  }
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000048 	.word	0x20000048

080039a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e033      	b.n	8003a22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fd2e 	bl	8003424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d118      	bne.n	8003a14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039ea:	f023 0302 	bic.w	r3, r3, #2
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa68 	bl	8003ecc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f023 0303 	bic.w	r3, r3, #3
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
 8003a12:	e001      	b.n	8003a18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_ADC_Start_DMA+0x1e>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e0e9      	b.n	8003c1e <HAL_ADC_Start_DMA+0x1f2>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d018      	beq.n	8003a92 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a70:	4b6d      	ldr	r3, [pc, #436]	; (8003c28 <HAL_ADC_Start_DMA+0x1fc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6d      	ldr	r2, [pc, #436]	; (8003c2c <HAL_ADC_Start_DMA+0x200>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0c9a      	lsrs	r2, r3, #18
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a84:	e002      	b.n	8003a8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f9      	bne.n	8003a86 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa0:	d107      	bne.n	8003ab2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f040 80a1 	bne.w	8003c04 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003aec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b00:	d106      	bne.n	8003b10 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f023 0206 	bic.w	r2, r3, #6
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003b0e:	e002      	b.n	8003b16 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b1e:	4b44      	ldr	r3, [pc, #272]	; (8003c30 <HAL_ADC_Start_DMA+0x204>)
 8003b20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	4a43      	ldr	r2, [pc, #268]	; (8003c34 <HAL_ADC_Start_DMA+0x208>)
 8003b28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	4a42      	ldr	r2, [pc, #264]	; (8003c38 <HAL_ADC_Start_DMA+0x20c>)
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	4a41      	ldr	r2, [pc, #260]	; (8003c3c <HAL_ADC_Start_DMA+0x210>)
 8003b38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	334c      	adds	r3, #76	; 0x4c
 8003b6e:	4619      	mov	r1, r3
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f000 fce8 	bl	8004548 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d12a      	bne.n	8003bda <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a2d      	ldr	r2, [pc, #180]	; (8003c40 <HAL_ADC_Start_DMA+0x214>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d015      	beq.n	8003bba <HAL_ADC_Start_DMA+0x18e>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2c      	ldr	r2, [pc, #176]	; (8003c44 <HAL_ADC_Start_DMA+0x218>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d105      	bne.n	8003ba4 <HAL_ADC_Start_DMA+0x178>
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <HAL_ADC_Start_DMA+0x204>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a27      	ldr	r2, [pc, #156]	; (8003c48 <HAL_ADC_Start_DMA+0x21c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d136      	bne.n	8003c1c <HAL_ADC_Start_DMA+0x1f0>
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <HAL_ADC_Start_DMA+0x204>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d130      	bne.n	8003c1c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d129      	bne.n	8003c1c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	e020      	b.n	8003c1c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <HAL_ADC_Start_DMA+0x214>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d11b      	bne.n	8003c1c <HAL_ADC_Start_DMA+0x1f0>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d114      	bne.n	8003c1c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	e00b      	b.n	8003c1c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0210 	orr.w	r2, r3, #16
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000040 	.word	0x20000040
 8003c2c:	431bde83 	.word	0x431bde83
 8003c30:	40012300 	.word	0x40012300
 8003c34:	080040c5 	.word	0x080040c5
 8003c38:	0800417f 	.word	0x0800417f
 8003c3c:	0800419b 	.word	0x0800419b
 8003c40:	40012000 	.word	0x40012000
 8003c44:	40012100 	.word	0x40012100
 8003c48:	40012200 	.word	0x40012200

08003c4c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x1c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e105      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x228>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b09      	cmp	r3, #9
 8003cb2:	d925      	bls.n	8003d00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68d9      	ldr	r1, [r3, #12]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3b1e      	subs	r3, #30
 8003cca:	2207      	movs	r2, #7
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68d9      	ldr	r1, [r3, #12]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	4618      	mov	r0, r3
 8003cec:	4603      	mov	r3, r0
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4403      	add	r3, r0
 8003cf2:	3b1e      	subs	r3, #30
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	e022      	b.n	8003d46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6919      	ldr	r1, [r3, #16]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	2207      	movs	r2, #7
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	400a      	ands	r2, r1
 8003d22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6919      	ldr	r1, [r3, #16]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	4618      	mov	r0, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4403      	add	r3, r0
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d824      	bhi.n	8003d98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3b05      	subs	r3, #5
 8003d60:	221f      	movs	r2, #31
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	3b05      	subs	r3, #5
 8003d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34
 8003d96:	e04c      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d824      	bhi.n	8003dea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	3b23      	subs	r3, #35	; 0x23
 8003db2:	221f      	movs	r2, #31
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43da      	mvns	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	400a      	ands	r2, r1
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4618      	mov	r0, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	3b23      	subs	r3, #35	; 0x23
 8003ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
 8003de8:	e023      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	3b41      	subs	r3, #65	; 0x41
 8003dfc:	221f      	movs	r2, #31
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	400a      	ands	r2, r1
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3b41      	subs	r3, #65	; 0x41
 8003e26:	fa00 f203 	lsl.w	r2, r0, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e32:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <HAL_ADC_ConfigChannel+0x234>)
 8003e34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <HAL_ADC_ConfigChannel+0x238>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d109      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x1cc>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b12      	cmp	r3, #18
 8003e46:	d105      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <HAL_ADC_ConfigChannel+0x238>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d123      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x21e>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d003      	beq.n	8003e6e <HAL_ADC_ConfigChannel+0x1e6>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b11      	cmp	r3, #17
 8003e6c:	d11b      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	d111      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_ADC_ConfigChannel+0x23c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a10      	ldr	r2, [pc, #64]	; (8003ec8 <HAL_ADC_ConfigChannel+0x240>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	0c9a      	lsrs	r2, r3, #18
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e98:	e002      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f9      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40012300 	.word	0x40012300
 8003ec0:	40012000 	.word	0x40012000
 8003ec4:	20000040 	.word	0x20000040
 8003ec8:	431bde83 	.word	0x431bde83

08003ecc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ed4:	4b79      	ldr	r3, [pc, #484]	; (80040bc <ADC_Init+0x1f0>)
 8003ed6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	021a      	lsls	r2, r3, #8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6899      	ldr	r1, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	4a58      	ldr	r2, [pc, #352]	; (80040c0 <ADC_Init+0x1f4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d022      	beq.n	8003faa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6899      	ldr	r1, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6899      	ldr	r1, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	e00f      	b.n	8003fca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0202 	bic.w	r2, r2, #2
 8003fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6899      	ldr	r1, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	7e1b      	ldrb	r3, [r3, #24]
 8003fe4:	005a      	lsls	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004006:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	3b01      	subs	r3, #1
 8004024:	035a      	lsls	r2, r3, #13
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	e007      	b.n	8004040 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800403e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	3b01      	subs	r3, #1
 800405c:	051a      	lsls	r2, r3, #20
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6899      	ldr	r1, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004082:	025a      	lsls	r2, r3, #9
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6899      	ldr	r1, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	029a      	lsls	r2, r3, #10
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40012300 	.word	0x40012300
 80040c0:	0f000001 	.word	0x0f000001

080040c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d13c      	bne.n	8004158 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d12b      	bne.n	8004150 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d127      	bne.n	8004150 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800410a:	2b00      	cmp	r3, #0
 800410c:	d006      	beq.n	800411c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004118:	2b00      	cmp	r3, #0
 800411a:	d119      	bne.n	8004150 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0220 	bic.w	r2, r2, #32
 800412a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	f043 0201 	orr.w	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fd7b 	bl	8003c4c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004156:	e00e      	b.n	8004176 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f7ff fd85 	bl	8003c74 <HAL_ADC_ErrorCallback>
}
 800416a:	e004      	b.n	8004176 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff fd67 	bl	8003c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2240      	movs	r2, #64	; 0x40
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	f043 0204 	orr.w	r2, r3, #4
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff fd5a 	bl	8003c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <__NVIC_SetPriorityGrouping+0x44>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041e4:	4013      	ands	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041fa:	4a04      	ldr	r2, [pc, #16]	; (800420c <__NVIC_SetPriorityGrouping+0x44>)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	60d3      	str	r3, [r2, #12]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <__NVIC_GetPriorityGrouping+0x18>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	f003 0307 	and.w	r3, r3, #7
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	2b00      	cmp	r3, #0
 800423c:	db0b      	blt.n	8004256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	f003 021f 	and.w	r2, r3, #31
 8004244:	4907      	ldr	r1, [pc, #28]	; (8004264 <__NVIC_EnableIRQ+0x38>)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	2001      	movs	r0, #1
 800424e:	fa00 f202 	lsl.w	r2, r0, r2
 8004252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	e000e100 	.word	0xe000e100

08004268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	6039      	str	r1, [r7, #0]
 8004272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004278:	2b00      	cmp	r3, #0
 800427a:	db0a      	blt.n	8004292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	490c      	ldr	r1, [pc, #48]	; (80042b4 <__NVIC_SetPriority+0x4c>)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	0112      	lsls	r2, r2, #4
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	440b      	add	r3, r1
 800428c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004290:	e00a      	b.n	80042a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4908      	ldr	r1, [pc, #32]	; (80042b8 <__NVIC_SetPriority+0x50>)
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	3b04      	subs	r3, #4
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	440b      	add	r3, r1
 80042a6:	761a      	strb	r2, [r3, #24]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	e000e100 	.word	0xe000e100
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042bc:	b480      	push	{r7}
 80042be:	b089      	sub	sp, #36	; 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f1c3 0307 	rsb	r3, r3, #7
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	bf28      	it	cs
 80042da:	2304      	movcs	r3, #4
 80042dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3304      	adds	r3, #4
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d902      	bls.n	80042ec <NVIC_EncodePriority+0x30>
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3b03      	subs	r3, #3
 80042ea:	e000      	b.n	80042ee <NVIC_EncodePriority+0x32>
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	401a      	ands	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004304:	f04f 31ff 	mov.w	r1, #4294967295
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	43d9      	mvns	r1, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	4313      	orrs	r3, r2
         );
}
 8004316:	4618      	mov	r0, r3
 8004318:	3724      	adds	r7, #36	; 0x24
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3b01      	subs	r3, #1
 8004330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004334:	d301      	bcc.n	800433a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004336:	2301      	movs	r3, #1
 8004338:	e00f      	b.n	800435a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <SysTick_Config+0x40>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3b01      	subs	r3, #1
 8004340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004342:	210f      	movs	r1, #15
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	f7ff ff8e 	bl	8004268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <SysTick_Config+0x40>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004352:	4b04      	ldr	r3, [pc, #16]	; (8004364 <SysTick_Config+0x40>)
 8004354:	2207      	movs	r2, #7
 8004356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	e000e010 	.word	0xe000e010

08004368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff29 	bl	80041c8 <__NVIC_SetPriorityGrouping>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800437e:	b580      	push	{r7, lr}
 8004380:	b086      	sub	sp, #24
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004390:	f7ff ff3e 	bl	8004210 <__NVIC_GetPriorityGrouping>
 8004394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7ff ff8e 	bl	80042bc <NVIC_EncodePriority>
 80043a0:	4602      	mov	r2, r0
 80043a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff5d 	bl	8004268 <__NVIC_SetPriority>
}
 80043ae:	bf00      	nop
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff31 	bl	800422c <__NVIC_EnableIRQ>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ffa2 	bl	8004324 <SysTick_Config>
 80043e0:	4603      	mov	r3, r0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043f8:	f7ff faa4 	bl	8003944 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e099      	b.n	800453c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004428:	e00f      	b.n	800444a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800442a:	f7ff fa8b 	bl	8003944 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b05      	cmp	r3, #5
 8004436:	d908      	bls.n	800444a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2203      	movs	r2, #3
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e078      	b.n	800453c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e8      	bne.n	800442a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4b38      	ldr	r3, [pc, #224]	; (8004544 <HAL_DMA_Init+0x158>)
 8004464:	4013      	ands	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d107      	bne.n	80044b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	4313      	orrs	r3, r2
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0307 	bic.w	r3, r3, #7
 80044ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d117      	bne.n	800450e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00e      	beq.n	800450e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fa6f 	bl	80049d4 <DMA_CheckFifoParam>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2240      	movs	r2, #64	; 0x40
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800450a:	2301      	movs	r3, #1
 800450c:	e016      	b.n	800453c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa26 	bl	8004968 <DMA_CalcBaseAndBitshift>
 800451c:	4603      	mov	r3, r0
 800451e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004524:	223f      	movs	r2, #63	; 0x3f
 8004526:	409a      	lsls	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	f010803f 	.word	0xf010803f

08004548 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_DMA_Start_IT+0x26>
 800456a:	2302      	movs	r3, #2
 800456c:	e040      	b.n	80045f0 <HAL_DMA_Start_IT+0xa8>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	d12f      	bne.n	80045e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f9b8 	bl	800490c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a0:	223f      	movs	r2, #63	; 0x3f
 80045a2:	409a      	lsls	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0216 	orr.w	r2, r2, #22
 80045b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	e005      	b.n	80045ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
 80045ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004604:	4b8e      	ldr	r3, [pc, #568]	; (8004840 <HAL_DMA_IRQHandler+0x248>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a8e      	ldr	r2, [pc, #568]	; (8004844 <HAL_DMA_IRQHandler+0x24c>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	0a9b      	lsrs	r3, r3, #10
 8004610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004622:	2208      	movs	r2, #8
 8004624:	409a      	lsls	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4013      	ands	r3, r2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01a      	beq.n	8004664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0204 	bic.w	r2, r2, #4
 800464a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	2208      	movs	r2, #8
 8004652:	409a      	lsls	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f043 0201 	orr.w	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	2201      	movs	r2, #1
 800466a:	409a      	lsls	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d012      	beq.n	800469a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	2201      	movs	r2, #1
 8004688:	409a      	lsls	r2, r3
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	f043 0202 	orr.w	r2, r3, #2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	2204      	movs	r2, #4
 80046a0:	409a      	lsls	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d012      	beq.n	80046d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00b      	beq.n	80046d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	2204      	movs	r2, #4
 80046be:	409a      	lsls	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	f043 0204 	orr.w	r2, r3, #4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d4:	2210      	movs	r2, #16
 80046d6:	409a      	lsls	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d043      	beq.n	8004768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d03c      	beq.n	8004768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f2:	2210      	movs	r2, #16
 80046f4:	409a      	lsls	r2, r3
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d018      	beq.n	800473a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d024      	beq.n	8004768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
 8004726:	e01f      	b.n	8004768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01b      	beq.n	8004768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
 8004738:	e016      	b.n	8004768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d107      	bne.n	8004758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0208 	bic.w	r2, r2, #8
 8004756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476c:	2220      	movs	r2, #32
 800476e:	409a      	lsls	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 808f 	beq.w	8004898 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8087 	beq.w	8004898 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478e:	2220      	movs	r2, #32
 8004790:	409a      	lsls	r2, r3
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d136      	bne.n	8004810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0216 	bic.w	r2, r2, #22
 80047b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <HAL_DMA_IRQHandler+0x1da>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0208 	bic.w	r2, r2, #8
 80047e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	223f      	movs	r2, #63	; 0x3f
 80047e8:	409a      	lsls	r2, r3
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004802:	2b00      	cmp	r3, #0
 8004804:	d07e      	beq.n	8004904 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	4798      	blx	r3
        }
        return;
 800480e:	e079      	b.n	8004904 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01d      	beq.n	800485a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10d      	bne.n	8004848 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	2b00      	cmp	r3, #0
 8004832:	d031      	beq.n	8004898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
 800483c:	e02c      	b.n	8004898 <HAL_DMA_IRQHandler+0x2a0>
 800483e:	bf00      	nop
 8004840:	20000040 	.word	0x20000040
 8004844:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d023      	beq.n	8004898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4798      	blx	r3
 8004858:	e01e      	b.n	8004898 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10f      	bne.n	8004888 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0210 	bic.w	r2, r2, #16
 8004876:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489c:	2b00      	cmp	r3, #0
 800489e:	d032      	beq.n	8004906 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d022      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2205      	movs	r2, #5
 80048b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	3301      	adds	r3, #1
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d307      	bcc.n	80048e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f2      	bne.n	80048c4 <HAL_DMA_IRQHandler+0x2cc>
 80048de:	e000      	b.n	80048e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
 8004902:	e000      	b.n	8004906 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004904:	bf00      	nop
    }
  }
}
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004928:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d108      	bne.n	800494c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800494a:	e007      	b.n	800495c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	60da      	str	r2, [r3, #12]
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	3b10      	subs	r3, #16
 8004978:	4a14      	ldr	r2, [pc, #80]	; (80049cc <DMA_CalcBaseAndBitshift+0x64>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	091b      	lsrs	r3, r3, #4
 8004980:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004982:	4a13      	ldr	r2, [pc, #76]	; (80049d0 <DMA_CalcBaseAndBitshift+0x68>)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b03      	cmp	r3, #3
 8004994:	d909      	bls.n	80049aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	1d1a      	adds	r2, r3, #4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	659a      	str	r2, [r3, #88]	; 0x58
 80049a8:	e007      	b.n	80049ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	aaaaaaab 	.word	0xaaaaaaab
 80049d0:	0800d68c 	.word	0x0800d68c

080049d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d11f      	bne.n	8004a2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d856      	bhi.n	8004aa2 <DMA_CheckFifoParam+0xce>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <DMA_CheckFifoParam+0x28>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a1f 	.word	0x08004a1f
 8004a04:	08004a0d 	.word	0x08004a0d
 8004a08:	08004aa3 	.word	0x08004aa3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d046      	beq.n	8004aa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1c:	e043      	b.n	8004aa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a26:	d140      	bne.n	8004aaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a2c:	e03d      	b.n	8004aaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a36:	d121      	bne.n	8004a7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d837      	bhi.n	8004aae <DMA_CheckFifoParam+0xda>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <DMA_CheckFifoParam+0x70>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004a55 	.word	0x08004a55
 8004a48:	08004a5b 	.word	0x08004a5b
 8004a4c:	08004a55 	.word	0x08004a55
 8004a50:	08004a6d 	.word	0x08004a6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
      break;
 8004a58:	e030      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d025      	beq.n	8004ab2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a6a:	e022      	b.n	8004ab2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a74:	d11f      	bne.n	8004ab6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a7a:	e01c      	b.n	8004ab6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d903      	bls.n	8004a8a <DMA_CheckFifoParam+0xb6>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d003      	beq.n	8004a90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a88:	e018      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8e:	e015      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00e      	beq.n	8004aba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa0:	e00b      	b.n	8004aba <DMA_CheckFifoParam+0xe6>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e00a      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e008      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
      break;
 8004aaa:	bf00      	nop
 8004aac:	e006      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e004      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
      break;   
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
      break;
 8004aba:	bf00      	nop
    }
  } 
  
  return status; 
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop

08004acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b089      	sub	sp, #36	; 0x24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	e16b      	b.n	8004dc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ae8:	2201      	movs	r2, #1
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4013      	ands	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	f040 815a 	bne.w	8004dba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d005      	beq.n	8004b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d130      	bne.n	8004b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	2203      	movs	r2, #3
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b54:	2201      	movs	r2, #1
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4013      	ands	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 0201 	and.w	r2, r3, #1
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d017      	beq.n	8004bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	2203      	movs	r2, #3
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d123      	bne.n	8004c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	08da      	lsrs	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3208      	adds	r2, #8
 8004bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	220f      	movs	r2, #15
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	08da      	lsrs	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3208      	adds	r2, #8
 8004c0a:	69b9      	ldr	r1, [r7, #24]
 8004c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0203 	and.w	r2, r3, #3
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80b4 	beq.w	8004dba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	4b60      	ldr	r3, [pc, #384]	; (8004dd8 <HAL_GPIO_Init+0x30c>)
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	4a5f      	ldr	r2, [pc, #380]	; (8004dd8 <HAL_GPIO_Init+0x30c>)
 8004c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c60:	6453      	str	r3, [r2, #68]	; 0x44
 8004c62:	4b5d      	ldr	r3, [pc, #372]	; (8004dd8 <HAL_GPIO_Init+0x30c>)
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c6e:	4a5b      	ldr	r2, [pc, #364]	; (8004ddc <HAL_GPIO_Init+0x310>)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	089b      	lsrs	r3, r3, #2
 8004c74:	3302      	adds	r3, #2
 8004c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	220f      	movs	r2, #15
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a52      	ldr	r2, [pc, #328]	; (8004de0 <HAL_GPIO_Init+0x314>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d02b      	beq.n	8004cf2 <HAL_GPIO_Init+0x226>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a51      	ldr	r2, [pc, #324]	; (8004de4 <HAL_GPIO_Init+0x318>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d025      	beq.n	8004cee <HAL_GPIO_Init+0x222>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a50      	ldr	r2, [pc, #320]	; (8004de8 <HAL_GPIO_Init+0x31c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d01f      	beq.n	8004cea <HAL_GPIO_Init+0x21e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a4f      	ldr	r2, [pc, #316]	; (8004dec <HAL_GPIO_Init+0x320>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d019      	beq.n	8004ce6 <HAL_GPIO_Init+0x21a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a4e      	ldr	r2, [pc, #312]	; (8004df0 <HAL_GPIO_Init+0x324>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <HAL_GPIO_Init+0x216>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a4d      	ldr	r2, [pc, #308]	; (8004df4 <HAL_GPIO_Init+0x328>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00d      	beq.n	8004cde <HAL_GPIO_Init+0x212>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a4c      	ldr	r2, [pc, #304]	; (8004df8 <HAL_GPIO_Init+0x32c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <HAL_GPIO_Init+0x20e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a4b      	ldr	r2, [pc, #300]	; (8004dfc <HAL_GPIO_Init+0x330>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_GPIO_Init+0x20a>
 8004cd2:	2307      	movs	r3, #7
 8004cd4:	e00e      	b.n	8004cf4 <HAL_GPIO_Init+0x228>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	e00c      	b.n	8004cf4 <HAL_GPIO_Init+0x228>
 8004cda:	2306      	movs	r3, #6
 8004cdc:	e00a      	b.n	8004cf4 <HAL_GPIO_Init+0x228>
 8004cde:	2305      	movs	r3, #5
 8004ce0:	e008      	b.n	8004cf4 <HAL_GPIO_Init+0x228>
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	e006      	b.n	8004cf4 <HAL_GPIO_Init+0x228>
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e004      	b.n	8004cf4 <HAL_GPIO_Init+0x228>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e002      	b.n	8004cf4 <HAL_GPIO_Init+0x228>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <HAL_GPIO_Init+0x228>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	f002 0203 	and.w	r2, r2, #3
 8004cfa:	0092      	lsls	r2, r2, #2
 8004cfc:	4093      	lsls	r3, r2
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d04:	4935      	ldr	r1, [pc, #212]	; (8004ddc <HAL_GPIO_Init+0x310>)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	089b      	lsrs	r3, r3, #2
 8004d0a:	3302      	adds	r3, #2
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d12:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <HAL_GPIO_Init+0x334>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d36:	4a32      	ldr	r2, [pc, #200]	; (8004e00 <HAL_GPIO_Init+0x334>)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d3c:	4b30      	ldr	r3, [pc, #192]	; (8004e00 <HAL_GPIO_Init+0x334>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d60:	4a27      	ldr	r2, [pc, #156]	; (8004e00 <HAL_GPIO_Init+0x334>)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d66:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <HAL_GPIO_Init+0x334>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d8a:	4a1d      	ldr	r2, [pc, #116]	; (8004e00 <HAL_GPIO_Init+0x334>)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_GPIO_Init+0x334>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004db4:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <HAL_GPIO_Init+0x334>)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2b0f      	cmp	r3, #15
 8004dc4:	f67f ae90 	bls.w	8004ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	3724      	adds	r7, #36	; 0x24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40013800 	.word	0x40013800
 8004de0:	40020000 	.word	0x40020000
 8004de4:	40020400 	.word	0x40020400
 8004de8:	40020800 	.word	0x40020800
 8004dec:	40020c00 	.word	0x40020c00
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40021400 	.word	0x40021400
 8004df8:	40021800 	.word	0x40021800
 8004dfc:	40021c00 	.word	0x40021c00
 8004e00:	40013c00 	.word	0x40013c00

08004e04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	887b      	ldrh	r3, [r7, #2]
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
 8004e20:	e001      	b.n	8004e26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	807b      	strh	r3, [r7, #2]
 8004e40:	4613      	mov	r3, r2
 8004e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e44:	787b      	ldrb	r3, [r7, #1]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e4a:	887a      	ldrh	r2, [r7, #2]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e50:	e003      	b.n	8004e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e52:	887b      	ldrh	r3, [r7, #2]
 8004e54:	041a      	lsls	r2, r3, #16
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	619a      	str	r2, [r3, #24]
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e12b      	b.n	80050d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fe fb40 	bl	8003514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	; 0x24
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0201 	bic.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ecc:	f001 fbbc 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8004ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4a81      	ldr	r2, [pc, #516]	; (80050dc <HAL_I2C_Init+0x274>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d807      	bhi.n	8004eec <HAL_I2C_Init+0x84>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a80      	ldr	r2, [pc, #512]	; (80050e0 <HAL_I2C_Init+0x278>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	bf94      	ite	ls
 8004ee4:	2301      	movls	r3, #1
 8004ee6:	2300      	movhi	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	e006      	b.n	8004efa <HAL_I2C_Init+0x92>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a7d      	ldr	r2, [pc, #500]	; (80050e4 <HAL_I2C_Init+0x27c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	bf94      	ite	ls
 8004ef4:	2301      	movls	r3, #1
 8004ef6:	2300      	movhi	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e0e7      	b.n	80050d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a78      	ldr	r2, [pc, #480]	; (80050e8 <HAL_I2C_Init+0x280>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	0c9b      	lsrs	r3, r3, #18
 8004f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a6a      	ldr	r2, [pc, #424]	; (80050dc <HAL_I2C_Init+0x274>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d802      	bhi.n	8004f3c <HAL_I2C_Init+0xd4>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	e009      	b.n	8004f50 <HAL_I2C_Init+0xe8>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f42:	fb02 f303 	mul.w	r3, r2, r3
 8004f46:	4a69      	ldr	r2, [pc, #420]	; (80050ec <HAL_I2C_Init+0x284>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	3301      	adds	r3, #1
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	495c      	ldr	r1, [pc, #368]	; (80050dc <HAL_I2C_Init+0x274>)
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	d819      	bhi.n	8004fa4 <HAL_I2C_Init+0x13c>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1e59      	subs	r1, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f7e:	1c59      	adds	r1, r3, #1
 8004f80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f84:	400b      	ands	r3, r1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_I2C_Init+0x138>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1e59      	subs	r1, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f98:	3301      	adds	r3, #1
 8004f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9e:	e051      	b.n	8005044 <HAL_I2C_Init+0x1dc>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	e04f      	b.n	8005044 <HAL_I2C_Init+0x1dc>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d111      	bne.n	8004fd0 <HAL_I2C_Init+0x168>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	1e58      	subs	r0, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	440b      	add	r3, r1
 8004fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	e012      	b.n	8004ff6 <HAL_I2C_Init+0x18e>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1e58      	subs	r0, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	0099      	lsls	r1, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_I2C_Init+0x196>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e022      	b.n	8005044 <HAL_I2C_Init+0x1dc>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10e      	bne.n	8005024 <HAL_I2C_Init+0x1bc>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1e58      	subs	r0, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	440b      	add	r3, r1
 8005014:	fbb0 f3f3 	udiv	r3, r0, r3
 8005018:	3301      	adds	r3, #1
 800501a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800501e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005022:	e00f      	b.n	8005044 <HAL_I2C_Init+0x1dc>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1e58      	subs	r0, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	0099      	lsls	r1, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	fbb0 f3f3 	udiv	r3, r0, r3
 800503a:	3301      	adds	r3, #1
 800503c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	6809      	ldr	r1, [r1, #0]
 8005048:	4313      	orrs	r3, r2
 800504a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6911      	ldr	r1, [r2, #16]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68d2      	ldr	r2, [r2, #12]
 800507e:	4311      	orrs	r1, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	430b      	orrs	r3, r1
 8005086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	000186a0 	.word	0x000186a0
 80050e0:	001e847f 	.word	0x001e847f
 80050e4:	003d08ff 	.word	0x003d08ff
 80050e8:	431bde83 	.word	0x431bde83
 80050ec:	10624dd3 	.word	0x10624dd3

080050f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	4608      	mov	r0, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	817b      	strh	r3, [r7, #10]
 8005102:	460b      	mov	r3, r1
 8005104:	813b      	strh	r3, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800510a:	f7fe fc1b 	bl	8003944 <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b20      	cmp	r3, #32
 800511a:	f040 80d9 	bne.w	80052d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	2319      	movs	r3, #25
 8005124:	2201      	movs	r2, #1
 8005126:	496d      	ldr	r1, [pc, #436]	; (80052dc <HAL_I2C_Mem_Write+0x1ec>)
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fc7f 	bl	8005a2c <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005134:	2302      	movs	r3, #2
 8005136:	e0cc      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_I2C_Mem_Write+0x56>
 8005142:	2302      	movs	r3, #2
 8005144:	e0c5      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d007      	beq.n	800516c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800517a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2221      	movs	r2, #33	; 0x21
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2240      	movs	r2, #64	; 0x40
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800519c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a4d      	ldr	r2, [pc, #308]	; (80052e0 <HAL_I2C_Mem_Write+0x1f0>)
 80051ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ae:	88f8      	ldrh	r0, [r7, #6]
 80051b0:	893a      	ldrh	r2, [r7, #8]
 80051b2:	8979      	ldrh	r1, [r7, #10]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	4603      	mov	r3, r0
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fab6 	bl	8005730 <I2C_RequestMemoryWrite>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d052      	beq.n	8005270 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e081      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fd00 	bl	8005bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d107      	bne.n	80051f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e06b      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	781a      	ldrb	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d11b      	bne.n	8005270 <HAL_I2C_Mem_Write+0x180>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	2b00      	cmp	r3, #0
 800523e:	d017      	beq.n	8005270 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1aa      	bne.n	80051ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fcec 	bl	8005c5a <I2C_WaitOnBTFFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	2b04      	cmp	r3, #4
 800528e:	d107      	bne.n	80052a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e016      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
  }
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	00100002 	.word	0x00100002
 80052e0:	ffff0000 	.word	0xffff0000

080052e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08c      	sub	sp, #48	; 0x30
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	4608      	mov	r0, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	461a      	mov	r2, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	817b      	strh	r3, [r7, #10]
 80052f6:	460b      	mov	r3, r1
 80052f8:	813b      	strh	r3, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052fe:	f7fe fb21 	bl	8003944 <HAL_GetTick>
 8005302:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b20      	cmp	r3, #32
 800530e:	f040 8208 	bne.w	8005722 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	2319      	movs	r3, #25
 8005318:	2201      	movs	r2, #1
 800531a:	497b      	ldr	r1, [pc, #492]	; (8005508 <HAL_I2C_Mem_Read+0x224>)
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fb85 	bl	8005a2c <I2C_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
 800532a:	e1fb      	b.n	8005724 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_I2C_Mem_Read+0x56>
 8005336:	2302      	movs	r3, #2
 8005338:	e1f4      	b.n	8005724 <HAL_I2C_Mem_Read+0x440>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d007      	beq.n	8005360 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800536e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2222      	movs	r2, #34	; 0x22
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2240      	movs	r2, #64	; 0x40
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4a5b      	ldr	r2, [pc, #364]	; (800550c <HAL_I2C_Mem_Read+0x228>)
 80053a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053a2:	88f8      	ldrh	r0, [r7, #6]
 80053a4:	893a      	ldrh	r2, [r7, #8]
 80053a6:	8979      	ldrh	r1, [r7, #10]
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	9301      	str	r3, [sp, #4]
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	4603      	mov	r3, r0
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fa52 	bl	800585c <I2C_RequestMemoryRead>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e1b0      	b.n	8005724 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d113      	bne.n	80053f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ca:	2300      	movs	r3, #0
 80053cc:	623b      	str	r3, [r7, #32]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	623b      	str	r3, [r7, #32]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	623b      	str	r3, [r7, #32]
 80053de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e184      	b.n	80056fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d11b      	bne.n	8005432 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e164      	b.n	80056fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005436:	2b02      	cmp	r3, #2
 8005438:	d11b      	bne.n	8005472 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005448:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	e144      	b.n	80056fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005488:	e138      	b.n	80056fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548e:	2b03      	cmp	r3, #3
 8005490:	f200 80f1 	bhi.w	8005676 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	2b01      	cmp	r3, #1
 800549a:	d123      	bne.n	80054e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fc1b 	bl	8005cdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e139      	b.n	8005724 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054e2:	e10b      	b.n	80056fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d14e      	bne.n	800558a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	2200      	movs	r2, #0
 80054f4:	4906      	ldr	r1, [pc, #24]	; (8005510 <HAL_I2C_Mem_Read+0x22c>)
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fa98 	bl	8005a2c <I2C_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e10e      	b.n	8005724 <HAL_I2C_Mem_Read+0x440>
 8005506:	bf00      	nop
 8005508:	00100002 	.word	0x00100002
 800550c:	ffff0000 	.word	0xffff0000
 8005510:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005588:	e0b8      	b.n	80056fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	2200      	movs	r2, #0
 8005592:	4966      	ldr	r1, [pc, #408]	; (800572c <HAL_I2C_Mem_Read+0x448>)
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fa49 	bl	8005a2c <I2C_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0bf      	b.n	8005724 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	2200      	movs	r2, #0
 80055ee:	494f      	ldr	r1, [pc, #316]	; (800572c <HAL_I2C_Mem_Read+0x448>)
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 fa1b 	bl	8005a2c <I2C_WaitOnFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e091      	b.n	8005724 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005674:	e042      	b.n	80056fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005678:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fb2e 	bl	8005cdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e04c      	b.n	8005724 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d118      	bne.n	80056fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005700:	2b00      	cmp	r3, #0
 8005702:	f47f aec2 	bne.w	800548a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	e000      	b.n	8005724 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005722:	2302      	movs	r3, #2
  }
}
 8005724:	4618      	mov	r0, r3
 8005726:	3728      	adds	r7, #40	; 0x28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	00010004 	.word	0x00010004

08005730 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	4608      	mov	r0, r1
 800573a:	4611      	mov	r1, r2
 800573c:	461a      	mov	r2, r3
 800573e:	4603      	mov	r3, r0
 8005740:	817b      	strh	r3, [r7, #10]
 8005742:	460b      	mov	r3, r1
 8005744:	813b      	strh	r3, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005758:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	2200      	movs	r2, #0
 8005762:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f960 	bl	8005a2c <I2C_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00d      	beq.n	800578e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005780:	d103      	bne.n	800578a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e05f      	b.n	800584e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800579c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	492d      	ldr	r1, [pc, #180]	; (8005858 <I2C_RequestMemoryWrite+0x128>)
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f998 	bl	8005ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e04c      	b.n	800584e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057cc:	6a39      	ldr	r1, [r7, #32]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fa02 	bl	8005bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00d      	beq.n	80057f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d107      	bne.n	80057f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e02b      	b.n	800584e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d105      	bne.n	8005808 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057fc:	893b      	ldrh	r3, [r7, #8]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	e021      	b.n	800584c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005808:	893b      	ldrh	r3, [r7, #8]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	b29b      	uxth	r3, r3
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005818:	6a39      	ldr	r1, [r7, #32]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f9dc 	bl	8005bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00d      	beq.n	8005842 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	2b04      	cmp	r3, #4
 800582c:	d107      	bne.n	800583e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e005      	b.n	800584e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005842:	893b      	ldrh	r3, [r7, #8]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	00010002 	.word	0x00010002

0800585c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	4608      	mov	r0, r1
 8005866:	4611      	mov	r1, r2
 8005868:	461a      	mov	r2, r3
 800586a:	4603      	mov	r3, r0
 800586c:	817b      	strh	r3, [r7, #10]
 800586e:	460b      	mov	r3, r1
 8005870:	813b      	strh	r3, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005884:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005894:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	2200      	movs	r2, #0
 800589e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f8c2 	bl	8005a2c <I2C_WaitOnFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00d      	beq.n	80058ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058bc:	d103      	bne.n	80058c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e0aa      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058ca:	897b      	ldrh	r3, [r7, #10]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	4952      	ldr	r1, [pc, #328]	; (8005a28 <I2C_RequestMemoryRead+0x1cc>)
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f8fa 	bl	8005ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e097      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005908:	6a39      	ldr	r1, [r7, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f964 	bl	8005bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00d      	beq.n	8005932 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	2b04      	cmp	r3, #4
 800591c:	d107      	bne.n	800592e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e076      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d105      	bne.n	8005944 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005938:	893b      	ldrh	r3, [r7, #8]
 800593a:	b2da      	uxtb	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	611a      	str	r2, [r3, #16]
 8005942:	e021      	b.n	8005988 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005944:	893b      	ldrh	r3, [r7, #8]
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	b29b      	uxth	r3, r3
 800594a:	b2da      	uxtb	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	6a39      	ldr	r1, [r7, #32]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f93e 	bl	8005bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	2b04      	cmp	r3, #4
 8005968:	d107      	bne.n	800597a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e050      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800597e:	893b      	ldrh	r3, [r7, #8]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598a:	6a39      	ldr	r1, [r7, #32]
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f923 	bl	8005bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00d      	beq.n	80059b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	2b04      	cmp	r3, #4
 800599e:	d107      	bne.n	80059b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e035      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f82b 	bl	8005a2c <I2C_WaitOnFlagUntilTimeout>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00d      	beq.n	80059f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ea:	d103      	bne.n	80059f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e013      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059f8:	897b      	ldrh	r3, [r7, #10]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	4906      	ldr	r1, [pc, #24]	; (8005a28 <I2C_RequestMemoryRead+0x1cc>)
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f863 	bl	8005ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	00010002 	.word	0x00010002

08005a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a3c:	e025      	b.n	8005a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d021      	beq.n	8005a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a46:	f7fd ff7d 	bl	8003944 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d302      	bcc.n	8005a5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d116      	bne.n	8005a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f043 0220 	orr.w	r2, r3, #32
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e023      	b.n	8005ad2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	0c1b      	lsrs	r3, r3, #16
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d10d      	bne.n	8005ab0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	43da      	mvns	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf0c      	ite	eq
 8005aa6:	2301      	moveq	r3, #1
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	e00c      	b.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	43da      	mvns	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4013      	ands	r3, r2
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bf0c      	ite	eq
 8005ac2:	2301      	moveq	r3, #1
 8005ac4:	2300      	movne	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d0b6      	beq.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
 8005ae6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ae8:	e051      	b.n	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af8:	d123      	bne.n	8005b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f043 0204 	orr.w	r2, r3, #4
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e046      	b.n	8005bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d021      	beq.n	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4a:	f7fd fefb 	bl	8003944 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d302      	bcc.n	8005b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d116      	bne.n	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e020      	b.n	8005bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	0c1b      	lsrs	r3, r3, #16
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d10c      	bne.n	8005bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	43da      	mvns	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bf14      	ite	ne
 8005baa:	2301      	movne	r3, #1
 8005bac:	2300      	moveq	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	e00b      	b.n	8005bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	43da      	mvns	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d18d      	bne.n	8005aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005be4:	e02d      	b.n	8005c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 f8ce 	bl	8005d88 <I2C_IsAcknowledgeFailed>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e02d      	b.n	8005c52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d021      	beq.n	8005c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfe:	f7fd fea1 	bl	8003944 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d302      	bcc.n	8005c14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d116      	bne.n	8005c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e007      	b.n	8005c52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4c:	2b80      	cmp	r3, #128	; 0x80
 8005c4e:	d1ca      	bne.n	8005be6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c66:	e02d      	b.n	8005cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f88d 	bl	8005d88 <I2C_IsAcknowledgeFailed>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e02d      	b.n	8005cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d021      	beq.n	8005cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c80:	f7fd fe60 	bl	8003944 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d302      	bcc.n	8005c96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d116      	bne.n	8005cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	f043 0220 	orr.w	r2, r3, #32
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e007      	b.n	8005cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d1ca      	bne.n	8005c68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ce8:	e042      	b.n	8005d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b10      	cmp	r3, #16
 8005cf6:	d119      	bne.n	8005d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0210 	mvn.w	r2, #16
 8005d00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e029      	b.n	8005d80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2c:	f7fd fe0a 	bl	8003944 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d302      	bcc.n	8005d42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d116      	bne.n	8005d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	f043 0220 	orr.w	r2, r3, #32
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e007      	b.n	8005d80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7a:	2b40      	cmp	r3, #64	; 0x40
 8005d7c:	d1b5      	bne.n	8005cea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9e:	d11b      	bne.n	8005dd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005da8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	f043 0204 	orr.w	r2, r3, #4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
	...

08005de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e267      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d075      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e06:	4b88      	ldr	r3, [pc, #544]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d00c      	beq.n	8005e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e12:	4b85      	ldr	r3, [pc, #532]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d112      	bne.n	8005e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e1e:	4b82      	ldr	r3, [pc, #520]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e2a:	d10b      	bne.n	8005e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2c:	4b7e      	ldr	r3, [pc, #504]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05b      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x108>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d157      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e242      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d106      	bne.n	8005e5c <HAL_RCC_OscConfig+0x74>
 8005e4e:	4b76      	ldr	r3, [pc, #472]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a75      	ldr	r2, [pc, #468]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e01d      	b.n	8005e98 <HAL_RCC_OscConfig+0xb0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x98>
 8005e66:	4b70      	ldr	r3, [pc, #448]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a6f      	ldr	r2, [pc, #444]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	4b6d      	ldr	r3, [pc, #436]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6c      	ldr	r2, [pc, #432]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0xb0>
 8005e80:	4b69      	ldr	r3, [pc, #420]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a68      	ldr	r2, [pc, #416]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4b66      	ldr	r3, [pc, #408]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a65      	ldr	r2, [pc, #404]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea0:	f7fd fd50 	bl	8003944 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea8:	f7fd fd4c 	bl	8003944 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	; 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e207      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eba:	4b5b      	ldr	r3, [pc, #364]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0xc0>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec8:	f7fd fd3c 	bl	8003944 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fd fd38 	bl	8003944 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	; 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1f3      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ee2:	4b51      	ldr	r3, [pc, #324]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0xe8>
 8005eee:	e000      	b.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d063      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005efe:	4b4a      	ldr	r3, [pc, #296]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f0a:	4b47      	ldr	r3, [pc, #284]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d11c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f16:	4b44      	ldr	r3, [pc, #272]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f22:	4b41      	ldr	r3, [pc, #260]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_RCC_OscConfig+0x152>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e1c7      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3a:	4b3b      	ldr	r3, [pc, #236]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4937      	ldr	r1, [pc, #220]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f4e:	e03a      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f58:	4b34      	ldr	r3, [pc, #208]	; (800602c <HAL_RCC_OscConfig+0x244>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fd fcf1 	bl	8003944 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f66:	f7fd fced 	bl	8003944 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e1a8      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f78:	4b2b      	ldr	r3, [pc, #172]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f84:	4b28      	ldr	r3, [pc, #160]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4925      	ldr	r1, [pc, #148]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]
 8005f98:	e015      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <HAL_RCC_OscConfig+0x244>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fd fcd0 	bl	8003944 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa8:	f7fd fccc 	bl	8003944 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e187      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fba:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d036      	beq.n	8006040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d016      	beq.n	8006008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fda:	4b15      	ldr	r3, [pc, #84]	; (8006030 <HAL_RCC_OscConfig+0x248>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe0:	f7fd fcb0 	bl	8003944 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fe8:	f7fd fcac 	bl	8003944 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e167      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x200>
 8006006:	e01b      	b.n	8006040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <HAL_RCC_OscConfig+0x248>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600e:	f7fd fc99 	bl	8003944 <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006014:	e00e      	b.n	8006034 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006016:	f7fd fc95 	bl	8003944 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d907      	bls.n	8006034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e150      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8006028:	40023800 	.word	0x40023800
 800602c:	42470000 	.word	0x42470000
 8006030:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006034:	4b88      	ldr	r3, [pc, #544]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1ea      	bne.n	8006016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8097 	beq.w	800617c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006052:	4b81      	ldr	r3, [pc, #516]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605e:	2300      	movs	r3, #0
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	4b7d      	ldr	r3, [pc, #500]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	4a7c      	ldr	r2, [pc, #496]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606c:	6413      	str	r3, [r2, #64]	; 0x40
 800606e:	4b7a      	ldr	r3, [pc, #488]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800607a:	2301      	movs	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607e:	4b77      	ldr	r3, [pc, #476]	; (800625c <HAL_RCC_OscConfig+0x474>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d118      	bne.n	80060bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800608a:	4b74      	ldr	r3, [pc, #464]	; (800625c <HAL_RCC_OscConfig+0x474>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a73      	ldr	r2, [pc, #460]	; (800625c <HAL_RCC_OscConfig+0x474>)
 8006090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006096:	f7fd fc55 	bl	8003944 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800609e:	f7fd fc51 	bl	8003944 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e10c      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b0:	4b6a      	ldr	r3, [pc, #424]	; (800625c <HAL_RCC_OscConfig+0x474>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0f0      	beq.n	800609e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d106      	bne.n	80060d2 <HAL_RCC_OscConfig+0x2ea>
 80060c4:	4b64      	ldr	r3, [pc, #400]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	4a63      	ldr	r2, [pc, #396]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060ca:	f043 0301 	orr.w	r3, r3, #1
 80060ce:	6713      	str	r3, [r2, #112]	; 0x70
 80060d0:	e01c      	b.n	800610c <HAL_RCC_OscConfig+0x324>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d10c      	bne.n	80060f4 <HAL_RCC_OscConfig+0x30c>
 80060da:	4b5f      	ldr	r3, [pc, #380]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	4a5e      	ldr	r2, [pc, #376]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060e0:	f043 0304 	orr.w	r3, r3, #4
 80060e4:	6713      	str	r3, [r2, #112]	; 0x70
 80060e6:	4b5c      	ldr	r3, [pc, #368]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ea:	4a5b      	ldr	r2, [pc, #364]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6713      	str	r3, [r2, #112]	; 0x70
 80060f2:	e00b      	b.n	800610c <HAL_RCC_OscConfig+0x324>
 80060f4:	4b58      	ldr	r3, [pc, #352]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	4a57      	ldr	r2, [pc, #348]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060fa:	f023 0301 	bic.w	r3, r3, #1
 80060fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006100:	4b55      	ldr	r3, [pc, #340]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	4a54      	ldr	r2, [pc, #336]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006106:	f023 0304 	bic.w	r3, r3, #4
 800610a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d015      	beq.n	8006140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006114:	f7fd fc16 	bl	8003944 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611a:	e00a      	b.n	8006132 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800611c:	f7fd fc12 	bl	8003944 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	; 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e0cb      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006132:	4b49      	ldr	r3, [pc, #292]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0ee      	beq.n	800611c <HAL_RCC_OscConfig+0x334>
 800613e:	e014      	b.n	800616a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006140:	f7fd fc00 	bl	8003944 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006146:	e00a      	b.n	800615e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006148:	f7fd fbfc 	bl	8003944 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f241 3288 	movw	r2, #5000	; 0x1388
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e0b5      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615e:	4b3e      	ldr	r3, [pc, #248]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1ee      	bne.n	8006148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d105      	bne.n	800617c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006170:	4b39      	ldr	r3, [pc, #228]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	4a38      	ldr	r2, [pc, #224]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800617a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 80a1 	beq.w	80062c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006186:	4b34      	ldr	r3, [pc, #208]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 030c 	and.w	r3, r3, #12
 800618e:	2b08      	cmp	r3, #8
 8006190:	d05c      	beq.n	800624c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d141      	bne.n	800621e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619a:	4b31      	ldr	r3, [pc, #196]	; (8006260 <HAL_RCC_OscConfig+0x478>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a0:	f7fd fbd0 	bl	8003944 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a8:	f7fd fbcc 	bl	8003944 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e087      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ba:	4b27      	ldr	r3, [pc, #156]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69da      	ldr	r2, [r3, #28]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	3b01      	subs	r3, #1
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	061b      	lsls	r3, r3, #24
 80061ea:	491b      	ldr	r1, [pc, #108]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f0:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <HAL_RCC_OscConfig+0x478>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f6:	f7fd fba5 	bl	8003944 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061fe:	f7fd fba1 	bl	8003944 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e05c      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006210:	4b11      	ldr	r3, [pc, #68]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x416>
 800621c:	e054      	b.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800621e:	4b10      	ldr	r3, [pc, #64]	; (8006260 <HAL_RCC_OscConfig+0x478>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006224:	f7fd fb8e 	bl	8003944 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800622c:	f7fd fb8a 	bl	8003944 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e045      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800623e:	4b06      	ldr	r3, [pc, #24]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0x444>
 800624a:	e03d      	b.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d107      	bne.n	8006264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e038      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8006258:	40023800 	.word	0x40023800
 800625c:	40007000 	.word	0x40007000
 8006260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <HAL_RCC_OscConfig+0x4ec>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d028      	beq.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800627c:	429a      	cmp	r2, r3
 800627e:	d121      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628a:	429a      	cmp	r2, r3
 800628c:	d11a      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006294:	4013      	ands	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800629a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800629c:	4293      	cmp	r3, r2
 800629e:	d111      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	3b01      	subs	r3, #1
 80062ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40023800 	.word	0x40023800

080062d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0cc      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062ec:	4b68      	ldr	r3, [pc, #416]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d90c      	bls.n	8006314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fa:	4b65      	ldr	r3, [pc, #404]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006302:	4b63      	ldr	r3, [pc, #396]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d001      	beq.n	8006314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0b8      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d020      	beq.n	8006362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800632c:	4b59      	ldr	r3, [pc, #356]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4a58      	ldr	r2, [pc, #352]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006344:	4b53      	ldr	r3, [pc, #332]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4a52      	ldr	r2, [pc, #328]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800634e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006350:	4b50      	ldr	r3, [pc, #320]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	494d      	ldr	r1, [pc, #308]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d044      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	4b47      	ldr	r3, [pc, #284]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d119      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e07f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d003      	beq.n	8006396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006392:	2b03      	cmp	r3, #3
 8006394:	d107      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006396:	4b3f      	ldr	r3, [pc, #252]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e06f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a6:	4b3b      	ldr	r3, [pc, #236]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e067      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063b6:	4b37      	ldr	r3, [pc, #220]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f023 0203 	bic.w	r2, r3, #3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	4934      	ldr	r1, [pc, #208]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063c8:	f7fd fabc 	bl	8003944 <HAL_GetTick>
 80063cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ce:	e00a      	b.n	80063e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063d0:	f7fd fab8 	bl	8003944 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f241 3288 	movw	r2, #5000	; 0x1388
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e04f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e6:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 020c 	and.w	r2, r3, #12
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d1eb      	bne.n	80063d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063f8:	4b25      	ldr	r3, [pc, #148]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d20c      	bcs.n	8006420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b22      	ldr	r3, [pc, #136]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800640e:	4b20      	ldr	r3, [pc, #128]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e032      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800642c:	4b19      	ldr	r3, [pc, #100]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4916      	ldr	r1, [pc, #88]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800644a:	4b12      	ldr	r3, [pc, #72]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	490e      	ldr	r1, [pc, #56]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800645e:	f000 f821 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8006462:	4602      	mov	r2, r0
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	490a      	ldr	r1, [pc, #40]	; (8006498 <HAL_RCC_ClockConfig+0x1c0>)
 8006470:	5ccb      	ldrb	r3, [r1, r3]
 8006472:	fa22 f303 	lsr.w	r3, r2, r3
 8006476:	4a09      	ldr	r2, [pc, #36]	; (800649c <HAL_RCC_ClockConfig+0x1c4>)
 8006478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800647a:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <HAL_RCC_ClockConfig+0x1c8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f7fd fa1c 	bl	80038bc <HAL_InitTick>

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40023c00 	.word	0x40023c00
 8006494:	40023800 	.word	0x40023800
 8006498:	0800d674 	.word	0x0800d674
 800649c:	20000040 	.word	0x20000040
 80064a0:	20000044 	.word	0x20000044

080064a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a8:	b090      	sub	sp, #64	; 0x40
 80064aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	637b      	str	r3, [r7, #52]	; 0x34
 80064b0:	2300      	movs	r3, #0
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b4:	2300      	movs	r3, #0
 80064b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064bc:	4b59      	ldr	r3, [pc, #356]	; (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 030c 	and.w	r3, r3, #12
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d00d      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x40>
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	f200 80a1 	bhi.w	8006610 <HAL_RCC_GetSysClockFreq+0x16c>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x34>
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d003      	beq.n	80064de <HAL_RCC_GetSysClockFreq+0x3a>
 80064d6:	e09b      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064d8:	4b53      	ldr	r3, [pc, #332]	; (8006628 <HAL_RCC_GetSysClockFreq+0x184>)
 80064da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80064dc:	e09b      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064de:	4b53      	ldr	r3, [pc, #332]	; (800662c <HAL_RCC_GetSysClockFreq+0x188>)
 80064e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064e2:	e098      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064e4:	4b4f      	ldr	r3, [pc, #316]	; (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064ee:	4b4d      	ldr	r3, [pc, #308]	; (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d028      	beq.n	800654c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064fa:	4b4a      	ldr	r3, [pc, #296]	; (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	2200      	movs	r2, #0
 8006502:	623b      	str	r3, [r7, #32]
 8006504:	627a      	str	r2, [r7, #36]	; 0x24
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800650c:	2100      	movs	r1, #0
 800650e:	4b47      	ldr	r3, [pc, #284]	; (800662c <HAL_RCC_GetSysClockFreq+0x188>)
 8006510:	fb03 f201 	mul.w	r2, r3, r1
 8006514:	2300      	movs	r3, #0
 8006516:	fb00 f303 	mul.w	r3, r0, r3
 800651a:	4413      	add	r3, r2
 800651c:	4a43      	ldr	r2, [pc, #268]	; (800662c <HAL_RCC_GetSysClockFreq+0x188>)
 800651e:	fba0 1202 	umull	r1, r2, r0, r2
 8006522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006524:	460a      	mov	r2, r1
 8006526:	62ba      	str	r2, [r7, #40]	; 0x28
 8006528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800652a:	4413      	add	r3, r2
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006530:	2200      	movs	r2, #0
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	61fa      	str	r2, [r7, #28]
 8006536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800653a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800653e:	f7fa fbf3 	bl	8000d28 <__aeabi_uldivmod>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4613      	mov	r3, r2
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800654a:	e053      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800654c:	4b35      	ldr	r3, [pc, #212]	; (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	099b      	lsrs	r3, r3, #6
 8006552:	2200      	movs	r2, #0
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	617a      	str	r2, [r7, #20]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800655e:	f04f 0b00 	mov.w	fp, #0
 8006562:	4652      	mov	r2, sl
 8006564:	465b      	mov	r3, fp
 8006566:	f04f 0000 	mov.w	r0, #0
 800656a:	f04f 0100 	mov.w	r1, #0
 800656e:	0159      	lsls	r1, r3, #5
 8006570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006574:	0150      	lsls	r0, r2, #5
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	ebb2 080a 	subs.w	r8, r2, sl
 800657e:	eb63 090b 	sbc.w	r9, r3, fp
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800658e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006592:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006596:	ebb2 0408 	subs.w	r4, r2, r8
 800659a:	eb63 0509 	sbc.w	r5, r3, r9
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	00eb      	lsls	r3, r5, #3
 80065a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ac:	00e2      	lsls	r2, r4, #3
 80065ae:	4614      	mov	r4, r2
 80065b0:	461d      	mov	r5, r3
 80065b2:	eb14 030a 	adds.w	r3, r4, sl
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	eb45 030b 	adc.w	r3, r5, fp
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065ca:	4629      	mov	r1, r5
 80065cc:	028b      	lsls	r3, r1, #10
 80065ce:	4621      	mov	r1, r4
 80065d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d4:	4621      	mov	r1, r4
 80065d6:	028a      	lsls	r2, r1, #10
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065de:	2200      	movs	r2, #0
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	60fa      	str	r2, [r7, #12]
 80065e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065e8:	f7fa fb9e 	bl	8000d28 <__aeabi_uldivmod>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4613      	mov	r3, r2
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	0c1b      	lsrs	r3, r3, #16
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	3301      	adds	r3, #1
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800660e:	e002      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <HAL_RCC_GetSysClockFreq+0x184>)
 8006612:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006618:	4618      	mov	r0, r3
 800661a:	3740      	adds	r7, #64	; 0x40
 800661c:	46bd      	mov	sp, r7
 800661e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006622:	bf00      	nop
 8006624:	40023800 	.word	0x40023800
 8006628:	00f42400 	.word	0x00f42400
 800662c:	017d7840 	.word	0x017d7840

08006630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006634:	4b03      	ldr	r3, [pc, #12]	; (8006644 <HAL_RCC_GetHCLKFreq+0x14>)
 8006636:	681b      	ldr	r3, [r3, #0]
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000040 	.word	0x20000040

08006648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800664c:	f7ff fff0 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0a9b      	lsrs	r3, r3, #10
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4903      	ldr	r1, [pc, #12]	; (800666c <HAL_RCC_GetPCLK1Freq+0x24>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40023800 	.word	0x40023800
 800666c:	0800d684 	.word	0x0800d684

08006670 <__errno>:
 8006670:	4b01      	ldr	r3, [pc, #4]	; (8006678 <__errno+0x8>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	2000004c 	.word	0x2000004c

0800667c <__libc_init_array>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4d0d      	ldr	r5, [pc, #52]	; (80066b4 <__libc_init_array+0x38>)
 8006680:	4c0d      	ldr	r4, [pc, #52]	; (80066b8 <__libc_init_array+0x3c>)
 8006682:	1b64      	subs	r4, r4, r5
 8006684:	10a4      	asrs	r4, r4, #2
 8006686:	2600      	movs	r6, #0
 8006688:	42a6      	cmp	r6, r4
 800668a:	d109      	bne.n	80066a0 <__libc_init_array+0x24>
 800668c:	4d0b      	ldr	r5, [pc, #44]	; (80066bc <__libc_init_array+0x40>)
 800668e:	4c0c      	ldr	r4, [pc, #48]	; (80066c0 <__libc_init_array+0x44>)
 8006690:	f005 fbac 	bl	800bdec <_init>
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	2600      	movs	r6, #0
 800669a:	42a6      	cmp	r6, r4
 800669c:	d105      	bne.n	80066aa <__libc_init_array+0x2e>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a4:	4798      	blx	r3
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7ee      	b.n	8006688 <__libc_init_array+0xc>
 80066aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ae:	4798      	blx	r3
 80066b0:	3601      	adds	r6, #1
 80066b2:	e7f2      	b.n	800669a <__libc_init_array+0x1e>
 80066b4:	0800db78 	.word	0x0800db78
 80066b8:	0800db78 	.word	0x0800db78
 80066bc:	0800db78 	.word	0x0800db78
 80066c0:	0800db7c 	.word	0x0800db7c

080066c4 <memcpy>:
 80066c4:	440a      	add	r2, r1
 80066c6:	4291      	cmp	r1, r2
 80066c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066cc:	d100      	bne.n	80066d0 <memcpy+0xc>
 80066ce:	4770      	bx	lr
 80066d0:	b510      	push	{r4, lr}
 80066d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066da:	4291      	cmp	r1, r2
 80066dc:	d1f9      	bne.n	80066d2 <memcpy+0xe>
 80066de:	bd10      	pop	{r4, pc}

080066e0 <memmove>:
 80066e0:	4288      	cmp	r0, r1
 80066e2:	b510      	push	{r4, lr}
 80066e4:	eb01 0402 	add.w	r4, r1, r2
 80066e8:	d902      	bls.n	80066f0 <memmove+0x10>
 80066ea:	4284      	cmp	r4, r0
 80066ec:	4623      	mov	r3, r4
 80066ee:	d807      	bhi.n	8006700 <memmove+0x20>
 80066f0:	1e43      	subs	r3, r0, #1
 80066f2:	42a1      	cmp	r1, r4
 80066f4:	d008      	beq.n	8006708 <memmove+0x28>
 80066f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066fe:	e7f8      	b.n	80066f2 <memmove+0x12>
 8006700:	4402      	add	r2, r0
 8006702:	4601      	mov	r1, r0
 8006704:	428a      	cmp	r2, r1
 8006706:	d100      	bne.n	800670a <memmove+0x2a>
 8006708:	bd10      	pop	{r4, pc}
 800670a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800670e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006712:	e7f7      	b.n	8006704 <memmove+0x24>

08006714 <memset>:
 8006714:	4402      	add	r2, r0
 8006716:	4603      	mov	r3, r0
 8006718:	4293      	cmp	r3, r2
 800671a:	d100      	bne.n	800671e <memset+0xa>
 800671c:	4770      	bx	lr
 800671e:	f803 1b01 	strb.w	r1, [r3], #1
 8006722:	e7f9      	b.n	8006718 <memset+0x4>

08006724 <__cvt>:
 8006724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006728:	ec55 4b10 	vmov	r4, r5, d0
 800672c:	2d00      	cmp	r5, #0
 800672e:	460e      	mov	r6, r1
 8006730:	4619      	mov	r1, r3
 8006732:	462b      	mov	r3, r5
 8006734:	bfbb      	ittet	lt
 8006736:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800673a:	461d      	movlt	r5, r3
 800673c:	2300      	movge	r3, #0
 800673e:	232d      	movlt	r3, #45	; 0x2d
 8006740:	700b      	strb	r3, [r1, #0]
 8006742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006744:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006748:	4691      	mov	r9, r2
 800674a:	f023 0820 	bic.w	r8, r3, #32
 800674e:	bfbc      	itt	lt
 8006750:	4622      	movlt	r2, r4
 8006752:	4614      	movlt	r4, r2
 8006754:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006758:	d005      	beq.n	8006766 <__cvt+0x42>
 800675a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800675e:	d100      	bne.n	8006762 <__cvt+0x3e>
 8006760:	3601      	adds	r6, #1
 8006762:	2102      	movs	r1, #2
 8006764:	e000      	b.n	8006768 <__cvt+0x44>
 8006766:	2103      	movs	r1, #3
 8006768:	ab03      	add	r3, sp, #12
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	ab02      	add	r3, sp, #8
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	ec45 4b10 	vmov	d0, r4, r5
 8006774:	4653      	mov	r3, sl
 8006776:	4632      	mov	r2, r6
 8006778:	f001 fdae 	bl	80082d8 <_dtoa_r>
 800677c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006780:	4607      	mov	r7, r0
 8006782:	d102      	bne.n	800678a <__cvt+0x66>
 8006784:	f019 0f01 	tst.w	r9, #1
 8006788:	d022      	beq.n	80067d0 <__cvt+0xac>
 800678a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800678e:	eb07 0906 	add.w	r9, r7, r6
 8006792:	d110      	bne.n	80067b6 <__cvt+0x92>
 8006794:	783b      	ldrb	r3, [r7, #0]
 8006796:	2b30      	cmp	r3, #48	; 0x30
 8006798:	d10a      	bne.n	80067b0 <__cvt+0x8c>
 800679a:	2200      	movs	r2, #0
 800679c:	2300      	movs	r3, #0
 800679e:	4620      	mov	r0, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7fa f991 	bl	8000ac8 <__aeabi_dcmpeq>
 80067a6:	b918      	cbnz	r0, 80067b0 <__cvt+0x8c>
 80067a8:	f1c6 0601 	rsb	r6, r6, #1
 80067ac:	f8ca 6000 	str.w	r6, [sl]
 80067b0:	f8da 3000 	ldr.w	r3, [sl]
 80067b4:	4499      	add	r9, r3
 80067b6:	2200      	movs	r2, #0
 80067b8:	2300      	movs	r3, #0
 80067ba:	4620      	mov	r0, r4
 80067bc:	4629      	mov	r1, r5
 80067be:	f7fa f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80067c2:	b108      	cbz	r0, 80067c8 <__cvt+0xa4>
 80067c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80067c8:	2230      	movs	r2, #48	; 0x30
 80067ca:	9b03      	ldr	r3, [sp, #12]
 80067cc:	454b      	cmp	r3, r9
 80067ce:	d307      	bcc.n	80067e0 <__cvt+0xbc>
 80067d0:	9b03      	ldr	r3, [sp, #12]
 80067d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067d4:	1bdb      	subs	r3, r3, r7
 80067d6:	4638      	mov	r0, r7
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	b004      	add	sp, #16
 80067dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e0:	1c59      	adds	r1, r3, #1
 80067e2:	9103      	str	r1, [sp, #12]
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e7f0      	b.n	80067ca <__cvt+0xa6>

080067e8 <__exponent>:
 80067e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ea:	4603      	mov	r3, r0
 80067ec:	2900      	cmp	r1, #0
 80067ee:	bfb8      	it	lt
 80067f0:	4249      	neglt	r1, r1
 80067f2:	f803 2b02 	strb.w	r2, [r3], #2
 80067f6:	bfb4      	ite	lt
 80067f8:	222d      	movlt	r2, #45	; 0x2d
 80067fa:	222b      	movge	r2, #43	; 0x2b
 80067fc:	2909      	cmp	r1, #9
 80067fe:	7042      	strb	r2, [r0, #1]
 8006800:	dd2a      	ble.n	8006858 <__exponent+0x70>
 8006802:	f10d 0407 	add.w	r4, sp, #7
 8006806:	46a4      	mov	ip, r4
 8006808:	270a      	movs	r7, #10
 800680a:	46a6      	mov	lr, r4
 800680c:	460a      	mov	r2, r1
 800680e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006812:	fb07 1516 	mls	r5, r7, r6, r1
 8006816:	3530      	adds	r5, #48	; 0x30
 8006818:	2a63      	cmp	r2, #99	; 0x63
 800681a:	f104 34ff 	add.w	r4, r4, #4294967295
 800681e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006822:	4631      	mov	r1, r6
 8006824:	dcf1      	bgt.n	800680a <__exponent+0x22>
 8006826:	3130      	adds	r1, #48	; 0x30
 8006828:	f1ae 0502 	sub.w	r5, lr, #2
 800682c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006830:	1c44      	adds	r4, r0, #1
 8006832:	4629      	mov	r1, r5
 8006834:	4561      	cmp	r1, ip
 8006836:	d30a      	bcc.n	800684e <__exponent+0x66>
 8006838:	f10d 0209 	add.w	r2, sp, #9
 800683c:	eba2 020e 	sub.w	r2, r2, lr
 8006840:	4565      	cmp	r5, ip
 8006842:	bf88      	it	hi
 8006844:	2200      	movhi	r2, #0
 8006846:	4413      	add	r3, r2
 8006848:	1a18      	subs	r0, r3, r0
 800684a:	b003      	add	sp, #12
 800684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006852:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006856:	e7ed      	b.n	8006834 <__exponent+0x4c>
 8006858:	2330      	movs	r3, #48	; 0x30
 800685a:	3130      	adds	r1, #48	; 0x30
 800685c:	7083      	strb	r3, [r0, #2]
 800685e:	70c1      	strb	r1, [r0, #3]
 8006860:	1d03      	adds	r3, r0, #4
 8006862:	e7f1      	b.n	8006848 <__exponent+0x60>

08006864 <_printf_float>:
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	ed2d 8b02 	vpush	{d8}
 800686c:	b08d      	sub	sp, #52	; 0x34
 800686e:	460c      	mov	r4, r1
 8006870:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006874:	4616      	mov	r6, r2
 8006876:	461f      	mov	r7, r3
 8006878:	4605      	mov	r5, r0
 800687a:	f002 fe8b 	bl	8009594 <_localeconv_r>
 800687e:	f8d0 a000 	ldr.w	sl, [r0]
 8006882:	4650      	mov	r0, sl
 8006884:	f7f9 fca4 	bl	80001d0 <strlen>
 8006888:	2300      	movs	r3, #0
 800688a:	930a      	str	r3, [sp, #40]	; 0x28
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	f8d8 3000 	ldr.w	r3, [r8]
 8006894:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006898:	3307      	adds	r3, #7
 800689a:	f023 0307 	bic.w	r3, r3, #7
 800689e:	f103 0208 	add.w	r2, r3, #8
 80068a2:	f8c8 2000 	str.w	r2, [r8]
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068b6:	9307      	str	r3, [sp, #28]
 80068b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80068bc:	ee08 0a10 	vmov	s16, r0
 80068c0:	4b9f      	ldr	r3, [pc, #636]	; (8006b40 <_printf_float+0x2dc>)
 80068c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068c6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ca:	f7fa f92f 	bl	8000b2c <__aeabi_dcmpun>
 80068ce:	bb88      	cbnz	r0, 8006934 <_printf_float+0xd0>
 80068d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068d4:	4b9a      	ldr	r3, [pc, #616]	; (8006b40 <_printf_float+0x2dc>)
 80068d6:	f04f 32ff 	mov.w	r2, #4294967295
 80068da:	f7fa f909 	bl	8000af0 <__aeabi_dcmple>
 80068de:	bb48      	cbnz	r0, 8006934 <_printf_float+0xd0>
 80068e0:	2200      	movs	r2, #0
 80068e2:	2300      	movs	r3, #0
 80068e4:	4640      	mov	r0, r8
 80068e6:	4649      	mov	r1, r9
 80068e8:	f7fa f8f8 	bl	8000adc <__aeabi_dcmplt>
 80068ec:	b110      	cbz	r0, 80068f4 <_printf_float+0x90>
 80068ee:	232d      	movs	r3, #45	; 0x2d
 80068f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f4:	4b93      	ldr	r3, [pc, #588]	; (8006b44 <_printf_float+0x2e0>)
 80068f6:	4894      	ldr	r0, [pc, #592]	; (8006b48 <_printf_float+0x2e4>)
 80068f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068fc:	bf94      	ite	ls
 80068fe:	4698      	movls	r8, r3
 8006900:	4680      	movhi	r8, r0
 8006902:	2303      	movs	r3, #3
 8006904:	6123      	str	r3, [r4, #16]
 8006906:	9b05      	ldr	r3, [sp, #20]
 8006908:	f023 0204 	bic.w	r2, r3, #4
 800690c:	6022      	str	r2, [r4, #0]
 800690e:	f04f 0900 	mov.w	r9, #0
 8006912:	9700      	str	r7, [sp, #0]
 8006914:	4633      	mov	r3, r6
 8006916:	aa0b      	add	r2, sp, #44	; 0x2c
 8006918:	4621      	mov	r1, r4
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f9d8 	bl	8006cd0 <_printf_common>
 8006920:	3001      	adds	r0, #1
 8006922:	f040 8090 	bne.w	8006a46 <_printf_float+0x1e2>
 8006926:	f04f 30ff 	mov.w	r0, #4294967295
 800692a:	b00d      	add	sp, #52	; 0x34
 800692c:	ecbd 8b02 	vpop	{d8}
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006934:	4642      	mov	r2, r8
 8006936:	464b      	mov	r3, r9
 8006938:	4640      	mov	r0, r8
 800693a:	4649      	mov	r1, r9
 800693c:	f7fa f8f6 	bl	8000b2c <__aeabi_dcmpun>
 8006940:	b140      	cbz	r0, 8006954 <_printf_float+0xf0>
 8006942:	464b      	mov	r3, r9
 8006944:	2b00      	cmp	r3, #0
 8006946:	bfbc      	itt	lt
 8006948:	232d      	movlt	r3, #45	; 0x2d
 800694a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800694e:	487f      	ldr	r0, [pc, #508]	; (8006b4c <_printf_float+0x2e8>)
 8006950:	4b7f      	ldr	r3, [pc, #508]	; (8006b50 <_printf_float+0x2ec>)
 8006952:	e7d1      	b.n	80068f8 <_printf_float+0x94>
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800695a:	9206      	str	r2, [sp, #24]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	d13f      	bne.n	80069e0 <_printf_float+0x17c>
 8006960:	2306      	movs	r3, #6
 8006962:	6063      	str	r3, [r4, #4]
 8006964:	9b05      	ldr	r3, [sp, #20]
 8006966:	6861      	ldr	r1, [r4, #4]
 8006968:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800696c:	2300      	movs	r3, #0
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	ab0a      	add	r3, sp, #40	; 0x28
 8006972:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006976:	ab09      	add	r3, sp, #36	; 0x24
 8006978:	ec49 8b10 	vmov	d0, r8, r9
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	6022      	str	r2, [r4, #0]
 8006980:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006984:	4628      	mov	r0, r5
 8006986:	f7ff fecd 	bl	8006724 <__cvt>
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800698e:	2b47      	cmp	r3, #71	; 0x47
 8006990:	4680      	mov	r8, r0
 8006992:	d108      	bne.n	80069a6 <_printf_float+0x142>
 8006994:	1cc8      	adds	r0, r1, #3
 8006996:	db02      	blt.n	800699e <_printf_float+0x13a>
 8006998:	6863      	ldr	r3, [r4, #4]
 800699a:	4299      	cmp	r1, r3
 800699c:	dd41      	ble.n	8006a22 <_printf_float+0x1be>
 800699e:	f1ab 0b02 	sub.w	fp, fp, #2
 80069a2:	fa5f fb8b 	uxtb.w	fp, fp
 80069a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069aa:	d820      	bhi.n	80069ee <_printf_float+0x18a>
 80069ac:	3901      	subs	r1, #1
 80069ae:	465a      	mov	r2, fp
 80069b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069b4:	9109      	str	r1, [sp, #36]	; 0x24
 80069b6:	f7ff ff17 	bl	80067e8 <__exponent>
 80069ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069bc:	1813      	adds	r3, r2, r0
 80069be:	2a01      	cmp	r2, #1
 80069c0:	4681      	mov	r9, r0
 80069c2:	6123      	str	r3, [r4, #16]
 80069c4:	dc02      	bgt.n	80069cc <_printf_float+0x168>
 80069c6:	6822      	ldr	r2, [r4, #0]
 80069c8:	07d2      	lsls	r2, r2, #31
 80069ca:	d501      	bpl.n	80069d0 <_printf_float+0x16c>
 80069cc:	3301      	adds	r3, #1
 80069ce:	6123      	str	r3, [r4, #16]
 80069d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d09c      	beq.n	8006912 <_printf_float+0xae>
 80069d8:	232d      	movs	r3, #45	; 0x2d
 80069da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069de:	e798      	b.n	8006912 <_printf_float+0xae>
 80069e0:	9a06      	ldr	r2, [sp, #24]
 80069e2:	2a47      	cmp	r2, #71	; 0x47
 80069e4:	d1be      	bne.n	8006964 <_printf_float+0x100>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1bc      	bne.n	8006964 <_printf_float+0x100>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e7b9      	b.n	8006962 <_printf_float+0xfe>
 80069ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069f2:	d118      	bne.n	8006a26 <_printf_float+0x1c2>
 80069f4:	2900      	cmp	r1, #0
 80069f6:	6863      	ldr	r3, [r4, #4]
 80069f8:	dd0b      	ble.n	8006a12 <_printf_float+0x1ae>
 80069fa:	6121      	str	r1, [r4, #16]
 80069fc:	b913      	cbnz	r3, 8006a04 <_printf_float+0x1a0>
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	07d0      	lsls	r0, r2, #31
 8006a02:	d502      	bpl.n	8006a0a <_printf_float+0x1a6>
 8006a04:	3301      	adds	r3, #1
 8006a06:	440b      	add	r3, r1
 8006a08:	6123      	str	r3, [r4, #16]
 8006a0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a0c:	f04f 0900 	mov.w	r9, #0
 8006a10:	e7de      	b.n	80069d0 <_printf_float+0x16c>
 8006a12:	b913      	cbnz	r3, 8006a1a <_printf_float+0x1b6>
 8006a14:	6822      	ldr	r2, [r4, #0]
 8006a16:	07d2      	lsls	r2, r2, #31
 8006a18:	d501      	bpl.n	8006a1e <_printf_float+0x1ba>
 8006a1a:	3302      	adds	r3, #2
 8006a1c:	e7f4      	b.n	8006a08 <_printf_float+0x1a4>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e7f2      	b.n	8006a08 <_printf_float+0x1a4>
 8006a22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a28:	4299      	cmp	r1, r3
 8006a2a:	db05      	blt.n	8006a38 <_printf_float+0x1d4>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	6121      	str	r1, [r4, #16]
 8006a30:	07d8      	lsls	r0, r3, #31
 8006a32:	d5ea      	bpl.n	8006a0a <_printf_float+0x1a6>
 8006a34:	1c4b      	adds	r3, r1, #1
 8006a36:	e7e7      	b.n	8006a08 <_printf_float+0x1a4>
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	bfd4      	ite	le
 8006a3c:	f1c1 0202 	rsble	r2, r1, #2
 8006a40:	2201      	movgt	r2, #1
 8006a42:	4413      	add	r3, r2
 8006a44:	e7e0      	b.n	8006a08 <_printf_float+0x1a4>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	055a      	lsls	r2, r3, #21
 8006a4a:	d407      	bmi.n	8006a5c <_printf_float+0x1f8>
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	4642      	mov	r2, r8
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	47b8      	blx	r7
 8006a56:	3001      	adds	r0, #1
 8006a58:	d12c      	bne.n	8006ab4 <_printf_float+0x250>
 8006a5a:	e764      	b.n	8006926 <_printf_float+0xc2>
 8006a5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a60:	f240 80e0 	bls.w	8006c24 <_printf_float+0x3c0>
 8006a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f7fa f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d034      	beq.n	8006ade <_printf_float+0x27a>
 8006a74:	4a37      	ldr	r2, [pc, #220]	; (8006b54 <_printf_float+0x2f0>)
 8006a76:	2301      	movs	r3, #1
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f43f af51 	beq.w	8006926 <_printf_float+0xc2>
 8006a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	db02      	blt.n	8006a92 <_printf_float+0x22e>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	07d8      	lsls	r0, r3, #31
 8006a90:	d510      	bpl.n	8006ab4 <_printf_float+0x250>
 8006a92:	ee18 3a10 	vmov	r3, s16
 8006a96:	4652      	mov	r2, sl
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	f43f af41 	beq.w	8006926 <_printf_float+0xc2>
 8006aa4:	f04f 0800 	mov.w	r8, #0
 8006aa8:	f104 091a 	add.w	r9, r4, #26
 8006aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	4543      	cmp	r3, r8
 8006ab2:	dc09      	bgt.n	8006ac8 <_printf_float+0x264>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	f100 8105 	bmi.w	8006cc6 <_printf_float+0x462>
 8006abc:	68e0      	ldr	r0, [r4, #12]
 8006abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac0:	4298      	cmp	r0, r3
 8006ac2:	bfb8      	it	lt
 8006ac4:	4618      	movlt	r0, r3
 8006ac6:	e730      	b.n	800692a <_printf_float+0xc6>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	464a      	mov	r2, r9
 8006acc:	4631      	mov	r1, r6
 8006ace:	4628      	mov	r0, r5
 8006ad0:	47b8      	blx	r7
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	f43f af27 	beq.w	8006926 <_printf_float+0xc2>
 8006ad8:	f108 0801 	add.w	r8, r8, #1
 8006adc:	e7e6      	b.n	8006aac <_printf_float+0x248>
 8006ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dc39      	bgt.n	8006b58 <_printf_float+0x2f4>
 8006ae4:	4a1b      	ldr	r2, [pc, #108]	; (8006b54 <_printf_float+0x2f0>)
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	f43f af19 	beq.w	8006926 <_printf_float+0xc2>
 8006af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006af8:	4313      	orrs	r3, r2
 8006afa:	d102      	bne.n	8006b02 <_printf_float+0x29e>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	07d9      	lsls	r1, r3, #31
 8006b00:	d5d8      	bpl.n	8006ab4 <_printf_float+0x250>
 8006b02:	ee18 3a10 	vmov	r3, s16
 8006b06:	4652      	mov	r2, sl
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f43f af09 	beq.w	8006926 <_printf_float+0xc2>
 8006b14:	f04f 0900 	mov.w	r9, #0
 8006b18:	f104 0a1a 	add.w	sl, r4, #26
 8006b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1e:	425b      	negs	r3, r3
 8006b20:	454b      	cmp	r3, r9
 8006b22:	dc01      	bgt.n	8006b28 <_printf_float+0x2c4>
 8006b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b26:	e792      	b.n	8006a4e <_printf_float+0x1ea>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4652      	mov	r2, sl
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	f43f aef7 	beq.w	8006926 <_printf_float+0xc2>
 8006b38:	f109 0901 	add.w	r9, r9, #1
 8006b3c:	e7ee      	b.n	8006b1c <_printf_float+0x2b8>
 8006b3e:	bf00      	nop
 8006b40:	7fefffff 	.word	0x7fefffff
 8006b44:	0800d698 	.word	0x0800d698
 8006b48:	0800d69c 	.word	0x0800d69c
 8006b4c:	0800d6a4 	.word	0x0800d6a4
 8006b50:	0800d6a0 	.word	0x0800d6a0
 8006b54:	0800d6a8 	.word	0x0800d6a8
 8006b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	bfa8      	it	ge
 8006b60:	461a      	movge	r2, r3
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	4691      	mov	r9, r2
 8006b66:	dc37      	bgt.n	8006bd8 <_printf_float+0x374>
 8006b68:	f04f 0b00 	mov.w	fp, #0
 8006b6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b70:	f104 021a 	add.w	r2, r4, #26
 8006b74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b76:	9305      	str	r3, [sp, #20]
 8006b78:	eba3 0309 	sub.w	r3, r3, r9
 8006b7c:	455b      	cmp	r3, fp
 8006b7e:	dc33      	bgt.n	8006be8 <_printf_float+0x384>
 8006b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b84:	429a      	cmp	r2, r3
 8006b86:	db3b      	blt.n	8006c00 <_printf_float+0x39c>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	07da      	lsls	r2, r3, #31
 8006b8c:	d438      	bmi.n	8006c00 <_printf_float+0x39c>
 8006b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b90:	9a05      	ldr	r2, [sp, #20]
 8006b92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b94:	1a9a      	subs	r2, r3, r2
 8006b96:	eba3 0901 	sub.w	r9, r3, r1
 8006b9a:	4591      	cmp	r9, r2
 8006b9c:	bfa8      	it	ge
 8006b9e:	4691      	movge	r9, r2
 8006ba0:	f1b9 0f00 	cmp.w	r9, #0
 8006ba4:	dc35      	bgt.n	8006c12 <_printf_float+0x3ae>
 8006ba6:	f04f 0800 	mov.w	r8, #0
 8006baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bae:	f104 0a1a 	add.w	sl, r4, #26
 8006bb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bb6:	1a9b      	subs	r3, r3, r2
 8006bb8:	eba3 0309 	sub.w	r3, r3, r9
 8006bbc:	4543      	cmp	r3, r8
 8006bbe:	f77f af79 	ble.w	8006ab4 <_printf_float+0x250>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4652      	mov	r2, sl
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4628      	mov	r0, r5
 8006bca:	47b8      	blx	r7
 8006bcc:	3001      	adds	r0, #1
 8006bce:	f43f aeaa 	beq.w	8006926 <_printf_float+0xc2>
 8006bd2:	f108 0801 	add.w	r8, r8, #1
 8006bd6:	e7ec      	b.n	8006bb2 <_printf_float+0x34e>
 8006bd8:	4613      	mov	r3, r2
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4642      	mov	r2, r8
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	d1c0      	bne.n	8006b68 <_printf_float+0x304>
 8006be6:	e69e      	b.n	8006926 <_printf_float+0xc2>
 8006be8:	2301      	movs	r3, #1
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	9205      	str	r2, [sp, #20]
 8006bf0:	47b8      	blx	r7
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	f43f ae97 	beq.w	8006926 <_printf_float+0xc2>
 8006bf8:	9a05      	ldr	r2, [sp, #20]
 8006bfa:	f10b 0b01 	add.w	fp, fp, #1
 8006bfe:	e7b9      	b.n	8006b74 <_printf_float+0x310>
 8006c00:	ee18 3a10 	vmov	r3, s16
 8006c04:	4652      	mov	r2, sl
 8006c06:	4631      	mov	r1, r6
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d1be      	bne.n	8006b8e <_printf_float+0x32a>
 8006c10:	e689      	b.n	8006926 <_printf_float+0xc2>
 8006c12:	9a05      	ldr	r2, [sp, #20]
 8006c14:	464b      	mov	r3, r9
 8006c16:	4442      	add	r2, r8
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d1c1      	bne.n	8006ba6 <_printf_float+0x342>
 8006c22:	e680      	b.n	8006926 <_printf_float+0xc2>
 8006c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c26:	2a01      	cmp	r2, #1
 8006c28:	dc01      	bgt.n	8006c2e <_printf_float+0x3ca>
 8006c2a:	07db      	lsls	r3, r3, #31
 8006c2c:	d538      	bpl.n	8006ca0 <_printf_float+0x43c>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4642      	mov	r2, r8
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f ae74 	beq.w	8006926 <_printf_float+0xc2>
 8006c3e:	ee18 3a10 	vmov	r3, s16
 8006c42:	4652      	mov	r2, sl
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f43f ae6b 	beq.w	8006926 <_printf_float+0xc2>
 8006c50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c54:	2200      	movs	r2, #0
 8006c56:	2300      	movs	r3, #0
 8006c58:	f7f9 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c5c:	b9d8      	cbnz	r0, 8006c96 <_printf_float+0x432>
 8006c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c60:	f108 0201 	add.w	r2, r8, #1
 8006c64:	3b01      	subs	r3, #1
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d10e      	bne.n	8006c8e <_printf_float+0x42a>
 8006c70:	e659      	b.n	8006926 <_printf_float+0xc2>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4652      	mov	r2, sl
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f43f ae52 	beq.w	8006926 <_printf_float+0xc2>
 8006c82:	f108 0801 	add.w	r8, r8, #1
 8006c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	4543      	cmp	r3, r8
 8006c8c:	dcf1      	bgt.n	8006c72 <_printf_float+0x40e>
 8006c8e:	464b      	mov	r3, r9
 8006c90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c94:	e6dc      	b.n	8006a50 <_printf_float+0x1ec>
 8006c96:	f04f 0800 	mov.w	r8, #0
 8006c9a:	f104 0a1a 	add.w	sl, r4, #26
 8006c9e:	e7f2      	b.n	8006c86 <_printf_float+0x422>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4642      	mov	r2, r8
 8006ca4:	e7df      	b.n	8006c66 <_printf_float+0x402>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	464a      	mov	r2, r9
 8006caa:	4631      	mov	r1, r6
 8006cac:	4628      	mov	r0, r5
 8006cae:	47b8      	blx	r7
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	f43f ae38 	beq.w	8006926 <_printf_float+0xc2>
 8006cb6:	f108 0801 	add.w	r8, r8, #1
 8006cba:	68e3      	ldr	r3, [r4, #12]
 8006cbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cbe:	1a5b      	subs	r3, r3, r1
 8006cc0:	4543      	cmp	r3, r8
 8006cc2:	dcf0      	bgt.n	8006ca6 <_printf_float+0x442>
 8006cc4:	e6fa      	b.n	8006abc <_printf_float+0x258>
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	f104 0919 	add.w	r9, r4, #25
 8006cce:	e7f4      	b.n	8006cba <_printf_float+0x456>

08006cd0 <_printf_common>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	4699      	mov	r9, r3
 8006cd8:	688a      	ldr	r2, [r1, #8]
 8006cda:	690b      	ldr	r3, [r1, #16]
 8006cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	bfb8      	it	lt
 8006ce4:	4613      	movlt	r3, r2
 8006ce6:	6033      	str	r3, [r6, #0]
 8006ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cec:	4607      	mov	r7, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b10a      	cbz	r2, 8006cf6 <_printf_common+0x26>
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	6033      	str	r3, [r6, #0]
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	0699      	lsls	r1, r3, #26
 8006cfa:	bf42      	ittt	mi
 8006cfc:	6833      	ldrmi	r3, [r6, #0]
 8006cfe:	3302      	addmi	r3, #2
 8006d00:	6033      	strmi	r3, [r6, #0]
 8006d02:	6825      	ldr	r5, [r4, #0]
 8006d04:	f015 0506 	ands.w	r5, r5, #6
 8006d08:	d106      	bne.n	8006d18 <_printf_common+0x48>
 8006d0a:	f104 0a19 	add.w	sl, r4, #25
 8006d0e:	68e3      	ldr	r3, [r4, #12]
 8006d10:	6832      	ldr	r2, [r6, #0]
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	42ab      	cmp	r3, r5
 8006d16:	dc26      	bgt.n	8006d66 <_printf_common+0x96>
 8006d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d1c:	1e13      	subs	r3, r2, #0
 8006d1e:	6822      	ldr	r2, [r4, #0]
 8006d20:	bf18      	it	ne
 8006d22:	2301      	movne	r3, #1
 8006d24:	0692      	lsls	r2, r2, #26
 8006d26:	d42b      	bmi.n	8006d80 <_printf_common+0xb0>
 8006d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	4638      	mov	r0, r7
 8006d30:	47c0      	blx	r8
 8006d32:	3001      	adds	r0, #1
 8006d34:	d01e      	beq.n	8006d74 <_printf_common+0xa4>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	68e5      	ldr	r5, [r4, #12]
 8006d3a:	6832      	ldr	r2, [r6, #0]
 8006d3c:	f003 0306 	and.w	r3, r3, #6
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	bf08      	it	eq
 8006d44:	1aad      	subeq	r5, r5, r2
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	6922      	ldr	r2, [r4, #16]
 8006d4a:	bf0c      	ite	eq
 8006d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d50:	2500      	movne	r5, #0
 8006d52:	4293      	cmp	r3, r2
 8006d54:	bfc4      	itt	gt
 8006d56:	1a9b      	subgt	r3, r3, r2
 8006d58:	18ed      	addgt	r5, r5, r3
 8006d5a:	2600      	movs	r6, #0
 8006d5c:	341a      	adds	r4, #26
 8006d5e:	42b5      	cmp	r5, r6
 8006d60:	d11a      	bne.n	8006d98 <_printf_common+0xc8>
 8006d62:	2000      	movs	r0, #0
 8006d64:	e008      	b.n	8006d78 <_printf_common+0xa8>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	47c0      	blx	r8
 8006d70:	3001      	adds	r0, #1
 8006d72:	d103      	bne.n	8006d7c <_printf_common+0xac>
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295
 8006d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	e7c6      	b.n	8006d0e <_printf_common+0x3e>
 8006d80:	18e1      	adds	r1, r4, r3
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	2030      	movs	r0, #48	; 0x30
 8006d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d8a:	4422      	add	r2, r4
 8006d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d94:	3302      	adds	r3, #2
 8006d96:	e7c7      	b.n	8006d28 <_printf_common+0x58>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4638      	mov	r0, r7
 8006da0:	47c0      	blx	r8
 8006da2:	3001      	adds	r0, #1
 8006da4:	d0e6      	beq.n	8006d74 <_printf_common+0xa4>
 8006da6:	3601      	adds	r6, #1
 8006da8:	e7d9      	b.n	8006d5e <_printf_common+0x8e>
	...

08006dac <_printf_i>:
 8006dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db0:	7e0f      	ldrb	r7, [r1, #24]
 8006db2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006db4:	2f78      	cmp	r7, #120	; 0x78
 8006db6:	4691      	mov	r9, r2
 8006db8:	4680      	mov	r8, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	469a      	mov	sl, r3
 8006dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dc2:	d807      	bhi.n	8006dd4 <_printf_i+0x28>
 8006dc4:	2f62      	cmp	r7, #98	; 0x62
 8006dc6:	d80a      	bhi.n	8006dde <_printf_i+0x32>
 8006dc8:	2f00      	cmp	r7, #0
 8006dca:	f000 80d8 	beq.w	8006f7e <_printf_i+0x1d2>
 8006dce:	2f58      	cmp	r7, #88	; 0x58
 8006dd0:	f000 80a3 	beq.w	8006f1a <_printf_i+0x16e>
 8006dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ddc:	e03a      	b.n	8006e54 <_printf_i+0xa8>
 8006dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006de2:	2b15      	cmp	r3, #21
 8006de4:	d8f6      	bhi.n	8006dd4 <_printf_i+0x28>
 8006de6:	a101      	add	r1, pc, #4	; (adr r1, 8006dec <_printf_i+0x40>)
 8006de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dec:	08006e45 	.word	0x08006e45
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006dd5 	.word	0x08006dd5
 8006df8:	08006dd5 	.word	0x08006dd5
 8006dfc:	08006dd5 	.word	0x08006dd5
 8006e00:	08006dd5 	.word	0x08006dd5
 8006e04:	08006e59 	.word	0x08006e59
 8006e08:	08006dd5 	.word	0x08006dd5
 8006e0c:	08006dd5 	.word	0x08006dd5
 8006e10:	08006dd5 	.word	0x08006dd5
 8006e14:	08006dd5 	.word	0x08006dd5
 8006e18:	08006f65 	.word	0x08006f65
 8006e1c:	08006e89 	.word	0x08006e89
 8006e20:	08006f47 	.word	0x08006f47
 8006e24:	08006dd5 	.word	0x08006dd5
 8006e28:	08006dd5 	.word	0x08006dd5
 8006e2c:	08006f87 	.word	0x08006f87
 8006e30:	08006dd5 	.word	0x08006dd5
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	08006dd5 	.word	0x08006dd5
 8006e3c:	08006dd5 	.word	0x08006dd5
 8006e40:	08006f4f 	.word	0x08006f4f
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	1d1a      	adds	r2, r3, #4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	602a      	str	r2, [r5, #0]
 8006e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0a3      	b.n	8006fa0 <_printf_i+0x1f4>
 8006e58:	6820      	ldr	r0, [r4, #0]
 8006e5a:	6829      	ldr	r1, [r5, #0]
 8006e5c:	0606      	lsls	r6, r0, #24
 8006e5e:	f101 0304 	add.w	r3, r1, #4
 8006e62:	d50a      	bpl.n	8006e7a <_printf_i+0xce>
 8006e64:	680e      	ldr	r6, [r1, #0]
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	da03      	bge.n	8006e74 <_printf_i+0xc8>
 8006e6c:	232d      	movs	r3, #45	; 0x2d
 8006e6e:	4276      	negs	r6, r6
 8006e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e74:	485e      	ldr	r0, [pc, #376]	; (8006ff0 <_printf_i+0x244>)
 8006e76:	230a      	movs	r3, #10
 8006e78:	e019      	b.n	8006eae <_printf_i+0x102>
 8006e7a:	680e      	ldr	r6, [r1, #0]
 8006e7c:	602b      	str	r3, [r5, #0]
 8006e7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e82:	bf18      	it	ne
 8006e84:	b236      	sxthne	r6, r6
 8006e86:	e7ef      	b.n	8006e68 <_printf_i+0xbc>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	1d19      	adds	r1, r3, #4
 8006e8e:	6029      	str	r1, [r5, #0]
 8006e90:	0601      	lsls	r1, r0, #24
 8006e92:	d501      	bpl.n	8006e98 <_printf_i+0xec>
 8006e94:	681e      	ldr	r6, [r3, #0]
 8006e96:	e002      	b.n	8006e9e <_printf_i+0xf2>
 8006e98:	0646      	lsls	r6, r0, #25
 8006e9a:	d5fb      	bpl.n	8006e94 <_printf_i+0xe8>
 8006e9c:	881e      	ldrh	r6, [r3, #0]
 8006e9e:	4854      	ldr	r0, [pc, #336]	; (8006ff0 <_printf_i+0x244>)
 8006ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2308      	moveq	r3, #8
 8006ea6:	230a      	movne	r3, #10
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eae:	6865      	ldr	r5, [r4, #4]
 8006eb0:	60a5      	str	r5, [r4, #8]
 8006eb2:	2d00      	cmp	r5, #0
 8006eb4:	bfa2      	ittt	ge
 8006eb6:	6821      	ldrge	r1, [r4, #0]
 8006eb8:	f021 0104 	bicge.w	r1, r1, #4
 8006ebc:	6021      	strge	r1, [r4, #0]
 8006ebe:	b90e      	cbnz	r6, 8006ec4 <_printf_i+0x118>
 8006ec0:	2d00      	cmp	r5, #0
 8006ec2:	d04d      	beq.n	8006f60 <_printf_i+0x1b4>
 8006ec4:	4615      	mov	r5, r2
 8006ec6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eca:	fb03 6711 	mls	r7, r3, r1, r6
 8006ece:	5dc7      	ldrb	r7, [r0, r7]
 8006ed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ed4:	4637      	mov	r7, r6
 8006ed6:	42bb      	cmp	r3, r7
 8006ed8:	460e      	mov	r6, r1
 8006eda:	d9f4      	bls.n	8006ec6 <_printf_i+0x11a>
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d10b      	bne.n	8006ef8 <_printf_i+0x14c>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	07de      	lsls	r6, r3, #31
 8006ee4:	d508      	bpl.n	8006ef8 <_printf_i+0x14c>
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	6861      	ldr	r1, [r4, #4]
 8006eea:	4299      	cmp	r1, r3
 8006eec:	bfde      	ittt	le
 8006eee:	2330      	movle	r3, #48	; 0x30
 8006ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ef8:	1b52      	subs	r2, r2, r5
 8006efa:	6122      	str	r2, [r4, #16]
 8006efc:	f8cd a000 	str.w	sl, [sp]
 8006f00:	464b      	mov	r3, r9
 8006f02:	aa03      	add	r2, sp, #12
 8006f04:	4621      	mov	r1, r4
 8006f06:	4640      	mov	r0, r8
 8006f08:	f7ff fee2 	bl	8006cd0 <_printf_common>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d14c      	bne.n	8006faa <_printf_i+0x1fe>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	b004      	add	sp, #16
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1a:	4835      	ldr	r0, [pc, #212]	; (8006ff0 <_printf_i+0x244>)
 8006f1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f20:	6829      	ldr	r1, [r5, #0]
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f28:	6029      	str	r1, [r5, #0]
 8006f2a:	061d      	lsls	r5, r3, #24
 8006f2c:	d514      	bpl.n	8006f58 <_printf_i+0x1ac>
 8006f2e:	07df      	lsls	r7, r3, #31
 8006f30:	bf44      	itt	mi
 8006f32:	f043 0320 	orrmi.w	r3, r3, #32
 8006f36:	6023      	strmi	r3, [r4, #0]
 8006f38:	b91e      	cbnz	r6, 8006f42 <_printf_i+0x196>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f023 0320 	bic.w	r3, r3, #32
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	2310      	movs	r3, #16
 8006f44:	e7b0      	b.n	8006ea8 <_printf_i+0xfc>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	f043 0320 	orr.w	r3, r3, #32
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	2378      	movs	r3, #120	; 0x78
 8006f50:	4828      	ldr	r0, [pc, #160]	; (8006ff4 <_printf_i+0x248>)
 8006f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f56:	e7e3      	b.n	8006f20 <_printf_i+0x174>
 8006f58:	0659      	lsls	r1, r3, #25
 8006f5a:	bf48      	it	mi
 8006f5c:	b2b6      	uxthmi	r6, r6
 8006f5e:	e7e6      	b.n	8006f2e <_printf_i+0x182>
 8006f60:	4615      	mov	r5, r2
 8006f62:	e7bb      	b.n	8006edc <_printf_i+0x130>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	6826      	ldr	r6, [r4, #0]
 8006f68:	6961      	ldr	r1, [r4, #20]
 8006f6a:	1d18      	adds	r0, r3, #4
 8006f6c:	6028      	str	r0, [r5, #0]
 8006f6e:	0635      	lsls	r5, r6, #24
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	d501      	bpl.n	8006f78 <_printf_i+0x1cc>
 8006f74:	6019      	str	r1, [r3, #0]
 8006f76:	e002      	b.n	8006f7e <_printf_i+0x1d2>
 8006f78:	0670      	lsls	r0, r6, #25
 8006f7a:	d5fb      	bpl.n	8006f74 <_printf_i+0x1c8>
 8006f7c:	8019      	strh	r1, [r3, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	4615      	mov	r5, r2
 8006f84:	e7ba      	b.n	8006efc <_printf_i+0x150>
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	1d1a      	adds	r2, r3, #4
 8006f8a:	602a      	str	r2, [r5, #0]
 8006f8c:	681d      	ldr	r5, [r3, #0]
 8006f8e:	6862      	ldr	r2, [r4, #4]
 8006f90:	2100      	movs	r1, #0
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7f9 f924 	bl	80001e0 <memchr>
 8006f98:	b108      	cbz	r0, 8006f9e <_printf_i+0x1f2>
 8006f9a:	1b40      	subs	r0, r0, r5
 8006f9c:	6060      	str	r0, [r4, #4]
 8006f9e:	6863      	ldr	r3, [r4, #4]
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa8:	e7a8      	b.n	8006efc <_printf_i+0x150>
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	462a      	mov	r2, r5
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	47d0      	blx	sl
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d0ab      	beq.n	8006f10 <_printf_i+0x164>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	079b      	lsls	r3, r3, #30
 8006fbc:	d413      	bmi.n	8006fe6 <_printf_i+0x23a>
 8006fbe:	68e0      	ldr	r0, [r4, #12]
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	4298      	cmp	r0, r3
 8006fc4:	bfb8      	it	lt
 8006fc6:	4618      	movlt	r0, r3
 8006fc8:	e7a4      	b.n	8006f14 <_printf_i+0x168>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	47d0      	blx	sl
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d09b      	beq.n	8006f10 <_printf_i+0x164>
 8006fd8:	3501      	adds	r5, #1
 8006fda:	68e3      	ldr	r3, [r4, #12]
 8006fdc:	9903      	ldr	r1, [sp, #12]
 8006fde:	1a5b      	subs	r3, r3, r1
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	dcf2      	bgt.n	8006fca <_printf_i+0x21e>
 8006fe4:	e7eb      	b.n	8006fbe <_printf_i+0x212>
 8006fe6:	2500      	movs	r5, #0
 8006fe8:	f104 0619 	add.w	r6, r4, #25
 8006fec:	e7f5      	b.n	8006fda <_printf_i+0x22e>
 8006fee:	bf00      	nop
 8006ff0:	0800d6aa 	.word	0x0800d6aa
 8006ff4:	0800d6bb 	.word	0x0800d6bb

08006ff8 <_scanf_float>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	b087      	sub	sp, #28
 8006ffe:	4617      	mov	r7, r2
 8007000:	9303      	str	r3, [sp, #12]
 8007002:	688b      	ldr	r3, [r1, #8]
 8007004:	1e5a      	subs	r2, r3, #1
 8007006:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800700a:	bf83      	ittte	hi
 800700c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007010:	195b      	addhi	r3, r3, r5
 8007012:	9302      	strhi	r3, [sp, #8]
 8007014:	2300      	movls	r3, #0
 8007016:	bf86      	itte	hi
 8007018:	f240 135d 	movwhi	r3, #349	; 0x15d
 800701c:	608b      	strhi	r3, [r1, #8]
 800701e:	9302      	strls	r3, [sp, #8]
 8007020:	680b      	ldr	r3, [r1, #0]
 8007022:	468b      	mov	fp, r1
 8007024:	2500      	movs	r5, #0
 8007026:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800702a:	f84b 3b1c 	str.w	r3, [fp], #28
 800702e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007032:	4680      	mov	r8, r0
 8007034:	460c      	mov	r4, r1
 8007036:	465e      	mov	r6, fp
 8007038:	46aa      	mov	sl, r5
 800703a:	46a9      	mov	r9, r5
 800703c:	9501      	str	r5, [sp, #4]
 800703e:	68a2      	ldr	r2, [r4, #8]
 8007040:	b152      	cbz	r2, 8007058 <_scanf_float+0x60>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b4e      	cmp	r3, #78	; 0x4e
 8007048:	d864      	bhi.n	8007114 <_scanf_float+0x11c>
 800704a:	2b40      	cmp	r3, #64	; 0x40
 800704c:	d83c      	bhi.n	80070c8 <_scanf_float+0xd0>
 800704e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007052:	b2c8      	uxtb	r0, r1
 8007054:	280e      	cmp	r0, #14
 8007056:	d93a      	bls.n	80070ce <_scanf_float+0xd6>
 8007058:	f1b9 0f00 	cmp.w	r9, #0
 800705c:	d003      	beq.n	8007066 <_scanf_float+0x6e>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	f10a 3aff 	add.w	sl, sl, #4294967295
 800706a:	f1ba 0f01 	cmp.w	sl, #1
 800706e:	f200 8113 	bhi.w	8007298 <_scanf_float+0x2a0>
 8007072:	455e      	cmp	r6, fp
 8007074:	f200 8105 	bhi.w	8007282 <_scanf_float+0x28a>
 8007078:	2501      	movs	r5, #1
 800707a:	4628      	mov	r0, r5
 800707c:	b007      	add	sp, #28
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007086:	2a0d      	cmp	r2, #13
 8007088:	d8e6      	bhi.n	8007058 <_scanf_float+0x60>
 800708a:	a101      	add	r1, pc, #4	; (adr r1, 8007090 <_scanf_float+0x98>)
 800708c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007090:	080071cf 	.word	0x080071cf
 8007094:	08007059 	.word	0x08007059
 8007098:	08007059 	.word	0x08007059
 800709c:	08007059 	.word	0x08007059
 80070a0:	0800722f 	.word	0x0800722f
 80070a4:	08007207 	.word	0x08007207
 80070a8:	08007059 	.word	0x08007059
 80070ac:	08007059 	.word	0x08007059
 80070b0:	080071dd 	.word	0x080071dd
 80070b4:	08007059 	.word	0x08007059
 80070b8:	08007059 	.word	0x08007059
 80070bc:	08007059 	.word	0x08007059
 80070c0:	08007059 	.word	0x08007059
 80070c4:	08007195 	.word	0x08007195
 80070c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80070cc:	e7db      	b.n	8007086 <_scanf_float+0x8e>
 80070ce:	290e      	cmp	r1, #14
 80070d0:	d8c2      	bhi.n	8007058 <_scanf_float+0x60>
 80070d2:	a001      	add	r0, pc, #4	; (adr r0, 80070d8 <_scanf_float+0xe0>)
 80070d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070d8:	08007187 	.word	0x08007187
 80070dc:	08007059 	.word	0x08007059
 80070e0:	08007187 	.word	0x08007187
 80070e4:	0800721b 	.word	0x0800721b
 80070e8:	08007059 	.word	0x08007059
 80070ec:	08007135 	.word	0x08007135
 80070f0:	08007171 	.word	0x08007171
 80070f4:	08007171 	.word	0x08007171
 80070f8:	08007171 	.word	0x08007171
 80070fc:	08007171 	.word	0x08007171
 8007100:	08007171 	.word	0x08007171
 8007104:	08007171 	.word	0x08007171
 8007108:	08007171 	.word	0x08007171
 800710c:	08007171 	.word	0x08007171
 8007110:	08007171 	.word	0x08007171
 8007114:	2b6e      	cmp	r3, #110	; 0x6e
 8007116:	d809      	bhi.n	800712c <_scanf_float+0x134>
 8007118:	2b60      	cmp	r3, #96	; 0x60
 800711a:	d8b2      	bhi.n	8007082 <_scanf_float+0x8a>
 800711c:	2b54      	cmp	r3, #84	; 0x54
 800711e:	d077      	beq.n	8007210 <_scanf_float+0x218>
 8007120:	2b59      	cmp	r3, #89	; 0x59
 8007122:	d199      	bne.n	8007058 <_scanf_float+0x60>
 8007124:	2d07      	cmp	r5, #7
 8007126:	d197      	bne.n	8007058 <_scanf_float+0x60>
 8007128:	2508      	movs	r5, #8
 800712a:	e029      	b.n	8007180 <_scanf_float+0x188>
 800712c:	2b74      	cmp	r3, #116	; 0x74
 800712e:	d06f      	beq.n	8007210 <_scanf_float+0x218>
 8007130:	2b79      	cmp	r3, #121	; 0x79
 8007132:	e7f6      	b.n	8007122 <_scanf_float+0x12a>
 8007134:	6821      	ldr	r1, [r4, #0]
 8007136:	05c8      	lsls	r0, r1, #23
 8007138:	d51a      	bpl.n	8007170 <_scanf_float+0x178>
 800713a:	9b02      	ldr	r3, [sp, #8]
 800713c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007140:	6021      	str	r1, [r4, #0]
 8007142:	f109 0901 	add.w	r9, r9, #1
 8007146:	b11b      	cbz	r3, 8007150 <_scanf_float+0x158>
 8007148:	3b01      	subs	r3, #1
 800714a:	3201      	adds	r2, #1
 800714c:	9302      	str	r3, [sp, #8]
 800714e:	60a2      	str	r2, [r4, #8]
 8007150:	68a3      	ldr	r3, [r4, #8]
 8007152:	3b01      	subs	r3, #1
 8007154:	60a3      	str	r3, [r4, #8]
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	3301      	adds	r3, #1
 800715a:	6123      	str	r3, [r4, #16]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3b01      	subs	r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	607b      	str	r3, [r7, #4]
 8007164:	f340 8084 	ble.w	8007270 <_scanf_float+0x278>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	603b      	str	r3, [r7, #0]
 800716e:	e766      	b.n	800703e <_scanf_float+0x46>
 8007170:	eb1a 0f05 	cmn.w	sl, r5
 8007174:	f47f af70 	bne.w	8007058 <_scanf_float+0x60>
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800717e:	6022      	str	r2, [r4, #0]
 8007180:	f806 3b01 	strb.w	r3, [r6], #1
 8007184:	e7e4      	b.n	8007150 <_scanf_float+0x158>
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	0610      	lsls	r0, r2, #24
 800718a:	f57f af65 	bpl.w	8007058 <_scanf_float+0x60>
 800718e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007192:	e7f4      	b.n	800717e <_scanf_float+0x186>
 8007194:	f1ba 0f00 	cmp.w	sl, #0
 8007198:	d10e      	bne.n	80071b8 <_scanf_float+0x1c0>
 800719a:	f1b9 0f00 	cmp.w	r9, #0
 800719e:	d10e      	bne.n	80071be <_scanf_float+0x1c6>
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071aa:	d108      	bne.n	80071be <_scanf_float+0x1c6>
 80071ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071b0:	6022      	str	r2, [r4, #0]
 80071b2:	f04f 0a01 	mov.w	sl, #1
 80071b6:	e7e3      	b.n	8007180 <_scanf_float+0x188>
 80071b8:	f1ba 0f02 	cmp.w	sl, #2
 80071bc:	d055      	beq.n	800726a <_scanf_float+0x272>
 80071be:	2d01      	cmp	r5, #1
 80071c0:	d002      	beq.n	80071c8 <_scanf_float+0x1d0>
 80071c2:	2d04      	cmp	r5, #4
 80071c4:	f47f af48 	bne.w	8007058 <_scanf_float+0x60>
 80071c8:	3501      	adds	r5, #1
 80071ca:	b2ed      	uxtb	r5, r5
 80071cc:	e7d8      	b.n	8007180 <_scanf_float+0x188>
 80071ce:	f1ba 0f01 	cmp.w	sl, #1
 80071d2:	f47f af41 	bne.w	8007058 <_scanf_float+0x60>
 80071d6:	f04f 0a02 	mov.w	sl, #2
 80071da:	e7d1      	b.n	8007180 <_scanf_float+0x188>
 80071dc:	b97d      	cbnz	r5, 80071fe <_scanf_float+0x206>
 80071de:	f1b9 0f00 	cmp.w	r9, #0
 80071e2:	f47f af3c 	bne.w	800705e <_scanf_float+0x66>
 80071e6:	6822      	ldr	r2, [r4, #0]
 80071e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071f0:	f47f af39 	bne.w	8007066 <_scanf_float+0x6e>
 80071f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071f8:	6022      	str	r2, [r4, #0]
 80071fa:	2501      	movs	r5, #1
 80071fc:	e7c0      	b.n	8007180 <_scanf_float+0x188>
 80071fe:	2d03      	cmp	r5, #3
 8007200:	d0e2      	beq.n	80071c8 <_scanf_float+0x1d0>
 8007202:	2d05      	cmp	r5, #5
 8007204:	e7de      	b.n	80071c4 <_scanf_float+0x1cc>
 8007206:	2d02      	cmp	r5, #2
 8007208:	f47f af26 	bne.w	8007058 <_scanf_float+0x60>
 800720c:	2503      	movs	r5, #3
 800720e:	e7b7      	b.n	8007180 <_scanf_float+0x188>
 8007210:	2d06      	cmp	r5, #6
 8007212:	f47f af21 	bne.w	8007058 <_scanf_float+0x60>
 8007216:	2507      	movs	r5, #7
 8007218:	e7b2      	b.n	8007180 <_scanf_float+0x188>
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	0591      	lsls	r1, r2, #22
 800721e:	f57f af1b 	bpl.w	8007058 <_scanf_float+0x60>
 8007222:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	f8cd 9004 	str.w	r9, [sp, #4]
 800722c:	e7a8      	b.n	8007180 <_scanf_float+0x188>
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007234:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007238:	d006      	beq.n	8007248 <_scanf_float+0x250>
 800723a:	0550      	lsls	r0, r2, #21
 800723c:	f57f af0c 	bpl.w	8007058 <_scanf_float+0x60>
 8007240:	f1b9 0f00 	cmp.w	r9, #0
 8007244:	f43f af0f 	beq.w	8007066 <_scanf_float+0x6e>
 8007248:	0591      	lsls	r1, r2, #22
 800724a:	bf58      	it	pl
 800724c:	9901      	ldrpl	r1, [sp, #4]
 800724e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007252:	bf58      	it	pl
 8007254:	eba9 0101 	subpl.w	r1, r9, r1
 8007258:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800725c:	bf58      	it	pl
 800725e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	f04f 0900 	mov.w	r9, #0
 8007268:	e78a      	b.n	8007180 <_scanf_float+0x188>
 800726a:	f04f 0a03 	mov.w	sl, #3
 800726e:	e787      	b.n	8007180 <_scanf_float+0x188>
 8007270:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007274:	4639      	mov	r1, r7
 8007276:	4640      	mov	r0, r8
 8007278:	4798      	blx	r3
 800727a:	2800      	cmp	r0, #0
 800727c:	f43f aedf 	beq.w	800703e <_scanf_float+0x46>
 8007280:	e6ea      	b.n	8007058 <_scanf_float+0x60>
 8007282:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007286:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800728a:	463a      	mov	r2, r7
 800728c:	4640      	mov	r0, r8
 800728e:	4798      	blx	r3
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	3b01      	subs	r3, #1
 8007294:	6123      	str	r3, [r4, #16]
 8007296:	e6ec      	b.n	8007072 <_scanf_float+0x7a>
 8007298:	1e6b      	subs	r3, r5, #1
 800729a:	2b06      	cmp	r3, #6
 800729c:	d825      	bhi.n	80072ea <_scanf_float+0x2f2>
 800729e:	2d02      	cmp	r5, #2
 80072a0:	d836      	bhi.n	8007310 <_scanf_float+0x318>
 80072a2:	455e      	cmp	r6, fp
 80072a4:	f67f aee8 	bls.w	8007078 <_scanf_float+0x80>
 80072a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072b0:	463a      	mov	r2, r7
 80072b2:	4640      	mov	r0, r8
 80072b4:	4798      	blx	r3
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	6123      	str	r3, [r4, #16]
 80072bc:	e7f1      	b.n	80072a2 <_scanf_float+0x2aa>
 80072be:	9802      	ldr	r0, [sp, #8]
 80072c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80072c8:	9002      	str	r0, [sp, #8]
 80072ca:	463a      	mov	r2, r7
 80072cc:	4640      	mov	r0, r8
 80072ce:	4798      	blx	r3
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072da:	fa5f fa8a 	uxtb.w	sl, sl
 80072de:	f1ba 0f02 	cmp.w	sl, #2
 80072e2:	d1ec      	bne.n	80072be <_scanf_float+0x2c6>
 80072e4:	3d03      	subs	r5, #3
 80072e6:	b2ed      	uxtb	r5, r5
 80072e8:	1b76      	subs	r6, r6, r5
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	05da      	lsls	r2, r3, #23
 80072ee:	d52f      	bpl.n	8007350 <_scanf_float+0x358>
 80072f0:	055b      	lsls	r3, r3, #21
 80072f2:	d510      	bpl.n	8007316 <_scanf_float+0x31e>
 80072f4:	455e      	cmp	r6, fp
 80072f6:	f67f aebf 	bls.w	8007078 <_scanf_float+0x80>
 80072fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007302:	463a      	mov	r2, r7
 8007304:	4640      	mov	r0, r8
 8007306:	4798      	blx	r3
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	3b01      	subs	r3, #1
 800730c:	6123      	str	r3, [r4, #16]
 800730e:	e7f1      	b.n	80072f4 <_scanf_float+0x2fc>
 8007310:	46aa      	mov	sl, r5
 8007312:	9602      	str	r6, [sp, #8]
 8007314:	e7df      	b.n	80072d6 <_scanf_float+0x2de>
 8007316:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800731a:	6923      	ldr	r3, [r4, #16]
 800731c:	2965      	cmp	r1, #101	; 0x65
 800731e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007322:	f106 35ff 	add.w	r5, r6, #4294967295
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	d00c      	beq.n	8007344 <_scanf_float+0x34c>
 800732a:	2945      	cmp	r1, #69	; 0x45
 800732c:	d00a      	beq.n	8007344 <_scanf_float+0x34c>
 800732e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007332:	463a      	mov	r2, r7
 8007334:	4640      	mov	r0, r8
 8007336:	4798      	blx	r3
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800733e:	3b01      	subs	r3, #1
 8007340:	1eb5      	subs	r5, r6, #2
 8007342:	6123      	str	r3, [r4, #16]
 8007344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007348:	463a      	mov	r2, r7
 800734a:	4640      	mov	r0, r8
 800734c:	4798      	blx	r3
 800734e:	462e      	mov	r6, r5
 8007350:	6825      	ldr	r5, [r4, #0]
 8007352:	f015 0510 	ands.w	r5, r5, #16
 8007356:	d159      	bne.n	800740c <_scanf_float+0x414>
 8007358:	7035      	strb	r5, [r6, #0]
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007364:	d11b      	bne.n	800739e <_scanf_float+0x3a6>
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	454b      	cmp	r3, r9
 800736a:	eba3 0209 	sub.w	r2, r3, r9
 800736e:	d123      	bne.n	80073b8 <_scanf_float+0x3c0>
 8007370:	2200      	movs	r2, #0
 8007372:	4659      	mov	r1, fp
 8007374:	4640      	mov	r0, r8
 8007376:	f000 fe99 	bl	80080ac <_strtod_r>
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	f012 0f02 	tst.w	r2, #2
 8007382:	ec57 6b10 	vmov	r6, r7, d0
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	d021      	beq.n	80073ce <_scanf_float+0x3d6>
 800738a:	9903      	ldr	r1, [sp, #12]
 800738c:	1d1a      	adds	r2, r3, #4
 800738e:	600a      	str	r2, [r1, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	e9c3 6700 	strd	r6, r7, [r3]
 8007396:	68e3      	ldr	r3, [r4, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	60e3      	str	r3, [r4, #12]
 800739c:	e66d      	b.n	800707a <_scanf_float+0x82>
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0e5      	beq.n	8007370 <_scanf_float+0x378>
 80073a4:	9905      	ldr	r1, [sp, #20]
 80073a6:	230a      	movs	r3, #10
 80073a8:	462a      	mov	r2, r5
 80073aa:	3101      	adds	r1, #1
 80073ac:	4640      	mov	r0, r8
 80073ae:	f000 ff05 	bl	80081bc <_strtol_r>
 80073b2:	9b04      	ldr	r3, [sp, #16]
 80073b4:	9e05      	ldr	r6, [sp, #20]
 80073b6:	1ac2      	subs	r2, r0, r3
 80073b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80073bc:	429e      	cmp	r6, r3
 80073be:	bf28      	it	cs
 80073c0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80073c4:	4912      	ldr	r1, [pc, #72]	; (8007410 <_scanf_float+0x418>)
 80073c6:	4630      	mov	r0, r6
 80073c8:	f000 f82c 	bl	8007424 <siprintf>
 80073cc:	e7d0      	b.n	8007370 <_scanf_float+0x378>
 80073ce:	9903      	ldr	r1, [sp, #12]
 80073d0:	f012 0f04 	tst.w	r2, #4
 80073d4:	f103 0204 	add.w	r2, r3, #4
 80073d8:	600a      	str	r2, [r1, #0]
 80073da:	d1d9      	bne.n	8007390 <_scanf_float+0x398>
 80073dc:	f8d3 8000 	ldr.w	r8, [r3]
 80073e0:	ee10 2a10 	vmov	r2, s0
 80073e4:	ee10 0a10 	vmov	r0, s0
 80073e8:	463b      	mov	r3, r7
 80073ea:	4639      	mov	r1, r7
 80073ec:	f7f9 fb9e 	bl	8000b2c <__aeabi_dcmpun>
 80073f0:	b128      	cbz	r0, 80073fe <_scanf_float+0x406>
 80073f2:	4808      	ldr	r0, [pc, #32]	; (8007414 <_scanf_float+0x41c>)
 80073f4:	f000 f810 	bl	8007418 <nanf>
 80073f8:	ed88 0a00 	vstr	s0, [r8]
 80073fc:	e7cb      	b.n	8007396 <_scanf_float+0x39e>
 80073fe:	4630      	mov	r0, r6
 8007400:	4639      	mov	r1, r7
 8007402:	f7f9 fbf1 	bl	8000be8 <__aeabi_d2f>
 8007406:	f8c8 0000 	str.w	r0, [r8]
 800740a:	e7c4      	b.n	8007396 <_scanf_float+0x39e>
 800740c:	2500      	movs	r5, #0
 800740e:	e634      	b.n	800707a <_scanf_float+0x82>
 8007410:	0800d6cc 	.word	0x0800d6cc
 8007414:	0800dad8 	.word	0x0800dad8

08007418 <nanf>:
 8007418:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007420 <nanf+0x8>
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	7fc00000 	.word	0x7fc00000

08007424 <siprintf>:
 8007424:	b40e      	push	{r1, r2, r3}
 8007426:	b500      	push	{lr}
 8007428:	b09c      	sub	sp, #112	; 0x70
 800742a:	ab1d      	add	r3, sp, #116	; 0x74
 800742c:	9002      	str	r0, [sp, #8]
 800742e:	9006      	str	r0, [sp, #24]
 8007430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007434:	4809      	ldr	r0, [pc, #36]	; (800745c <siprintf+0x38>)
 8007436:	9107      	str	r1, [sp, #28]
 8007438:	9104      	str	r1, [sp, #16]
 800743a:	4909      	ldr	r1, [pc, #36]	; (8007460 <siprintf+0x3c>)
 800743c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007440:	9105      	str	r1, [sp, #20]
 8007442:	6800      	ldr	r0, [r0, #0]
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	a902      	add	r1, sp, #8
 8007448:	f002 fed6 	bl	800a1f8 <_svfiprintf_r>
 800744c:	9b02      	ldr	r3, [sp, #8]
 800744e:	2200      	movs	r2, #0
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	b01c      	add	sp, #112	; 0x70
 8007454:	f85d eb04 	ldr.w	lr, [sp], #4
 8007458:	b003      	add	sp, #12
 800745a:	4770      	bx	lr
 800745c:	2000004c 	.word	0x2000004c
 8007460:	ffff0208 	.word	0xffff0208

08007464 <sulp>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	4604      	mov	r4, r0
 8007468:	460d      	mov	r5, r1
 800746a:	ec45 4b10 	vmov	d0, r4, r5
 800746e:	4616      	mov	r6, r2
 8007470:	f002 fc20 	bl	8009cb4 <__ulp>
 8007474:	ec51 0b10 	vmov	r0, r1, d0
 8007478:	b17e      	cbz	r6, 800749a <sulp+0x36>
 800747a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800747e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007482:	2b00      	cmp	r3, #0
 8007484:	dd09      	ble.n	800749a <sulp+0x36>
 8007486:	051b      	lsls	r3, r3, #20
 8007488:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800748c:	2400      	movs	r4, #0
 800748e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007492:	4622      	mov	r2, r4
 8007494:	462b      	mov	r3, r5
 8007496:	f7f9 f8af 	bl	80005f8 <__aeabi_dmul>
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	0000      	movs	r0, r0
	...

080074a0 <_strtod_l>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	ed2d 8b02 	vpush	{d8}
 80074a8:	b09d      	sub	sp, #116	; 0x74
 80074aa:	461f      	mov	r7, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	9318      	str	r3, [sp, #96]	; 0x60
 80074b0:	4ba2      	ldr	r3, [pc, #648]	; (800773c <_strtod_l+0x29c>)
 80074b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	4604      	mov	r4, r0
 80074ba:	4618      	mov	r0, r3
 80074bc:	4688      	mov	r8, r1
 80074be:	f7f8 fe87 	bl	80001d0 <strlen>
 80074c2:	f04f 0a00 	mov.w	sl, #0
 80074c6:	4605      	mov	r5, r0
 80074c8:	f04f 0b00 	mov.w	fp, #0
 80074cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80074d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074d2:	781a      	ldrb	r2, [r3, #0]
 80074d4:	2a2b      	cmp	r2, #43	; 0x2b
 80074d6:	d04e      	beq.n	8007576 <_strtod_l+0xd6>
 80074d8:	d83b      	bhi.n	8007552 <_strtod_l+0xb2>
 80074da:	2a0d      	cmp	r2, #13
 80074dc:	d834      	bhi.n	8007548 <_strtod_l+0xa8>
 80074de:	2a08      	cmp	r2, #8
 80074e0:	d834      	bhi.n	800754c <_strtod_l+0xac>
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	d03e      	beq.n	8007564 <_strtod_l+0xc4>
 80074e6:	2300      	movs	r3, #0
 80074e8:	930a      	str	r3, [sp, #40]	; 0x28
 80074ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80074ec:	7833      	ldrb	r3, [r6, #0]
 80074ee:	2b30      	cmp	r3, #48	; 0x30
 80074f0:	f040 80b0 	bne.w	8007654 <_strtod_l+0x1b4>
 80074f4:	7873      	ldrb	r3, [r6, #1]
 80074f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074fa:	2b58      	cmp	r3, #88	; 0x58
 80074fc:	d168      	bne.n	80075d0 <_strtod_l+0x130>
 80074fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	ab18      	add	r3, sp, #96	; 0x60
 8007504:	9702      	str	r7, [sp, #8]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	4a8d      	ldr	r2, [pc, #564]	; (8007740 <_strtod_l+0x2a0>)
 800750a:	ab19      	add	r3, sp, #100	; 0x64
 800750c:	a917      	add	r1, sp, #92	; 0x5c
 800750e:	4620      	mov	r0, r4
 8007510:	f001 fd38 	bl	8008f84 <__gethex>
 8007514:	f010 0707 	ands.w	r7, r0, #7
 8007518:	4605      	mov	r5, r0
 800751a:	d005      	beq.n	8007528 <_strtod_l+0x88>
 800751c:	2f06      	cmp	r7, #6
 800751e:	d12c      	bne.n	800757a <_strtod_l+0xda>
 8007520:	3601      	adds	r6, #1
 8007522:	2300      	movs	r3, #0
 8007524:	9617      	str	r6, [sp, #92]	; 0x5c
 8007526:	930a      	str	r3, [sp, #40]	; 0x28
 8007528:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800752a:	2b00      	cmp	r3, #0
 800752c:	f040 8590 	bne.w	8008050 <_strtod_l+0xbb0>
 8007530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007532:	b1eb      	cbz	r3, 8007570 <_strtod_l+0xd0>
 8007534:	4652      	mov	r2, sl
 8007536:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800753a:	ec43 2b10 	vmov	d0, r2, r3
 800753e:	b01d      	add	sp, #116	; 0x74
 8007540:	ecbd 8b02 	vpop	{d8}
 8007544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007548:	2a20      	cmp	r2, #32
 800754a:	d1cc      	bne.n	80074e6 <_strtod_l+0x46>
 800754c:	3301      	adds	r3, #1
 800754e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007550:	e7be      	b.n	80074d0 <_strtod_l+0x30>
 8007552:	2a2d      	cmp	r2, #45	; 0x2d
 8007554:	d1c7      	bne.n	80074e6 <_strtod_l+0x46>
 8007556:	2201      	movs	r2, #1
 8007558:	920a      	str	r2, [sp, #40]	; 0x28
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	9217      	str	r2, [sp, #92]	; 0x5c
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1c2      	bne.n	80074ea <_strtod_l+0x4a>
 8007564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007566:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 856e 	bne.w	800804c <_strtod_l+0xbac>
 8007570:	4652      	mov	r2, sl
 8007572:	465b      	mov	r3, fp
 8007574:	e7e1      	b.n	800753a <_strtod_l+0x9a>
 8007576:	2200      	movs	r2, #0
 8007578:	e7ee      	b.n	8007558 <_strtod_l+0xb8>
 800757a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800757c:	b13a      	cbz	r2, 800758e <_strtod_l+0xee>
 800757e:	2135      	movs	r1, #53	; 0x35
 8007580:	a81a      	add	r0, sp, #104	; 0x68
 8007582:	f002 fca2 	bl	8009eca <__copybits>
 8007586:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007588:	4620      	mov	r0, r4
 800758a:	f002 f861 	bl	8009650 <_Bfree>
 800758e:	3f01      	subs	r7, #1
 8007590:	2f04      	cmp	r7, #4
 8007592:	d806      	bhi.n	80075a2 <_strtod_l+0x102>
 8007594:	e8df f007 	tbb	[pc, r7]
 8007598:	1714030a 	.word	0x1714030a
 800759c:	0a          	.byte	0x0a
 800759d:	00          	.byte	0x00
 800759e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80075a2:	0728      	lsls	r0, r5, #28
 80075a4:	d5c0      	bpl.n	8007528 <_strtod_l+0x88>
 80075a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80075aa:	e7bd      	b.n	8007528 <_strtod_l+0x88>
 80075ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80075b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80075ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80075be:	e7f0      	b.n	80075a2 <_strtod_l+0x102>
 80075c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007744 <_strtod_l+0x2a4>
 80075c4:	e7ed      	b.n	80075a2 <_strtod_l+0x102>
 80075c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80075ca:	f04f 3aff 	mov.w	sl, #4294967295
 80075ce:	e7e8      	b.n	80075a2 <_strtod_l+0x102>
 80075d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b30      	cmp	r3, #48	; 0x30
 80075da:	d0f9      	beq.n	80075d0 <_strtod_l+0x130>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0a3      	beq.n	8007528 <_strtod_l+0x88>
 80075e0:	2301      	movs	r3, #1
 80075e2:	f04f 0900 	mov.w	r9, #0
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075ea:	9308      	str	r3, [sp, #32]
 80075ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80075f0:	464f      	mov	r7, r9
 80075f2:	220a      	movs	r2, #10
 80075f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80075f6:	7806      	ldrb	r6, [r0, #0]
 80075f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80075fc:	b2d9      	uxtb	r1, r3
 80075fe:	2909      	cmp	r1, #9
 8007600:	d92a      	bls.n	8007658 <_strtod_l+0x1b8>
 8007602:	9905      	ldr	r1, [sp, #20]
 8007604:	462a      	mov	r2, r5
 8007606:	f002 ff0f 	bl	800a428 <strncmp>
 800760a:	b398      	cbz	r0, 8007674 <_strtod_l+0x1d4>
 800760c:	2000      	movs	r0, #0
 800760e:	4632      	mov	r2, r6
 8007610:	463d      	mov	r5, r7
 8007612:	9005      	str	r0, [sp, #20]
 8007614:	4603      	mov	r3, r0
 8007616:	2a65      	cmp	r2, #101	; 0x65
 8007618:	d001      	beq.n	800761e <_strtod_l+0x17e>
 800761a:	2a45      	cmp	r2, #69	; 0x45
 800761c:	d118      	bne.n	8007650 <_strtod_l+0x1b0>
 800761e:	b91d      	cbnz	r5, 8007628 <_strtod_l+0x188>
 8007620:	9a04      	ldr	r2, [sp, #16]
 8007622:	4302      	orrs	r2, r0
 8007624:	d09e      	beq.n	8007564 <_strtod_l+0xc4>
 8007626:	2500      	movs	r5, #0
 8007628:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800762c:	f108 0201 	add.w	r2, r8, #1
 8007630:	9217      	str	r2, [sp, #92]	; 0x5c
 8007632:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007636:	2a2b      	cmp	r2, #43	; 0x2b
 8007638:	d075      	beq.n	8007726 <_strtod_l+0x286>
 800763a:	2a2d      	cmp	r2, #45	; 0x2d
 800763c:	d07b      	beq.n	8007736 <_strtod_l+0x296>
 800763e:	f04f 0c00 	mov.w	ip, #0
 8007642:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007646:	2909      	cmp	r1, #9
 8007648:	f240 8082 	bls.w	8007750 <_strtod_l+0x2b0>
 800764c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007650:	2600      	movs	r6, #0
 8007652:	e09d      	b.n	8007790 <_strtod_l+0x2f0>
 8007654:	2300      	movs	r3, #0
 8007656:	e7c4      	b.n	80075e2 <_strtod_l+0x142>
 8007658:	2f08      	cmp	r7, #8
 800765a:	bfd8      	it	le
 800765c:	9907      	ldrle	r1, [sp, #28]
 800765e:	f100 0001 	add.w	r0, r0, #1
 8007662:	bfda      	itte	le
 8007664:	fb02 3301 	mlale	r3, r2, r1, r3
 8007668:	9307      	strle	r3, [sp, #28]
 800766a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800766e:	3701      	adds	r7, #1
 8007670:	9017      	str	r0, [sp, #92]	; 0x5c
 8007672:	e7bf      	b.n	80075f4 <_strtod_l+0x154>
 8007674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007676:	195a      	adds	r2, r3, r5
 8007678:	9217      	str	r2, [sp, #92]	; 0x5c
 800767a:	5d5a      	ldrb	r2, [r3, r5]
 800767c:	2f00      	cmp	r7, #0
 800767e:	d037      	beq.n	80076f0 <_strtod_l+0x250>
 8007680:	9005      	str	r0, [sp, #20]
 8007682:	463d      	mov	r5, r7
 8007684:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007688:	2b09      	cmp	r3, #9
 800768a:	d912      	bls.n	80076b2 <_strtod_l+0x212>
 800768c:	2301      	movs	r3, #1
 800768e:	e7c2      	b.n	8007616 <_strtod_l+0x176>
 8007690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	9217      	str	r2, [sp, #92]	; 0x5c
 8007696:	785a      	ldrb	r2, [r3, #1]
 8007698:	3001      	adds	r0, #1
 800769a:	2a30      	cmp	r2, #48	; 0x30
 800769c:	d0f8      	beq.n	8007690 <_strtod_l+0x1f0>
 800769e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	f200 84d9 	bhi.w	800805a <_strtod_l+0xbba>
 80076a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076aa:	9005      	str	r0, [sp, #20]
 80076ac:	2000      	movs	r0, #0
 80076ae:	9308      	str	r3, [sp, #32]
 80076b0:	4605      	mov	r5, r0
 80076b2:	3a30      	subs	r2, #48	; 0x30
 80076b4:	f100 0301 	add.w	r3, r0, #1
 80076b8:	d014      	beq.n	80076e4 <_strtod_l+0x244>
 80076ba:	9905      	ldr	r1, [sp, #20]
 80076bc:	4419      	add	r1, r3
 80076be:	9105      	str	r1, [sp, #20]
 80076c0:	462b      	mov	r3, r5
 80076c2:	eb00 0e05 	add.w	lr, r0, r5
 80076c6:	210a      	movs	r1, #10
 80076c8:	4573      	cmp	r3, lr
 80076ca:	d113      	bne.n	80076f4 <_strtod_l+0x254>
 80076cc:	182b      	adds	r3, r5, r0
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	f105 0501 	add.w	r5, r5, #1
 80076d4:	4405      	add	r5, r0
 80076d6:	dc1c      	bgt.n	8007712 <_strtod_l+0x272>
 80076d8:	9907      	ldr	r1, [sp, #28]
 80076da:	230a      	movs	r3, #10
 80076dc:	fb03 2301 	mla	r3, r3, r1, r2
 80076e0:	9307      	str	r3, [sp, #28]
 80076e2:	2300      	movs	r3, #0
 80076e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076e6:	1c51      	adds	r1, r2, #1
 80076e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80076ea:	7852      	ldrb	r2, [r2, #1]
 80076ec:	4618      	mov	r0, r3
 80076ee:	e7c9      	b.n	8007684 <_strtod_l+0x1e4>
 80076f0:	4638      	mov	r0, r7
 80076f2:	e7d2      	b.n	800769a <_strtod_l+0x1fa>
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	dc04      	bgt.n	8007702 <_strtod_l+0x262>
 80076f8:	9e07      	ldr	r6, [sp, #28]
 80076fa:	434e      	muls	r6, r1
 80076fc:	9607      	str	r6, [sp, #28]
 80076fe:	3301      	adds	r3, #1
 8007700:	e7e2      	b.n	80076c8 <_strtod_l+0x228>
 8007702:	f103 0c01 	add.w	ip, r3, #1
 8007706:	f1bc 0f10 	cmp.w	ip, #16
 800770a:	bfd8      	it	le
 800770c:	fb01 f909 	mulle.w	r9, r1, r9
 8007710:	e7f5      	b.n	80076fe <_strtod_l+0x25e>
 8007712:	2d10      	cmp	r5, #16
 8007714:	bfdc      	itt	le
 8007716:	230a      	movle	r3, #10
 8007718:	fb03 2909 	mlale	r9, r3, r9, r2
 800771c:	e7e1      	b.n	80076e2 <_strtod_l+0x242>
 800771e:	2300      	movs	r3, #0
 8007720:	9305      	str	r3, [sp, #20]
 8007722:	2301      	movs	r3, #1
 8007724:	e77c      	b.n	8007620 <_strtod_l+0x180>
 8007726:	f04f 0c00 	mov.w	ip, #0
 800772a:	f108 0202 	add.w	r2, r8, #2
 800772e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007730:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007734:	e785      	b.n	8007642 <_strtod_l+0x1a2>
 8007736:	f04f 0c01 	mov.w	ip, #1
 800773a:	e7f6      	b.n	800772a <_strtod_l+0x28a>
 800773c:	0800d920 	.word	0x0800d920
 8007740:	0800d6d4 	.word	0x0800d6d4
 8007744:	7ff00000 	.word	0x7ff00000
 8007748:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800774a:	1c51      	adds	r1, r2, #1
 800774c:	9117      	str	r1, [sp, #92]	; 0x5c
 800774e:	7852      	ldrb	r2, [r2, #1]
 8007750:	2a30      	cmp	r2, #48	; 0x30
 8007752:	d0f9      	beq.n	8007748 <_strtod_l+0x2a8>
 8007754:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007758:	2908      	cmp	r1, #8
 800775a:	f63f af79 	bhi.w	8007650 <_strtod_l+0x1b0>
 800775e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007762:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007764:	9206      	str	r2, [sp, #24]
 8007766:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007768:	1c51      	adds	r1, r2, #1
 800776a:	9117      	str	r1, [sp, #92]	; 0x5c
 800776c:	7852      	ldrb	r2, [r2, #1]
 800776e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007772:	2e09      	cmp	r6, #9
 8007774:	d937      	bls.n	80077e6 <_strtod_l+0x346>
 8007776:	9e06      	ldr	r6, [sp, #24]
 8007778:	1b89      	subs	r1, r1, r6
 800777a:	2908      	cmp	r1, #8
 800777c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007780:	dc02      	bgt.n	8007788 <_strtod_l+0x2e8>
 8007782:	4576      	cmp	r6, lr
 8007784:	bfa8      	it	ge
 8007786:	4676      	movge	r6, lr
 8007788:	f1bc 0f00 	cmp.w	ip, #0
 800778c:	d000      	beq.n	8007790 <_strtod_l+0x2f0>
 800778e:	4276      	negs	r6, r6
 8007790:	2d00      	cmp	r5, #0
 8007792:	d14d      	bne.n	8007830 <_strtod_l+0x390>
 8007794:	9904      	ldr	r1, [sp, #16]
 8007796:	4301      	orrs	r1, r0
 8007798:	f47f aec6 	bne.w	8007528 <_strtod_l+0x88>
 800779c:	2b00      	cmp	r3, #0
 800779e:	f47f aee1 	bne.w	8007564 <_strtod_l+0xc4>
 80077a2:	2a69      	cmp	r2, #105	; 0x69
 80077a4:	d027      	beq.n	80077f6 <_strtod_l+0x356>
 80077a6:	dc24      	bgt.n	80077f2 <_strtod_l+0x352>
 80077a8:	2a49      	cmp	r2, #73	; 0x49
 80077aa:	d024      	beq.n	80077f6 <_strtod_l+0x356>
 80077ac:	2a4e      	cmp	r2, #78	; 0x4e
 80077ae:	f47f aed9 	bne.w	8007564 <_strtod_l+0xc4>
 80077b2:	499f      	ldr	r1, [pc, #636]	; (8007a30 <_strtod_l+0x590>)
 80077b4:	a817      	add	r0, sp, #92	; 0x5c
 80077b6:	f001 fe3d 	bl	8009434 <__match>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f43f aed2 	beq.w	8007564 <_strtod_l+0xc4>
 80077c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b28      	cmp	r3, #40	; 0x28
 80077c6:	d12d      	bne.n	8007824 <_strtod_l+0x384>
 80077c8:	499a      	ldr	r1, [pc, #616]	; (8007a34 <_strtod_l+0x594>)
 80077ca:	aa1a      	add	r2, sp, #104	; 0x68
 80077cc:	a817      	add	r0, sp, #92	; 0x5c
 80077ce:	f001 fe45 	bl	800945c <__hexnan>
 80077d2:	2805      	cmp	r0, #5
 80077d4:	d126      	bne.n	8007824 <_strtod_l+0x384>
 80077d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80077dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80077e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80077e4:	e6a0      	b.n	8007528 <_strtod_l+0x88>
 80077e6:	210a      	movs	r1, #10
 80077e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80077ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80077f0:	e7b9      	b.n	8007766 <_strtod_l+0x2c6>
 80077f2:	2a6e      	cmp	r2, #110	; 0x6e
 80077f4:	e7db      	b.n	80077ae <_strtod_l+0x30e>
 80077f6:	4990      	ldr	r1, [pc, #576]	; (8007a38 <_strtod_l+0x598>)
 80077f8:	a817      	add	r0, sp, #92	; 0x5c
 80077fa:	f001 fe1b 	bl	8009434 <__match>
 80077fe:	2800      	cmp	r0, #0
 8007800:	f43f aeb0 	beq.w	8007564 <_strtod_l+0xc4>
 8007804:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007806:	498d      	ldr	r1, [pc, #564]	; (8007a3c <_strtod_l+0x59c>)
 8007808:	3b01      	subs	r3, #1
 800780a:	a817      	add	r0, sp, #92	; 0x5c
 800780c:	9317      	str	r3, [sp, #92]	; 0x5c
 800780e:	f001 fe11 	bl	8009434 <__match>
 8007812:	b910      	cbnz	r0, 800781a <_strtod_l+0x37a>
 8007814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007816:	3301      	adds	r3, #1
 8007818:	9317      	str	r3, [sp, #92]	; 0x5c
 800781a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007a4c <_strtod_l+0x5ac>
 800781e:	f04f 0a00 	mov.w	sl, #0
 8007822:	e681      	b.n	8007528 <_strtod_l+0x88>
 8007824:	4886      	ldr	r0, [pc, #536]	; (8007a40 <_strtod_l+0x5a0>)
 8007826:	f002 fde7 	bl	800a3f8 <nan>
 800782a:	ec5b ab10 	vmov	sl, fp, d0
 800782e:	e67b      	b.n	8007528 <_strtod_l+0x88>
 8007830:	9b05      	ldr	r3, [sp, #20]
 8007832:	9807      	ldr	r0, [sp, #28]
 8007834:	1af3      	subs	r3, r6, r3
 8007836:	2f00      	cmp	r7, #0
 8007838:	bf08      	it	eq
 800783a:	462f      	moveq	r7, r5
 800783c:	2d10      	cmp	r5, #16
 800783e:	9306      	str	r3, [sp, #24]
 8007840:	46a8      	mov	r8, r5
 8007842:	bfa8      	it	ge
 8007844:	f04f 0810 	movge.w	r8, #16
 8007848:	f7f8 fe5c 	bl	8000504 <__aeabi_ui2d>
 800784c:	2d09      	cmp	r5, #9
 800784e:	4682      	mov	sl, r0
 8007850:	468b      	mov	fp, r1
 8007852:	dd13      	ble.n	800787c <_strtod_l+0x3dc>
 8007854:	4b7b      	ldr	r3, [pc, #492]	; (8007a44 <_strtod_l+0x5a4>)
 8007856:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800785a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800785e:	f7f8 fecb 	bl	80005f8 <__aeabi_dmul>
 8007862:	4682      	mov	sl, r0
 8007864:	4648      	mov	r0, r9
 8007866:	468b      	mov	fp, r1
 8007868:	f7f8 fe4c 	bl	8000504 <__aeabi_ui2d>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4650      	mov	r0, sl
 8007872:	4659      	mov	r1, fp
 8007874:	f7f8 fd0a 	bl	800028c <__adddf3>
 8007878:	4682      	mov	sl, r0
 800787a:	468b      	mov	fp, r1
 800787c:	2d0f      	cmp	r5, #15
 800787e:	dc38      	bgt.n	80078f2 <_strtod_l+0x452>
 8007880:	9b06      	ldr	r3, [sp, #24]
 8007882:	2b00      	cmp	r3, #0
 8007884:	f43f ae50 	beq.w	8007528 <_strtod_l+0x88>
 8007888:	dd24      	ble.n	80078d4 <_strtod_l+0x434>
 800788a:	2b16      	cmp	r3, #22
 800788c:	dc0b      	bgt.n	80078a6 <_strtod_l+0x406>
 800788e:	496d      	ldr	r1, [pc, #436]	; (8007a44 <_strtod_l+0x5a4>)
 8007890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007898:	4652      	mov	r2, sl
 800789a:	465b      	mov	r3, fp
 800789c:	f7f8 feac 	bl	80005f8 <__aeabi_dmul>
 80078a0:	4682      	mov	sl, r0
 80078a2:	468b      	mov	fp, r1
 80078a4:	e640      	b.n	8007528 <_strtod_l+0x88>
 80078a6:	9a06      	ldr	r2, [sp, #24]
 80078a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80078ac:	4293      	cmp	r3, r2
 80078ae:	db20      	blt.n	80078f2 <_strtod_l+0x452>
 80078b0:	4c64      	ldr	r4, [pc, #400]	; (8007a44 <_strtod_l+0x5a4>)
 80078b2:	f1c5 050f 	rsb	r5, r5, #15
 80078b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078ba:	4652      	mov	r2, sl
 80078bc:	465b      	mov	r3, fp
 80078be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078c2:	f7f8 fe99 	bl	80005f8 <__aeabi_dmul>
 80078c6:	9b06      	ldr	r3, [sp, #24]
 80078c8:	1b5d      	subs	r5, r3, r5
 80078ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80078ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078d2:	e7e3      	b.n	800789c <_strtod_l+0x3fc>
 80078d4:	9b06      	ldr	r3, [sp, #24]
 80078d6:	3316      	adds	r3, #22
 80078d8:	db0b      	blt.n	80078f2 <_strtod_l+0x452>
 80078da:	9b05      	ldr	r3, [sp, #20]
 80078dc:	1b9e      	subs	r6, r3, r6
 80078de:	4b59      	ldr	r3, [pc, #356]	; (8007a44 <_strtod_l+0x5a4>)
 80078e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80078e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078e8:	4650      	mov	r0, sl
 80078ea:	4659      	mov	r1, fp
 80078ec:	f7f8 ffae 	bl	800084c <__aeabi_ddiv>
 80078f0:	e7d6      	b.n	80078a0 <_strtod_l+0x400>
 80078f2:	9b06      	ldr	r3, [sp, #24]
 80078f4:	eba5 0808 	sub.w	r8, r5, r8
 80078f8:	4498      	add	r8, r3
 80078fa:	f1b8 0f00 	cmp.w	r8, #0
 80078fe:	dd74      	ble.n	80079ea <_strtod_l+0x54a>
 8007900:	f018 030f 	ands.w	r3, r8, #15
 8007904:	d00a      	beq.n	800791c <_strtod_l+0x47c>
 8007906:	494f      	ldr	r1, [pc, #316]	; (8007a44 <_strtod_l+0x5a4>)
 8007908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800790c:	4652      	mov	r2, sl
 800790e:	465b      	mov	r3, fp
 8007910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007914:	f7f8 fe70 	bl	80005f8 <__aeabi_dmul>
 8007918:	4682      	mov	sl, r0
 800791a:	468b      	mov	fp, r1
 800791c:	f038 080f 	bics.w	r8, r8, #15
 8007920:	d04f      	beq.n	80079c2 <_strtod_l+0x522>
 8007922:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007926:	dd22      	ble.n	800796e <_strtod_l+0x4ce>
 8007928:	2500      	movs	r5, #0
 800792a:	462e      	mov	r6, r5
 800792c:	9507      	str	r5, [sp, #28]
 800792e:	9505      	str	r5, [sp, #20]
 8007930:	2322      	movs	r3, #34	; 0x22
 8007932:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007a4c <_strtod_l+0x5ac>
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	f04f 0a00 	mov.w	sl, #0
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	2b00      	cmp	r3, #0
 8007940:	f43f adf2 	beq.w	8007528 <_strtod_l+0x88>
 8007944:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007946:	4620      	mov	r0, r4
 8007948:	f001 fe82 	bl	8009650 <_Bfree>
 800794c:	9905      	ldr	r1, [sp, #20]
 800794e:	4620      	mov	r0, r4
 8007950:	f001 fe7e 	bl	8009650 <_Bfree>
 8007954:	4631      	mov	r1, r6
 8007956:	4620      	mov	r0, r4
 8007958:	f001 fe7a 	bl	8009650 <_Bfree>
 800795c:	9907      	ldr	r1, [sp, #28]
 800795e:	4620      	mov	r0, r4
 8007960:	f001 fe76 	bl	8009650 <_Bfree>
 8007964:	4629      	mov	r1, r5
 8007966:	4620      	mov	r0, r4
 8007968:	f001 fe72 	bl	8009650 <_Bfree>
 800796c:	e5dc      	b.n	8007528 <_strtod_l+0x88>
 800796e:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <_strtod_l+0x5a8>)
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	2300      	movs	r3, #0
 8007974:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007978:	4650      	mov	r0, sl
 800797a:	4659      	mov	r1, fp
 800797c:	4699      	mov	r9, r3
 800797e:	f1b8 0f01 	cmp.w	r8, #1
 8007982:	dc21      	bgt.n	80079c8 <_strtod_l+0x528>
 8007984:	b10b      	cbz	r3, 800798a <_strtod_l+0x4ea>
 8007986:	4682      	mov	sl, r0
 8007988:	468b      	mov	fp, r1
 800798a:	4b2f      	ldr	r3, [pc, #188]	; (8007a48 <_strtod_l+0x5a8>)
 800798c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007990:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007994:	4652      	mov	r2, sl
 8007996:	465b      	mov	r3, fp
 8007998:	e9d9 0100 	ldrd	r0, r1, [r9]
 800799c:	f7f8 fe2c 	bl	80005f8 <__aeabi_dmul>
 80079a0:	4b2a      	ldr	r3, [pc, #168]	; (8007a4c <_strtod_l+0x5ac>)
 80079a2:	460a      	mov	r2, r1
 80079a4:	400b      	ands	r3, r1
 80079a6:	492a      	ldr	r1, [pc, #168]	; (8007a50 <_strtod_l+0x5b0>)
 80079a8:	428b      	cmp	r3, r1
 80079aa:	4682      	mov	sl, r0
 80079ac:	d8bc      	bhi.n	8007928 <_strtod_l+0x488>
 80079ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80079b2:	428b      	cmp	r3, r1
 80079b4:	bf86      	itte	hi
 80079b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007a54 <_strtod_l+0x5b4>
 80079ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80079be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80079c2:	2300      	movs	r3, #0
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	e084      	b.n	8007ad2 <_strtod_l+0x632>
 80079c8:	f018 0f01 	tst.w	r8, #1
 80079cc:	d005      	beq.n	80079da <_strtod_l+0x53a>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f7f8 fe10 	bl	80005f8 <__aeabi_dmul>
 80079d8:	2301      	movs	r3, #1
 80079da:	9a04      	ldr	r2, [sp, #16]
 80079dc:	3208      	adds	r2, #8
 80079de:	f109 0901 	add.w	r9, r9, #1
 80079e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80079e6:	9204      	str	r2, [sp, #16]
 80079e8:	e7c9      	b.n	800797e <_strtod_l+0x4de>
 80079ea:	d0ea      	beq.n	80079c2 <_strtod_l+0x522>
 80079ec:	f1c8 0800 	rsb	r8, r8, #0
 80079f0:	f018 020f 	ands.w	r2, r8, #15
 80079f4:	d00a      	beq.n	8007a0c <_strtod_l+0x56c>
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <_strtod_l+0x5a4>)
 80079f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079fc:	4650      	mov	r0, sl
 80079fe:	4659      	mov	r1, fp
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 ff22 	bl	800084c <__aeabi_ddiv>
 8007a08:	4682      	mov	sl, r0
 8007a0a:	468b      	mov	fp, r1
 8007a0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007a10:	d0d7      	beq.n	80079c2 <_strtod_l+0x522>
 8007a12:	f1b8 0f1f 	cmp.w	r8, #31
 8007a16:	dd1f      	ble.n	8007a58 <_strtod_l+0x5b8>
 8007a18:	2500      	movs	r5, #0
 8007a1a:	462e      	mov	r6, r5
 8007a1c:	9507      	str	r5, [sp, #28]
 8007a1e:	9505      	str	r5, [sp, #20]
 8007a20:	2322      	movs	r3, #34	; 0x22
 8007a22:	f04f 0a00 	mov.w	sl, #0
 8007a26:	f04f 0b00 	mov.w	fp, #0
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	e786      	b.n	800793c <_strtod_l+0x49c>
 8007a2e:	bf00      	nop
 8007a30:	0800d6a5 	.word	0x0800d6a5
 8007a34:	0800d6e8 	.word	0x0800d6e8
 8007a38:	0800d69d 	.word	0x0800d69d
 8007a3c:	0800d82c 	.word	0x0800d82c
 8007a40:	0800dad8 	.word	0x0800dad8
 8007a44:	0800d9b8 	.word	0x0800d9b8
 8007a48:	0800d990 	.word	0x0800d990
 8007a4c:	7ff00000 	.word	0x7ff00000
 8007a50:	7ca00000 	.word	0x7ca00000
 8007a54:	7fefffff 	.word	0x7fefffff
 8007a58:	f018 0310 	ands.w	r3, r8, #16
 8007a5c:	bf18      	it	ne
 8007a5e:	236a      	movne	r3, #106	; 0x6a
 8007a60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007e10 <_strtod_l+0x970>
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	4650      	mov	r0, sl
 8007a68:	4659      	mov	r1, fp
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f018 0f01 	tst.w	r8, #1
 8007a70:	d004      	beq.n	8007a7c <_strtod_l+0x5dc>
 8007a72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a76:	f7f8 fdbf 	bl	80005f8 <__aeabi_dmul>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007a80:	f109 0908 	add.w	r9, r9, #8
 8007a84:	d1f2      	bne.n	8007a6c <_strtod_l+0x5cc>
 8007a86:	b10b      	cbz	r3, 8007a8c <_strtod_l+0x5ec>
 8007a88:	4682      	mov	sl, r0
 8007a8a:	468b      	mov	fp, r1
 8007a8c:	9b04      	ldr	r3, [sp, #16]
 8007a8e:	b1c3      	cbz	r3, 8007ac2 <_strtod_l+0x622>
 8007a90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	4659      	mov	r1, fp
 8007a9c:	dd11      	ble.n	8007ac2 <_strtod_l+0x622>
 8007a9e:	2b1f      	cmp	r3, #31
 8007aa0:	f340 8124 	ble.w	8007cec <_strtod_l+0x84c>
 8007aa4:	2b34      	cmp	r3, #52	; 0x34
 8007aa6:	bfde      	ittt	le
 8007aa8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007aac:	f04f 33ff 	movle.w	r3, #4294967295
 8007ab0:	fa03 f202 	lslle.w	r2, r3, r2
 8007ab4:	f04f 0a00 	mov.w	sl, #0
 8007ab8:	bfcc      	ite	gt
 8007aba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007abe:	ea02 0b01 	andle.w	fp, r2, r1
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4650      	mov	r0, sl
 8007ac8:	4659      	mov	r1, fp
 8007aca:	f7f8 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d1a2      	bne.n	8007a18 <_strtod_l+0x578>
 8007ad2:	9b07      	ldr	r3, [sp, #28]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	9908      	ldr	r1, [sp, #32]
 8007ad8:	462b      	mov	r3, r5
 8007ada:	463a      	mov	r2, r7
 8007adc:	4620      	mov	r0, r4
 8007ade:	f001 fe1f 	bl	8009720 <__s2b>
 8007ae2:	9007      	str	r0, [sp, #28]
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	f43f af1f 	beq.w	8007928 <_strtod_l+0x488>
 8007aea:	9b05      	ldr	r3, [sp, #20]
 8007aec:	1b9e      	subs	r6, r3, r6
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bfb4      	ite	lt
 8007af4:	4633      	movlt	r3, r6
 8007af6:	2300      	movge	r3, #0
 8007af8:	930c      	str	r3, [sp, #48]	; 0x30
 8007afa:	9b06      	ldr	r3, [sp, #24]
 8007afc:	2500      	movs	r5, #0
 8007afe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b02:	9312      	str	r3, [sp, #72]	; 0x48
 8007b04:	462e      	mov	r6, r5
 8007b06:	9b07      	ldr	r3, [sp, #28]
 8007b08:	4620      	mov	r0, r4
 8007b0a:	6859      	ldr	r1, [r3, #4]
 8007b0c:	f001 fd60 	bl	80095d0 <_Balloc>
 8007b10:	9005      	str	r0, [sp, #20]
 8007b12:	2800      	cmp	r0, #0
 8007b14:	f43f af0c 	beq.w	8007930 <_strtod_l+0x490>
 8007b18:	9b07      	ldr	r3, [sp, #28]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	3202      	adds	r2, #2
 8007b1e:	f103 010c 	add.w	r1, r3, #12
 8007b22:	0092      	lsls	r2, r2, #2
 8007b24:	300c      	adds	r0, #12
 8007b26:	f7fe fdcd 	bl	80066c4 <memcpy>
 8007b2a:	ec4b ab10 	vmov	d0, sl, fp
 8007b2e:	aa1a      	add	r2, sp, #104	; 0x68
 8007b30:	a919      	add	r1, sp, #100	; 0x64
 8007b32:	4620      	mov	r0, r4
 8007b34:	f002 f93a 	bl	8009dac <__d2b>
 8007b38:	ec4b ab18 	vmov	d8, sl, fp
 8007b3c:	9018      	str	r0, [sp, #96]	; 0x60
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f43f aef6 	beq.w	8007930 <_strtod_l+0x490>
 8007b44:	2101      	movs	r1, #1
 8007b46:	4620      	mov	r0, r4
 8007b48:	f001 fe84 	bl	8009854 <__i2b>
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f43f aeee 	beq.w	8007930 <_strtod_l+0x490>
 8007b54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b56:	9904      	ldr	r1, [sp, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bfab      	itete	ge
 8007b5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007b5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b66:	bfac      	ite	ge
 8007b68:	eb03 0902 	addge.w	r9, r3, r2
 8007b6c:	1ad7      	sublt	r7, r2, r3
 8007b6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b70:	eba3 0801 	sub.w	r8, r3, r1
 8007b74:	4490      	add	r8, r2
 8007b76:	4ba1      	ldr	r3, [pc, #644]	; (8007dfc <_strtod_l+0x95c>)
 8007b78:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b7c:	4598      	cmp	r8, r3
 8007b7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b82:	f280 80c7 	bge.w	8007d14 <_strtod_l+0x874>
 8007b86:	eba3 0308 	sub.w	r3, r3, r8
 8007b8a:	2b1f      	cmp	r3, #31
 8007b8c:	eba2 0203 	sub.w	r2, r2, r3
 8007b90:	f04f 0101 	mov.w	r1, #1
 8007b94:	f300 80b1 	bgt.w	8007cfa <_strtod_l+0x85a>
 8007b98:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9308      	str	r3, [sp, #32]
 8007ba2:	eb09 0802 	add.w	r8, r9, r2
 8007ba6:	9b04      	ldr	r3, [sp, #16]
 8007ba8:	45c1      	cmp	r9, r8
 8007baa:	4417      	add	r7, r2
 8007bac:	441f      	add	r7, r3
 8007bae:	464b      	mov	r3, r9
 8007bb0:	bfa8      	it	ge
 8007bb2:	4643      	movge	r3, r8
 8007bb4:	42bb      	cmp	r3, r7
 8007bb6:	bfa8      	it	ge
 8007bb8:	463b      	movge	r3, r7
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bfc2      	ittt	gt
 8007bbe:	eba8 0803 	subgt.w	r8, r8, r3
 8007bc2:	1aff      	subgt	r7, r7, r3
 8007bc4:	eba9 0903 	subgt.w	r9, r9, r3
 8007bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dd17      	ble.n	8007bfe <_strtod_l+0x75e>
 8007bce:	4631      	mov	r1, r6
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f001 fefe 	bl	80099d4 <__pow5mult>
 8007bd8:	4606      	mov	r6, r0
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	f43f aea8 	beq.w	8007930 <_strtod_l+0x490>
 8007be0:	4601      	mov	r1, r0
 8007be2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007be4:	4620      	mov	r0, r4
 8007be6:	f001 fe4b 	bl	8009880 <__multiply>
 8007bea:	900b      	str	r0, [sp, #44]	; 0x2c
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f43f ae9f 	beq.w	8007930 <_strtod_l+0x490>
 8007bf2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f001 fd2b 	bl	8009650 <_Bfree>
 8007bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bfc:	9318      	str	r3, [sp, #96]	; 0x60
 8007bfe:	f1b8 0f00 	cmp.w	r8, #0
 8007c02:	f300 808c 	bgt.w	8007d1e <_strtod_l+0x87e>
 8007c06:	9b06      	ldr	r3, [sp, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dd08      	ble.n	8007c1e <_strtod_l+0x77e>
 8007c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c0e:	9905      	ldr	r1, [sp, #20]
 8007c10:	4620      	mov	r0, r4
 8007c12:	f001 fedf 	bl	80099d4 <__pow5mult>
 8007c16:	9005      	str	r0, [sp, #20]
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f43f ae89 	beq.w	8007930 <_strtod_l+0x490>
 8007c1e:	2f00      	cmp	r7, #0
 8007c20:	dd08      	ble.n	8007c34 <_strtod_l+0x794>
 8007c22:	9905      	ldr	r1, [sp, #20]
 8007c24:	463a      	mov	r2, r7
 8007c26:	4620      	mov	r0, r4
 8007c28:	f001 ff2e 	bl	8009a88 <__lshift>
 8007c2c:	9005      	str	r0, [sp, #20]
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f43f ae7e 	beq.w	8007930 <_strtod_l+0x490>
 8007c34:	f1b9 0f00 	cmp.w	r9, #0
 8007c38:	dd08      	ble.n	8007c4c <_strtod_l+0x7ac>
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	464a      	mov	r2, r9
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f001 ff22 	bl	8009a88 <__lshift>
 8007c44:	4606      	mov	r6, r0
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f43f ae72 	beq.w	8007930 <_strtod_l+0x490>
 8007c4c:	9a05      	ldr	r2, [sp, #20]
 8007c4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c50:	4620      	mov	r0, r4
 8007c52:	f001 ffa5 	bl	8009ba0 <__mdiff>
 8007c56:	4605      	mov	r5, r0
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f43f ae69 	beq.w	8007930 <_strtod_l+0x490>
 8007c5e:	68c3      	ldr	r3, [r0, #12]
 8007c60:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c62:	2300      	movs	r3, #0
 8007c64:	60c3      	str	r3, [r0, #12]
 8007c66:	4631      	mov	r1, r6
 8007c68:	f001 ff7e 	bl	8009b68 <__mcmp>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	da60      	bge.n	8007d32 <_strtod_l+0x892>
 8007c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c72:	ea53 030a 	orrs.w	r3, r3, sl
 8007c76:	f040 8082 	bne.w	8007d7e <_strtod_l+0x8de>
 8007c7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d17d      	bne.n	8007d7e <_strtod_l+0x8de>
 8007c82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c86:	0d1b      	lsrs	r3, r3, #20
 8007c88:	051b      	lsls	r3, r3, #20
 8007c8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c8e:	d976      	bls.n	8007d7e <_strtod_l+0x8de>
 8007c90:	696b      	ldr	r3, [r5, #20]
 8007c92:	b913      	cbnz	r3, 8007c9a <_strtod_l+0x7fa>
 8007c94:	692b      	ldr	r3, [r5, #16]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	dd71      	ble.n	8007d7e <_strtod_l+0x8de>
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f001 fef2 	bl	8009a88 <__lshift>
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	f001 ff5e 	bl	8009b68 <__mcmp>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	dd66      	ble.n	8007d7e <_strtod_l+0x8de>
 8007cb0:	9904      	ldr	r1, [sp, #16]
 8007cb2:	4a53      	ldr	r2, [pc, #332]	; (8007e00 <_strtod_l+0x960>)
 8007cb4:	465b      	mov	r3, fp
 8007cb6:	2900      	cmp	r1, #0
 8007cb8:	f000 8081 	beq.w	8007dbe <_strtod_l+0x91e>
 8007cbc:	ea02 010b 	and.w	r1, r2, fp
 8007cc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007cc4:	dc7b      	bgt.n	8007dbe <_strtod_l+0x91e>
 8007cc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007cca:	f77f aea9 	ble.w	8007a20 <_strtod_l+0x580>
 8007cce:	4b4d      	ldr	r3, [pc, #308]	; (8007e04 <_strtod_l+0x964>)
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	4659      	mov	r1, fp
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f7f8 fc8f 	bl	80005f8 <__aeabi_dmul>
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4303      	orrs	r3, r0
 8007cde:	bf08      	it	eq
 8007ce0:	2322      	moveq	r3, #34	; 0x22
 8007ce2:	4682      	mov	sl, r0
 8007ce4:	468b      	mov	fp, r1
 8007ce6:	bf08      	it	eq
 8007ce8:	6023      	streq	r3, [r4, #0]
 8007cea:	e62b      	b.n	8007944 <_strtod_l+0x4a4>
 8007cec:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	ea03 0a0a 	and.w	sl, r3, sl
 8007cf8:	e6e3      	b.n	8007ac2 <_strtod_l+0x622>
 8007cfa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007cfe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007d02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007d06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007d0a:	fa01 f308 	lsl.w	r3, r1, r8
 8007d0e:	9308      	str	r3, [sp, #32]
 8007d10:	910d      	str	r1, [sp, #52]	; 0x34
 8007d12:	e746      	b.n	8007ba2 <_strtod_l+0x702>
 8007d14:	2300      	movs	r3, #0
 8007d16:	9308      	str	r3, [sp, #32]
 8007d18:	2301      	movs	r3, #1
 8007d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d1c:	e741      	b.n	8007ba2 <_strtod_l+0x702>
 8007d1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d20:	4642      	mov	r2, r8
 8007d22:	4620      	mov	r0, r4
 8007d24:	f001 feb0 	bl	8009a88 <__lshift>
 8007d28:	9018      	str	r0, [sp, #96]	; 0x60
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	f47f af6b 	bne.w	8007c06 <_strtod_l+0x766>
 8007d30:	e5fe      	b.n	8007930 <_strtod_l+0x490>
 8007d32:	465f      	mov	r7, fp
 8007d34:	d16e      	bne.n	8007e14 <_strtod_l+0x974>
 8007d36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d3c:	b342      	cbz	r2, 8007d90 <_strtod_l+0x8f0>
 8007d3e:	4a32      	ldr	r2, [pc, #200]	; (8007e08 <_strtod_l+0x968>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d128      	bne.n	8007d96 <_strtod_l+0x8f6>
 8007d44:	9b04      	ldr	r3, [sp, #16]
 8007d46:	4651      	mov	r1, sl
 8007d48:	b1eb      	cbz	r3, 8007d86 <_strtod_l+0x8e6>
 8007d4a:	4b2d      	ldr	r3, [pc, #180]	; (8007e00 <_strtod_l+0x960>)
 8007d4c:	403b      	ands	r3, r7
 8007d4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d52:	f04f 32ff 	mov.w	r2, #4294967295
 8007d56:	d819      	bhi.n	8007d8c <_strtod_l+0x8ec>
 8007d58:	0d1b      	lsrs	r3, r3, #20
 8007d5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d62:	4299      	cmp	r1, r3
 8007d64:	d117      	bne.n	8007d96 <_strtod_l+0x8f6>
 8007d66:	4b29      	ldr	r3, [pc, #164]	; (8007e0c <_strtod_l+0x96c>)
 8007d68:	429f      	cmp	r7, r3
 8007d6a:	d102      	bne.n	8007d72 <_strtod_l+0x8d2>
 8007d6c:	3101      	adds	r1, #1
 8007d6e:	f43f addf 	beq.w	8007930 <_strtod_l+0x490>
 8007d72:	4b23      	ldr	r3, [pc, #140]	; (8007e00 <_strtod_l+0x960>)
 8007d74:	403b      	ands	r3, r7
 8007d76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007d7a:	f04f 0a00 	mov.w	sl, #0
 8007d7e:	9b04      	ldr	r3, [sp, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1a4      	bne.n	8007cce <_strtod_l+0x82e>
 8007d84:	e5de      	b.n	8007944 <_strtod_l+0x4a4>
 8007d86:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8a:	e7ea      	b.n	8007d62 <_strtod_l+0x8c2>
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	e7e8      	b.n	8007d62 <_strtod_l+0x8c2>
 8007d90:	ea53 030a 	orrs.w	r3, r3, sl
 8007d94:	d08c      	beq.n	8007cb0 <_strtod_l+0x810>
 8007d96:	9b08      	ldr	r3, [sp, #32]
 8007d98:	b1db      	cbz	r3, 8007dd2 <_strtod_l+0x932>
 8007d9a:	423b      	tst	r3, r7
 8007d9c:	d0ef      	beq.n	8007d7e <_strtod_l+0x8de>
 8007d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da0:	9a04      	ldr	r2, [sp, #16]
 8007da2:	4650      	mov	r0, sl
 8007da4:	4659      	mov	r1, fp
 8007da6:	b1c3      	cbz	r3, 8007dda <_strtod_l+0x93a>
 8007da8:	f7ff fb5c 	bl	8007464 <sulp>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	ec51 0b18 	vmov	r0, r1, d8
 8007db4:	f7f8 fa6a 	bl	800028c <__adddf3>
 8007db8:	4682      	mov	sl, r0
 8007dba:	468b      	mov	fp, r1
 8007dbc:	e7df      	b.n	8007d7e <_strtod_l+0x8de>
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007dc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007dc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007dcc:	f04f 3aff 	mov.w	sl, #4294967295
 8007dd0:	e7d5      	b.n	8007d7e <_strtod_l+0x8de>
 8007dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dd4:	ea13 0f0a 	tst.w	r3, sl
 8007dd8:	e7e0      	b.n	8007d9c <_strtod_l+0x8fc>
 8007dda:	f7ff fb43 	bl	8007464 <sulp>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	ec51 0b18 	vmov	r0, r1, d8
 8007de6:	f7f8 fa4f 	bl	8000288 <__aeabi_dsub>
 8007dea:	2200      	movs	r2, #0
 8007dec:	2300      	movs	r3, #0
 8007dee:	4682      	mov	sl, r0
 8007df0:	468b      	mov	fp, r1
 8007df2:	f7f8 fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d0c1      	beq.n	8007d7e <_strtod_l+0x8de>
 8007dfa:	e611      	b.n	8007a20 <_strtod_l+0x580>
 8007dfc:	fffffc02 	.word	0xfffffc02
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	39500000 	.word	0x39500000
 8007e08:	000fffff 	.word	0x000fffff
 8007e0c:	7fefffff 	.word	0x7fefffff
 8007e10:	0800d700 	.word	0x0800d700
 8007e14:	4631      	mov	r1, r6
 8007e16:	4628      	mov	r0, r5
 8007e18:	f002 f824 	bl	8009e64 <__ratio>
 8007e1c:	ec59 8b10 	vmov	r8, r9, d0
 8007e20:	ee10 0a10 	vmov	r0, s0
 8007e24:	2200      	movs	r2, #0
 8007e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	f7f8 fe60 	bl	8000af0 <__aeabi_dcmple>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d07a      	beq.n	8007f2a <_strtod_l+0xa8a>
 8007e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d04a      	beq.n	8007ed0 <_strtod_l+0xa30>
 8007e3a:	4b95      	ldr	r3, [pc, #596]	; (8008090 <_strtod_l+0xbf0>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008090 <_strtod_l+0xbf0>
 8007e46:	f04f 0800 	mov.w	r8, #0
 8007e4a:	4b92      	ldr	r3, [pc, #584]	; (8008094 <_strtod_l+0xbf4>)
 8007e4c:	403b      	ands	r3, r7
 8007e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e52:	4b91      	ldr	r3, [pc, #580]	; (8008098 <_strtod_l+0xbf8>)
 8007e54:	429a      	cmp	r2, r3
 8007e56:	f040 80b0 	bne.w	8007fba <_strtod_l+0xb1a>
 8007e5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e62:	ec4b ab10 	vmov	d0, sl, fp
 8007e66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e6a:	f001 ff23 	bl	8009cb4 <__ulp>
 8007e6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e72:	ec53 2b10 	vmov	r2, r3, d0
 8007e76:	f7f8 fbbf 	bl	80005f8 <__aeabi_dmul>
 8007e7a:	4652      	mov	r2, sl
 8007e7c:	465b      	mov	r3, fp
 8007e7e:	f7f8 fa05 	bl	800028c <__adddf3>
 8007e82:	460b      	mov	r3, r1
 8007e84:	4983      	ldr	r1, [pc, #524]	; (8008094 <_strtod_l+0xbf4>)
 8007e86:	4a85      	ldr	r2, [pc, #532]	; (800809c <_strtod_l+0xbfc>)
 8007e88:	4019      	ands	r1, r3
 8007e8a:	4291      	cmp	r1, r2
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	d960      	bls.n	8007f52 <_strtod_l+0xab2>
 8007e90:	ee18 3a90 	vmov	r3, s17
 8007e94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d104      	bne.n	8007ea6 <_strtod_l+0xa06>
 8007e9c:	ee18 3a10 	vmov	r3, s16
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	f43f ad45 	beq.w	8007930 <_strtod_l+0x490>
 8007ea6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80080a8 <_strtod_l+0xc08>
 8007eaa:	f04f 3aff 	mov.w	sl, #4294967295
 8007eae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f001 fbcd 	bl	8009650 <_Bfree>
 8007eb6:	9905      	ldr	r1, [sp, #20]
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f001 fbc9 	bl	8009650 <_Bfree>
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f001 fbc5 	bl	8009650 <_Bfree>
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f001 fbc1 	bl	8009650 <_Bfree>
 8007ece:	e61a      	b.n	8007b06 <_strtod_l+0x666>
 8007ed0:	f1ba 0f00 	cmp.w	sl, #0
 8007ed4:	d11b      	bne.n	8007f0e <_strtod_l+0xa6e>
 8007ed6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007eda:	b9f3      	cbnz	r3, 8007f1a <_strtod_l+0xa7a>
 8007edc:	4b6c      	ldr	r3, [pc, #432]	; (8008090 <_strtod_l+0xbf0>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 fdfa 	bl	8000adc <__aeabi_dcmplt>
 8007ee8:	b9d0      	cbnz	r0, 8007f20 <_strtod_l+0xa80>
 8007eea:	4640      	mov	r0, r8
 8007eec:	4649      	mov	r1, r9
 8007eee:	4b6c      	ldr	r3, [pc, #432]	; (80080a0 <_strtod_l+0xc00>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f7f8 fb81 	bl	80005f8 <__aeabi_dmul>
 8007ef6:	4680      	mov	r8, r0
 8007ef8:	4689      	mov	r9, r1
 8007efa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007efe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007f02:	9315      	str	r3, [sp, #84]	; 0x54
 8007f04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f0c:	e79d      	b.n	8007e4a <_strtod_l+0x9aa>
 8007f0e:	f1ba 0f01 	cmp.w	sl, #1
 8007f12:	d102      	bne.n	8007f1a <_strtod_l+0xa7a>
 8007f14:	2f00      	cmp	r7, #0
 8007f16:	f43f ad83 	beq.w	8007a20 <_strtod_l+0x580>
 8007f1a:	4b62      	ldr	r3, [pc, #392]	; (80080a4 <_strtod_l+0xc04>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	e78e      	b.n	8007e3e <_strtod_l+0x99e>
 8007f20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80080a0 <_strtod_l+0xc00>
 8007f24:	f04f 0800 	mov.w	r8, #0
 8007f28:	e7e7      	b.n	8007efa <_strtod_l+0xa5a>
 8007f2a:	4b5d      	ldr	r3, [pc, #372]	; (80080a0 <_strtod_l+0xc00>)
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4649      	mov	r1, r9
 8007f30:	2200      	movs	r2, #0
 8007f32:	f7f8 fb61 	bl	80005f8 <__aeabi_dmul>
 8007f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f38:	4680      	mov	r8, r0
 8007f3a:	4689      	mov	r9, r1
 8007f3c:	b933      	cbnz	r3, 8007f4c <_strtod_l+0xaac>
 8007f3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f42:	900e      	str	r0, [sp, #56]	; 0x38
 8007f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f4a:	e7dd      	b.n	8007f08 <_strtod_l+0xa68>
 8007f4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007f50:	e7f9      	b.n	8007f46 <_strtod_l+0xaa6>
 8007f52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1a8      	bne.n	8007eae <_strtod_l+0xa0e>
 8007f5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f62:	0d1b      	lsrs	r3, r3, #20
 8007f64:	051b      	lsls	r3, r3, #20
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d1a1      	bne.n	8007eae <_strtod_l+0xa0e>
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	f7f8 fef3 	bl	8000d58 <__aeabi_d2lz>
 8007f72:	f7f8 fb13 	bl	800059c <__aeabi_l2d>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 f983 	bl	8000288 <__aeabi_dsub>
 8007f82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f88:	ea43 030a 	orr.w	r3, r3, sl
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	4680      	mov	r8, r0
 8007f90:	4689      	mov	r9, r1
 8007f92:	d055      	beq.n	8008040 <_strtod_l+0xba0>
 8007f94:	a336      	add	r3, pc, #216	; (adr r3, 8008070 <_strtod_l+0xbd0>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f7f8 fd9f 	bl	8000adc <__aeabi_dcmplt>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f47f acd0 	bne.w	8007944 <_strtod_l+0x4a4>
 8007fa4:	a334      	add	r3, pc, #208	; (adr r3, 8008078 <_strtod_l+0xbd8>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	f7f8 fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	f43f af7b 	beq.w	8007eae <_strtod_l+0xa0e>
 8007fb8:	e4c4      	b.n	8007944 <_strtod_l+0x4a4>
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	b333      	cbz	r3, 800800c <_strtod_l+0xb6c>
 8007fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007fc4:	d822      	bhi.n	800800c <_strtod_l+0xb6c>
 8007fc6:	a32e      	add	r3, pc, #184	; (adr r3, 8008080 <_strtod_l+0xbe0>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4649      	mov	r1, r9
 8007fd0:	f7f8 fd8e 	bl	8000af0 <__aeabi_dcmple>
 8007fd4:	b1a0      	cbz	r0, 8008000 <_strtod_l+0xb60>
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	4640      	mov	r0, r8
 8007fda:	f7f8 fde5 	bl	8000ba8 <__aeabi_d2uiz>
 8007fde:	2801      	cmp	r0, #1
 8007fe0:	bf38      	it	cc
 8007fe2:	2001      	movcc	r0, #1
 8007fe4:	f7f8 fa8e 	bl	8000504 <__aeabi_ui2d>
 8007fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fea:	4680      	mov	r8, r0
 8007fec:	4689      	mov	r9, r1
 8007fee:	bb23      	cbnz	r3, 800803a <_strtod_l+0xb9a>
 8007ff0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ff4:	9010      	str	r0, [sp, #64]	; 0x40
 8007ff6:	9311      	str	r3, [sp, #68]	; 0x44
 8007ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ffc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008002:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008004:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008008:	1a9b      	subs	r3, r3, r2
 800800a:	9309      	str	r3, [sp, #36]	; 0x24
 800800c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008010:	eeb0 0a48 	vmov.f32	s0, s16
 8008014:	eef0 0a68 	vmov.f32	s1, s17
 8008018:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800801c:	f001 fe4a 	bl	8009cb4 <__ulp>
 8008020:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008024:	ec53 2b10 	vmov	r2, r3, d0
 8008028:	f7f8 fae6 	bl	80005f8 <__aeabi_dmul>
 800802c:	ec53 2b18 	vmov	r2, r3, d8
 8008030:	f7f8 f92c 	bl	800028c <__adddf3>
 8008034:	4682      	mov	sl, r0
 8008036:	468b      	mov	fp, r1
 8008038:	e78d      	b.n	8007f56 <_strtod_l+0xab6>
 800803a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800803e:	e7db      	b.n	8007ff8 <_strtod_l+0xb58>
 8008040:	a311      	add	r3, pc, #68	; (adr r3, 8008088 <_strtod_l+0xbe8>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 fd49 	bl	8000adc <__aeabi_dcmplt>
 800804a:	e7b2      	b.n	8007fb2 <_strtod_l+0xb12>
 800804c:	2300      	movs	r3, #0
 800804e:	930a      	str	r3, [sp, #40]	; 0x28
 8008050:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	f7ff ba6b 	b.w	8007530 <_strtod_l+0x90>
 800805a:	2a65      	cmp	r2, #101	; 0x65
 800805c:	f43f ab5f 	beq.w	800771e <_strtod_l+0x27e>
 8008060:	2a45      	cmp	r2, #69	; 0x45
 8008062:	f43f ab5c 	beq.w	800771e <_strtod_l+0x27e>
 8008066:	2301      	movs	r3, #1
 8008068:	f7ff bb94 	b.w	8007794 <_strtod_l+0x2f4>
 800806c:	f3af 8000 	nop.w
 8008070:	94a03595 	.word	0x94a03595
 8008074:	3fdfffff 	.word	0x3fdfffff
 8008078:	35afe535 	.word	0x35afe535
 800807c:	3fe00000 	.word	0x3fe00000
 8008080:	ffc00000 	.word	0xffc00000
 8008084:	41dfffff 	.word	0x41dfffff
 8008088:	94a03595 	.word	0x94a03595
 800808c:	3fcfffff 	.word	0x3fcfffff
 8008090:	3ff00000 	.word	0x3ff00000
 8008094:	7ff00000 	.word	0x7ff00000
 8008098:	7fe00000 	.word	0x7fe00000
 800809c:	7c9fffff 	.word	0x7c9fffff
 80080a0:	3fe00000 	.word	0x3fe00000
 80080a4:	bff00000 	.word	0xbff00000
 80080a8:	7fefffff 	.word	0x7fefffff

080080ac <_strtod_r>:
 80080ac:	4b01      	ldr	r3, [pc, #4]	; (80080b4 <_strtod_r+0x8>)
 80080ae:	f7ff b9f7 	b.w	80074a0 <_strtod_l>
 80080b2:	bf00      	nop
 80080b4:	200000b4 	.word	0x200000b4

080080b8 <_strtol_l.constprop.0>:
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080be:	d001      	beq.n	80080c4 <_strtol_l.constprop.0+0xc>
 80080c0:	2b24      	cmp	r3, #36	; 0x24
 80080c2:	d906      	bls.n	80080d2 <_strtol_l.constprop.0+0x1a>
 80080c4:	f7fe fad4 	bl	8006670 <__errno>
 80080c8:	2316      	movs	r3, #22
 80080ca:	6003      	str	r3, [r0, #0]
 80080cc:	2000      	movs	r0, #0
 80080ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80081b8 <_strtol_l.constprop.0+0x100>
 80080d6:	460d      	mov	r5, r1
 80080d8:	462e      	mov	r6, r5
 80080da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80080e2:	f017 0708 	ands.w	r7, r7, #8
 80080e6:	d1f7      	bne.n	80080d8 <_strtol_l.constprop.0+0x20>
 80080e8:	2c2d      	cmp	r4, #45	; 0x2d
 80080ea:	d132      	bne.n	8008152 <_strtol_l.constprop.0+0x9a>
 80080ec:	782c      	ldrb	r4, [r5, #0]
 80080ee:	2701      	movs	r7, #1
 80080f0:	1cb5      	adds	r5, r6, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d05b      	beq.n	80081ae <_strtol_l.constprop.0+0xf6>
 80080f6:	2b10      	cmp	r3, #16
 80080f8:	d109      	bne.n	800810e <_strtol_l.constprop.0+0x56>
 80080fa:	2c30      	cmp	r4, #48	; 0x30
 80080fc:	d107      	bne.n	800810e <_strtol_l.constprop.0+0x56>
 80080fe:	782c      	ldrb	r4, [r5, #0]
 8008100:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008104:	2c58      	cmp	r4, #88	; 0x58
 8008106:	d14d      	bne.n	80081a4 <_strtol_l.constprop.0+0xec>
 8008108:	786c      	ldrb	r4, [r5, #1]
 800810a:	2310      	movs	r3, #16
 800810c:	3502      	adds	r5, #2
 800810e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008112:	f108 38ff 	add.w	r8, r8, #4294967295
 8008116:	f04f 0c00 	mov.w	ip, #0
 800811a:	fbb8 f9f3 	udiv	r9, r8, r3
 800811e:	4666      	mov	r6, ip
 8008120:	fb03 8a19 	mls	sl, r3, r9, r8
 8008124:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008128:	f1be 0f09 	cmp.w	lr, #9
 800812c:	d816      	bhi.n	800815c <_strtol_l.constprop.0+0xa4>
 800812e:	4674      	mov	r4, lr
 8008130:	42a3      	cmp	r3, r4
 8008132:	dd24      	ble.n	800817e <_strtol_l.constprop.0+0xc6>
 8008134:	f1bc 0f00 	cmp.w	ip, #0
 8008138:	db1e      	blt.n	8008178 <_strtol_l.constprop.0+0xc0>
 800813a:	45b1      	cmp	r9, r6
 800813c:	d31c      	bcc.n	8008178 <_strtol_l.constprop.0+0xc0>
 800813e:	d101      	bne.n	8008144 <_strtol_l.constprop.0+0x8c>
 8008140:	45a2      	cmp	sl, r4
 8008142:	db19      	blt.n	8008178 <_strtol_l.constprop.0+0xc0>
 8008144:	fb06 4603 	mla	r6, r6, r3, r4
 8008148:	f04f 0c01 	mov.w	ip, #1
 800814c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008150:	e7e8      	b.n	8008124 <_strtol_l.constprop.0+0x6c>
 8008152:	2c2b      	cmp	r4, #43	; 0x2b
 8008154:	bf04      	itt	eq
 8008156:	782c      	ldrbeq	r4, [r5, #0]
 8008158:	1cb5      	addeq	r5, r6, #2
 800815a:	e7ca      	b.n	80080f2 <_strtol_l.constprop.0+0x3a>
 800815c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008160:	f1be 0f19 	cmp.w	lr, #25
 8008164:	d801      	bhi.n	800816a <_strtol_l.constprop.0+0xb2>
 8008166:	3c37      	subs	r4, #55	; 0x37
 8008168:	e7e2      	b.n	8008130 <_strtol_l.constprop.0+0x78>
 800816a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800816e:	f1be 0f19 	cmp.w	lr, #25
 8008172:	d804      	bhi.n	800817e <_strtol_l.constprop.0+0xc6>
 8008174:	3c57      	subs	r4, #87	; 0x57
 8008176:	e7db      	b.n	8008130 <_strtol_l.constprop.0+0x78>
 8008178:	f04f 3cff 	mov.w	ip, #4294967295
 800817c:	e7e6      	b.n	800814c <_strtol_l.constprop.0+0x94>
 800817e:	f1bc 0f00 	cmp.w	ip, #0
 8008182:	da05      	bge.n	8008190 <_strtol_l.constprop.0+0xd8>
 8008184:	2322      	movs	r3, #34	; 0x22
 8008186:	6003      	str	r3, [r0, #0]
 8008188:	4646      	mov	r6, r8
 800818a:	b942      	cbnz	r2, 800819e <_strtol_l.constprop.0+0xe6>
 800818c:	4630      	mov	r0, r6
 800818e:	e79e      	b.n	80080ce <_strtol_l.constprop.0+0x16>
 8008190:	b107      	cbz	r7, 8008194 <_strtol_l.constprop.0+0xdc>
 8008192:	4276      	negs	r6, r6
 8008194:	2a00      	cmp	r2, #0
 8008196:	d0f9      	beq.n	800818c <_strtol_l.constprop.0+0xd4>
 8008198:	f1bc 0f00 	cmp.w	ip, #0
 800819c:	d000      	beq.n	80081a0 <_strtol_l.constprop.0+0xe8>
 800819e:	1e69      	subs	r1, r5, #1
 80081a0:	6011      	str	r1, [r2, #0]
 80081a2:	e7f3      	b.n	800818c <_strtol_l.constprop.0+0xd4>
 80081a4:	2430      	movs	r4, #48	; 0x30
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1b1      	bne.n	800810e <_strtol_l.constprop.0+0x56>
 80081aa:	2308      	movs	r3, #8
 80081ac:	e7af      	b.n	800810e <_strtol_l.constprop.0+0x56>
 80081ae:	2c30      	cmp	r4, #48	; 0x30
 80081b0:	d0a5      	beq.n	80080fe <_strtol_l.constprop.0+0x46>
 80081b2:	230a      	movs	r3, #10
 80081b4:	e7ab      	b.n	800810e <_strtol_l.constprop.0+0x56>
 80081b6:	bf00      	nop
 80081b8:	0800d729 	.word	0x0800d729

080081bc <_strtol_r>:
 80081bc:	f7ff bf7c 	b.w	80080b8 <_strtol_l.constprop.0>

080081c0 <quorem>:
 80081c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	6903      	ldr	r3, [r0, #16]
 80081c6:	690c      	ldr	r4, [r1, #16]
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	4607      	mov	r7, r0
 80081cc:	f2c0 8081 	blt.w	80082d2 <quorem+0x112>
 80081d0:	3c01      	subs	r4, #1
 80081d2:	f101 0814 	add.w	r8, r1, #20
 80081d6:	f100 0514 	add.w	r5, r0, #20
 80081da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e8:	3301      	adds	r3, #1
 80081ea:	429a      	cmp	r2, r3
 80081ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80081f8:	d331      	bcc.n	800825e <quorem+0x9e>
 80081fa:	f04f 0e00 	mov.w	lr, #0
 80081fe:	4640      	mov	r0, r8
 8008200:	46ac      	mov	ip, r5
 8008202:	46f2      	mov	sl, lr
 8008204:	f850 2b04 	ldr.w	r2, [r0], #4
 8008208:	b293      	uxth	r3, r2
 800820a:	fb06 e303 	mla	r3, r6, r3, lr
 800820e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008212:	b29b      	uxth	r3, r3
 8008214:	ebaa 0303 	sub.w	r3, sl, r3
 8008218:	f8dc a000 	ldr.w	sl, [ip]
 800821c:	0c12      	lsrs	r2, r2, #16
 800821e:	fa13 f38a 	uxtah	r3, r3, sl
 8008222:	fb06 e202 	mla	r2, r6, r2, lr
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	9b00      	ldr	r3, [sp, #0]
 800822a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800822e:	b292      	uxth	r2, r2
 8008230:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008238:	f8bd 3000 	ldrh.w	r3, [sp]
 800823c:	4581      	cmp	r9, r0
 800823e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008242:	f84c 3b04 	str.w	r3, [ip], #4
 8008246:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800824a:	d2db      	bcs.n	8008204 <quorem+0x44>
 800824c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008250:	b92b      	cbnz	r3, 800825e <quorem+0x9e>
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	3b04      	subs	r3, #4
 8008256:	429d      	cmp	r5, r3
 8008258:	461a      	mov	r2, r3
 800825a:	d32e      	bcc.n	80082ba <quorem+0xfa>
 800825c:	613c      	str	r4, [r7, #16]
 800825e:	4638      	mov	r0, r7
 8008260:	f001 fc82 	bl	8009b68 <__mcmp>
 8008264:	2800      	cmp	r0, #0
 8008266:	db24      	blt.n	80082b2 <quorem+0xf2>
 8008268:	3601      	adds	r6, #1
 800826a:	4628      	mov	r0, r5
 800826c:	f04f 0c00 	mov.w	ip, #0
 8008270:	f858 2b04 	ldr.w	r2, [r8], #4
 8008274:	f8d0 e000 	ldr.w	lr, [r0]
 8008278:	b293      	uxth	r3, r2
 800827a:	ebac 0303 	sub.w	r3, ip, r3
 800827e:	0c12      	lsrs	r2, r2, #16
 8008280:	fa13 f38e 	uxtah	r3, r3, lr
 8008284:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800828c:	b29b      	uxth	r3, r3
 800828e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008292:	45c1      	cmp	r9, r8
 8008294:	f840 3b04 	str.w	r3, [r0], #4
 8008298:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800829c:	d2e8      	bcs.n	8008270 <quorem+0xb0>
 800829e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082a6:	b922      	cbnz	r2, 80082b2 <quorem+0xf2>
 80082a8:	3b04      	subs	r3, #4
 80082aa:	429d      	cmp	r5, r3
 80082ac:	461a      	mov	r2, r3
 80082ae:	d30a      	bcc.n	80082c6 <quorem+0x106>
 80082b0:	613c      	str	r4, [r7, #16]
 80082b2:	4630      	mov	r0, r6
 80082b4:	b003      	add	sp, #12
 80082b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ba:	6812      	ldr	r2, [r2, #0]
 80082bc:	3b04      	subs	r3, #4
 80082be:	2a00      	cmp	r2, #0
 80082c0:	d1cc      	bne.n	800825c <quorem+0x9c>
 80082c2:	3c01      	subs	r4, #1
 80082c4:	e7c7      	b.n	8008256 <quorem+0x96>
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	3b04      	subs	r3, #4
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	d1f0      	bne.n	80082b0 <quorem+0xf0>
 80082ce:	3c01      	subs	r4, #1
 80082d0:	e7eb      	b.n	80082aa <quorem+0xea>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e7ee      	b.n	80082b4 <quorem+0xf4>
	...

080082d8 <_dtoa_r>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	ed2d 8b04 	vpush	{d8-d9}
 80082e0:	ec57 6b10 	vmov	r6, r7, d0
 80082e4:	b093      	sub	sp, #76	; 0x4c
 80082e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082ec:	9106      	str	r1, [sp, #24]
 80082ee:	ee10 aa10 	vmov	sl, s0
 80082f2:	4604      	mov	r4, r0
 80082f4:	9209      	str	r2, [sp, #36]	; 0x24
 80082f6:	930c      	str	r3, [sp, #48]	; 0x30
 80082f8:	46bb      	mov	fp, r7
 80082fa:	b975      	cbnz	r5, 800831a <_dtoa_r+0x42>
 80082fc:	2010      	movs	r0, #16
 80082fe:	f001 f94d 	bl	800959c <malloc>
 8008302:	4602      	mov	r2, r0
 8008304:	6260      	str	r0, [r4, #36]	; 0x24
 8008306:	b920      	cbnz	r0, 8008312 <_dtoa_r+0x3a>
 8008308:	4ba7      	ldr	r3, [pc, #668]	; (80085a8 <_dtoa_r+0x2d0>)
 800830a:	21ea      	movs	r1, #234	; 0xea
 800830c:	48a7      	ldr	r0, [pc, #668]	; (80085ac <_dtoa_r+0x2d4>)
 800830e:	f002 f8ad 	bl	800a46c <__assert_func>
 8008312:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008316:	6005      	str	r5, [r0, #0]
 8008318:	60c5      	str	r5, [r0, #12]
 800831a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800831c:	6819      	ldr	r1, [r3, #0]
 800831e:	b151      	cbz	r1, 8008336 <_dtoa_r+0x5e>
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	604a      	str	r2, [r1, #4]
 8008324:	2301      	movs	r3, #1
 8008326:	4093      	lsls	r3, r2
 8008328:	608b      	str	r3, [r1, #8]
 800832a:	4620      	mov	r0, r4
 800832c:	f001 f990 	bl	8009650 <_Bfree>
 8008330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	1e3b      	subs	r3, r7, #0
 8008338:	bfaa      	itet	ge
 800833a:	2300      	movge	r3, #0
 800833c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008340:	f8c8 3000 	strge.w	r3, [r8]
 8008344:	4b9a      	ldr	r3, [pc, #616]	; (80085b0 <_dtoa_r+0x2d8>)
 8008346:	bfbc      	itt	lt
 8008348:	2201      	movlt	r2, #1
 800834a:	f8c8 2000 	strlt.w	r2, [r8]
 800834e:	ea33 030b 	bics.w	r3, r3, fp
 8008352:	d11b      	bne.n	800838c <_dtoa_r+0xb4>
 8008354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008356:	f242 730f 	movw	r3, #9999	; 0x270f
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008360:	4333      	orrs	r3, r6
 8008362:	f000 8592 	beq.w	8008e8a <_dtoa_r+0xbb2>
 8008366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008368:	b963      	cbnz	r3, 8008384 <_dtoa_r+0xac>
 800836a:	4b92      	ldr	r3, [pc, #584]	; (80085b4 <_dtoa_r+0x2dc>)
 800836c:	e022      	b.n	80083b4 <_dtoa_r+0xdc>
 800836e:	4b92      	ldr	r3, [pc, #584]	; (80085b8 <_dtoa_r+0x2e0>)
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	3308      	adds	r3, #8
 8008374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	9801      	ldr	r0, [sp, #4]
 800837a:	b013      	add	sp, #76	; 0x4c
 800837c:	ecbd 8b04 	vpop	{d8-d9}
 8008380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	4b8b      	ldr	r3, [pc, #556]	; (80085b4 <_dtoa_r+0x2dc>)
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	3303      	adds	r3, #3
 800838a:	e7f3      	b.n	8008374 <_dtoa_r+0x9c>
 800838c:	2200      	movs	r2, #0
 800838e:	2300      	movs	r3, #0
 8008390:	4650      	mov	r0, sl
 8008392:	4659      	mov	r1, fp
 8008394:	f7f8 fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 8008398:	ec4b ab19 	vmov	d9, sl, fp
 800839c:	4680      	mov	r8, r0
 800839e:	b158      	cbz	r0, 80083b8 <_dtoa_r+0xe0>
 80083a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083a2:	2301      	movs	r3, #1
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 856b 	beq.w	8008e84 <_dtoa_r+0xbac>
 80083ae:	4883      	ldr	r0, [pc, #524]	; (80085bc <_dtoa_r+0x2e4>)
 80083b0:	6018      	str	r0, [r3, #0]
 80083b2:	1e43      	subs	r3, r0, #1
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	e7df      	b.n	8008378 <_dtoa_r+0xa0>
 80083b8:	ec4b ab10 	vmov	d0, sl, fp
 80083bc:	aa10      	add	r2, sp, #64	; 0x40
 80083be:	a911      	add	r1, sp, #68	; 0x44
 80083c0:	4620      	mov	r0, r4
 80083c2:	f001 fcf3 	bl	8009dac <__d2b>
 80083c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083ca:	ee08 0a10 	vmov	s16, r0
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	f000 8084 	beq.w	80084dc <_dtoa_r+0x204>
 80083d4:	ee19 3a90 	vmov	r3, s19
 80083d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083e0:	4656      	mov	r6, sl
 80083e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80083ee:	4b74      	ldr	r3, [pc, #464]	; (80085c0 <_dtoa_r+0x2e8>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f7 ff47 	bl	8000288 <__aeabi_dsub>
 80083fa:	a365      	add	r3, pc, #404	; (adr r3, 8008590 <_dtoa_r+0x2b8>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f7f8 f8fa 	bl	80005f8 <__aeabi_dmul>
 8008404:	a364      	add	r3, pc, #400	; (adr r3, 8008598 <_dtoa_r+0x2c0>)
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	f7f7 ff3f 	bl	800028c <__adddf3>
 800840e:	4606      	mov	r6, r0
 8008410:	4628      	mov	r0, r5
 8008412:	460f      	mov	r7, r1
 8008414:	f7f8 f886 	bl	8000524 <__aeabi_i2d>
 8008418:	a361      	add	r3, pc, #388	; (adr r3, 80085a0 <_dtoa_r+0x2c8>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	f7f8 f8eb 	bl	80005f8 <__aeabi_dmul>
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	4630      	mov	r0, r6
 8008428:	4639      	mov	r1, r7
 800842a:	f7f7 ff2f 	bl	800028c <__adddf3>
 800842e:	4606      	mov	r6, r0
 8008430:	460f      	mov	r7, r1
 8008432:	f7f8 fb91 	bl	8000b58 <__aeabi_d2iz>
 8008436:	2200      	movs	r2, #0
 8008438:	9000      	str	r0, [sp, #0]
 800843a:	2300      	movs	r3, #0
 800843c:	4630      	mov	r0, r6
 800843e:	4639      	mov	r1, r7
 8008440:	f7f8 fb4c 	bl	8000adc <__aeabi_dcmplt>
 8008444:	b150      	cbz	r0, 800845c <_dtoa_r+0x184>
 8008446:	9800      	ldr	r0, [sp, #0]
 8008448:	f7f8 f86c 	bl	8000524 <__aeabi_i2d>
 800844c:	4632      	mov	r2, r6
 800844e:	463b      	mov	r3, r7
 8008450:	f7f8 fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008454:	b910      	cbnz	r0, 800845c <_dtoa_r+0x184>
 8008456:	9b00      	ldr	r3, [sp, #0]
 8008458:	3b01      	subs	r3, #1
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	9b00      	ldr	r3, [sp, #0]
 800845e:	2b16      	cmp	r3, #22
 8008460:	d85a      	bhi.n	8008518 <_dtoa_r+0x240>
 8008462:	9a00      	ldr	r2, [sp, #0]
 8008464:	4b57      	ldr	r3, [pc, #348]	; (80085c4 <_dtoa_r+0x2ec>)
 8008466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	ec51 0b19 	vmov	r0, r1, d9
 8008472:	f7f8 fb33 	bl	8000adc <__aeabi_dcmplt>
 8008476:	2800      	cmp	r0, #0
 8008478:	d050      	beq.n	800851c <_dtoa_r+0x244>
 800847a:	9b00      	ldr	r3, [sp, #0]
 800847c:	3b01      	subs	r3, #1
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2300      	movs	r3, #0
 8008482:	930b      	str	r3, [sp, #44]	; 0x2c
 8008484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008486:	1b5d      	subs	r5, r3, r5
 8008488:	1e6b      	subs	r3, r5, #1
 800848a:	9305      	str	r3, [sp, #20]
 800848c:	bf45      	ittet	mi
 800848e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008492:	9304      	strmi	r3, [sp, #16]
 8008494:	2300      	movpl	r3, #0
 8008496:	2300      	movmi	r3, #0
 8008498:	bf4c      	ite	mi
 800849a:	9305      	strmi	r3, [sp, #20]
 800849c:	9304      	strpl	r3, [sp, #16]
 800849e:	9b00      	ldr	r3, [sp, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db3d      	blt.n	8008520 <_dtoa_r+0x248>
 80084a4:	9b05      	ldr	r3, [sp, #20]
 80084a6:	9a00      	ldr	r2, [sp, #0]
 80084a8:	920a      	str	r2, [sp, #40]	; 0x28
 80084aa:	4413      	add	r3, r2
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	2300      	movs	r3, #0
 80084b0:	9307      	str	r3, [sp, #28]
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	2b09      	cmp	r3, #9
 80084b6:	f200 8089 	bhi.w	80085cc <_dtoa_r+0x2f4>
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	bfc4      	itt	gt
 80084be:	3b04      	subgt	r3, #4
 80084c0:	9306      	strgt	r3, [sp, #24]
 80084c2:	9b06      	ldr	r3, [sp, #24]
 80084c4:	f1a3 0302 	sub.w	r3, r3, #2
 80084c8:	bfcc      	ite	gt
 80084ca:	2500      	movgt	r5, #0
 80084cc:	2501      	movle	r5, #1
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	f200 8087 	bhi.w	80085e2 <_dtoa_r+0x30a>
 80084d4:	e8df f003 	tbb	[pc, r3]
 80084d8:	59383a2d 	.word	0x59383a2d
 80084dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084e0:	441d      	add	r5, r3
 80084e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	bfc1      	itttt	gt
 80084ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80084f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084fa:	bfda      	itte	le
 80084fc:	f1c3 0320 	rsble	r3, r3, #32
 8008500:	fa06 f003 	lslle.w	r0, r6, r3
 8008504:	4318      	orrgt	r0, r3
 8008506:	f7f7 fffd 	bl	8000504 <__aeabi_ui2d>
 800850a:	2301      	movs	r3, #1
 800850c:	4606      	mov	r6, r0
 800850e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008512:	3d01      	subs	r5, #1
 8008514:	930e      	str	r3, [sp, #56]	; 0x38
 8008516:	e76a      	b.n	80083ee <_dtoa_r+0x116>
 8008518:	2301      	movs	r3, #1
 800851a:	e7b2      	b.n	8008482 <_dtoa_r+0x1aa>
 800851c:	900b      	str	r0, [sp, #44]	; 0x2c
 800851e:	e7b1      	b.n	8008484 <_dtoa_r+0x1ac>
 8008520:	9b04      	ldr	r3, [sp, #16]
 8008522:	9a00      	ldr	r2, [sp, #0]
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	4253      	negs	r3, r2
 800852a:	9307      	str	r3, [sp, #28]
 800852c:	2300      	movs	r3, #0
 800852e:	930a      	str	r3, [sp, #40]	; 0x28
 8008530:	e7bf      	b.n	80084b2 <_dtoa_r+0x1da>
 8008532:	2300      	movs	r3, #0
 8008534:	9308      	str	r3, [sp, #32]
 8008536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008538:	2b00      	cmp	r3, #0
 800853a:	dc55      	bgt.n	80085e8 <_dtoa_r+0x310>
 800853c:	2301      	movs	r3, #1
 800853e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008542:	461a      	mov	r2, r3
 8008544:	9209      	str	r2, [sp, #36]	; 0x24
 8008546:	e00c      	b.n	8008562 <_dtoa_r+0x28a>
 8008548:	2301      	movs	r3, #1
 800854a:	e7f3      	b.n	8008534 <_dtoa_r+0x25c>
 800854c:	2300      	movs	r3, #0
 800854e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008550:	9308      	str	r3, [sp, #32]
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	4413      	add	r3, r2
 8008556:	9302      	str	r3, [sp, #8]
 8008558:	3301      	adds	r3, #1
 800855a:	2b01      	cmp	r3, #1
 800855c:	9303      	str	r3, [sp, #12]
 800855e:	bfb8      	it	lt
 8008560:	2301      	movlt	r3, #1
 8008562:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008564:	2200      	movs	r2, #0
 8008566:	6042      	str	r2, [r0, #4]
 8008568:	2204      	movs	r2, #4
 800856a:	f102 0614 	add.w	r6, r2, #20
 800856e:	429e      	cmp	r6, r3
 8008570:	6841      	ldr	r1, [r0, #4]
 8008572:	d93d      	bls.n	80085f0 <_dtoa_r+0x318>
 8008574:	4620      	mov	r0, r4
 8008576:	f001 f82b 	bl	80095d0 <_Balloc>
 800857a:	9001      	str	r0, [sp, #4]
 800857c:	2800      	cmp	r0, #0
 800857e:	d13b      	bne.n	80085f8 <_dtoa_r+0x320>
 8008580:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <_dtoa_r+0x2f0>)
 8008582:	4602      	mov	r2, r0
 8008584:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008588:	e6c0      	b.n	800830c <_dtoa_r+0x34>
 800858a:	2301      	movs	r3, #1
 800858c:	e7df      	b.n	800854e <_dtoa_r+0x276>
 800858e:	bf00      	nop
 8008590:	636f4361 	.word	0x636f4361
 8008594:	3fd287a7 	.word	0x3fd287a7
 8008598:	8b60c8b3 	.word	0x8b60c8b3
 800859c:	3fc68a28 	.word	0x3fc68a28
 80085a0:	509f79fb 	.word	0x509f79fb
 80085a4:	3fd34413 	.word	0x3fd34413
 80085a8:	0800d836 	.word	0x0800d836
 80085ac:	0800d84d 	.word	0x0800d84d
 80085b0:	7ff00000 	.word	0x7ff00000
 80085b4:	0800d832 	.word	0x0800d832
 80085b8:	0800d829 	.word	0x0800d829
 80085bc:	0800d6a9 	.word	0x0800d6a9
 80085c0:	3ff80000 	.word	0x3ff80000
 80085c4:	0800d9b8 	.word	0x0800d9b8
 80085c8:	0800d8a8 	.word	0x0800d8a8
 80085cc:	2501      	movs	r5, #1
 80085ce:	2300      	movs	r3, #0
 80085d0:	9306      	str	r3, [sp, #24]
 80085d2:	9508      	str	r5, [sp, #32]
 80085d4:	f04f 33ff 	mov.w	r3, #4294967295
 80085d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085dc:	2200      	movs	r2, #0
 80085de:	2312      	movs	r3, #18
 80085e0:	e7b0      	b.n	8008544 <_dtoa_r+0x26c>
 80085e2:	2301      	movs	r3, #1
 80085e4:	9308      	str	r3, [sp, #32]
 80085e6:	e7f5      	b.n	80085d4 <_dtoa_r+0x2fc>
 80085e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085ee:	e7b8      	b.n	8008562 <_dtoa_r+0x28a>
 80085f0:	3101      	adds	r1, #1
 80085f2:	6041      	str	r1, [r0, #4]
 80085f4:	0052      	lsls	r2, r2, #1
 80085f6:	e7b8      	b.n	800856a <_dtoa_r+0x292>
 80085f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085fa:	9a01      	ldr	r2, [sp, #4]
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	2b0e      	cmp	r3, #14
 8008602:	f200 809d 	bhi.w	8008740 <_dtoa_r+0x468>
 8008606:	2d00      	cmp	r5, #0
 8008608:	f000 809a 	beq.w	8008740 <_dtoa_r+0x468>
 800860c:	9b00      	ldr	r3, [sp, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	dd32      	ble.n	8008678 <_dtoa_r+0x3a0>
 8008612:	4ab7      	ldr	r2, [pc, #732]	; (80088f0 <_dtoa_r+0x618>)
 8008614:	f003 030f 	and.w	r3, r3, #15
 8008618:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800861c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008620:	9b00      	ldr	r3, [sp, #0]
 8008622:	05d8      	lsls	r0, r3, #23
 8008624:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008628:	d516      	bpl.n	8008658 <_dtoa_r+0x380>
 800862a:	4bb2      	ldr	r3, [pc, #712]	; (80088f4 <_dtoa_r+0x61c>)
 800862c:	ec51 0b19 	vmov	r0, r1, d9
 8008630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008634:	f7f8 f90a 	bl	800084c <__aeabi_ddiv>
 8008638:	f007 070f 	and.w	r7, r7, #15
 800863c:	4682      	mov	sl, r0
 800863e:	468b      	mov	fp, r1
 8008640:	2503      	movs	r5, #3
 8008642:	4eac      	ldr	r6, [pc, #688]	; (80088f4 <_dtoa_r+0x61c>)
 8008644:	b957      	cbnz	r7, 800865c <_dtoa_r+0x384>
 8008646:	4642      	mov	r2, r8
 8008648:	464b      	mov	r3, r9
 800864a:	4650      	mov	r0, sl
 800864c:	4659      	mov	r1, fp
 800864e:	f7f8 f8fd 	bl	800084c <__aeabi_ddiv>
 8008652:	4682      	mov	sl, r0
 8008654:	468b      	mov	fp, r1
 8008656:	e028      	b.n	80086aa <_dtoa_r+0x3d2>
 8008658:	2502      	movs	r5, #2
 800865a:	e7f2      	b.n	8008642 <_dtoa_r+0x36a>
 800865c:	07f9      	lsls	r1, r7, #31
 800865e:	d508      	bpl.n	8008672 <_dtoa_r+0x39a>
 8008660:	4640      	mov	r0, r8
 8008662:	4649      	mov	r1, r9
 8008664:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008668:	f7f7 ffc6 	bl	80005f8 <__aeabi_dmul>
 800866c:	3501      	adds	r5, #1
 800866e:	4680      	mov	r8, r0
 8008670:	4689      	mov	r9, r1
 8008672:	107f      	asrs	r7, r7, #1
 8008674:	3608      	adds	r6, #8
 8008676:	e7e5      	b.n	8008644 <_dtoa_r+0x36c>
 8008678:	f000 809b 	beq.w	80087b2 <_dtoa_r+0x4da>
 800867c:	9b00      	ldr	r3, [sp, #0]
 800867e:	4f9d      	ldr	r7, [pc, #628]	; (80088f4 <_dtoa_r+0x61c>)
 8008680:	425e      	negs	r6, r3
 8008682:	4b9b      	ldr	r3, [pc, #620]	; (80088f0 <_dtoa_r+0x618>)
 8008684:	f006 020f 	and.w	r2, r6, #15
 8008688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	ec51 0b19 	vmov	r0, r1, d9
 8008694:	f7f7 ffb0 	bl	80005f8 <__aeabi_dmul>
 8008698:	1136      	asrs	r6, r6, #4
 800869a:	4682      	mov	sl, r0
 800869c:	468b      	mov	fp, r1
 800869e:	2300      	movs	r3, #0
 80086a0:	2502      	movs	r5, #2
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	d17a      	bne.n	800879c <_dtoa_r+0x4c4>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1d3      	bne.n	8008652 <_dtoa_r+0x37a>
 80086aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 8082 	beq.w	80087b6 <_dtoa_r+0x4de>
 80086b2:	4b91      	ldr	r3, [pc, #580]	; (80088f8 <_dtoa_r+0x620>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	4650      	mov	r0, sl
 80086b8:	4659      	mov	r1, fp
 80086ba:	f7f8 fa0f 	bl	8000adc <__aeabi_dcmplt>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d079      	beq.n	80087b6 <_dtoa_r+0x4de>
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d076      	beq.n	80087b6 <_dtoa_r+0x4de>
 80086c8:	9b02      	ldr	r3, [sp, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dd36      	ble.n	800873c <_dtoa_r+0x464>
 80086ce:	9b00      	ldr	r3, [sp, #0]
 80086d0:	4650      	mov	r0, sl
 80086d2:	4659      	mov	r1, fp
 80086d4:	1e5f      	subs	r7, r3, #1
 80086d6:	2200      	movs	r2, #0
 80086d8:	4b88      	ldr	r3, [pc, #544]	; (80088fc <_dtoa_r+0x624>)
 80086da:	f7f7 ff8d 	bl	80005f8 <__aeabi_dmul>
 80086de:	9e02      	ldr	r6, [sp, #8]
 80086e0:	4682      	mov	sl, r0
 80086e2:	468b      	mov	fp, r1
 80086e4:	3501      	adds	r5, #1
 80086e6:	4628      	mov	r0, r5
 80086e8:	f7f7 ff1c 	bl	8000524 <__aeabi_i2d>
 80086ec:	4652      	mov	r2, sl
 80086ee:	465b      	mov	r3, fp
 80086f0:	f7f7 ff82 	bl	80005f8 <__aeabi_dmul>
 80086f4:	4b82      	ldr	r3, [pc, #520]	; (8008900 <_dtoa_r+0x628>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	f7f7 fdc8 	bl	800028c <__adddf3>
 80086fc:	46d0      	mov	r8, sl
 80086fe:	46d9      	mov	r9, fp
 8008700:	4682      	mov	sl, r0
 8008702:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008706:	2e00      	cmp	r6, #0
 8008708:	d158      	bne.n	80087bc <_dtoa_r+0x4e4>
 800870a:	4b7e      	ldr	r3, [pc, #504]	; (8008904 <_dtoa_r+0x62c>)
 800870c:	2200      	movs	r2, #0
 800870e:	4640      	mov	r0, r8
 8008710:	4649      	mov	r1, r9
 8008712:	f7f7 fdb9 	bl	8000288 <__aeabi_dsub>
 8008716:	4652      	mov	r2, sl
 8008718:	465b      	mov	r3, fp
 800871a:	4680      	mov	r8, r0
 800871c:	4689      	mov	r9, r1
 800871e:	f7f8 f9fb 	bl	8000b18 <__aeabi_dcmpgt>
 8008722:	2800      	cmp	r0, #0
 8008724:	f040 8295 	bne.w	8008c52 <_dtoa_r+0x97a>
 8008728:	4652      	mov	r2, sl
 800872a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800872e:	4640      	mov	r0, r8
 8008730:	4649      	mov	r1, r9
 8008732:	f7f8 f9d3 	bl	8000adc <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	f040 8289 	bne.w	8008c4e <_dtoa_r+0x976>
 800873c:	ec5b ab19 	vmov	sl, fp, d9
 8008740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008742:	2b00      	cmp	r3, #0
 8008744:	f2c0 8148 	blt.w	80089d8 <_dtoa_r+0x700>
 8008748:	9a00      	ldr	r2, [sp, #0]
 800874a:	2a0e      	cmp	r2, #14
 800874c:	f300 8144 	bgt.w	80089d8 <_dtoa_r+0x700>
 8008750:	4b67      	ldr	r3, [pc, #412]	; (80088f0 <_dtoa_r+0x618>)
 8008752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008756:	e9d3 8900 	ldrd	r8, r9, [r3]
 800875a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	f280 80d5 	bge.w	800890c <_dtoa_r+0x634>
 8008762:	9b03      	ldr	r3, [sp, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f300 80d1 	bgt.w	800890c <_dtoa_r+0x634>
 800876a:	f040 826f 	bne.w	8008c4c <_dtoa_r+0x974>
 800876e:	4b65      	ldr	r3, [pc, #404]	; (8008904 <_dtoa_r+0x62c>)
 8008770:	2200      	movs	r2, #0
 8008772:	4640      	mov	r0, r8
 8008774:	4649      	mov	r1, r9
 8008776:	f7f7 ff3f 	bl	80005f8 <__aeabi_dmul>
 800877a:	4652      	mov	r2, sl
 800877c:	465b      	mov	r3, fp
 800877e:	f7f8 f9c1 	bl	8000b04 <__aeabi_dcmpge>
 8008782:	9e03      	ldr	r6, [sp, #12]
 8008784:	4637      	mov	r7, r6
 8008786:	2800      	cmp	r0, #0
 8008788:	f040 8245 	bne.w	8008c16 <_dtoa_r+0x93e>
 800878c:	9d01      	ldr	r5, [sp, #4]
 800878e:	2331      	movs	r3, #49	; 0x31
 8008790:	f805 3b01 	strb.w	r3, [r5], #1
 8008794:	9b00      	ldr	r3, [sp, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	e240      	b.n	8008c1e <_dtoa_r+0x946>
 800879c:	07f2      	lsls	r2, r6, #31
 800879e:	d505      	bpl.n	80087ac <_dtoa_r+0x4d4>
 80087a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a4:	f7f7 ff28 	bl	80005f8 <__aeabi_dmul>
 80087a8:	3501      	adds	r5, #1
 80087aa:	2301      	movs	r3, #1
 80087ac:	1076      	asrs	r6, r6, #1
 80087ae:	3708      	adds	r7, #8
 80087b0:	e777      	b.n	80086a2 <_dtoa_r+0x3ca>
 80087b2:	2502      	movs	r5, #2
 80087b4:	e779      	b.n	80086aa <_dtoa_r+0x3d2>
 80087b6:	9f00      	ldr	r7, [sp, #0]
 80087b8:	9e03      	ldr	r6, [sp, #12]
 80087ba:	e794      	b.n	80086e6 <_dtoa_r+0x40e>
 80087bc:	9901      	ldr	r1, [sp, #4]
 80087be:	4b4c      	ldr	r3, [pc, #304]	; (80088f0 <_dtoa_r+0x618>)
 80087c0:	4431      	add	r1, r6
 80087c2:	910d      	str	r1, [sp, #52]	; 0x34
 80087c4:	9908      	ldr	r1, [sp, #32]
 80087c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087ce:	2900      	cmp	r1, #0
 80087d0:	d043      	beq.n	800885a <_dtoa_r+0x582>
 80087d2:	494d      	ldr	r1, [pc, #308]	; (8008908 <_dtoa_r+0x630>)
 80087d4:	2000      	movs	r0, #0
 80087d6:	f7f8 f839 	bl	800084c <__aeabi_ddiv>
 80087da:	4652      	mov	r2, sl
 80087dc:	465b      	mov	r3, fp
 80087de:	f7f7 fd53 	bl	8000288 <__aeabi_dsub>
 80087e2:	9d01      	ldr	r5, [sp, #4]
 80087e4:	4682      	mov	sl, r0
 80087e6:	468b      	mov	fp, r1
 80087e8:	4649      	mov	r1, r9
 80087ea:	4640      	mov	r0, r8
 80087ec:	f7f8 f9b4 	bl	8000b58 <__aeabi_d2iz>
 80087f0:	4606      	mov	r6, r0
 80087f2:	f7f7 fe97 	bl	8000524 <__aeabi_i2d>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4640      	mov	r0, r8
 80087fc:	4649      	mov	r1, r9
 80087fe:	f7f7 fd43 	bl	8000288 <__aeabi_dsub>
 8008802:	3630      	adds	r6, #48	; 0x30
 8008804:	f805 6b01 	strb.w	r6, [r5], #1
 8008808:	4652      	mov	r2, sl
 800880a:	465b      	mov	r3, fp
 800880c:	4680      	mov	r8, r0
 800880e:	4689      	mov	r9, r1
 8008810:	f7f8 f964 	bl	8000adc <__aeabi_dcmplt>
 8008814:	2800      	cmp	r0, #0
 8008816:	d163      	bne.n	80088e0 <_dtoa_r+0x608>
 8008818:	4642      	mov	r2, r8
 800881a:	464b      	mov	r3, r9
 800881c:	4936      	ldr	r1, [pc, #216]	; (80088f8 <_dtoa_r+0x620>)
 800881e:	2000      	movs	r0, #0
 8008820:	f7f7 fd32 	bl	8000288 <__aeabi_dsub>
 8008824:	4652      	mov	r2, sl
 8008826:	465b      	mov	r3, fp
 8008828:	f7f8 f958 	bl	8000adc <__aeabi_dcmplt>
 800882c:	2800      	cmp	r0, #0
 800882e:	f040 80b5 	bne.w	800899c <_dtoa_r+0x6c4>
 8008832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008834:	429d      	cmp	r5, r3
 8008836:	d081      	beq.n	800873c <_dtoa_r+0x464>
 8008838:	4b30      	ldr	r3, [pc, #192]	; (80088fc <_dtoa_r+0x624>)
 800883a:	2200      	movs	r2, #0
 800883c:	4650      	mov	r0, sl
 800883e:	4659      	mov	r1, fp
 8008840:	f7f7 feda 	bl	80005f8 <__aeabi_dmul>
 8008844:	4b2d      	ldr	r3, [pc, #180]	; (80088fc <_dtoa_r+0x624>)
 8008846:	4682      	mov	sl, r0
 8008848:	468b      	mov	fp, r1
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	2200      	movs	r2, #0
 8008850:	f7f7 fed2 	bl	80005f8 <__aeabi_dmul>
 8008854:	4680      	mov	r8, r0
 8008856:	4689      	mov	r9, r1
 8008858:	e7c6      	b.n	80087e8 <_dtoa_r+0x510>
 800885a:	4650      	mov	r0, sl
 800885c:	4659      	mov	r1, fp
 800885e:	f7f7 fecb 	bl	80005f8 <__aeabi_dmul>
 8008862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008864:	9d01      	ldr	r5, [sp, #4]
 8008866:	930f      	str	r3, [sp, #60]	; 0x3c
 8008868:	4682      	mov	sl, r0
 800886a:	468b      	mov	fp, r1
 800886c:	4649      	mov	r1, r9
 800886e:	4640      	mov	r0, r8
 8008870:	f7f8 f972 	bl	8000b58 <__aeabi_d2iz>
 8008874:	4606      	mov	r6, r0
 8008876:	f7f7 fe55 	bl	8000524 <__aeabi_i2d>
 800887a:	3630      	adds	r6, #48	; 0x30
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4640      	mov	r0, r8
 8008882:	4649      	mov	r1, r9
 8008884:	f7f7 fd00 	bl	8000288 <__aeabi_dsub>
 8008888:	f805 6b01 	strb.w	r6, [r5], #1
 800888c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800888e:	429d      	cmp	r5, r3
 8008890:	4680      	mov	r8, r0
 8008892:	4689      	mov	r9, r1
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	d124      	bne.n	80088e4 <_dtoa_r+0x60c>
 800889a:	4b1b      	ldr	r3, [pc, #108]	; (8008908 <_dtoa_r+0x630>)
 800889c:	4650      	mov	r0, sl
 800889e:	4659      	mov	r1, fp
 80088a0:	f7f7 fcf4 	bl	800028c <__adddf3>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4640      	mov	r0, r8
 80088aa:	4649      	mov	r1, r9
 80088ac:	f7f8 f934 	bl	8000b18 <__aeabi_dcmpgt>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d173      	bne.n	800899c <_dtoa_r+0x6c4>
 80088b4:	4652      	mov	r2, sl
 80088b6:	465b      	mov	r3, fp
 80088b8:	4913      	ldr	r1, [pc, #76]	; (8008908 <_dtoa_r+0x630>)
 80088ba:	2000      	movs	r0, #0
 80088bc:	f7f7 fce4 	bl	8000288 <__aeabi_dsub>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4640      	mov	r0, r8
 80088c6:	4649      	mov	r1, r9
 80088c8:	f7f8 f908 	bl	8000adc <__aeabi_dcmplt>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f43f af35 	beq.w	800873c <_dtoa_r+0x464>
 80088d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088d4:	1e6b      	subs	r3, r5, #1
 80088d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088dc:	2b30      	cmp	r3, #48	; 0x30
 80088de:	d0f8      	beq.n	80088d2 <_dtoa_r+0x5fa>
 80088e0:	9700      	str	r7, [sp, #0]
 80088e2:	e049      	b.n	8008978 <_dtoa_r+0x6a0>
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <_dtoa_r+0x624>)
 80088e6:	f7f7 fe87 	bl	80005f8 <__aeabi_dmul>
 80088ea:	4680      	mov	r8, r0
 80088ec:	4689      	mov	r9, r1
 80088ee:	e7bd      	b.n	800886c <_dtoa_r+0x594>
 80088f0:	0800d9b8 	.word	0x0800d9b8
 80088f4:	0800d990 	.word	0x0800d990
 80088f8:	3ff00000 	.word	0x3ff00000
 80088fc:	40240000 	.word	0x40240000
 8008900:	401c0000 	.word	0x401c0000
 8008904:	40140000 	.word	0x40140000
 8008908:	3fe00000 	.word	0x3fe00000
 800890c:	9d01      	ldr	r5, [sp, #4]
 800890e:	4656      	mov	r6, sl
 8008910:	465f      	mov	r7, fp
 8008912:	4642      	mov	r2, r8
 8008914:	464b      	mov	r3, r9
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 ff97 	bl	800084c <__aeabi_ddiv>
 800891e:	f7f8 f91b 	bl	8000b58 <__aeabi_d2iz>
 8008922:	4682      	mov	sl, r0
 8008924:	f7f7 fdfe 	bl	8000524 <__aeabi_i2d>
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	f7f7 fe64 	bl	80005f8 <__aeabi_dmul>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4630      	mov	r0, r6
 8008936:	4639      	mov	r1, r7
 8008938:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800893c:	f7f7 fca4 	bl	8000288 <__aeabi_dsub>
 8008940:	f805 6b01 	strb.w	r6, [r5], #1
 8008944:	9e01      	ldr	r6, [sp, #4]
 8008946:	9f03      	ldr	r7, [sp, #12]
 8008948:	1bae      	subs	r6, r5, r6
 800894a:	42b7      	cmp	r7, r6
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	d135      	bne.n	80089be <_dtoa_r+0x6e6>
 8008952:	f7f7 fc9b 	bl	800028c <__adddf3>
 8008956:	4642      	mov	r2, r8
 8008958:	464b      	mov	r3, r9
 800895a:	4606      	mov	r6, r0
 800895c:	460f      	mov	r7, r1
 800895e:	f7f8 f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8008962:	b9d0      	cbnz	r0, 800899a <_dtoa_r+0x6c2>
 8008964:	4642      	mov	r2, r8
 8008966:	464b      	mov	r3, r9
 8008968:	4630      	mov	r0, r6
 800896a:	4639      	mov	r1, r7
 800896c:	f7f8 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008970:	b110      	cbz	r0, 8008978 <_dtoa_r+0x6a0>
 8008972:	f01a 0f01 	tst.w	sl, #1
 8008976:	d110      	bne.n	800899a <_dtoa_r+0x6c2>
 8008978:	4620      	mov	r0, r4
 800897a:	ee18 1a10 	vmov	r1, s16
 800897e:	f000 fe67 	bl	8009650 <_Bfree>
 8008982:	2300      	movs	r3, #0
 8008984:	9800      	ldr	r0, [sp, #0]
 8008986:	702b      	strb	r3, [r5, #0]
 8008988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800898a:	3001      	adds	r0, #1
 800898c:	6018      	str	r0, [r3, #0]
 800898e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008990:	2b00      	cmp	r3, #0
 8008992:	f43f acf1 	beq.w	8008378 <_dtoa_r+0xa0>
 8008996:	601d      	str	r5, [r3, #0]
 8008998:	e4ee      	b.n	8008378 <_dtoa_r+0xa0>
 800899a:	9f00      	ldr	r7, [sp, #0]
 800899c:	462b      	mov	r3, r5
 800899e:	461d      	mov	r5, r3
 80089a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089a4:	2a39      	cmp	r2, #57	; 0x39
 80089a6:	d106      	bne.n	80089b6 <_dtoa_r+0x6de>
 80089a8:	9a01      	ldr	r2, [sp, #4]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d1f7      	bne.n	800899e <_dtoa_r+0x6c6>
 80089ae:	9901      	ldr	r1, [sp, #4]
 80089b0:	2230      	movs	r2, #48	; 0x30
 80089b2:	3701      	adds	r7, #1
 80089b4:	700a      	strb	r2, [r1, #0]
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	3201      	adds	r2, #1
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	e790      	b.n	80088e0 <_dtoa_r+0x608>
 80089be:	4ba6      	ldr	r3, [pc, #664]	; (8008c58 <_dtoa_r+0x980>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	f7f7 fe19 	bl	80005f8 <__aeabi_dmul>
 80089c6:	2200      	movs	r2, #0
 80089c8:	2300      	movs	r3, #0
 80089ca:	4606      	mov	r6, r0
 80089cc:	460f      	mov	r7, r1
 80089ce:	f7f8 f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d09d      	beq.n	8008912 <_dtoa_r+0x63a>
 80089d6:	e7cf      	b.n	8008978 <_dtoa_r+0x6a0>
 80089d8:	9a08      	ldr	r2, [sp, #32]
 80089da:	2a00      	cmp	r2, #0
 80089dc:	f000 80d7 	beq.w	8008b8e <_dtoa_r+0x8b6>
 80089e0:	9a06      	ldr	r2, [sp, #24]
 80089e2:	2a01      	cmp	r2, #1
 80089e4:	f300 80ba 	bgt.w	8008b5c <_dtoa_r+0x884>
 80089e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	f000 80b2 	beq.w	8008b54 <_dtoa_r+0x87c>
 80089f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089f4:	9e07      	ldr	r6, [sp, #28]
 80089f6:	9d04      	ldr	r5, [sp, #16]
 80089f8:	9a04      	ldr	r2, [sp, #16]
 80089fa:	441a      	add	r2, r3
 80089fc:	9204      	str	r2, [sp, #16]
 80089fe:	9a05      	ldr	r2, [sp, #20]
 8008a00:	2101      	movs	r1, #1
 8008a02:	441a      	add	r2, r3
 8008a04:	4620      	mov	r0, r4
 8008a06:	9205      	str	r2, [sp, #20]
 8008a08:	f000 ff24 	bl	8009854 <__i2b>
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	dd0c      	ble.n	8008a2c <_dtoa_r+0x754>
 8008a12:	9b05      	ldr	r3, [sp, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dd09      	ble.n	8008a2c <_dtoa_r+0x754>
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	9a04      	ldr	r2, [sp, #16]
 8008a1c:	bfa8      	it	ge
 8008a1e:	462b      	movge	r3, r5
 8008a20:	1ad2      	subs	r2, r2, r3
 8008a22:	9204      	str	r2, [sp, #16]
 8008a24:	9a05      	ldr	r2, [sp, #20]
 8008a26:	1aed      	subs	r5, r5, r3
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	9b07      	ldr	r3, [sp, #28]
 8008a2e:	b31b      	cbz	r3, 8008a78 <_dtoa_r+0x7a0>
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80af 	beq.w	8008b96 <_dtoa_r+0x8be>
 8008a38:	2e00      	cmp	r6, #0
 8008a3a:	dd13      	ble.n	8008a64 <_dtoa_r+0x78c>
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	4632      	mov	r2, r6
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 ffc7 	bl	80099d4 <__pow5mult>
 8008a46:	ee18 2a10 	vmov	r2, s16
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 ff16 	bl	8009880 <__multiply>
 8008a54:	ee18 1a10 	vmov	r1, s16
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fdf8 	bl	8009650 <_Bfree>
 8008a60:	ee08 8a10 	vmov	s16, r8
 8008a64:	9b07      	ldr	r3, [sp, #28]
 8008a66:	1b9a      	subs	r2, r3, r6
 8008a68:	d006      	beq.n	8008a78 <_dtoa_r+0x7a0>
 8008a6a:	ee18 1a10 	vmov	r1, s16
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 ffb0 	bl	80099d4 <__pow5mult>
 8008a74:	ee08 0a10 	vmov	s16, r0
 8008a78:	2101      	movs	r1, #1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 feea 	bl	8009854 <__i2b>
 8008a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	4606      	mov	r6, r0
 8008a86:	f340 8088 	ble.w	8008b9a <_dtoa_r+0x8c2>
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4601      	mov	r1, r0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 ffa0 	bl	80099d4 <__pow5mult>
 8008a94:	9b06      	ldr	r3, [sp, #24]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	4606      	mov	r6, r0
 8008a9a:	f340 8081 	ble.w	8008ba0 <_dtoa_r+0x8c8>
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	6933      	ldr	r3, [r6, #16]
 8008aa4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008aa8:	6918      	ldr	r0, [r3, #16]
 8008aaa:	f000 fe83 	bl	80097b4 <__hi0bits>
 8008aae:	f1c0 0020 	rsb	r0, r0, #32
 8008ab2:	9b05      	ldr	r3, [sp, #20]
 8008ab4:	4418      	add	r0, r3
 8008ab6:	f010 001f 	ands.w	r0, r0, #31
 8008aba:	f000 8092 	beq.w	8008be2 <_dtoa_r+0x90a>
 8008abe:	f1c0 0320 	rsb	r3, r0, #32
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	f340 808a 	ble.w	8008bdc <_dtoa_r+0x904>
 8008ac8:	f1c0 001c 	rsb	r0, r0, #28
 8008acc:	9b04      	ldr	r3, [sp, #16]
 8008ace:	4403      	add	r3, r0
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	9b05      	ldr	r3, [sp, #20]
 8008ad4:	4403      	add	r3, r0
 8008ad6:	4405      	add	r5, r0
 8008ad8:	9305      	str	r3, [sp, #20]
 8008ada:	9b04      	ldr	r3, [sp, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dd07      	ble.n	8008af0 <_dtoa_r+0x818>
 8008ae0:	ee18 1a10 	vmov	r1, s16
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 ffce 	bl	8009a88 <__lshift>
 8008aec:	ee08 0a10 	vmov	s16, r0
 8008af0:	9b05      	ldr	r3, [sp, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	dd05      	ble.n	8008b02 <_dtoa_r+0x82a>
 8008af6:	4631      	mov	r1, r6
 8008af8:	461a      	mov	r2, r3
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 ffc4 	bl	8009a88 <__lshift>
 8008b00:	4606      	mov	r6, r0
 8008b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d06e      	beq.n	8008be6 <_dtoa_r+0x90e>
 8008b08:	ee18 0a10 	vmov	r0, s16
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	f001 f82b 	bl	8009b68 <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	da67      	bge.n	8008be6 <_dtoa_r+0x90e>
 8008b16:	9b00      	ldr	r3, [sp, #0]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	ee18 1a10 	vmov	r1, s16
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	220a      	movs	r2, #10
 8008b22:	2300      	movs	r3, #0
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fdb5 	bl	8009694 <__multadd>
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	ee08 0a10 	vmov	s16, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 81b1 	beq.w	8008e98 <_dtoa_r+0xbc0>
 8008b36:	2300      	movs	r3, #0
 8008b38:	4639      	mov	r1, r7
 8008b3a:	220a      	movs	r2, #10
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 fda9 	bl	8009694 <__multadd>
 8008b42:	9b02      	ldr	r3, [sp, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	4607      	mov	r7, r0
 8008b48:	f300 808e 	bgt.w	8008c68 <_dtoa_r+0x990>
 8008b4c:	9b06      	ldr	r3, [sp, #24]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	dc51      	bgt.n	8008bf6 <_dtoa_r+0x91e>
 8008b52:	e089      	b.n	8008c68 <_dtoa_r+0x990>
 8008b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b5a:	e74b      	b.n	80089f4 <_dtoa_r+0x71c>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	1e5e      	subs	r6, r3, #1
 8008b60:	9b07      	ldr	r3, [sp, #28]
 8008b62:	42b3      	cmp	r3, r6
 8008b64:	bfbf      	itttt	lt
 8008b66:	9b07      	ldrlt	r3, [sp, #28]
 8008b68:	9607      	strlt	r6, [sp, #28]
 8008b6a:	1af2      	sublt	r2, r6, r3
 8008b6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b6e:	bfb6      	itet	lt
 8008b70:	189b      	addlt	r3, r3, r2
 8008b72:	1b9e      	subge	r6, r3, r6
 8008b74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	bfb8      	it	lt
 8008b7a:	2600      	movlt	r6, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	bfb7      	itett	lt
 8008b80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b88:	1a9d      	sublt	r5, r3, r2
 8008b8a:	2300      	movlt	r3, #0
 8008b8c:	e734      	b.n	80089f8 <_dtoa_r+0x720>
 8008b8e:	9e07      	ldr	r6, [sp, #28]
 8008b90:	9d04      	ldr	r5, [sp, #16]
 8008b92:	9f08      	ldr	r7, [sp, #32]
 8008b94:	e73b      	b.n	8008a0e <_dtoa_r+0x736>
 8008b96:	9a07      	ldr	r2, [sp, #28]
 8008b98:	e767      	b.n	8008a6a <_dtoa_r+0x792>
 8008b9a:	9b06      	ldr	r3, [sp, #24]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	dc18      	bgt.n	8008bd2 <_dtoa_r+0x8fa>
 8008ba0:	f1ba 0f00 	cmp.w	sl, #0
 8008ba4:	d115      	bne.n	8008bd2 <_dtoa_r+0x8fa>
 8008ba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008baa:	b993      	cbnz	r3, 8008bd2 <_dtoa_r+0x8fa>
 8008bac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bb0:	0d1b      	lsrs	r3, r3, #20
 8008bb2:	051b      	lsls	r3, r3, #20
 8008bb4:	b183      	cbz	r3, 8008bd8 <_dtoa_r+0x900>
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	9304      	str	r3, [sp, #16]
 8008bbc:	9b05      	ldr	r3, [sp, #20]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	9305      	str	r3, [sp, #20]
 8008bc2:	f04f 0801 	mov.w	r8, #1
 8008bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f47f af6a 	bne.w	8008aa2 <_dtoa_r+0x7ca>
 8008bce:	2001      	movs	r0, #1
 8008bd0:	e76f      	b.n	8008ab2 <_dtoa_r+0x7da>
 8008bd2:	f04f 0800 	mov.w	r8, #0
 8008bd6:	e7f6      	b.n	8008bc6 <_dtoa_r+0x8ee>
 8008bd8:	4698      	mov	r8, r3
 8008bda:	e7f4      	b.n	8008bc6 <_dtoa_r+0x8ee>
 8008bdc:	f43f af7d 	beq.w	8008ada <_dtoa_r+0x802>
 8008be0:	4618      	mov	r0, r3
 8008be2:	301c      	adds	r0, #28
 8008be4:	e772      	b.n	8008acc <_dtoa_r+0x7f4>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dc37      	bgt.n	8008c5c <_dtoa_r+0x984>
 8008bec:	9b06      	ldr	r3, [sp, #24]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	dd34      	ble.n	8008c5c <_dtoa_r+0x984>
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	9302      	str	r3, [sp, #8]
 8008bf6:	9b02      	ldr	r3, [sp, #8]
 8008bf8:	b96b      	cbnz	r3, 8008c16 <_dtoa_r+0x93e>
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	2205      	movs	r2, #5
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f000 fd48 	bl	8009694 <__multadd>
 8008c04:	4601      	mov	r1, r0
 8008c06:	4606      	mov	r6, r0
 8008c08:	ee18 0a10 	vmov	r0, s16
 8008c0c:	f000 ffac 	bl	8009b68 <__mcmp>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	f73f adbb 	bgt.w	800878c <_dtoa_r+0x4b4>
 8008c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c18:	9d01      	ldr	r5, [sp, #4]
 8008c1a:	43db      	mvns	r3, r3
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	f04f 0800 	mov.w	r8, #0
 8008c22:	4631      	mov	r1, r6
 8008c24:	4620      	mov	r0, r4
 8008c26:	f000 fd13 	bl	8009650 <_Bfree>
 8008c2a:	2f00      	cmp	r7, #0
 8008c2c:	f43f aea4 	beq.w	8008978 <_dtoa_r+0x6a0>
 8008c30:	f1b8 0f00 	cmp.w	r8, #0
 8008c34:	d005      	beq.n	8008c42 <_dtoa_r+0x96a>
 8008c36:	45b8      	cmp	r8, r7
 8008c38:	d003      	beq.n	8008c42 <_dtoa_r+0x96a>
 8008c3a:	4641      	mov	r1, r8
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fd07 	bl	8009650 <_Bfree>
 8008c42:	4639      	mov	r1, r7
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fd03 	bl	8009650 <_Bfree>
 8008c4a:	e695      	b.n	8008978 <_dtoa_r+0x6a0>
 8008c4c:	2600      	movs	r6, #0
 8008c4e:	4637      	mov	r7, r6
 8008c50:	e7e1      	b.n	8008c16 <_dtoa_r+0x93e>
 8008c52:	9700      	str	r7, [sp, #0]
 8008c54:	4637      	mov	r7, r6
 8008c56:	e599      	b.n	800878c <_dtoa_r+0x4b4>
 8008c58:	40240000 	.word	0x40240000
 8008c5c:	9b08      	ldr	r3, [sp, #32]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 80ca 	beq.w	8008df8 <_dtoa_r+0xb20>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	dd05      	ble.n	8008c78 <_dtoa_r+0x9a0>
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	462a      	mov	r2, r5
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 ff09 	bl	8009a88 <__lshift>
 8008c76:	4607      	mov	r7, r0
 8008c78:	f1b8 0f00 	cmp.w	r8, #0
 8008c7c:	d05b      	beq.n	8008d36 <_dtoa_r+0xa5e>
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	4620      	mov	r0, r4
 8008c82:	f000 fca5 	bl	80095d0 <_Balloc>
 8008c86:	4605      	mov	r5, r0
 8008c88:	b928      	cbnz	r0, 8008c96 <_dtoa_r+0x9be>
 8008c8a:	4b87      	ldr	r3, [pc, #540]	; (8008ea8 <_dtoa_r+0xbd0>)
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c92:	f7ff bb3b 	b.w	800830c <_dtoa_r+0x34>
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	3202      	adds	r2, #2
 8008c9a:	0092      	lsls	r2, r2, #2
 8008c9c:	f107 010c 	add.w	r1, r7, #12
 8008ca0:	300c      	adds	r0, #12
 8008ca2:	f7fd fd0f 	bl	80066c4 <memcpy>
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 feec 	bl	8009a88 <__lshift>
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	f103 0901 	add.w	r9, r3, #1
 8008cb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cba:	4413      	add	r3, r2
 8008cbc:	9305      	str	r3, [sp, #20]
 8008cbe:	f00a 0301 	and.w	r3, sl, #1
 8008cc2:	46b8      	mov	r8, r7
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	4631      	mov	r1, r6
 8008cca:	ee18 0a10 	vmov	r0, s16
 8008cce:	f7ff fa77 	bl	80081c0 <quorem>
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	9002      	str	r0, [sp, #8]
 8008cd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cda:	ee18 0a10 	vmov	r0, s16
 8008cde:	f000 ff43 	bl	8009b68 <__mcmp>
 8008ce2:	463a      	mov	r2, r7
 8008ce4:	9003      	str	r0, [sp, #12]
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 ff59 	bl	8009ba0 <__mdiff>
 8008cee:	68c2      	ldr	r2, [r0, #12]
 8008cf0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	bb02      	cbnz	r2, 8008d3a <_dtoa_r+0xa62>
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	ee18 0a10 	vmov	r0, s16
 8008cfe:	f000 ff33 	bl	8009b68 <__mcmp>
 8008d02:	4602      	mov	r2, r0
 8008d04:	4629      	mov	r1, r5
 8008d06:	4620      	mov	r0, r4
 8008d08:	9207      	str	r2, [sp, #28]
 8008d0a:	f000 fca1 	bl	8009650 <_Bfree>
 8008d0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d12:	ea43 0102 	orr.w	r1, r3, r2
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	464d      	mov	r5, r9
 8008d1c:	d10f      	bne.n	8008d3e <_dtoa_r+0xa66>
 8008d1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d22:	d02a      	beq.n	8008d7a <_dtoa_r+0xaa2>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd02      	ble.n	8008d30 <_dtoa_r+0xa58>
 8008d2a:	9b02      	ldr	r3, [sp, #8]
 8008d2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d30:	f88b a000 	strb.w	sl, [fp]
 8008d34:	e775      	b.n	8008c22 <_dtoa_r+0x94a>
 8008d36:	4638      	mov	r0, r7
 8008d38:	e7ba      	b.n	8008cb0 <_dtoa_r+0x9d8>
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	e7e2      	b.n	8008d04 <_dtoa_r+0xa2c>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	db04      	blt.n	8008d4e <_dtoa_r+0xa76>
 8008d44:	9906      	ldr	r1, [sp, #24]
 8008d46:	430b      	orrs	r3, r1
 8008d48:	9904      	ldr	r1, [sp, #16]
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	d122      	bne.n	8008d94 <_dtoa_r+0xabc>
 8008d4e:	2a00      	cmp	r2, #0
 8008d50:	ddee      	ble.n	8008d30 <_dtoa_r+0xa58>
 8008d52:	ee18 1a10 	vmov	r1, s16
 8008d56:	2201      	movs	r2, #1
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fe95 	bl	8009a88 <__lshift>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	ee08 0a10 	vmov	s16, r0
 8008d64:	f000 ff00 	bl	8009b68 <__mcmp>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	dc03      	bgt.n	8008d74 <_dtoa_r+0xa9c>
 8008d6c:	d1e0      	bne.n	8008d30 <_dtoa_r+0xa58>
 8008d6e:	f01a 0f01 	tst.w	sl, #1
 8008d72:	d0dd      	beq.n	8008d30 <_dtoa_r+0xa58>
 8008d74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d78:	d1d7      	bne.n	8008d2a <_dtoa_r+0xa52>
 8008d7a:	2339      	movs	r3, #57	; 0x39
 8008d7c:	f88b 3000 	strb.w	r3, [fp]
 8008d80:	462b      	mov	r3, r5
 8008d82:	461d      	mov	r5, r3
 8008d84:	3b01      	subs	r3, #1
 8008d86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d8a:	2a39      	cmp	r2, #57	; 0x39
 8008d8c:	d071      	beq.n	8008e72 <_dtoa_r+0xb9a>
 8008d8e:	3201      	adds	r2, #1
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	e746      	b.n	8008c22 <_dtoa_r+0x94a>
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	dd07      	ble.n	8008da8 <_dtoa_r+0xad0>
 8008d98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d9c:	d0ed      	beq.n	8008d7a <_dtoa_r+0xaa2>
 8008d9e:	f10a 0301 	add.w	r3, sl, #1
 8008da2:	f88b 3000 	strb.w	r3, [fp]
 8008da6:	e73c      	b.n	8008c22 <_dtoa_r+0x94a>
 8008da8:	9b05      	ldr	r3, [sp, #20]
 8008daa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008dae:	4599      	cmp	r9, r3
 8008db0:	d047      	beq.n	8008e42 <_dtoa_r+0xb6a>
 8008db2:	ee18 1a10 	vmov	r1, s16
 8008db6:	2300      	movs	r3, #0
 8008db8:	220a      	movs	r2, #10
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 fc6a 	bl	8009694 <__multadd>
 8008dc0:	45b8      	cmp	r8, r7
 8008dc2:	ee08 0a10 	vmov	s16, r0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	f04f 020a 	mov.w	r2, #10
 8008dce:	4641      	mov	r1, r8
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	d106      	bne.n	8008de2 <_dtoa_r+0xb0a>
 8008dd4:	f000 fc5e 	bl	8009694 <__multadd>
 8008dd8:	4680      	mov	r8, r0
 8008dda:	4607      	mov	r7, r0
 8008ddc:	f109 0901 	add.w	r9, r9, #1
 8008de0:	e772      	b.n	8008cc8 <_dtoa_r+0x9f0>
 8008de2:	f000 fc57 	bl	8009694 <__multadd>
 8008de6:	4639      	mov	r1, r7
 8008de8:	4680      	mov	r8, r0
 8008dea:	2300      	movs	r3, #0
 8008dec:	220a      	movs	r2, #10
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fc50 	bl	8009694 <__multadd>
 8008df4:	4607      	mov	r7, r0
 8008df6:	e7f1      	b.n	8008ddc <_dtoa_r+0xb04>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	9302      	str	r3, [sp, #8]
 8008dfc:	9d01      	ldr	r5, [sp, #4]
 8008dfe:	ee18 0a10 	vmov	r0, s16
 8008e02:	4631      	mov	r1, r6
 8008e04:	f7ff f9dc 	bl	80081c0 <quorem>
 8008e08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	f805 ab01 	strb.w	sl, [r5], #1
 8008e12:	1aea      	subs	r2, r5, r3
 8008e14:	9b02      	ldr	r3, [sp, #8]
 8008e16:	4293      	cmp	r3, r2
 8008e18:	dd09      	ble.n	8008e2e <_dtoa_r+0xb56>
 8008e1a:	ee18 1a10 	vmov	r1, s16
 8008e1e:	2300      	movs	r3, #0
 8008e20:	220a      	movs	r2, #10
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 fc36 	bl	8009694 <__multadd>
 8008e28:	ee08 0a10 	vmov	s16, r0
 8008e2c:	e7e7      	b.n	8008dfe <_dtoa_r+0xb26>
 8008e2e:	9b02      	ldr	r3, [sp, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bfc8      	it	gt
 8008e34:	461d      	movgt	r5, r3
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	bfd8      	it	le
 8008e3a:	2501      	movle	r5, #1
 8008e3c:	441d      	add	r5, r3
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	ee18 1a10 	vmov	r1, s16
 8008e46:	2201      	movs	r2, #1
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fe1d 	bl	8009a88 <__lshift>
 8008e4e:	4631      	mov	r1, r6
 8008e50:	ee08 0a10 	vmov	s16, r0
 8008e54:	f000 fe88 	bl	8009b68 <__mcmp>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	dc91      	bgt.n	8008d80 <_dtoa_r+0xaa8>
 8008e5c:	d102      	bne.n	8008e64 <_dtoa_r+0xb8c>
 8008e5e:	f01a 0f01 	tst.w	sl, #1
 8008e62:	d18d      	bne.n	8008d80 <_dtoa_r+0xaa8>
 8008e64:	462b      	mov	r3, r5
 8008e66:	461d      	mov	r5, r3
 8008e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e6c:	2a30      	cmp	r2, #48	; 0x30
 8008e6e:	d0fa      	beq.n	8008e66 <_dtoa_r+0xb8e>
 8008e70:	e6d7      	b.n	8008c22 <_dtoa_r+0x94a>
 8008e72:	9a01      	ldr	r2, [sp, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d184      	bne.n	8008d82 <_dtoa_r+0xaaa>
 8008e78:	9b00      	ldr	r3, [sp, #0]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	2331      	movs	r3, #49	; 0x31
 8008e80:	7013      	strb	r3, [r2, #0]
 8008e82:	e6ce      	b.n	8008c22 <_dtoa_r+0x94a>
 8008e84:	4b09      	ldr	r3, [pc, #36]	; (8008eac <_dtoa_r+0xbd4>)
 8008e86:	f7ff ba95 	b.w	80083b4 <_dtoa_r+0xdc>
 8008e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f47f aa6e 	bne.w	800836e <_dtoa_r+0x96>
 8008e92:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <_dtoa_r+0xbd8>)
 8008e94:	f7ff ba8e 	b.w	80083b4 <_dtoa_r+0xdc>
 8008e98:	9b02      	ldr	r3, [sp, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dcae      	bgt.n	8008dfc <_dtoa_r+0xb24>
 8008e9e:	9b06      	ldr	r3, [sp, #24]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	f73f aea8 	bgt.w	8008bf6 <_dtoa_r+0x91e>
 8008ea6:	e7a9      	b.n	8008dfc <_dtoa_r+0xb24>
 8008ea8:	0800d8a8 	.word	0x0800d8a8
 8008eac:	0800d6a8 	.word	0x0800d6a8
 8008eb0:	0800d829 	.word	0x0800d829

08008eb4 <rshift>:
 8008eb4:	6903      	ldr	r3, [r0, #16]
 8008eb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008eba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ebe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ec2:	f100 0414 	add.w	r4, r0, #20
 8008ec6:	dd45      	ble.n	8008f54 <rshift+0xa0>
 8008ec8:	f011 011f 	ands.w	r1, r1, #31
 8008ecc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ed0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ed4:	d10c      	bne.n	8008ef0 <rshift+0x3c>
 8008ed6:	f100 0710 	add.w	r7, r0, #16
 8008eda:	4629      	mov	r1, r5
 8008edc:	42b1      	cmp	r1, r6
 8008ede:	d334      	bcc.n	8008f4a <rshift+0x96>
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	1eea      	subs	r2, r5, #3
 8008ee6:	4296      	cmp	r6, r2
 8008ee8:	bf38      	it	cc
 8008eea:	2300      	movcc	r3, #0
 8008eec:	4423      	add	r3, r4
 8008eee:	e015      	b.n	8008f1c <rshift+0x68>
 8008ef0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ef4:	f1c1 0820 	rsb	r8, r1, #32
 8008ef8:	40cf      	lsrs	r7, r1
 8008efa:	f105 0e04 	add.w	lr, r5, #4
 8008efe:	46a1      	mov	r9, r4
 8008f00:	4576      	cmp	r6, lr
 8008f02:	46f4      	mov	ip, lr
 8008f04:	d815      	bhi.n	8008f32 <rshift+0x7e>
 8008f06:	1a9a      	subs	r2, r3, r2
 8008f08:	0092      	lsls	r2, r2, #2
 8008f0a:	3a04      	subs	r2, #4
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	42ae      	cmp	r6, r5
 8008f10:	bf38      	it	cc
 8008f12:	2200      	movcc	r2, #0
 8008f14:	18a3      	adds	r3, r4, r2
 8008f16:	50a7      	str	r7, [r4, r2]
 8008f18:	b107      	cbz	r7, 8008f1c <rshift+0x68>
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	1b1a      	subs	r2, r3, r4
 8008f1e:	42a3      	cmp	r3, r4
 8008f20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f24:	bf08      	it	eq
 8008f26:	2300      	moveq	r3, #0
 8008f28:	6102      	str	r2, [r0, #16]
 8008f2a:	bf08      	it	eq
 8008f2c:	6143      	streq	r3, [r0, #20]
 8008f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f32:	f8dc c000 	ldr.w	ip, [ip]
 8008f36:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f3a:	ea4c 0707 	orr.w	r7, ip, r7
 8008f3e:	f849 7b04 	str.w	r7, [r9], #4
 8008f42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f46:	40cf      	lsrs	r7, r1
 8008f48:	e7da      	b.n	8008f00 <rshift+0x4c>
 8008f4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f52:	e7c3      	b.n	8008edc <rshift+0x28>
 8008f54:	4623      	mov	r3, r4
 8008f56:	e7e1      	b.n	8008f1c <rshift+0x68>

08008f58 <__hexdig_fun>:
 8008f58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f5c:	2b09      	cmp	r3, #9
 8008f5e:	d802      	bhi.n	8008f66 <__hexdig_fun+0xe>
 8008f60:	3820      	subs	r0, #32
 8008f62:	b2c0      	uxtb	r0, r0
 8008f64:	4770      	bx	lr
 8008f66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	d801      	bhi.n	8008f72 <__hexdig_fun+0x1a>
 8008f6e:	3847      	subs	r0, #71	; 0x47
 8008f70:	e7f7      	b.n	8008f62 <__hexdig_fun+0xa>
 8008f72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f76:	2b05      	cmp	r3, #5
 8008f78:	d801      	bhi.n	8008f7e <__hexdig_fun+0x26>
 8008f7a:	3827      	subs	r0, #39	; 0x27
 8008f7c:	e7f1      	b.n	8008f62 <__hexdig_fun+0xa>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	4770      	bx	lr
	...

08008f84 <__gethex>:
 8008f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f88:	ed2d 8b02 	vpush	{d8}
 8008f8c:	b089      	sub	sp, #36	; 0x24
 8008f8e:	ee08 0a10 	vmov	s16, r0
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	4bb4      	ldr	r3, [pc, #720]	; (8009268 <__gethex+0x2e4>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	468b      	mov	fp, r1
 8008f9e:	4690      	mov	r8, r2
 8008fa0:	f7f7 f916 	bl	80001d0 <strlen>
 8008fa4:	9b01      	ldr	r3, [sp, #4]
 8008fa6:	f8db 2000 	ldr.w	r2, [fp]
 8008faa:	4403      	add	r3, r0
 8008fac:	4682      	mov	sl, r0
 8008fae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008fb2:	9305      	str	r3, [sp, #20]
 8008fb4:	1c93      	adds	r3, r2, #2
 8008fb6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008fba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008fbe:	32fe      	adds	r2, #254	; 0xfe
 8008fc0:	18d1      	adds	r1, r2, r3
 8008fc2:	461f      	mov	r7, r3
 8008fc4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008fc8:	9100      	str	r1, [sp, #0]
 8008fca:	2830      	cmp	r0, #48	; 0x30
 8008fcc:	d0f8      	beq.n	8008fc0 <__gethex+0x3c>
 8008fce:	f7ff ffc3 	bl	8008f58 <__hexdig_fun>
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d13a      	bne.n	800904e <__gethex+0xca>
 8008fd8:	9901      	ldr	r1, [sp, #4]
 8008fda:	4652      	mov	r2, sl
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f001 fa23 	bl	800a428 <strncmp>
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d168      	bne.n	80090ba <__gethex+0x136>
 8008fe8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008fec:	eb07 060a 	add.w	r6, r7, sl
 8008ff0:	f7ff ffb2 	bl	8008f58 <__hexdig_fun>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d062      	beq.n	80090be <__gethex+0x13a>
 8008ff8:	4633      	mov	r3, r6
 8008ffa:	7818      	ldrb	r0, [r3, #0]
 8008ffc:	2830      	cmp	r0, #48	; 0x30
 8008ffe:	461f      	mov	r7, r3
 8009000:	f103 0301 	add.w	r3, r3, #1
 8009004:	d0f9      	beq.n	8008ffa <__gethex+0x76>
 8009006:	f7ff ffa7 	bl	8008f58 <__hexdig_fun>
 800900a:	2301      	movs	r3, #1
 800900c:	fab0 f480 	clz	r4, r0
 8009010:	0964      	lsrs	r4, r4, #5
 8009012:	4635      	mov	r5, r6
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	463a      	mov	r2, r7
 8009018:	4616      	mov	r6, r2
 800901a:	3201      	adds	r2, #1
 800901c:	7830      	ldrb	r0, [r6, #0]
 800901e:	f7ff ff9b 	bl	8008f58 <__hexdig_fun>
 8009022:	2800      	cmp	r0, #0
 8009024:	d1f8      	bne.n	8009018 <__gethex+0x94>
 8009026:	9901      	ldr	r1, [sp, #4]
 8009028:	4652      	mov	r2, sl
 800902a:	4630      	mov	r0, r6
 800902c:	f001 f9fc 	bl	800a428 <strncmp>
 8009030:	b980      	cbnz	r0, 8009054 <__gethex+0xd0>
 8009032:	b94d      	cbnz	r5, 8009048 <__gethex+0xc4>
 8009034:	eb06 050a 	add.w	r5, r6, sl
 8009038:	462a      	mov	r2, r5
 800903a:	4616      	mov	r6, r2
 800903c:	3201      	adds	r2, #1
 800903e:	7830      	ldrb	r0, [r6, #0]
 8009040:	f7ff ff8a 	bl	8008f58 <__hexdig_fun>
 8009044:	2800      	cmp	r0, #0
 8009046:	d1f8      	bne.n	800903a <__gethex+0xb6>
 8009048:	1bad      	subs	r5, r5, r6
 800904a:	00ad      	lsls	r5, r5, #2
 800904c:	e004      	b.n	8009058 <__gethex+0xd4>
 800904e:	2400      	movs	r4, #0
 8009050:	4625      	mov	r5, r4
 8009052:	e7e0      	b.n	8009016 <__gethex+0x92>
 8009054:	2d00      	cmp	r5, #0
 8009056:	d1f7      	bne.n	8009048 <__gethex+0xc4>
 8009058:	7833      	ldrb	r3, [r6, #0]
 800905a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800905e:	2b50      	cmp	r3, #80	; 0x50
 8009060:	d13b      	bne.n	80090da <__gethex+0x156>
 8009062:	7873      	ldrb	r3, [r6, #1]
 8009064:	2b2b      	cmp	r3, #43	; 0x2b
 8009066:	d02c      	beq.n	80090c2 <__gethex+0x13e>
 8009068:	2b2d      	cmp	r3, #45	; 0x2d
 800906a:	d02e      	beq.n	80090ca <__gethex+0x146>
 800906c:	1c71      	adds	r1, r6, #1
 800906e:	f04f 0900 	mov.w	r9, #0
 8009072:	7808      	ldrb	r0, [r1, #0]
 8009074:	f7ff ff70 	bl	8008f58 <__hexdig_fun>
 8009078:	1e43      	subs	r3, r0, #1
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b18      	cmp	r3, #24
 800907e:	d82c      	bhi.n	80090da <__gethex+0x156>
 8009080:	f1a0 0210 	sub.w	r2, r0, #16
 8009084:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009088:	f7ff ff66 	bl	8008f58 <__hexdig_fun>
 800908c:	1e43      	subs	r3, r0, #1
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b18      	cmp	r3, #24
 8009092:	d91d      	bls.n	80090d0 <__gethex+0x14c>
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	d000      	beq.n	800909c <__gethex+0x118>
 800909a:	4252      	negs	r2, r2
 800909c:	4415      	add	r5, r2
 800909e:	f8cb 1000 	str.w	r1, [fp]
 80090a2:	b1e4      	cbz	r4, 80090de <__gethex+0x15a>
 80090a4:	9b00      	ldr	r3, [sp, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	bf14      	ite	ne
 80090aa:	2700      	movne	r7, #0
 80090ac:	2706      	moveq	r7, #6
 80090ae:	4638      	mov	r0, r7
 80090b0:	b009      	add	sp, #36	; 0x24
 80090b2:	ecbd 8b02 	vpop	{d8}
 80090b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ba:	463e      	mov	r6, r7
 80090bc:	4625      	mov	r5, r4
 80090be:	2401      	movs	r4, #1
 80090c0:	e7ca      	b.n	8009058 <__gethex+0xd4>
 80090c2:	f04f 0900 	mov.w	r9, #0
 80090c6:	1cb1      	adds	r1, r6, #2
 80090c8:	e7d3      	b.n	8009072 <__gethex+0xee>
 80090ca:	f04f 0901 	mov.w	r9, #1
 80090ce:	e7fa      	b.n	80090c6 <__gethex+0x142>
 80090d0:	230a      	movs	r3, #10
 80090d2:	fb03 0202 	mla	r2, r3, r2, r0
 80090d6:	3a10      	subs	r2, #16
 80090d8:	e7d4      	b.n	8009084 <__gethex+0x100>
 80090da:	4631      	mov	r1, r6
 80090dc:	e7df      	b.n	800909e <__gethex+0x11a>
 80090de:	1bf3      	subs	r3, r6, r7
 80090e0:	3b01      	subs	r3, #1
 80090e2:	4621      	mov	r1, r4
 80090e4:	2b07      	cmp	r3, #7
 80090e6:	dc0b      	bgt.n	8009100 <__gethex+0x17c>
 80090e8:	ee18 0a10 	vmov	r0, s16
 80090ec:	f000 fa70 	bl	80095d0 <_Balloc>
 80090f0:	4604      	mov	r4, r0
 80090f2:	b940      	cbnz	r0, 8009106 <__gethex+0x182>
 80090f4:	4b5d      	ldr	r3, [pc, #372]	; (800926c <__gethex+0x2e8>)
 80090f6:	4602      	mov	r2, r0
 80090f8:	21de      	movs	r1, #222	; 0xde
 80090fa:	485d      	ldr	r0, [pc, #372]	; (8009270 <__gethex+0x2ec>)
 80090fc:	f001 f9b6 	bl	800a46c <__assert_func>
 8009100:	3101      	adds	r1, #1
 8009102:	105b      	asrs	r3, r3, #1
 8009104:	e7ee      	b.n	80090e4 <__gethex+0x160>
 8009106:	f100 0914 	add.w	r9, r0, #20
 800910a:	f04f 0b00 	mov.w	fp, #0
 800910e:	f1ca 0301 	rsb	r3, sl, #1
 8009112:	f8cd 9008 	str.w	r9, [sp, #8]
 8009116:	f8cd b000 	str.w	fp, [sp]
 800911a:	9306      	str	r3, [sp, #24]
 800911c:	42b7      	cmp	r7, r6
 800911e:	d340      	bcc.n	80091a2 <__gethex+0x21e>
 8009120:	9802      	ldr	r0, [sp, #8]
 8009122:	9b00      	ldr	r3, [sp, #0]
 8009124:	f840 3b04 	str.w	r3, [r0], #4
 8009128:	eba0 0009 	sub.w	r0, r0, r9
 800912c:	1080      	asrs	r0, r0, #2
 800912e:	0146      	lsls	r6, r0, #5
 8009130:	6120      	str	r0, [r4, #16]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fb3e 	bl	80097b4 <__hi0bits>
 8009138:	1a30      	subs	r0, r6, r0
 800913a:	f8d8 6000 	ldr.w	r6, [r8]
 800913e:	42b0      	cmp	r0, r6
 8009140:	dd63      	ble.n	800920a <__gethex+0x286>
 8009142:	1b87      	subs	r7, r0, r6
 8009144:	4639      	mov	r1, r7
 8009146:	4620      	mov	r0, r4
 8009148:	f000 fee2 	bl	8009f10 <__any_on>
 800914c:	4682      	mov	sl, r0
 800914e:	b1a8      	cbz	r0, 800917c <__gethex+0x1f8>
 8009150:	1e7b      	subs	r3, r7, #1
 8009152:	1159      	asrs	r1, r3, #5
 8009154:	f003 021f 	and.w	r2, r3, #31
 8009158:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800915c:	f04f 0a01 	mov.w	sl, #1
 8009160:	fa0a f202 	lsl.w	r2, sl, r2
 8009164:	420a      	tst	r2, r1
 8009166:	d009      	beq.n	800917c <__gethex+0x1f8>
 8009168:	4553      	cmp	r3, sl
 800916a:	dd05      	ble.n	8009178 <__gethex+0x1f4>
 800916c:	1eb9      	subs	r1, r7, #2
 800916e:	4620      	mov	r0, r4
 8009170:	f000 fece 	bl	8009f10 <__any_on>
 8009174:	2800      	cmp	r0, #0
 8009176:	d145      	bne.n	8009204 <__gethex+0x280>
 8009178:	f04f 0a02 	mov.w	sl, #2
 800917c:	4639      	mov	r1, r7
 800917e:	4620      	mov	r0, r4
 8009180:	f7ff fe98 	bl	8008eb4 <rshift>
 8009184:	443d      	add	r5, r7
 8009186:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800918a:	42ab      	cmp	r3, r5
 800918c:	da4c      	bge.n	8009228 <__gethex+0x2a4>
 800918e:	ee18 0a10 	vmov	r0, s16
 8009192:	4621      	mov	r1, r4
 8009194:	f000 fa5c 	bl	8009650 <_Bfree>
 8009198:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800919a:	2300      	movs	r3, #0
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	27a3      	movs	r7, #163	; 0xa3
 80091a0:	e785      	b.n	80090ae <__gethex+0x12a>
 80091a2:	1e73      	subs	r3, r6, #1
 80091a4:	9a05      	ldr	r2, [sp, #20]
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d019      	beq.n	80091e4 <__gethex+0x260>
 80091b0:	f1bb 0f20 	cmp.w	fp, #32
 80091b4:	d107      	bne.n	80091c6 <__gethex+0x242>
 80091b6:	9b02      	ldr	r3, [sp, #8]
 80091b8:	9a00      	ldr	r2, [sp, #0]
 80091ba:	f843 2b04 	str.w	r2, [r3], #4
 80091be:	9302      	str	r3, [sp, #8]
 80091c0:	2300      	movs	r3, #0
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	469b      	mov	fp, r3
 80091c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80091ca:	f7ff fec5 	bl	8008f58 <__hexdig_fun>
 80091ce:	9b00      	ldr	r3, [sp, #0]
 80091d0:	f000 000f 	and.w	r0, r0, #15
 80091d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80091d8:	4303      	orrs	r3, r0
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	f10b 0b04 	add.w	fp, fp, #4
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	e00d      	b.n	8009200 <__gethex+0x27c>
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	9a06      	ldr	r2, [sp, #24]
 80091e8:	4413      	add	r3, r2
 80091ea:	42bb      	cmp	r3, r7
 80091ec:	d3e0      	bcc.n	80091b0 <__gethex+0x22c>
 80091ee:	4618      	mov	r0, r3
 80091f0:	9901      	ldr	r1, [sp, #4]
 80091f2:	9307      	str	r3, [sp, #28]
 80091f4:	4652      	mov	r2, sl
 80091f6:	f001 f917 	bl	800a428 <strncmp>
 80091fa:	9b07      	ldr	r3, [sp, #28]
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d1d7      	bne.n	80091b0 <__gethex+0x22c>
 8009200:	461e      	mov	r6, r3
 8009202:	e78b      	b.n	800911c <__gethex+0x198>
 8009204:	f04f 0a03 	mov.w	sl, #3
 8009208:	e7b8      	b.n	800917c <__gethex+0x1f8>
 800920a:	da0a      	bge.n	8009222 <__gethex+0x29e>
 800920c:	1a37      	subs	r7, r6, r0
 800920e:	4621      	mov	r1, r4
 8009210:	ee18 0a10 	vmov	r0, s16
 8009214:	463a      	mov	r2, r7
 8009216:	f000 fc37 	bl	8009a88 <__lshift>
 800921a:	1bed      	subs	r5, r5, r7
 800921c:	4604      	mov	r4, r0
 800921e:	f100 0914 	add.w	r9, r0, #20
 8009222:	f04f 0a00 	mov.w	sl, #0
 8009226:	e7ae      	b.n	8009186 <__gethex+0x202>
 8009228:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800922c:	42a8      	cmp	r0, r5
 800922e:	dd72      	ble.n	8009316 <__gethex+0x392>
 8009230:	1b45      	subs	r5, r0, r5
 8009232:	42ae      	cmp	r6, r5
 8009234:	dc36      	bgt.n	80092a4 <__gethex+0x320>
 8009236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800923a:	2b02      	cmp	r3, #2
 800923c:	d02a      	beq.n	8009294 <__gethex+0x310>
 800923e:	2b03      	cmp	r3, #3
 8009240:	d02c      	beq.n	800929c <__gethex+0x318>
 8009242:	2b01      	cmp	r3, #1
 8009244:	d11c      	bne.n	8009280 <__gethex+0x2fc>
 8009246:	42ae      	cmp	r6, r5
 8009248:	d11a      	bne.n	8009280 <__gethex+0x2fc>
 800924a:	2e01      	cmp	r6, #1
 800924c:	d112      	bne.n	8009274 <__gethex+0x2f0>
 800924e:	9a04      	ldr	r2, [sp, #16]
 8009250:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	2301      	movs	r3, #1
 8009258:	6123      	str	r3, [r4, #16]
 800925a:	f8c9 3000 	str.w	r3, [r9]
 800925e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009260:	2762      	movs	r7, #98	; 0x62
 8009262:	601c      	str	r4, [r3, #0]
 8009264:	e723      	b.n	80090ae <__gethex+0x12a>
 8009266:	bf00      	nop
 8009268:	0800d920 	.word	0x0800d920
 800926c:	0800d8a8 	.word	0x0800d8a8
 8009270:	0800d8b9 	.word	0x0800d8b9
 8009274:	1e71      	subs	r1, r6, #1
 8009276:	4620      	mov	r0, r4
 8009278:	f000 fe4a 	bl	8009f10 <__any_on>
 800927c:	2800      	cmp	r0, #0
 800927e:	d1e6      	bne.n	800924e <__gethex+0x2ca>
 8009280:	ee18 0a10 	vmov	r0, s16
 8009284:	4621      	mov	r1, r4
 8009286:	f000 f9e3 	bl	8009650 <_Bfree>
 800928a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800928c:	2300      	movs	r3, #0
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	2750      	movs	r7, #80	; 0x50
 8009292:	e70c      	b.n	80090ae <__gethex+0x12a>
 8009294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1f2      	bne.n	8009280 <__gethex+0x2fc>
 800929a:	e7d8      	b.n	800924e <__gethex+0x2ca>
 800929c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1d5      	bne.n	800924e <__gethex+0x2ca>
 80092a2:	e7ed      	b.n	8009280 <__gethex+0x2fc>
 80092a4:	1e6f      	subs	r7, r5, #1
 80092a6:	f1ba 0f00 	cmp.w	sl, #0
 80092aa:	d131      	bne.n	8009310 <__gethex+0x38c>
 80092ac:	b127      	cbz	r7, 80092b8 <__gethex+0x334>
 80092ae:	4639      	mov	r1, r7
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fe2d 	bl	8009f10 <__any_on>
 80092b6:	4682      	mov	sl, r0
 80092b8:	117b      	asrs	r3, r7, #5
 80092ba:	2101      	movs	r1, #1
 80092bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80092c0:	f007 071f 	and.w	r7, r7, #31
 80092c4:	fa01 f707 	lsl.w	r7, r1, r7
 80092c8:	421f      	tst	r7, r3
 80092ca:	4629      	mov	r1, r5
 80092cc:	4620      	mov	r0, r4
 80092ce:	bf18      	it	ne
 80092d0:	f04a 0a02 	orrne.w	sl, sl, #2
 80092d4:	1b76      	subs	r6, r6, r5
 80092d6:	f7ff fded 	bl	8008eb4 <rshift>
 80092da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80092de:	2702      	movs	r7, #2
 80092e0:	f1ba 0f00 	cmp.w	sl, #0
 80092e4:	d048      	beq.n	8009378 <__gethex+0x3f4>
 80092e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d015      	beq.n	800931a <__gethex+0x396>
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d017      	beq.n	8009322 <__gethex+0x39e>
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d109      	bne.n	800930a <__gethex+0x386>
 80092f6:	f01a 0f02 	tst.w	sl, #2
 80092fa:	d006      	beq.n	800930a <__gethex+0x386>
 80092fc:	f8d9 0000 	ldr.w	r0, [r9]
 8009300:	ea4a 0a00 	orr.w	sl, sl, r0
 8009304:	f01a 0f01 	tst.w	sl, #1
 8009308:	d10e      	bne.n	8009328 <__gethex+0x3a4>
 800930a:	f047 0710 	orr.w	r7, r7, #16
 800930e:	e033      	b.n	8009378 <__gethex+0x3f4>
 8009310:	f04f 0a01 	mov.w	sl, #1
 8009314:	e7d0      	b.n	80092b8 <__gethex+0x334>
 8009316:	2701      	movs	r7, #1
 8009318:	e7e2      	b.n	80092e0 <__gethex+0x35c>
 800931a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800931c:	f1c3 0301 	rsb	r3, r3, #1
 8009320:	9315      	str	r3, [sp, #84]	; 0x54
 8009322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0f0      	beq.n	800930a <__gethex+0x386>
 8009328:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800932c:	f104 0314 	add.w	r3, r4, #20
 8009330:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009334:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009338:	f04f 0c00 	mov.w	ip, #0
 800933c:	4618      	mov	r0, r3
 800933e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009342:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009346:	d01c      	beq.n	8009382 <__gethex+0x3fe>
 8009348:	3201      	adds	r2, #1
 800934a:	6002      	str	r2, [r0, #0]
 800934c:	2f02      	cmp	r7, #2
 800934e:	f104 0314 	add.w	r3, r4, #20
 8009352:	d13f      	bne.n	80093d4 <__gethex+0x450>
 8009354:	f8d8 2000 	ldr.w	r2, [r8]
 8009358:	3a01      	subs	r2, #1
 800935a:	42b2      	cmp	r2, r6
 800935c:	d10a      	bne.n	8009374 <__gethex+0x3f0>
 800935e:	1171      	asrs	r1, r6, #5
 8009360:	2201      	movs	r2, #1
 8009362:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009366:	f006 061f 	and.w	r6, r6, #31
 800936a:	fa02 f606 	lsl.w	r6, r2, r6
 800936e:	421e      	tst	r6, r3
 8009370:	bf18      	it	ne
 8009372:	4617      	movne	r7, r2
 8009374:	f047 0720 	orr.w	r7, r7, #32
 8009378:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800937a:	601c      	str	r4, [r3, #0]
 800937c:	9b04      	ldr	r3, [sp, #16]
 800937e:	601d      	str	r5, [r3, #0]
 8009380:	e695      	b.n	80090ae <__gethex+0x12a>
 8009382:	4299      	cmp	r1, r3
 8009384:	f843 cc04 	str.w	ip, [r3, #-4]
 8009388:	d8d8      	bhi.n	800933c <__gethex+0x3b8>
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	459b      	cmp	fp, r3
 800938e:	db19      	blt.n	80093c4 <__gethex+0x440>
 8009390:	6861      	ldr	r1, [r4, #4]
 8009392:	ee18 0a10 	vmov	r0, s16
 8009396:	3101      	adds	r1, #1
 8009398:	f000 f91a 	bl	80095d0 <_Balloc>
 800939c:	4681      	mov	r9, r0
 800939e:	b918      	cbnz	r0, 80093a8 <__gethex+0x424>
 80093a0:	4b1a      	ldr	r3, [pc, #104]	; (800940c <__gethex+0x488>)
 80093a2:	4602      	mov	r2, r0
 80093a4:	2184      	movs	r1, #132	; 0x84
 80093a6:	e6a8      	b.n	80090fa <__gethex+0x176>
 80093a8:	6922      	ldr	r2, [r4, #16]
 80093aa:	3202      	adds	r2, #2
 80093ac:	f104 010c 	add.w	r1, r4, #12
 80093b0:	0092      	lsls	r2, r2, #2
 80093b2:	300c      	adds	r0, #12
 80093b4:	f7fd f986 	bl	80066c4 <memcpy>
 80093b8:	4621      	mov	r1, r4
 80093ba:	ee18 0a10 	vmov	r0, s16
 80093be:	f000 f947 	bl	8009650 <_Bfree>
 80093c2:	464c      	mov	r4, r9
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093cc:	6122      	str	r2, [r4, #16]
 80093ce:	2201      	movs	r2, #1
 80093d0:	615a      	str	r2, [r3, #20]
 80093d2:	e7bb      	b.n	800934c <__gethex+0x3c8>
 80093d4:	6922      	ldr	r2, [r4, #16]
 80093d6:	455a      	cmp	r2, fp
 80093d8:	dd0b      	ble.n	80093f2 <__gethex+0x46e>
 80093da:	2101      	movs	r1, #1
 80093dc:	4620      	mov	r0, r4
 80093de:	f7ff fd69 	bl	8008eb4 <rshift>
 80093e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093e6:	3501      	adds	r5, #1
 80093e8:	42ab      	cmp	r3, r5
 80093ea:	f6ff aed0 	blt.w	800918e <__gethex+0x20a>
 80093ee:	2701      	movs	r7, #1
 80093f0:	e7c0      	b.n	8009374 <__gethex+0x3f0>
 80093f2:	f016 061f 	ands.w	r6, r6, #31
 80093f6:	d0fa      	beq.n	80093ee <__gethex+0x46a>
 80093f8:	4453      	add	r3, sl
 80093fa:	f1c6 0620 	rsb	r6, r6, #32
 80093fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009402:	f000 f9d7 	bl	80097b4 <__hi0bits>
 8009406:	42b0      	cmp	r0, r6
 8009408:	dbe7      	blt.n	80093da <__gethex+0x456>
 800940a:	e7f0      	b.n	80093ee <__gethex+0x46a>
 800940c:	0800d8a8 	.word	0x0800d8a8

08009410 <L_shift>:
 8009410:	f1c2 0208 	rsb	r2, r2, #8
 8009414:	0092      	lsls	r2, r2, #2
 8009416:	b570      	push	{r4, r5, r6, lr}
 8009418:	f1c2 0620 	rsb	r6, r2, #32
 800941c:	6843      	ldr	r3, [r0, #4]
 800941e:	6804      	ldr	r4, [r0, #0]
 8009420:	fa03 f506 	lsl.w	r5, r3, r6
 8009424:	432c      	orrs	r4, r5
 8009426:	40d3      	lsrs	r3, r2
 8009428:	6004      	str	r4, [r0, #0]
 800942a:	f840 3f04 	str.w	r3, [r0, #4]!
 800942e:	4288      	cmp	r0, r1
 8009430:	d3f4      	bcc.n	800941c <L_shift+0xc>
 8009432:	bd70      	pop	{r4, r5, r6, pc}

08009434 <__match>:
 8009434:	b530      	push	{r4, r5, lr}
 8009436:	6803      	ldr	r3, [r0, #0]
 8009438:	3301      	adds	r3, #1
 800943a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800943e:	b914      	cbnz	r4, 8009446 <__match+0x12>
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	2001      	movs	r0, #1
 8009444:	bd30      	pop	{r4, r5, pc}
 8009446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800944a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800944e:	2d19      	cmp	r5, #25
 8009450:	bf98      	it	ls
 8009452:	3220      	addls	r2, #32
 8009454:	42a2      	cmp	r2, r4
 8009456:	d0f0      	beq.n	800943a <__match+0x6>
 8009458:	2000      	movs	r0, #0
 800945a:	e7f3      	b.n	8009444 <__match+0x10>

0800945c <__hexnan>:
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	680b      	ldr	r3, [r1, #0]
 8009462:	115e      	asrs	r6, r3, #5
 8009464:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009468:	f013 031f 	ands.w	r3, r3, #31
 800946c:	b087      	sub	sp, #28
 800946e:	bf18      	it	ne
 8009470:	3604      	addne	r6, #4
 8009472:	2500      	movs	r5, #0
 8009474:	1f37      	subs	r7, r6, #4
 8009476:	4690      	mov	r8, r2
 8009478:	6802      	ldr	r2, [r0, #0]
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	4682      	mov	sl, r0
 800947e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009482:	46b9      	mov	r9, r7
 8009484:	463c      	mov	r4, r7
 8009486:	9502      	str	r5, [sp, #8]
 8009488:	46ab      	mov	fp, r5
 800948a:	7851      	ldrb	r1, [r2, #1]
 800948c:	1c53      	adds	r3, r2, #1
 800948e:	9303      	str	r3, [sp, #12]
 8009490:	b341      	cbz	r1, 80094e4 <__hexnan+0x88>
 8009492:	4608      	mov	r0, r1
 8009494:	9205      	str	r2, [sp, #20]
 8009496:	9104      	str	r1, [sp, #16]
 8009498:	f7ff fd5e 	bl	8008f58 <__hexdig_fun>
 800949c:	2800      	cmp	r0, #0
 800949e:	d14f      	bne.n	8009540 <__hexnan+0xe4>
 80094a0:	9904      	ldr	r1, [sp, #16]
 80094a2:	9a05      	ldr	r2, [sp, #20]
 80094a4:	2920      	cmp	r1, #32
 80094a6:	d818      	bhi.n	80094da <__hexnan+0x7e>
 80094a8:	9b02      	ldr	r3, [sp, #8]
 80094aa:	459b      	cmp	fp, r3
 80094ac:	dd13      	ble.n	80094d6 <__hexnan+0x7a>
 80094ae:	454c      	cmp	r4, r9
 80094b0:	d206      	bcs.n	80094c0 <__hexnan+0x64>
 80094b2:	2d07      	cmp	r5, #7
 80094b4:	dc04      	bgt.n	80094c0 <__hexnan+0x64>
 80094b6:	462a      	mov	r2, r5
 80094b8:	4649      	mov	r1, r9
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff ffa8 	bl	8009410 <L_shift>
 80094c0:	4544      	cmp	r4, r8
 80094c2:	d950      	bls.n	8009566 <__hexnan+0x10a>
 80094c4:	2300      	movs	r3, #0
 80094c6:	f1a4 0904 	sub.w	r9, r4, #4
 80094ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80094ce:	f8cd b008 	str.w	fp, [sp, #8]
 80094d2:	464c      	mov	r4, r9
 80094d4:	461d      	mov	r5, r3
 80094d6:	9a03      	ldr	r2, [sp, #12]
 80094d8:	e7d7      	b.n	800948a <__hexnan+0x2e>
 80094da:	2929      	cmp	r1, #41	; 0x29
 80094dc:	d156      	bne.n	800958c <__hexnan+0x130>
 80094de:	3202      	adds	r2, #2
 80094e0:	f8ca 2000 	str.w	r2, [sl]
 80094e4:	f1bb 0f00 	cmp.w	fp, #0
 80094e8:	d050      	beq.n	800958c <__hexnan+0x130>
 80094ea:	454c      	cmp	r4, r9
 80094ec:	d206      	bcs.n	80094fc <__hexnan+0xa0>
 80094ee:	2d07      	cmp	r5, #7
 80094f0:	dc04      	bgt.n	80094fc <__hexnan+0xa0>
 80094f2:	462a      	mov	r2, r5
 80094f4:	4649      	mov	r1, r9
 80094f6:	4620      	mov	r0, r4
 80094f8:	f7ff ff8a 	bl	8009410 <L_shift>
 80094fc:	4544      	cmp	r4, r8
 80094fe:	d934      	bls.n	800956a <__hexnan+0x10e>
 8009500:	f1a8 0204 	sub.w	r2, r8, #4
 8009504:	4623      	mov	r3, r4
 8009506:	f853 1b04 	ldr.w	r1, [r3], #4
 800950a:	f842 1f04 	str.w	r1, [r2, #4]!
 800950e:	429f      	cmp	r7, r3
 8009510:	d2f9      	bcs.n	8009506 <__hexnan+0xaa>
 8009512:	1b3b      	subs	r3, r7, r4
 8009514:	f023 0303 	bic.w	r3, r3, #3
 8009518:	3304      	adds	r3, #4
 800951a:	3401      	adds	r4, #1
 800951c:	3e03      	subs	r6, #3
 800951e:	42b4      	cmp	r4, r6
 8009520:	bf88      	it	hi
 8009522:	2304      	movhi	r3, #4
 8009524:	4443      	add	r3, r8
 8009526:	2200      	movs	r2, #0
 8009528:	f843 2b04 	str.w	r2, [r3], #4
 800952c:	429f      	cmp	r7, r3
 800952e:	d2fb      	bcs.n	8009528 <__hexnan+0xcc>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	b91b      	cbnz	r3, 800953c <__hexnan+0xe0>
 8009534:	4547      	cmp	r7, r8
 8009536:	d127      	bne.n	8009588 <__hexnan+0x12c>
 8009538:	2301      	movs	r3, #1
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	2005      	movs	r0, #5
 800953e:	e026      	b.n	800958e <__hexnan+0x132>
 8009540:	3501      	adds	r5, #1
 8009542:	2d08      	cmp	r5, #8
 8009544:	f10b 0b01 	add.w	fp, fp, #1
 8009548:	dd06      	ble.n	8009558 <__hexnan+0xfc>
 800954a:	4544      	cmp	r4, r8
 800954c:	d9c3      	bls.n	80094d6 <__hexnan+0x7a>
 800954e:	2300      	movs	r3, #0
 8009550:	f844 3c04 	str.w	r3, [r4, #-4]
 8009554:	2501      	movs	r5, #1
 8009556:	3c04      	subs	r4, #4
 8009558:	6822      	ldr	r2, [r4, #0]
 800955a:	f000 000f 	and.w	r0, r0, #15
 800955e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009562:	6022      	str	r2, [r4, #0]
 8009564:	e7b7      	b.n	80094d6 <__hexnan+0x7a>
 8009566:	2508      	movs	r5, #8
 8009568:	e7b5      	b.n	80094d6 <__hexnan+0x7a>
 800956a:	9b01      	ldr	r3, [sp, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0df      	beq.n	8009530 <__hexnan+0xd4>
 8009570:	f04f 32ff 	mov.w	r2, #4294967295
 8009574:	f1c3 0320 	rsb	r3, r3, #32
 8009578:	fa22 f303 	lsr.w	r3, r2, r3
 800957c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009580:	401a      	ands	r2, r3
 8009582:	f846 2c04 	str.w	r2, [r6, #-4]
 8009586:	e7d3      	b.n	8009530 <__hexnan+0xd4>
 8009588:	3f04      	subs	r7, #4
 800958a:	e7d1      	b.n	8009530 <__hexnan+0xd4>
 800958c:	2004      	movs	r0, #4
 800958e:	b007      	add	sp, #28
 8009590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009594 <_localeconv_r>:
 8009594:	4800      	ldr	r0, [pc, #0]	; (8009598 <_localeconv_r+0x4>)
 8009596:	4770      	bx	lr
 8009598:	200001a4 	.word	0x200001a4

0800959c <malloc>:
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <malloc+0xc>)
 800959e:	4601      	mov	r1, r0
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	f000 bd59 	b.w	800a058 <_malloc_r>
 80095a6:	bf00      	nop
 80095a8:	2000004c 	.word	0x2000004c

080095ac <__ascii_mbtowc>:
 80095ac:	b082      	sub	sp, #8
 80095ae:	b901      	cbnz	r1, 80095b2 <__ascii_mbtowc+0x6>
 80095b0:	a901      	add	r1, sp, #4
 80095b2:	b142      	cbz	r2, 80095c6 <__ascii_mbtowc+0x1a>
 80095b4:	b14b      	cbz	r3, 80095ca <__ascii_mbtowc+0x1e>
 80095b6:	7813      	ldrb	r3, [r2, #0]
 80095b8:	600b      	str	r3, [r1, #0]
 80095ba:	7812      	ldrb	r2, [r2, #0]
 80095bc:	1e10      	subs	r0, r2, #0
 80095be:	bf18      	it	ne
 80095c0:	2001      	movne	r0, #1
 80095c2:	b002      	add	sp, #8
 80095c4:	4770      	bx	lr
 80095c6:	4610      	mov	r0, r2
 80095c8:	e7fb      	b.n	80095c2 <__ascii_mbtowc+0x16>
 80095ca:	f06f 0001 	mvn.w	r0, #1
 80095ce:	e7f8      	b.n	80095c2 <__ascii_mbtowc+0x16>

080095d0 <_Balloc>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095d4:	4604      	mov	r4, r0
 80095d6:	460d      	mov	r5, r1
 80095d8:	b976      	cbnz	r6, 80095f8 <_Balloc+0x28>
 80095da:	2010      	movs	r0, #16
 80095dc:	f7ff ffde 	bl	800959c <malloc>
 80095e0:	4602      	mov	r2, r0
 80095e2:	6260      	str	r0, [r4, #36]	; 0x24
 80095e4:	b920      	cbnz	r0, 80095f0 <_Balloc+0x20>
 80095e6:	4b18      	ldr	r3, [pc, #96]	; (8009648 <_Balloc+0x78>)
 80095e8:	4818      	ldr	r0, [pc, #96]	; (800964c <_Balloc+0x7c>)
 80095ea:	2166      	movs	r1, #102	; 0x66
 80095ec:	f000 ff3e 	bl	800a46c <__assert_func>
 80095f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095f4:	6006      	str	r6, [r0, #0]
 80095f6:	60c6      	str	r6, [r0, #12]
 80095f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095fa:	68f3      	ldr	r3, [r6, #12]
 80095fc:	b183      	cbz	r3, 8009620 <_Balloc+0x50>
 80095fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009606:	b9b8      	cbnz	r0, 8009638 <_Balloc+0x68>
 8009608:	2101      	movs	r1, #1
 800960a:	fa01 f605 	lsl.w	r6, r1, r5
 800960e:	1d72      	adds	r2, r6, #5
 8009610:	0092      	lsls	r2, r2, #2
 8009612:	4620      	mov	r0, r4
 8009614:	f000 fc9d 	bl	8009f52 <_calloc_r>
 8009618:	b160      	cbz	r0, 8009634 <_Balloc+0x64>
 800961a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800961e:	e00e      	b.n	800963e <_Balloc+0x6e>
 8009620:	2221      	movs	r2, #33	; 0x21
 8009622:	2104      	movs	r1, #4
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fc94 	bl	8009f52 <_calloc_r>
 800962a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800962c:	60f0      	str	r0, [r6, #12]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e4      	bne.n	80095fe <_Balloc+0x2e>
 8009634:	2000      	movs	r0, #0
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	6802      	ldr	r2, [r0, #0]
 800963a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800963e:	2300      	movs	r3, #0
 8009640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009644:	e7f7      	b.n	8009636 <_Balloc+0x66>
 8009646:	bf00      	nop
 8009648:	0800d836 	.word	0x0800d836
 800964c:	0800d934 	.word	0x0800d934

08009650 <_Bfree>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009654:	4605      	mov	r5, r0
 8009656:	460c      	mov	r4, r1
 8009658:	b976      	cbnz	r6, 8009678 <_Bfree+0x28>
 800965a:	2010      	movs	r0, #16
 800965c:	f7ff ff9e 	bl	800959c <malloc>
 8009660:	4602      	mov	r2, r0
 8009662:	6268      	str	r0, [r5, #36]	; 0x24
 8009664:	b920      	cbnz	r0, 8009670 <_Bfree+0x20>
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <_Bfree+0x3c>)
 8009668:	4809      	ldr	r0, [pc, #36]	; (8009690 <_Bfree+0x40>)
 800966a:	218a      	movs	r1, #138	; 0x8a
 800966c:	f000 fefe 	bl	800a46c <__assert_func>
 8009670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009674:	6006      	str	r6, [r0, #0]
 8009676:	60c6      	str	r6, [r0, #12]
 8009678:	b13c      	cbz	r4, 800968a <_Bfree+0x3a>
 800967a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800967c:	6862      	ldr	r2, [r4, #4]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009684:	6021      	str	r1, [r4, #0]
 8009686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800968a:	bd70      	pop	{r4, r5, r6, pc}
 800968c:	0800d836 	.word	0x0800d836
 8009690:	0800d934 	.word	0x0800d934

08009694 <__multadd>:
 8009694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009698:	690d      	ldr	r5, [r1, #16]
 800969a:	4607      	mov	r7, r0
 800969c:	460c      	mov	r4, r1
 800969e:	461e      	mov	r6, r3
 80096a0:	f101 0c14 	add.w	ip, r1, #20
 80096a4:	2000      	movs	r0, #0
 80096a6:	f8dc 3000 	ldr.w	r3, [ip]
 80096aa:	b299      	uxth	r1, r3
 80096ac:	fb02 6101 	mla	r1, r2, r1, r6
 80096b0:	0c1e      	lsrs	r6, r3, #16
 80096b2:	0c0b      	lsrs	r3, r1, #16
 80096b4:	fb02 3306 	mla	r3, r2, r6, r3
 80096b8:	b289      	uxth	r1, r1
 80096ba:	3001      	adds	r0, #1
 80096bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096c0:	4285      	cmp	r5, r0
 80096c2:	f84c 1b04 	str.w	r1, [ip], #4
 80096c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096ca:	dcec      	bgt.n	80096a6 <__multadd+0x12>
 80096cc:	b30e      	cbz	r6, 8009712 <__multadd+0x7e>
 80096ce:	68a3      	ldr	r3, [r4, #8]
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	dc19      	bgt.n	8009708 <__multadd+0x74>
 80096d4:	6861      	ldr	r1, [r4, #4]
 80096d6:	4638      	mov	r0, r7
 80096d8:	3101      	adds	r1, #1
 80096da:	f7ff ff79 	bl	80095d0 <_Balloc>
 80096de:	4680      	mov	r8, r0
 80096e0:	b928      	cbnz	r0, 80096ee <__multadd+0x5a>
 80096e2:	4602      	mov	r2, r0
 80096e4:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <__multadd+0x84>)
 80096e6:	480d      	ldr	r0, [pc, #52]	; (800971c <__multadd+0x88>)
 80096e8:	21b5      	movs	r1, #181	; 0xb5
 80096ea:	f000 febf 	bl	800a46c <__assert_func>
 80096ee:	6922      	ldr	r2, [r4, #16]
 80096f0:	3202      	adds	r2, #2
 80096f2:	f104 010c 	add.w	r1, r4, #12
 80096f6:	0092      	lsls	r2, r2, #2
 80096f8:	300c      	adds	r0, #12
 80096fa:	f7fc ffe3 	bl	80066c4 <memcpy>
 80096fe:	4621      	mov	r1, r4
 8009700:	4638      	mov	r0, r7
 8009702:	f7ff ffa5 	bl	8009650 <_Bfree>
 8009706:	4644      	mov	r4, r8
 8009708:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800970c:	3501      	adds	r5, #1
 800970e:	615e      	str	r6, [r3, #20]
 8009710:	6125      	str	r5, [r4, #16]
 8009712:	4620      	mov	r0, r4
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009718:	0800d8a8 	.word	0x0800d8a8
 800971c:	0800d934 	.word	0x0800d934

08009720 <__s2b>:
 8009720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009724:	460c      	mov	r4, r1
 8009726:	4615      	mov	r5, r2
 8009728:	461f      	mov	r7, r3
 800972a:	2209      	movs	r2, #9
 800972c:	3308      	adds	r3, #8
 800972e:	4606      	mov	r6, r0
 8009730:	fb93 f3f2 	sdiv	r3, r3, r2
 8009734:	2100      	movs	r1, #0
 8009736:	2201      	movs	r2, #1
 8009738:	429a      	cmp	r2, r3
 800973a:	db09      	blt.n	8009750 <__s2b+0x30>
 800973c:	4630      	mov	r0, r6
 800973e:	f7ff ff47 	bl	80095d0 <_Balloc>
 8009742:	b940      	cbnz	r0, 8009756 <__s2b+0x36>
 8009744:	4602      	mov	r2, r0
 8009746:	4b19      	ldr	r3, [pc, #100]	; (80097ac <__s2b+0x8c>)
 8009748:	4819      	ldr	r0, [pc, #100]	; (80097b0 <__s2b+0x90>)
 800974a:	21ce      	movs	r1, #206	; 0xce
 800974c:	f000 fe8e 	bl	800a46c <__assert_func>
 8009750:	0052      	lsls	r2, r2, #1
 8009752:	3101      	adds	r1, #1
 8009754:	e7f0      	b.n	8009738 <__s2b+0x18>
 8009756:	9b08      	ldr	r3, [sp, #32]
 8009758:	6143      	str	r3, [r0, #20]
 800975a:	2d09      	cmp	r5, #9
 800975c:	f04f 0301 	mov.w	r3, #1
 8009760:	6103      	str	r3, [r0, #16]
 8009762:	dd16      	ble.n	8009792 <__s2b+0x72>
 8009764:	f104 0909 	add.w	r9, r4, #9
 8009768:	46c8      	mov	r8, r9
 800976a:	442c      	add	r4, r5
 800976c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009770:	4601      	mov	r1, r0
 8009772:	3b30      	subs	r3, #48	; 0x30
 8009774:	220a      	movs	r2, #10
 8009776:	4630      	mov	r0, r6
 8009778:	f7ff ff8c 	bl	8009694 <__multadd>
 800977c:	45a0      	cmp	r8, r4
 800977e:	d1f5      	bne.n	800976c <__s2b+0x4c>
 8009780:	f1a5 0408 	sub.w	r4, r5, #8
 8009784:	444c      	add	r4, r9
 8009786:	1b2d      	subs	r5, r5, r4
 8009788:	1963      	adds	r3, r4, r5
 800978a:	42bb      	cmp	r3, r7
 800978c:	db04      	blt.n	8009798 <__s2b+0x78>
 800978e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009792:	340a      	adds	r4, #10
 8009794:	2509      	movs	r5, #9
 8009796:	e7f6      	b.n	8009786 <__s2b+0x66>
 8009798:	f814 3b01 	ldrb.w	r3, [r4], #1
 800979c:	4601      	mov	r1, r0
 800979e:	3b30      	subs	r3, #48	; 0x30
 80097a0:	220a      	movs	r2, #10
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ff76 	bl	8009694 <__multadd>
 80097a8:	e7ee      	b.n	8009788 <__s2b+0x68>
 80097aa:	bf00      	nop
 80097ac:	0800d8a8 	.word	0x0800d8a8
 80097b0:	0800d934 	.word	0x0800d934

080097b4 <__hi0bits>:
 80097b4:	0c03      	lsrs	r3, r0, #16
 80097b6:	041b      	lsls	r3, r3, #16
 80097b8:	b9d3      	cbnz	r3, 80097f0 <__hi0bits+0x3c>
 80097ba:	0400      	lsls	r0, r0, #16
 80097bc:	2310      	movs	r3, #16
 80097be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097c2:	bf04      	itt	eq
 80097c4:	0200      	lsleq	r0, r0, #8
 80097c6:	3308      	addeq	r3, #8
 80097c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097cc:	bf04      	itt	eq
 80097ce:	0100      	lsleq	r0, r0, #4
 80097d0:	3304      	addeq	r3, #4
 80097d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097d6:	bf04      	itt	eq
 80097d8:	0080      	lsleq	r0, r0, #2
 80097da:	3302      	addeq	r3, #2
 80097dc:	2800      	cmp	r0, #0
 80097de:	db05      	blt.n	80097ec <__hi0bits+0x38>
 80097e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097e4:	f103 0301 	add.w	r3, r3, #1
 80097e8:	bf08      	it	eq
 80097ea:	2320      	moveq	r3, #32
 80097ec:	4618      	mov	r0, r3
 80097ee:	4770      	bx	lr
 80097f0:	2300      	movs	r3, #0
 80097f2:	e7e4      	b.n	80097be <__hi0bits+0xa>

080097f4 <__lo0bits>:
 80097f4:	6803      	ldr	r3, [r0, #0]
 80097f6:	f013 0207 	ands.w	r2, r3, #7
 80097fa:	4601      	mov	r1, r0
 80097fc:	d00b      	beq.n	8009816 <__lo0bits+0x22>
 80097fe:	07da      	lsls	r2, r3, #31
 8009800:	d423      	bmi.n	800984a <__lo0bits+0x56>
 8009802:	0798      	lsls	r0, r3, #30
 8009804:	bf49      	itett	mi
 8009806:	085b      	lsrmi	r3, r3, #1
 8009808:	089b      	lsrpl	r3, r3, #2
 800980a:	2001      	movmi	r0, #1
 800980c:	600b      	strmi	r3, [r1, #0]
 800980e:	bf5c      	itt	pl
 8009810:	600b      	strpl	r3, [r1, #0]
 8009812:	2002      	movpl	r0, #2
 8009814:	4770      	bx	lr
 8009816:	b298      	uxth	r0, r3
 8009818:	b9a8      	cbnz	r0, 8009846 <__lo0bits+0x52>
 800981a:	0c1b      	lsrs	r3, r3, #16
 800981c:	2010      	movs	r0, #16
 800981e:	b2da      	uxtb	r2, r3
 8009820:	b90a      	cbnz	r2, 8009826 <__lo0bits+0x32>
 8009822:	3008      	adds	r0, #8
 8009824:	0a1b      	lsrs	r3, r3, #8
 8009826:	071a      	lsls	r2, r3, #28
 8009828:	bf04      	itt	eq
 800982a:	091b      	lsreq	r3, r3, #4
 800982c:	3004      	addeq	r0, #4
 800982e:	079a      	lsls	r2, r3, #30
 8009830:	bf04      	itt	eq
 8009832:	089b      	lsreq	r3, r3, #2
 8009834:	3002      	addeq	r0, #2
 8009836:	07da      	lsls	r2, r3, #31
 8009838:	d403      	bmi.n	8009842 <__lo0bits+0x4e>
 800983a:	085b      	lsrs	r3, r3, #1
 800983c:	f100 0001 	add.w	r0, r0, #1
 8009840:	d005      	beq.n	800984e <__lo0bits+0x5a>
 8009842:	600b      	str	r3, [r1, #0]
 8009844:	4770      	bx	lr
 8009846:	4610      	mov	r0, r2
 8009848:	e7e9      	b.n	800981e <__lo0bits+0x2a>
 800984a:	2000      	movs	r0, #0
 800984c:	4770      	bx	lr
 800984e:	2020      	movs	r0, #32
 8009850:	4770      	bx	lr
	...

08009854 <__i2b>:
 8009854:	b510      	push	{r4, lr}
 8009856:	460c      	mov	r4, r1
 8009858:	2101      	movs	r1, #1
 800985a:	f7ff feb9 	bl	80095d0 <_Balloc>
 800985e:	4602      	mov	r2, r0
 8009860:	b928      	cbnz	r0, 800986e <__i2b+0x1a>
 8009862:	4b05      	ldr	r3, [pc, #20]	; (8009878 <__i2b+0x24>)
 8009864:	4805      	ldr	r0, [pc, #20]	; (800987c <__i2b+0x28>)
 8009866:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800986a:	f000 fdff 	bl	800a46c <__assert_func>
 800986e:	2301      	movs	r3, #1
 8009870:	6144      	str	r4, [r0, #20]
 8009872:	6103      	str	r3, [r0, #16]
 8009874:	bd10      	pop	{r4, pc}
 8009876:	bf00      	nop
 8009878:	0800d8a8 	.word	0x0800d8a8
 800987c:	0800d934 	.word	0x0800d934

08009880 <__multiply>:
 8009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	4691      	mov	r9, r2
 8009886:	690a      	ldr	r2, [r1, #16]
 8009888:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800988c:	429a      	cmp	r2, r3
 800988e:	bfb8      	it	lt
 8009890:	460b      	movlt	r3, r1
 8009892:	460c      	mov	r4, r1
 8009894:	bfbc      	itt	lt
 8009896:	464c      	movlt	r4, r9
 8009898:	4699      	movlt	r9, r3
 800989a:	6927      	ldr	r7, [r4, #16]
 800989c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098a0:	68a3      	ldr	r3, [r4, #8]
 80098a2:	6861      	ldr	r1, [r4, #4]
 80098a4:	eb07 060a 	add.w	r6, r7, sl
 80098a8:	42b3      	cmp	r3, r6
 80098aa:	b085      	sub	sp, #20
 80098ac:	bfb8      	it	lt
 80098ae:	3101      	addlt	r1, #1
 80098b0:	f7ff fe8e 	bl	80095d0 <_Balloc>
 80098b4:	b930      	cbnz	r0, 80098c4 <__multiply+0x44>
 80098b6:	4602      	mov	r2, r0
 80098b8:	4b44      	ldr	r3, [pc, #272]	; (80099cc <__multiply+0x14c>)
 80098ba:	4845      	ldr	r0, [pc, #276]	; (80099d0 <__multiply+0x150>)
 80098bc:	f240 115d 	movw	r1, #349	; 0x15d
 80098c0:	f000 fdd4 	bl	800a46c <__assert_func>
 80098c4:	f100 0514 	add.w	r5, r0, #20
 80098c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098cc:	462b      	mov	r3, r5
 80098ce:	2200      	movs	r2, #0
 80098d0:	4543      	cmp	r3, r8
 80098d2:	d321      	bcc.n	8009918 <__multiply+0x98>
 80098d4:	f104 0314 	add.w	r3, r4, #20
 80098d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098dc:	f109 0314 	add.w	r3, r9, #20
 80098e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098e4:	9202      	str	r2, [sp, #8]
 80098e6:	1b3a      	subs	r2, r7, r4
 80098e8:	3a15      	subs	r2, #21
 80098ea:	f022 0203 	bic.w	r2, r2, #3
 80098ee:	3204      	adds	r2, #4
 80098f0:	f104 0115 	add.w	r1, r4, #21
 80098f4:	428f      	cmp	r7, r1
 80098f6:	bf38      	it	cc
 80098f8:	2204      	movcc	r2, #4
 80098fa:	9201      	str	r2, [sp, #4]
 80098fc:	9a02      	ldr	r2, [sp, #8]
 80098fe:	9303      	str	r3, [sp, #12]
 8009900:	429a      	cmp	r2, r3
 8009902:	d80c      	bhi.n	800991e <__multiply+0x9e>
 8009904:	2e00      	cmp	r6, #0
 8009906:	dd03      	ble.n	8009910 <__multiply+0x90>
 8009908:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800990c:	2b00      	cmp	r3, #0
 800990e:	d05a      	beq.n	80099c6 <__multiply+0x146>
 8009910:	6106      	str	r6, [r0, #16]
 8009912:	b005      	add	sp, #20
 8009914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009918:	f843 2b04 	str.w	r2, [r3], #4
 800991c:	e7d8      	b.n	80098d0 <__multiply+0x50>
 800991e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009922:	f1ba 0f00 	cmp.w	sl, #0
 8009926:	d024      	beq.n	8009972 <__multiply+0xf2>
 8009928:	f104 0e14 	add.w	lr, r4, #20
 800992c:	46a9      	mov	r9, r5
 800992e:	f04f 0c00 	mov.w	ip, #0
 8009932:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009936:	f8d9 1000 	ldr.w	r1, [r9]
 800993a:	fa1f fb82 	uxth.w	fp, r2
 800993e:	b289      	uxth	r1, r1
 8009940:	fb0a 110b 	mla	r1, sl, fp, r1
 8009944:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009948:	f8d9 2000 	ldr.w	r2, [r9]
 800994c:	4461      	add	r1, ip
 800994e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009952:	fb0a c20b 	mla	r2, sl, fp, ip
 8009956:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800995a:	b289      	uxth	r1, r1
 800995c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009960:	4577      	cmp	r7, lr
 8009962:	f849 1b04 	str.w	r1, [r9], #4
 8009966:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800996a:	d8e2      	bhi.n	8009932 <__multiply+0xb2>
 800996c:	9a01      	ldr	r2, [sp, #4]
 800996e:	f845 c002 	str.w	ip, [r5, r2]
 8009972:	9a03      	ldr	r2, [sp, #12]
 8009974:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009978:	3304      	adds	r3, #4
 800997a:	f1b9 0f00 	cmp.w	r9, #0
 800997e:	d020      	beq.n	80099c2 <__multiply+0x142>
 8009980:	6829      	ldr	r1, [r5, #0]
 8009982:	f104 0c14 	add.w	ip, r4, #20
 8009986:	46ae      	mov	lr, r5
 8009988:	f04f 0a00 	mov.w	sl, #0
 800998c:	f8bc b000 	ldrh.w	fp, [ip]
 8009990:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009994:	fb09 220b 	mla	r2, r9, fp, r2
 8009998:	4492      	add	sl, r2
 800999a:	b289      	uxth	r1, r1
 800999c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80099a0:	f84e 1b04 	str.w	r1, [lr], #4
 80099a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099a8:	f8be 1000 	ldrh.w	r1, [lr]
 80099ac:	0c12      	lsrs	r2, r2, #16
 80099ae:	fb09 1102 	mla	r1, r9, r2, r1
 80099b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80099b6:	4567      	cmp	r7, ip
 80099b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099bc:	d8e6      	bhi.n	800998c <__multiply+0x10c>
 80099be:	9a01      	ldr	r2, [sp, #4]
 80099c0:	50a9      	str	r1, [r5, r2]
 80099c2:	3504      	adds	r5, #4
 80099c4:	e79a      	b.n	80098fc <__multiply+0x7c>
 80099c6:	3e01      	subs	r6, #1
 80099c8:	e79c      	b.n	8009904 <__multiply+0x84>
 80099ca:	bf00      	nop
 80099cc:	0800d8a8 	.word	0x0800d8a8
 80099d0:	0800d934 	.word	0x0800d934

080099d4 <__pow5mult>:
 80099d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d8:	4615      	mov	r5, r2
 80099da:	f012 0203 	ands.w	r2, r2, #3
 80099de:	4606      	mov	r6, r0
 80099e0:	460f      	mov	r7, r1
 80099e2:	d007      	beq.n	80099f4 <__pow5mult+0x20>
 80099e4:	4c25      	ldr	r4, [pc, #148]	; (8009a7c <__pow5mult+0xa8>)
 80099e6:	3a01      	subs	r2, #1
 80099e8:	2300      	movs	r3, #0
 80099ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099ee:	f7ff fe51 	bl	8009694 <__multadd>
 80099f2:	4607      	mov	r7, r0
 80099f4:	10ad      	asrs	r5, r5, #2
 80099f6:	d03d      	beq.n	8009a74 <__pow5mult+0xa0>
 80099f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099fa:	b97c      	cbnz	r4, 8009a1c <__pow5mult+0x48>
 80099fc:	2010      	movs	r0, #16
 80099fe:	f7ff fdcd 	bl	800959c <malloc>
 8009a02:	4602      	mov	r2, r0
 8009a04:	6270      	str	r0, [r6, #36]	; 0x24
 8009a06:	b928      	cbnz	r0, 8009a14 <__pow5mult+0x40>
 8009a08:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <__pow5mult+0xac>)
 8009a0a:	481e      	ldr	r0, [pc, #120]	; (8009a84 <__pow5mult+0xb0>)
 8009a0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a10:	f000 fd2c 	bl	800a46c <__assert_func>
 8009a14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a18:	6004      	str	r4, [r0, #0]
 8009a1a:	60c4      	str	r4, [r0, #12]
 8009a1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a24:	b94c      	cbnz	r4, 8009a3a <__pow5mult+0x66>
 8009a26:	f240 2171 	movw	r1, #625	; 0x271
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f7ff ff12 	bl	8009854 <__i2b>
 8009a30:	2300      	movs	r3, #0
 8009a32:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a36:	4604      	mov	r4, r0
 8009a38:	6003      	str	r3, [r0, #0]
 8009a3a:	f04f 0900 	mov.w	r9, #0
 8009a3e:	07eb      	lsls	r3, r5, #31
 8009a40:	d50a      	bpl.n	8009a58 <__pow5mult+0x84>
 8009a42:	4639      	mov	r1, r7
 8009a44:	4622      	mov	r2, r4
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7ff ff1a 	bl	8009880 <__multiply>
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	4680      	mov	r8, r0
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7ff fdfd 	bl	8009650 <_Bfree>
 8009a56:	4647      	mov	r7, r8
 8009a58:	106d      	asrs	r5, r5, #1
 8009a5a:	d00b      	beq.n	8009a74 <__pow5mult+0xa0>
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	b938      	cbnz	r0, 8009a70 <__pow5mult+0x9c>
 8009a60:	4622      	mov	r2, r4
 8009a62:	4621      	mov	r1, r4
 8009a64:	4630      	mov	r0, r6
 8009a66:	f7ff ff0b 	bl	8009880 <__multiply>
 8009a6a:	6020      	str	r0, [r4, #0]
 8009a6c:	f8c0 9000 	str.w	r9, [r0]
 8009a70:	4604      	mov	r4, r0
 8009a72:	e7e4      	b.n	8009a3e <__pow5mult+0x6a>
 8009a74:	4638      	mov	r0, r7
 8009a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a7a:	bf00      	nop
 8009a7c:	0800da80 	.word	0x0800da80
 8009a80:	0800d836 	.word	0x0800d836
 8009a84:	0800d934 	.word	0x0800d934

08009a88 <__lshift>:
 8009a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	6849      	ldr	r1, [r1, #4]
 8009a90:	6923      	ldr	r3, [r4, #16]
 8009a92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a96:	68a3      	ldr	r3, [r4, #8]
 8009a98:	4607      	mov	r7, r0
 8009a9a:	4691      	mov	r9, r2
 8009a9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009aa0:	f108 0601 	add.w	r6, r8, #1
 8009aa4:	42b3      	cmp	r3, r6
 8009aa6:	db0b      	blt.n	8009ac0 <__lshift+0x38>
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	f7ff fd91 	bl	80095d0 <_Balloc>
 8009aae:	4605      	mov	r5, r0
 8009ab0:	b948      	cbnz	r0, 8009ac6 <__lshift+0x3e>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	4b2a      	ldr	r3, [pc, #168]	; (8009b60 <__lshift+0xd8>)
 8009ab6:	482b      	ldr	r0, [pc, #172]	; (8009b64 <__lshift+0xdc>)
 8009ab8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009abc:	f000 fcd6 	bl	800a46c <__assert_func>
 8009ac0:	3101      	adds	r1, #1
 8009ac2:	005b      	lsls	r3, r3, #1
 8009ac4:	e7ee      	b.n	8009aa4 <__lshift+0x1c>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f100 0114 	add.w	r1, r0, #20
 8009acc:	f100 0210 	add.w	r2, r0, #16
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	4553      	cmp	r3, sl
 8009ad4:	db37      	blt.n	8009b46 <__lshift+0xbe>
 8009ad6:	6920      	ldr	r0, [r4, #16]
 8009ad8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009adc:	f104 0314 	add.w	r3, r4, #20
 8009ae0:	f019 091f 	ands.w	r9, r9, #31
 8009ae4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ae8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009aec:	d02f      	beq.n	8009b4e <__lshift+0xc6>
 8009aee:	f1c9 0e20 	rsb	lr, r9, #32
 8009af2:	468a      	mov	sl, r1
 8009af4:	f04f 0c00 	mov.w	ip, #0
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	fa02 f209 	lsl.w	r2, r2, r9
 8009afe:	ea42 020c 	orr.w	r2, r2, ip
 8009b02:	f84a 2b04 	str.w	r2, [sl], #4
 8009b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0a:	4298      	cmp	r0, r3
 8009b0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b10:	d8f2      	bhi.n	8009af8 <__lshift+0x70>
 8009b12:	1b03      	subs	r3, r0, r4
 8009b14:	3b15      	subs	r3, #21
 8009b16:	f023 0303 	bic.w	r3, r3, #3
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	f104 0215 	add.w	r2, r4, #21
 8009b20:	4290      	cmp	r0, r2
 8009b22:	bf38      	it	cc
 8009b24:	2304      	movcc	r3, #4
 8009b26:	f841 c003 	str.w	ip, [r1, r3]
 8009b2a:	f1bc 0f00 	cmp.w	ip, #0
 8009b2e:	d001      	beq.n	8009b34 <__lshift+0xac>
 8009b30:	f108 0602 	add.w	r6, r8, #2
 8009b34:	3e01      	subs	r6, #1
 8009b36:	4638      	mov	r0, r7
 8009b38:	612e      	str	r6, [r5, #16]
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	f7ff fd88 	bl	8009650 <_Bfree>
 8009b40:	4628      	mov	r0, r5
 8009b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b46:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	e7c1      	b.n	8009ad2 <__lshift+0x4a>
 8009b4e:	3904      	subs	r1, #4
 8009b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b54:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b58:	4298      	cmp	r0, r3
 8009b5a:	d8f9      	bhi.n	8009b50 <__lshift+0xc8>
 8009b5c:	e7ea      	b.n	8009b34 <__lshift+0xac>
 8009b5e:	bf00      	nop
 8009b60:	0800d8a8 	.word	0x0800d8a8
 8009b64:	0800d934 	.word	0x0800d934

08009b68 <__mcmp>:
 8009b68:	b530      	push	{r4, r5, lr}
 8009b6a:	6902      	ldr	r2, [r0, #16]
 8009b6c:	690c      	ldr	r4, [r1, #16]
 8009b6e:	1b12      	subs	r2, r2, r4
 8009b70:	d10e      	bne.n	8009b90 <__mcmp+0x28>
 8009b72:	f100 0314 	add.w	r3, r0, #20
 8009b76:	3114      	adds	r1, #20
 8009b78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b88:	42a5      	cmp	r5, r4
 8009b8a:	d003      	beq.n	8009b94 <__mcmp+0x2c>
 8009b8c:	d305      	bcc.n	8009b9a <__mcmp+0x32>
 8009b8e:	2201      	movs	r2, #1
 8009b90:	4610      	mov	r0, r2
 8009b92:	bd30      	pop	{r4, r5, pc}
 8009b94:	4283      	cmp	r3, r0
 8009b96:	d3f3      	bcc.n	8009b80 <__mcmp+0x18>
 8009b98:	e7fa      	b.n	8009b90 <__mcmp+0x28>
 8009b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9e:	e7f7      	b.n	8009b90 <__mcmp+0x28>

08009ba0 <__mdiff>:
 8009ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4620      	mov	r0, r4
 8009bac:	4690      	mov	r8, r2
 8009bae:	f7ff ffdb 	bl	8009b68 <__mcmp>
 8009bb2:	1e05      	subs	r5, r0, #0
 8009bb4:	d110      	bne.n	8009bd8 <__mdiff+0x38>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff fd09 	bl	80095d0 <_Balloc>
 8009bbe:	b930      	cbnz	r0, 8009bce <__mdiff+0x2e>
 8009bc0:	4b3a      	ldr	r3, [pc, #232]	; (8009cac <__mdiff+0x10c>)
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	f240 2132 	movw	r1, #562	; 0x232
 8009bc8:	4839      	ldr	r0, [pc, #228]	; (8009cb0 <__mdiff+0x110>)
 8009bca:	f000 fc4f 	bl	800a46c <__assert_func>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd8:	bfa4      	itt	ge
 8009bda:	4643      	movge	r3, r8
 8009bdc:	46a0      	movge	r8, r4
 8009bde:	4630      	mov	r0, r6
 8009be0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009be4:	bfa6      	itte	ge
 8009be6:	461c      	movge	r4, r3
 8009be8:	2500      	movge	r5, #0
 8009bea:	2501      	movlt	r5, #1
 8009bec:	f7ff fcf0 	bl	80095d0 <_Balloc>
 8009bf0:	b920      	cbnz	r0, 8009bfc <__mdiff+0x5c>
 8009bf2:	4b2e      	ldr	r3, [pc, #184]	; (8009cac <__mdiff+0x10c>)
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bfa:	e7e5      	b.n	8009bc8 <__mdiff+0x28>
 8009bfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c00:	6926      	ldr	r6, [r4, #16]
 8009c02:	60c5      	str	r5, [r0, #12]
 8009c04:	f104 0914 	add.w	r9, r4, #20
 8009c08:	f108 0514 	add.w	r5, r8, #20
 8009c0c:	f100 0e14 	add.w	lr, r0, #20
 8009c10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c18:	f108 0210 	add.w	r2, r8, #16
 8009c1c:	46f2      	mov	sl, lr
 8009c1e:	2100      	movs	r1, #0
 8009c20:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c28:	fa1f f883 	uxth.w	r8, r3
 8009c2c:	fa11 f18b 	uxtah	r1, r1, fp
 8009c30:	0c1b      	lsrs	r3, r3, #16
 8009c32:	eba1 0808 	sub.w	r8, r1, r8
 8009c36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c3e:	fa1f f888 	uxth.w	r8, r8
 8009c42:	1419      	asrs	r1, r3, #16
 8009c44:	454e      	cmp	r6, r9
 8009c46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c4a:	f84a 3b04 	str.w	r3, [sl], #4
 8009c4e:	d8e7      	bhi.n	8009c20 <__mdiff+0x80>
 8009c50:	1b33      	subs	r3, r6, r4
 8009c52:	3b15      	subs	r3, #21
 8009c54:	f023 0303 	bic.w	r3, r3, #3
 8009c58:	3304      	adds	r3, #4
 8009c5a:	3415      	adds	r4, #21
 8009c5c:	42a6      	cmp	r6, r4
 8009c5e:	bf38      	it	cc
 8009c60:	2304      	movcc	r3, #4
 8009c62:	441d      	add	r5, r3
 8009c64:	4473      	add	r3, lr
 8009c66:	469e      	mov	lr, r3
 8009c68:	462e      	mov	r6, r5
 8009c6a:	4566      	cmp	r6, ip
 8009c6c:	d30e      	bcc.n	8009c8c <__mdiff+0xec>
 8009c6e:	f10c 0203 	add.w	r2, ip, #3
 8009c72:	1b52      	subs	r2, r2, r5
 8009c74:	f022 0203 	bic.w	r2, r2, #3
 8009c78:	3d03      	subs	r5, #3
 8009c7a:	45ac      	cmp	ip, r5
 8009c7c:	bf38      	it	cc
 8009c7e:	2200      	movcc	r2, #0
 8009c80:	441a      	add	r2, r3
 8009c82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c86:	b17b      	cbz	r3, 8009ca8 <__mdiff+0x108>
 8009c88:	6107      	str	r7, [r0, #16]
 8009c8a:	e7a3      	b.n	8009bd4 <__mdiff+0x34>
 8009c8c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c90:	fa11 f288 	uxtah	r2, r1, r8
 8009c94:	1414      	asrs	r4, r2, #16
 8009c96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c9a:	b292      	uxth	r2, r2
 8009c9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ca0:	f84e 2b04 	str.w	r2, [lr], #4
 8009ca4:	1421      	asrs	r1, r4, #16
 8009ca6:	e7e0      	b.n	8009c6a <__mdiff+0xca>
 8009ca8:	3f01      	subs	r7, #1
 8009caa:	e7ea      	b.n	8009c82 <__mdiff+0xe2>
 8009cac:	0800d8a8 	.word	0x0800d8a8
 8009cb0:	0800d934 	.word	0x0800d934

08009cb4 <__ulp>:
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	ed8d 0b00 	vstr	d0, [sp]
 8009cba:	9b01      	ldr	r3, [sp, #4]
 8009cbc:	4912      	ldr	r1, [pc, #72]	; (8009d08 <__ulp+0x54>)
 8009cbe:	4019      	ands	r1, r3
 8009cc0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	dd05      	ble.n	8009cd4 <__ulp+0x20>
 8009cc8:	2200      	movs	r2, #0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	ec43 2b10 	vmov	d0, r2, r3
 8009cd0:	b002      	add	sp, #8
 8009cd2:	4770      	bx	lr
 8009cd4:	4249      	negs	r1, r1
 8009cd6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009cda:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009cde:	f04f 0200 	mov.w	r2, #0
 8009ce2:	f04f 0300 	mov.w	r3, #0
 8009ce6:	da04      	bge.n	8009cf2 <__ulp+0x3e>
 8009ce8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009cec:	fa41 f300 	asr.w	r3, r1, r0
 8009cf0:	e7ec      	b.n	8009ccc <__ulp+0x18>
 8009cf2:	f1a0 0114 	sub.w	r1, r0, #20
 8009cf6:	291e      	cmp	r1, #30
 8009cf8:	bfda      	itte	le
 8009cfa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009cfe:	fa20 f101 	lsrle.w	r1, r0, r1
 8009d02:	2101      	movgt	r1, #1
 8009d04:	460a      	mov	r2, r1
 8009d06:	e7e1      	b.n	8009ccc <__ulp+0x18>
 8009d08:	7ff00000 	.word	0x7ff00000

08009d0c <__b2d>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	6905      	ldr	r5, [r0, #16]
 8009d10:	f100 0714 	add.w	r7, r0, #20
 8009d14:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009d18:	1f2e      	subs	r6, r5, #4
 8009d1a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7ff fd48 	bl	80097b4 <__hi0bits>
 8009d24:	f1c0 0320 	rsb	r3, r0, #32
 8009d28:	280a      	cmp	r0, #10
 8009d2a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009da8 <__b2d+0x9c>
 8009d2e:	600b      	str	r3, [r1, #0]
 8009d30:	dc14      	bgt.n	8009d5c <__b2d+0x50>
 8009d32:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d36:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d3a:	42b7      	cmp	r7, r6
 8009d3c:	ea41 030c 	orr.w	r3, r1, ip
 8009d40:	bf34      	ite	cc
 8009d42:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d46:	2100      	movcs	r1, #0
 8009d48:	3015      	adds	r0, #21
 8009d4a:	fa04 f000 	lsl.w	r0, r4, r0
 8009d4e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d52:	ea40 0201 	orr.w	r2, r0, r1
 8009d56:	ec43 2b10 	vmov	d0, r2, r3
 8009d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d5c:	42b7      	cmp	r7, r6
 8009d5e:	bf3a      	itte	cc
 8009d60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d64:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d68:	2100      	movcs	r1, #0
 8009d6a:	380b      	subs	r0, #11
 8009d6c:	d017      	beq.n	8009d9e <__b2d+0x92>
 8009d6e:	f1c0 0c20 	rsb	ip, r0, #32
 8009d72:	fa04 f500 	lsl.w	r5, r4, r0
 8009d76:	42be      	cmp	r6, r7
 8009d78:	fa21 f40c 	lsr.w	r4, r1, ip
 8009d7c:	ea45 0504 	orr.w	r5, r5, r4
 8009d80:	bf8c      	ite	hi
 8009d82:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d86:	2400      	movls	r4, #0
 8009d88:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009d8c:	fa01 f000 	lsl.w	r0, r1, r0
 8009d90:	fa24 f40c 	lsr.w	r4, r4, ip
 8009d94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d98:	ea40 0204 	orr.w	r2, r0, r4
 8009d9c:	e7db      	b.n	8009d56 <__b2d+0x4a>
 8009d9e:	ea44 030c 	orr.w	r3, r4, ip
 8009da2:	460a      	mov	r2, r1
 8009da4:	e7d7      	b.n	8009d56 <__b2d+0x4a>
 8009da6:	bf00      	nop
 8009da8:	3ff00000 	.word	0x3ff00000

08009dac <__d2b>:
 8009dac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009db0:	4689      	mov	r9, r1
 8009db2:	2101      	movs	r1, #1
 8009db4:	ec57 6b10 	vmov	r6, r7, d0
 8009db8:	4690      	mov	r8, r2
 8009dba:	f7ff fc09 	bl	80095d0 <_Balloc>
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	b930      	cbnz	r0, 8009dd0 <__d2b+0x24>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	4b25      	ldr	r3, [pc, #148]	; (8009e5c <__d2b+0xb0>)
 8009dc6:	4826      	ldr	r0, [pc, #152]	; (8009e60 <__d2b+0xb4>)
 8009dc8:	f240 310a 	movw	r1, #778	; 0x30a
 8009dcc:	f000 fb4e 	bl	800a46c <__assert_func>
 8009dd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009dd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009dd8:	bb35      	cbnz	r5, 8009e28 <__d2b+0x7c>
 8009dda:	2e00      	cmp	r6, #0
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	d028      	beq.n	8009e32 <__d2b+0x86>
 8009de0:	4668      	mov	r0, sp
 8009de2:	9600      	str	r6, [sp, #0]
 8009de4:	f7ff fd06 	bl	80097f4 <__lo0bits>
 8009de8:	9900      	ldr	r1, [sp, #0]
 8009dea:	b300      	cbz	r0, 8009e2e <__d2b+0x82>
 8009dec:	9a01      	ldr	r2, [sp, #4]
 8009dee:	f1c0 0320 	rsb	r3, r0, #32
 8009df2:	fa02 f303 	lsl.w	r3, r2, r3
 8009df6:	430b      	orrs	r3, r1
 8009df8:	40c2      	lsrs	r2, r0
 8009dfa:	6163      	str	r3, [r4, #20]
 8009dfc:	9201      	str	r2, [sp, #4]
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	61a3      	str	r3, [r4, #24]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	bf14      	ite	ne
 8009e06:	2202      	movne	r2, #2
 8009e08:	2201      	moveq	r2, #1
 8009e0a:	6122      	str	r2, [r4, #16]
 8009e0c:	b1d5      	cbz	r5, 8009e44 <__d2b+0x98>
 8009e0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e12:	4405      	add	r5, r0
 8009e14:	f8c9 5000 	str.w	r5, [r9]
 8009e18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e1c:	f8c8 0000 	str.w	r0, [r8]
 8009e20:	4620      	mov	r0, r4
 8009e22:	b003      	add	sp, #12
 8009e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e2c:	e7d5      	b.n	8009dda <__d2b+0x2e>
 8009e2e:	6161      	str	r1, [r4, #20]
 8009e30:	e7e5      	b.n	8009dfe <__d2b+0x52>
 8009e32:	a801      	add	r0, sp, #4
 8009e34:	f7ff fcde 	bl	80097f4 <__lo0bits>
 8009e38:	9b01      	ldr	r3, [sp, #4]
 8009e3a:	6163      	str	r3, [r4, #20]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	6122      	str	r2, [r4, #16]
 8009e40:	3020      	adds	r0, #32
 8009e42:	e7e3      	b.n	8009e0c <__d2b+0x60>
 8009e44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e4c:	f8c9 0000 	str.w	r0, [r9]
 8009e50:	6918      	ldr	r0, [r3, #16]
 8009e52:	f7ff fcaf 	bl	80097b4 <__hi0bits>
 8009e56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e5a:	e7df      	b.n	8009e1c <__d2b+0x70>
 8009e5c:	0800d8a8 	.word	0x0800d8a8
 8009e60:	0800d934 	.word	0x0800d934

08009e64 <__ratio>:
 8009e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	4688      	mov	r8, r1
 8009e6a:	4669      	mov	r1, sp
 8009e6c:	4681      	mov	r9, r0
 8009e6e:	f7ff ff4d 	bl	8009d0c <__b2d>
 8009e72:	a901      	add	r1, sp, #4
 8009e74:	4640      	mov	r0, r8
 8009e76:	ec55 4b10 	vmov	r4, r5, d0
 8009e7a:	f7ff ff47 	bl	8009d0c <__b2d>
 8009e7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e82:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e86:	eba3 0c02 	sub.w	ip, r3, r2
 8009e8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e8e:	1a9b      	subs	r3, r3, r2
 8009e90:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e94:	ec51 0b10 	vmov	r0, r1, d0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	bfd6      	itet	le
 8009e9c:	460a      	movle	r2, r1
 8009e9e:	462a      	movgt	r2, r5
 8009ea0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ea4:	468b      	mov	fp, r1
 8009ea6:	462f      	mov	r7, r5
 8009ea8:	bfd4      	ite	le
 8009eaa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009eae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	ee10 2a10 	vmov	r2, s0
 8009eb8:	465b      	mov	r3, fp
 8009eba:	4639      	mov	r1, r7
 8009ebc:	f7f6 fcc6 	bl	800084c <__aeabi_ddiv>
 8009ec0:	ec41 0b10 	vmov	d0, r0, r1
 8009ec4:	b003      	add	sp, #12
 8009ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eca <__copybits>:
 8009eca:	3901      	subs	r1, #1
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	1149      	asrs	r1, r1, #5
 8009ed0:	6914      	ldr	r4, [r2, #16]
 8009ed2:	3101      	adds	r1, #1
 8009ed4:	f102 0314 	add.w	r3, r2, #20
 8009ed8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009edc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ee0:	1f05      	subs	r5, r0, #4
 8009ee2:	42a3      	cmp	r3, r4
 8009ee4:	d30c      	bcc.n	8009f00 <__copybits+0x36>
 8009ee6:	1aa3      	subs	r3, r4, r2
 8009ee8:	3b11      	subs	r3, #17
 8009eea:	f023 0303 	bic.w	r3, r3, #3
 8009eee:	3211      	adds	r2, #17
 8009ef0:	42a2      	cmp	r2, r4
 8009ef2:	bf88      	it	hi
 8009ef4:	2300      	movhi	r3, #0
 8009ef6:	4418      	add	r0, r3
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4288      	cmp	r0, r1
 8009efc:	d305      	bcc.n	8009f0a <__copybits+0x40>
 8009efe:	bd70      	pop	{r4, r5, r6, pc}
 8009f00:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f04:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f08:	e7eb      	b.n	8009ee2 <__copybits+0x18>
 8009f0a:	f840 3b04 	str.w	r3, [r0], #4
 8009f0e:	e7f4      	b.n	8009efa <__copybits+0x30>

08009f10 <__any_on>:
 8009f10:	f100 0214 	add.w	r2, r0, #20
 8009f14:	6900      	ldr	r0, [r0, #16]
 8009f16:	114b      	asrs	r3, r1, #5
 8009f18:	4298      	cmp	r0, r3
 8009f1a:	b510      	push	{r4, lr}
 8009f1c:	db11      	blt.n	8009f42 <__any_on+0x32>
 8009f1e:	dd0a      	ble.n	8009f36 <__any_on+0x26>
 8009f20:	f011 011f 	ands.w	r1, r1, #31
 8009f24:	d007      	beq.n	8009f36 <__any_on+0x26>
 8009f26:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f2a:	fa24 f001 	lsr.w	r0, r4, r1
 8009f2e:	fa00 f101 	lsl.w	r1, r0, r1
 8009f32:	428c      	cmp	r4, r1
 8009f34:	d10b      	bne.n	8009f4e <__any_on+0x3e>
 8009f36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d803      	bhi.n	8009f46 <__any_on+0x36>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	bd10      	pop	{r4, pc}
 8009f42:	4603      	mov	r3, r0
 8009f44:	e7f7      	b.n	8009f36 <__any_on+0x26>
 8009f46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f4a:	2900      	cmp	r1, #0
 8009f4c:	d0f5      	beq.n	8009f3a <__any_on+0x2a>
 8009f4e:	2001      	movs	r0, #1
 8009f50:	e7f6      	b.n	8009f40 <__any_on+0x30>

08009f52 <_calloc_r>:
 8009f52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f54:	fba1 2402 	umull	r2, r4, r1, r2
 8009f58:	b94c      	cbnz	r4, 8009f6e <_calloc_r+0x1c>
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	9201      	str	r2, [sp, #4]
 8009f5e:	f000 f87b 	bl	800a058 <_malloc_r>
 8009f62:	9a01      	ldr	r2, [sp, #4]
 8009f64:	4605      	mov	r5, r0
 8009f66:	b930      	cbnz	r0, 8009f76 <_calloc_r+0x24>
 8009f68:	4628      	mov	r0, r5
 8009f6a:	b003      	add	sp, #12
 8009f6c:	bd30      	pop	{r4, r5, pc}
 8009f6e:	220c      	movs	r2, #12
 8009f70:	6002      	str	r2, [r0, #0]
 8009f72:	2500      	movs	r5, #0
 8009f74:	e7f8      	b.n	8009f68 <_calloc_r+0x16>
 8009f76:	4621      	mov	r1, r4
 8009f78:	f7fc fbcc 	bl	8006714 <memset>
 8009f7c:	e7f4      	b.n	8009f68 <_calloc_r+0x16>
	...

08009f80 <_free_r>:
 8009f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f82:	2900      	cmp	r1, #0
 8009f84:	d044      	beq.n	800a010 <_free_r+0x90>
 8009f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f8a:	9001      	str	r0, [sp, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f92:	bfb8      	it	lt
 8009f94:	18e4      	addlt	r4, r4, r3
 8009f96:	f000 fa99 	bl	800a4cc <__malloc_lock>
 8009f9a:	4a1e      	ldr	r2, [pc, #120]	; (800a014 <_free_r+0x94>)
 8009f9c:	9801      	ldr	r0, [sp, #4]
 8009f9e:	6813      	ldr	r3, [r2, #0]
 8009fa0:	b933      	cbnz	r3, 8009fb0 <_free_r+0x30>
 8009fa2:	6063      	str	r3, [r4, #4]
 8009fa4:	6014      	str	r4, [r2, #0]
 8009fa6:	b003      	add	sp, #12
 8009fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fac:	f000 ba94 	b.w	800a4d8 <__malloc_unlock>
 8009fb0:	42a3      	cmp	r3, r4
 8009fb2:	d908      	bls.n	8009fc6 <_free_r+0x46>
 8009fb4:	6825      	ldr	r5, [r4, #0]
 8009fb6:	1961      	adds	r1, r4, r5
 8009fb8:	428b      	cmp	r3, r1
 8009fba:	bf01      	itttt	eq
 8009fbc:	6819      	ldreq	r1, [r3, #0]
 8009fbe:	685b      	ldreq	r3, [r3, #4]
 8009fc0:	1949      	addeq	r1, r1, r5
 8009fc2:	6021      	streq	r1, [r4, #0]
 8009fc4:	e7ed      	b.n	8009fa2 <_free_r+0x22>
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	b10b      	cbz	r3, 8009fd0 <_free_r+0x50>
 8009fcc:	42a3      	cmp	r3, r4
 8009fce:	d9fa      	bls.n	8009fc6 <_free_r+0x46>
 8009fd0:	6811      	ldr	r1, [r2, #0]
 8009fd2:	1855      	adds	r5, r2, r1
 8009fd4:	42a5      	cmp	r5, r4
 8009fd6:	d10b      	bne.n	8009ff0 <_free_r+0x70>
 8009fd8:	6824      	ldr	r4, [r4, #0]
 8009fda:	4421      	add	r1, r4
 8009fdc:	1854      	adds	r4, r2, r1
 8009fde:	42a3      	cmp	r3, r4
 8009fe0:	6011      	str	r1, [r2, #0]
 8009fe2:	d1e0      	bne.n	8009fa6 <_free_r+0x26>
 8009fe4:	681c      	ldr	r4, [r3, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	6053      	str	r3, [r2, #4]
 8009fea:	4421      	add	r1, r4
 8009fec:	6011      	str	r1, [r2, #0]
 8009fee:	e7da      	b.n	8009fa6 <_free_r+0x26>
 8009ff0:	d902      	bls.n	8009ff8 <_free_r+0x78>
 8009ff2:	230c      	movs	r3, #12
 8009ff4:	6003      	str	r3, [r0, #0]
 8009ff6:	e7d6      	b.n	8009fa6 <_free_r+0x26>
 8009ff8:	6825      	ldr	r5, [r4, #0]
 8009ffa:	1961      	adds	r1, r4, r5
 8009ffc:	428b      	cmp	r3, r1
 8009ffe:	bf04      	itt	eq
 800a000:	6819      	ldreq	r1, [r3, #0]
 800a002:	685b      	ldreq	r3, [r3, #4]
 800a004:	6063      	str	r3, [r4, #4]
 800a006:	bf04      	itt	eq
 800a008:	1949      	addeq	r1, r1, r5
 800a00a:	6021      	streq	r1, [r4, #0]
 800a00c:	6054      	str	r4, [r2, #4]
 800a00e:	e7ca      	b.n	8009fa6 <_free_r+0x26>
 800a010:	b003      	add	sp, #12
 800a012:	bd30      	pop	{r4, r5, pc}
 800a014:	20000988 	.word	0x20000988

0800a018 <sbrk_aligned>:
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	4e0e      	ldr	r6, [pc, #56]	; (800a054 <sbrk_aligned+0x3c>)
 800a01c:	460c      	mov	r4, r1
 800a01e:	6831      	ldr	r1, [r6, #0]
 800a020:	4605      	mov	r5, r0
 800a022:	b911      	cbnz	r1, 800a02a <sbrk_aligned+0x12>
 800a024:	f000 f9f0 	bl	800a408 <_sbrk_r>
 800a028:	6030      	str	r0, [r6, #0]
 800a02a:	4621      	mov	r1, r4
 800a02c:	4628      	mov	r0, r5
 800a02e:	f000 f9eb 	bl	800a408 <_sbrk_r>
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	d00a      	beq.n	800a04c <sbrk_aligned+0x34>
 800a036:	1cc4      	adds	r4, r0, #3
 800a038:	f024 0403 	bic.w	r4, r4, #3
 800a03c:	42a0      	cmp	r0, r4
 800a03e:	d007      	beq.n	800a050 <sbrk_aligned+0x38>
 800a040:	1a21      	subs	r1, r4, r0
 800a042:	4628      	mov	r0, r5
 800a044:	f000 f9e0 	bl	800a408 <_sbrk_r>
 800a048:	3001      	adds	r0, #1
 800a04a:	d101      	bne.n	800a050 <sbrk_aligned+0x38>
 800a04c:	f04f 34ff 	mov.w	r4, #4294967295
 800a050:	4620      	mov	r0, r4
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	2000098c 	.word	0x2000098c

0800a058 <_malloc_r>:
 800a058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05c:	1ccd      	adds	r5, r1, #3
 800a05e:	f025 0503 	bic.w	r5, r5, #3
 800a062:	3508      	adds	r5, #8
 800a064:	2d0c      	cmp	r5, #12
 800a066:	bf38      	it	cc
 800a068:	250c      	movcc	r5, #12
 800a06a:	2d00      	cmp	r5, #0
 800a06c:	4607      	mov	r7, r0
 800a06e:	db01      	blt.n	800a074 <_malloc_r+0x1c>
 800a070:	42a9      	cmp	r1, r5
 800a072:	d905      	bls.n	800a080 <_malloc_r+0x28>
 800a074:	230c      	movs	r3, #12
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	2600      	movs	r6, #0
 800a07a:	4630      	mov	r0, r6
 800a07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a080:	4e2e      	ldr	r6, [pc, #184]	; (800a13c <_malloc_r+0xe4>)
 800a082:	f000 fa23 	bl	800a4cc <__malloc_lock>
 800a086:	6833      	ldr	r3, [r6, #0]
 800a088:	461c      	mov	r4, r3
 800a08a:	bb34      	cbnz	r4, 800a0da <_malloc_r+0x82>
 800a08c:	4629      	mov	r1, r5
 800a08e:	4638      	mov	r0, r7
 800a090:	f7ff ffc2 	bl	800a018 <sbrk_aligned>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	4604      	mov	r4, r0
 800a098:	d14d      	bne.n	800a136 <_malloc_r+0xde>
 800a09a:	6834      	ldr	r4, [r6, #0]
 800a09c:	4626      	mov	r6, r4
 800a09e:	2e00      	cmp	r6, #0
 800a0a0:	d140      	bne.n	800a124 <_malloc_r+0xcc>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	4631      	mov	r1, r6
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	eb04 0803 	add.w	r8, r4, r3
 800a0ac:	f000 f9ac 	bl	800a408 <_sbrk_r>
 800a0b0:	4580      	cmp	r8, r0
 800a0b2:	d13a      	bne.n	800a12a <_malloc_r+0xd2>
 800a0b4:	6821      	ldr	r1, [r4, #0]
 800a0b6:	3503      	adds	r5, #3
 800a0b8:	1a6d      	subs	r5, r5, r1
 800a0ba:	f025 0503 	bic.w	r5, r5, #3
 800a0be:	3508      	adds	r5, #8
 800a0c0:	2d0c      	cmp	r5, #12
 800a0c2:	bf38      	it	cc
 800a0c4:	250c      	movcc	r5, #12
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	4638      	mov	r0, r7
 800a0ca:	f7ff ffa5 	bl	800a018 <sbrk_aligned>
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	d02b      	beq.n	800a12a <_malloc_r+0xd2>
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	442b      	add	r3, r5
 800a0d6:	6023      	str	r3, [r4, #0]
 800a0d8:	e00e      	b.n	800a0f8 <_malloc_r+0xa0>
 800a0da:	6822      	ldr	r2, [r4, #0]
 800a0dc:	1b52      	subs	r2, r2, r5
 800a0de:	d41e      	bmi.n	800a11e <_malloc_r+0xc6>
 800a0e0:	2a0b      	cmp	r2, #11
 800a0e2:	d916      	bls.n	800a112 <_malloc_r+0xba>
 800a0e4:	1961      	adds	r1, r4, r5
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	6025      	str	r5, [r4, #0]
 800a0ea:	bf18      	it	ne
 800a0ec:	6059      	strne	r1, [r3, #4]
 800a0ee:	6863      	ldr	r3, [r4, #4]
 800a0f0:	bf08      	it	eq
 800a0f2:	6031      	streq	r1, [r6, #0]
 800a0f4:	5162      	str	r2, [r4, r5]
 800a0f6:	604b      	str	r3, [r1, #4]
 800a0f8:	4638      	mov	r0, r7
 800a0fa:	f104 060b 	add.w	r6, r4, #11
 800a0fe:	f000 f9eb 	bl	800a4d8 <__malloc_unlock>
 800a102:	f026 0607 	bic.w	r6, r6, #7
 800a106:	1d23      	adds	r3, r4, #4
 800a108:	1af2      	subs	r2, r6, r3
 800a10a:	d0b6      	beq.n	800a07a <_malloc_r+0x22>
 800a10c:	1b9b      	subs	r3, r3, r6
 800a10e:	50a3      	str	r3, [r4, r2]
 800a110:	e7b3      	b.n	800a07a <_malloc_r+0x22>
 800a112:	6862      	ldr	r2, [r4, #4]
 800a114:	42a3      	cmp	r3, r4
 800a116:	bf0c      	ite	eq
 800a118:	6032      	streq	r2, [r6, #0]
 800a11a:	605a      	strne	r2, [r3, #4]
 800a11c:	e7ec      	b.n	800a0f8 <_malloc_r+0xa0>
 800a11e:	4623      	mov	r3, r4
 800a120:	6864      	ldr	r4, [r4, #4]
 800a122:	e7b2      	b.n	800a08a <_malloc_r+0x32>
 800a124:	4634      	mov	r4, r6
 800a126:	6876      	ldr	r6, [r6, #4]
 800a128:	e7b9      	b.n	800a09e <_malloc_r+0x46>
 800a12a:	230c      	movs	r3, #12
 800a12c:	603b      	str	r3, [r7, #0]
 800a12e:	4638      	mov	r0, r7
 800a130:	f000 f9d2 	bl	800a4d8 <__malloc_unlock>
 800a134:	e7a1      	b.n	800a07a <_malloc_r+0x22>
 800a136:	6025      	str	r5, [r4, #0]
 800a138:	e7de      	b.n	800a0f8 <_malloc_r+0xa0>
 800a13a:	bf00      	nop
 800a13c:	20000988 	.word	0x20000988

0800a140 <__ssputs_r>:
 800a140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a144:	688e      	ldr	r6, [r1, #8]
 800a146:	429e      	cmp	r6, r3
 800a148:	4682      	mov	sl, r0
 800a14a:	460c      	mov	r4, r1
 800a14c:	4690      	mov	r8, r2
 800a14e:	461f      	mov	r7, r3
 800a150:	d838      	bhi.n	800a1c4 <__ssputs_r+0x84>
 800a152:	898a      	ldrh	r2, [r1, #12]
 800a154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a158:	d032      	beq.n	800a1c0 <__ssputs_r+0x80>
 800a15a:	6825      	ldr	r5, [r4, #0]
 800a15c:	6909      	ldr	r1, [r1, #16]
 800a15e:	eba5 0901 	sub.w	r9, r5, r1
 800a162:	6965      	ldr	r5, [r4, #20]
 800a164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a16c:	3301      	adds	r3, #1
 800a16e:	444b      	add	r3, r9
 800a170:	106d      	asrs	r5, r5, #1
 800a172:	429d      	cmp	r5, r3
 800a174:	bf38      	it	cc
 800a176:	461d      	movcc	r5, r3
 800a178:	0553      	lsls	r3, r2, #21
 800a17a:	d531      	bpl.n	800a1e0 <__ssputs_r+0xa0>
 800a17c:	4629      	mov	r1, r5
 800a17e:	f7ff ff6b 	bl	800a058 <_malloc_r>
 800a182:	4606      	mov	r6, r0
 800a184:	b950      	cbnz	r0, 800a19c <__ssputs_r+0x5c>
 800a186:	230c      	movs	r3, #12
 800a188:	f8ca 3000 	str.w	r3, [sl]
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	f04f 30ff 	mov.w	r0, #4294967295
 800a198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a19c:	6921      	ldr	r1, [r4, #16]
 800a19e:	464a      	mov	r2, r9
 800a1a0:	f7fc fa90 	bl	80066c4 <memcpy>
 800a1a4:	89a3      	ldrh	r3, [r4, #12]
 800a1a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ae:	81a3      	strh	r3, [r4, #12]
 800a1b0:	6126      	str	r6, [r4, #16]
 800a1b2:	6165      	str	r5, [r4, #20]
 800a1b4:	444e      	add	r6, r9
 800a1b6:	eba5 0509 	sub.w	r5, r5, r9
 800a1ba:	6026      	str	r6, [r4, #0]
 800a1bc:	60a5      	str	r5, [r4, #8]
 800a1be:	463e      	mov	r6, r7
 800a1c0:	42be      	cmp	r6, r7
 800a1c2:	d900      	bls.n	800a1c6 <__ssputs_r+0x86>
 800a1c4:	463e      	mov	r6, r7
 800a1c6:	6820      	ldr	r0, [r4, #0]
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	4641      	mov	r1, r8
 800a1cc:	f7fc fa88 	bl	80066e0 <memmove>
 800a1d0:	68a3      	ldr	r3, [r4, #8]
 800a1d2:	1b9b      	subs	r3, r3, r6
 800a1d4:	60a3      	str	r3, [r4, #8]
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	4433      	add	r3, r6
 800a1da:	6023      	str	r3, [r4, #0]
 800a1dc:	2000      	movs	r0, #0
 800a1de:	e7db      	b.n	800a198 <__ssputs_r+0x58>
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	f000 f97f 	bl	800a4e4 <_realloc_r>
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d1e1      	bne.n	800a1b0 <__ssputs_r+0x70>
 800a1ec:	6921      	ldr	r1, [r4, #16]
 800a1ee:	4650      	mov	r0, sl
 800a1f0:	f7ff fec6 	bl	8009f80 <_free_r>
 800a1f4:	e7c7      	b.n	800a186 <__ssputs_r+0x46>
	...

0800a1f8 <_svfiprintf_r>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	4698      	mov	r8, r3
 800a1fe:	898b      	ldrh	r3, [r1, #12]
 800a200:	061b      	lsls	r3, r3, #24
 800a202:	b09d      	sub	sp, #116	; 0x74
 800a204:	4607      	mov	r7, r0
 800a206:	460d      	mov	r5, r1
 800a208:	4614      	mov	r4, r2
 800a20a:	d50e      	bpl.n	800a22a <_svfiprintf_r+0x32>
 800a20c:	690b      	ldr	r3, [r1, #16]
 800a20e:	b963      	cbnz	r3, 800a22a <_svfiprintf_r+0x32>
 800a210:	2140      	movs	r1, #64	; 0x40
 800a212:	f7ff ff21 	bl	800a058 <_malloc_r>
 800a216:	6028      	str	r0, [r5, #0]
 800a218:	6128      	str	r0, [r5, #16]
 800a21a:	b920      	cbnz	r0, 800a226 <_svfiprintf_r+0x2e>
 800a21c:	230c      	movs	r3, #12
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	e0d1      	b.n	800a3ca <_svfiprintf_r+0x1d2>
 800a226:	2340      	movs	r3, #64	; 0x40
 800a228:	616b      	str	r3, [r5, #20]
 800a22a:	2300      	movs	r3, #0
 800a22c:	9309      	str	r3, [sp, #36]	; 0x24
 800a22e:	2320      	movs	r3, #32
 800a230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a234:	f8cd 800c 	str.w	r8, [sp, #12]
 800a238:	2330      	movs	r3, #48	; 0x30
 800a23a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3e4 <_svfiprintf_r+0x1ec>
 800a23e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a242:	f04f 0901 	mov.w	r9, #1
 800a246:	4623      	mov	r3, r4
 800a248:	469a      	mov	sl, r3
 800a24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a24e:	b10a      	cbz	r2, 800a254 <_svfiprintf_r+0x5c>
 800a250:	2a25      	cmp	r2, #37	; 0x25
 800a252:	d1f9      	bne.n	800a248 <_svfiprintf_r+0x50>
 800a254:	ebba 0b04 	subs.w	fp, sl, r4
 800a258:	d00b      	beq.n	800a272 <_svfiprintf_r+0x7a>
 800a25a:	465b      	mov	r3, fp
 800a25c:	4622      	mov	r2, r4
 800a25e:	4629      	mov	r1, r5
 800a260:	4638      	mov	r0, r7
 800a262:	f7ff ff6d 	bl	800a140 <__ssputs_r>
 800a266:	3001      	adds	r0, #1
 800a268:	f000 80aa 	beq.w	800a3c0 <_svfiprintf_r+0x1c8>
 800a26c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a26e:	445a      	add	r2, fp
 800a270:	9209      	str	r2, [sp, #36]	; 0x24
 800a272:	f89a 3000 	ldrb.w	r3, [sl]
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 80a2 	beq.w	800a3c0 <_svfiprintf_r+0x1c8>
 800a27c:	2300      	movs	r3, #0
 800a27e:	f04f 32ff 	mov.w	r2, #4294967295
 800a282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a286:	f10a 0a01 	add.w	sl, sl, #1
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	9307      	str	r3, [sp, #28]
 800a28e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a292:	931a      	str	r3, [sp, #104]	; 0x68
 800a294:	4654      	mov	r4, sl
 800a296:	2205      	movs	r2, #5
 800a298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29c:	4851      	ldr	r0, [pc, #324]	; (800a3e4 <_svfiprintf_r+0x1ec>)
 800a29e:	f7f5 ff9f 	bl	80001e0 <memchr>
 800a2a2:	9a04      	ldr	r2, [sp, #16]
 800a2a4:	b9d8      	cbnz	r0, 800a2de <_svfiprintf_r+0xe6>
 800a2a6:	06d0      	lsls	r0, r2, #27
 800a2a8:	bf44      	itt	mi
 800a2aa:	2320      	movmi	r3, #32
 800a2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2b0:	0711      	lsls	r1, r2, #28
 800a2b2:	bf44      	itt	mi
 800a2b4:	232b      	movmi	r3, #43	; 0x2b
 800a2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a2be:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c0:	d015      	beq.n	800a2ee <_svfiprintf_r+0xf6>
 800a2c2:	9a07      	ldr	r2, [sp, #28]
 800a2c4:	4654      	mov	r4, sl
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	f04f 0c0a 	mov.w	ip, #10
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2d2:	3b30      	subs	r3, #48	; 0x30
 800a2d4:	2b09      	cmp	r3, #9
 800a2d6:	d94e      	bls.n	800a376 <_svfiprintf_r+0x17e>
 800a2d8:	b1b0      	cbz	r0, 800a308 <_svfiprintf_r+0x110>
 800a2da:	9207      	str	r2, [sp, #28]
 800a2dc:	e014      	b.n	800a308 <_svfiprintf_r+0x110>
 800a2de:	eba0 0308 	sub.w	r3, r0, r8
 800a2e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	46a2      	mov	sl, r4
 800a2ec:	e7d2      	b.n	800a294 <_svfiprintf_r+0x9c>
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	1d19      	adds	r1, r3, #4
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	9103      	str	r1, [sp, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	bfbb      	ittet	lt
 800a2fa:	425b      	neglt	r3, r3
 800a2fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a300:	9307      	strge	r3, [sp, #28]
 800a302:	9307      	strlt	r3, [sp, #28]
 800a304:	bfb8      	it	lt
 800a306:	9204      	strlt	r2, [sp, #16]
 800a308:	7823      	ldrb	r3, [r4, #0]
 800a30a:	2b2e      	cmp	r3, #46	; 0x2e
 800a30c:	d10c      	bne.n	800a328 <_svfiprintf_r+0x130>
 800a30e:	7863      	ldrb	r3, [r4, #1]
 800a310:	2b2a      	cmp	r3, #42	; 0x2a
 800a312:	d135      	bne.n	800a380 <_svfiprintf_r+0x188>
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	1d1a      	adds	r2, r3, #4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	9203      	str	r2, [sp, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	bfb8      	it	lt
 800a320:	f04f 33ff 	movlt.w	r3, #4294967295
 800a324:	3402      	adds	r4, #2
 800a326:	9305      	str	r3, [sp, #20]
 800a328:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3f4 <_svfiprintf_r+0x1fc>
 800a32c:	7821      	ldrb	r1, [r4, #0]
 800a32e:	2203      	movs	r2, #3
 800a330:	4650      	mov	r0, sl
 800a332:	f7f5 ff55 	bl	80001e0 <memchr>
 800a336:	b140      	cbz	r0, 800a34a <_svfiprintf_r+0x152>
 800a338:	2340      	movs	r3, #64	; 0x40
 800a33a:	eba0 000a 	sub.w	r0, r0, sl
 800a33e:	fa03 f000 	lsl.w	r0, r3, r0
 800a342:	9b04      	ldr	r3, [sp, #16]
 800a344:	4303      	orrs	r3, r0
 800a346:	3401      	adds	r4, #1
 800a348:	9304      	str	r3, [sp, #16]
 800a34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a34e:	4826      	ldr	r0, [pc, #152]	; (800a3e8 <_svfiprintf_r+0x1f0>)
 800a350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a354:	2206      	movs	r2, #6
 800a356:	f7f5 ff43 	bl	80001e0 <memchr>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	d038      	beq.n	800a3d0 <_svfiprintf_r+0x1d8>
 800a35e:	4b23      	ldr	r3, [pc, #140]	; (800a3ec <_svfiprintf_r+0x1f4>)
 800a360:	bb1b      	cbnz	r3, 800a3aa <_svfiprintf_r+0x1b2>
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	3307      	adds	r3, #7
 800a366:	f023 0307 	bic.w	r3, r3, #7
 800a36a:	3308      	adds	r3, #8
 800a36c:	9303      	str	r3, [sp, #12]
 800a36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a370:	4433      	add	r3, r6
 800a372:	9309      	str	r3, [sp, #36]	; 0x24
 800a374:	e767      	b.n	800a246 <_svfiprintf_r+0x4e>
 800a376:	fb0c 3202 	mla	r2, ip, r2, r3
 800a37a:	460c      	mov	r4, r1
 800a37c:	2001      	movs	r0, #1
 800a37e:	e7a5      	b.n	800a2cc <_svfiprintf_r+0xd4>
 800a380:	2300      	movs	r3, #0
 800a382:	3401      	adds	r4, #1
 800a384:	9305      	str	r3, [sp, #20]
 800a386:	4619      	mov	r1, r3
 800a388:	f04f 0c0a 	mov.w	ip, #10
 800a38c:	4620      	mov	r0, r4
 800a38e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a392:	3a30      	subs	r2, #48	; 0x30
 800a394:	2a09      	cmp	r2, #9
 800a396:	d903      	bls.n	800a3a0 <_svfiprintf_r+0x1a8>
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d0c5      	beq.n	800a328 <_svfiprintf_r+0x130>
 800a39c:	9105      	str	r1, [sp, #20]
 800a39e:	e7c3      	b.n	800a328 <_svfiprintf_r+0x130>
 800a3a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e7f0      	b.n	800a38c <_svfiprintf_r+0x194>
 800a3aa:	ab03      	add	r3, sp, #12
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	462a      	mov	r2, r5
 800a3b0:	4b0f      	ldr	r3, [pc, #60]	; (800a3f0 <_svfiprintf_r+0x1f8>)
 800a3b2:	a904      	add	r1, sp, #16
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f7fc fa55 	bl	8006864 <_printf_float>
 800a3ba:	1c42      	adds	r2, r0, #1
 800a3bc:	4606      	mov	r6, r0
 800a3be:	d1d6      	bne.n	800a36e <_svfiprintf_r+0x176>
 800a3c0:	89ab      	ldrh	r3, [r5, #12]
 800a3c2:	065b      	lsls	r3, r3, #25
 800a3c4:	f53f af2c 	bmi.w	800a220 <_svfiprintf_r+0x28>
 800a3c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ca:	b01d      	add	sp, #116	; 0x74
 800a3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d0:	ab03      	add	r3, sp, #12
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	462a      	mov	r2, r5
 800a3d6:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <_svfiprintf_r+0x1f8>)
 800a3d8:	a904      	add	r1, sp, #16
 800a3da:	4638      	mov	r0, r7
 800a3dc:	f7fc fce6 	bl	8006dac <_printf_i>
 800a3e0:	e7eb      	b.n	800a3ba <_svfiprintf_r+0x1c2>
 800a3e2:	bf00      	nop
 800a3e4:	0800da8c 	.word	0x0800da8c
 800a3e8:	0800da96 	.word	0x0800da96
 800a3ec:	08006865 	.word	0x08006865
 800a3f0:	0800a141 	.word	0x0800a141
 800a3f4:	0800da92 	.word	0x0800da92

0800a3f8 <nan>:
 800a3f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a400 <nan+0x8>
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	00000000 	.word	0x00000000
 800a404:	7ff80000 	.word	0x7ff80000

0800a408 <_sbrk_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4d06      	ldr	r5, [pc, #24]	; (800a424 <_sbrk_r+0x1c>)
 800a40c:	2300      	movs	r3, #0
 800a40e:	4604      	mov	r4, r0
 800a410:	4608      	mov	r0, r1
 800a412:	602b      	str	r3, [r5, #0]
 800a414:	f7f9 f9be 	bl	8003794 <_sbrk>
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d102      	bne.n	800a422 <_sbrk_r+0x1a>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	b103      	cbz	r3, 800a422 <_sbrk_r+0x1a>
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	20000990 	.word	0x20000990

0800a428 <strncmp>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	b17a      	cbz	r2, 800a44c <strncmp+0x24>
 800a42c:	4603      	mov	r3, r0
 800a42e:	3901      	subs	r1, #1
 800a430:	1884      	adds	r4, r0, r2
 800a432:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a436:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a43a:	4290      	cmp	r0, r2
 800a43c:	d101      	bne.n	800a442 <strncmp+0x1a>
 800a43e:	42a3      	cmp	r3, r4
 800a440:	d101      	bne.n	800a446 <strncmp+0x1e>
 800a442:	1a80      	subs	r0, r0, r2
 800a444:	bd10      	pop	{r4, pc}
 800a446:	2800      	cmp	r0, #0
 800a448:	d1f3      	bne.n	800a432 <strncmp+0xa>
 800a44a:	e7fa      	b.n	800a442 <strncmp+0x1a>
 800a44c:	4610      	mov	r0, r2
 800a44e:	e7f9      	b.n	800a444 <strncmp+0x1c>

0800a450 <__ascii_wctomb>:
 800a450:	b149      	cbz	r1, 800a466 <__ascii_wctomb+0x16>
 800a452:	2aff      	cmp	r2, #255	; 0xff
 800a454:	bf85      	ittet	hi
 800a456:	238a      	movhi	r3, #138	; 0x8a
 800a458:	6003      	strhi	r3, [r0, #0]
 800a45a:	700a      	strbls	r2, [r1, #0]
 800a45c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a460:	bf98      	it	ls
 800a462:	2001      	movls	r0, #1
 800a464:	4770      	bx	lr
 800a466:	4608      	mov	r0, r1
 800a468:	4770      	bx	lr
	...

0800a46c <__assert_func>:
 800a46c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a46e:	4614      	mov	r4, r2
 800a470:	461a      	mov	r2, r3
 800a472:	4b09      	ldr	r3, [pc, #36]	; (800a498 <__assert_func+0x2c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4605      	mov	r5, r0
 800a478:	68d8      	ldr	r0, [r3, #12]
 800a47a:	b14c      	cbz	r4, 800a490 <__assert_func+0x24>
 800a47c:	4b07      	ldr	r3, [pc, #28]	; (800a49c <__assert_func+0x30>)
 800a47e:	9100      	str	r1, [sp, #0]
 800a480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a484:	4906      	ldr	r1, [pc, #24]	; (800a4a0 <__assert_func+0x34>)
 800a486:	462b      	mov	r3, r5
 800a488:	f000 f80e 	bl	800a4a8 <fiprintf>
 800a48c:	f000 fa72 	bl	800a974 <abort>
 800a490:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <__assert_func+0x38>)
 800a492:	461c      	mov	r4, r3
 800a494:	e7f3      	b.n	800a47e <__assert_func+0x12>
 800a496:	bf00      	nop
 800a498:	2000004c 	.word	0x2000004c
 800a49c:	0800da9d 	.word	0x0800da9d
 800a4a0:	0800daaa 	.word	0x0800daaa
 800a4a4:	0800dad8 	.word	0x0800dad8

0800a4a8 <fiprintf>:
 800a4a8:	b40e      	push	{r1, r2, r3}
 800a4aa:	b503      	push	{r0, r1, lr}
 800a4ac:	4601      	mov	r1, r0
 800a4ae:	ab03      	add	r3, sp, #12
 800a4b0:	4805      	ldr	r0, [pc, #20]	; (800a4c8 <fiprintf+0x20>)
 800a4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b6:	6800      	ldr	r0, [r0, #0]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	f000 f86b 	bl	800a594 <_vfiprintf_r>
 800a4be:	b002      	add	sp, #8
 800a4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4c4:	b003      	add	sp, #12
 800a4c6:	4770      	bx	lr
 800a4c8:	2000004c 	.word	0x2000004c

0800a4cc <__malloc_lock>:
 800a4cc:	4801      	ldr	r0, [pc, #4]	; (800a4d4 <__malloc_lock+0x8>)
 800a4ce:	f000 bc11 	b.w	800acf4 <__retarget_lock_acquire_recursive>
 800a4d2:	bf00      	nop
 800a4d4:	20000994 	.word	0x20000994

0800a4d8 <__malloc_unlock>:
 800a4d8:	4801      	ldr	r0, [pc, #4]	; (800a4e0 <__malloc_unlock+0x8>)
 800a4da:	f000 bc0c 	b.w	800acf6 <__retarget_lock_release_recursive>
 800a4de:	bf00      	nop
 800a4e0:	20000994 	.word	0x20000994

0800a4e4 <_realloc_r>:
 800a4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e8:	4680      	mov	r8, r0
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	460e      	mov	r6, r1
 800a4ee:	b921      	cbnz	r1, 800a4fa <_realloc_r+0x16>
 800a4f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	f7ff bdaf 	b.w	800a058 <_malloc_r>
 800a4fa:	b92a      	cbnz	r2, 800a508 <_realloc_r+0x24>
 800a4fc:	f7ff fd40 	bl	8009f80 <_free_r>
 800a500:	4625      	mov	r5, r4
 800a502:	4628      	mov	r0, r5
 800a504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a508:	f000 fc5c 	bl	800adc4 <_malloc_usable_size_r>
 800a50c:	4284      	cmp	r4, r0
 800a50e:	4607      	mov	r7, r0
 800a510:	d802      	bhi.n	800a518 <_realloc_r+0x34>
 800a512:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a516:	d812      	bhi.n	800a53e <_realloc_r+0x5a>
 800a518:	4621      	mov	r1, r4
 800a51a:	4640      	mov	r0, r8
 800a51c:	f7ff fd9c 	bl	800a058 <_malloc_r>
 800a520:	4605      	mov	r5, r0
 800a522:	2800      	cmp	r0, #0
 800a524:	d0ed      	beq.n	800a502 <_realloc_r+0x1e>
 800a526:	42bc      	cmp	r4, r7
 800a528:	4622      	mov	r2, r4
 800a52a:	4631      	mov	r1, r6
 800a52c:	bf28      	it	cs
 800a52e:	463a      	movcs	r2, r7
 800a530:	f7fc f8c8 	bl	80066c4 <memcpy>
 800a534:	4631      	mov	r1, r6
 800a536:	4640      	mov	r0, r8
 800a538:	f7ff fd22 	bl	8009f80 <_free_r>
 800a53c:	e7e1      	b.n	800a502 <_realloc_r+0x1e>
 800a53e:	4635      	mov	r5, r6
 800a540:	e7df      	b.n	800a502 <_realloc_r+0x1e>

0800a542 <__sfputc_r>:
 800a542:	6893      	ldr	r3, [r2, #8]
 800a544:	3b01      	subs	r3, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	b410      	push	{r4}
 800a54a:	6093      	str	r3, [r2, #8]
 800a54c:	da08      	bge.n	800a560 <__sfputc_r+0x1e>
 800a54e:	6994      	ldr	r4, [r2, #24]
 800a550:	42a3      	cmp	r3, r4
 800a552:	db01      	blt.n	800a558 <__sfputc_r+0x16>
 800a554:	290a      	cmp	r1, #10
 800a556:	d103      	bne.n	800a560 <__sfputc_r+0x1e>
 800a558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a55c:	f000 b94a 	b.w	800a7f4 <__swbuf_r>
 800a560:	6813      	ldr	r3, [r2, #0]
 800a562:	1c58      	adds	r0, r3, #1
 800a564:	6010      	str	r0, [r2, #0]
 800a566:	7019      	strb	r1, [r3, #0]
 800a568:	4608      	mov	r0, r1
 800a56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <__sfputs_r>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	4606      	mov	r6, r0
 800a574:	460f      	mov	r7, r1
 800a576:	4614      	mov	r4, r2
 800a578:	18d5      	adds	r5, r2, r3
 800a57a:	42ac      	cmp	r4, r5
 800a57c:	d101      	bne.n	800a582 <__sfputs_r+0x12>
 800a57e:	2000      	movs	r0, #0
 800a580:	e007      	b.n	800a592 <__sfputs_r+0x22>
 800a582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a586:	463a      	mov	r2, r7
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff ffda 	bl	800a542 <__sfputc_r>
 800a58e:	1c43      	adds	r3, r0, #1
 800a590:	d1f3      	bne.n	800a57a <__sfputs_r+0xa>
 800a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a594 <_vfiprintf_r>:
 800a594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a598:	460d      	mov	r5, r1
 800a59a:	b09d      	sub	sp, #116	; 0x74
 800a59c:	4614      	mov	r4, r2
 800a59e:	4698      	mov	r8, r3
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	b118      	cbz	r0, 800a5ac <_vfiprintf_r+0x18>
 800a5a4:	6983      	ldr	r3, [r0, #24]
 800a5a6:	b90b      	cbnz	r3, 800a5ac <_vfiprintf_r+0x18>
 800a5a8:	f000 fb06 	bl	800abb8 <__sinit>
 800a5ac:	4b89      	ldr	r3, [pc, #548]	; (800a7d4 <_vfiprintf_r+0x240>)
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	d11b      	bne.n	800a5ea <_vfiprintf_r+0x56>
 800a5b2:	6875      	ldr	r5, [r6, #4]
 800a5b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5b6:	07d9      	lsls	r1, r3, #31
 800a5b8:	d405      	bmi.n	800a5c6 <_vfiprintf_r+0x32>
 800a5ba:	89ab      	ldrh	r3, [r5, #12]
 800a5bc:	059a      	lsls	r2, r3, #22
 800a5be:	d402      	bmi.n	800a5c6 <_vfiprintf_r+0x32>
 800a5c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5c2:	f000 fb97 	bl	800acf4 <__retarget_lock_acquire_recursive>
 800a5c6:	89ab      	ldrh	r3, [r5, #12]
 800a5c8:	071b      	lsls	r3, r3, #28
 800a5ca:	d501      	bpl.n	800a5d0 <_vfiprintf_r+0x3c>
 800a5cc:	692b      	ldr	r3, [r5, #16]
 800a5ce:	b9eb      	cbnz	r3, 800a60c <_vfiprintf_r+0x78>
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f000 f960 	bl	800a898 <__swsetup_r>
 800a5d8:	b1c0      	cbz	r0, 800a60c <_vfiprintf_r+0x78>
 800a5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5dc:	07dc      	lsls	r4, r3, #31
 800a5de:	d50e      	bpl.n	800a5fe <_vfiprintf_r+0x6a>
 800a5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e4:	b01d      	add	sp, #116	; 0x74
 800a5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ea:	4b7b      	ldr	r3, [pc, #492]	; (800a7d8 <_vfiprintf_r+0x244>)
 800a5ec:	429d      	cmp	r5, r3
 800a5ee:	d101      	bne.n	800a5f4 <_vfiprintf_r+0x60>
 800a5f0:	68b5      	ldr	r5, [r6, #8]
 800a5f2:	e7df      	b.n	800a5b4 <_vfiprintf_r+0x20>
 800a5f4:	4b79      	ldr	r3, [pc, #484]	; (800a7dc <_vfiprintf_r+0x248>)
 800a5f6:	429d      	cmp	r5, r3
 800a5f8:	bf08      	it	eq
 800a5fa:	68f5      	ldreq	r5, [r6, #12]
 800a5fc:	e7da      	b.n	800a5b4 <_vfiprintf_r+0x20>
 800a5fe:	89ab      	ldrh	r3, [r5, #12]
 800a600:	0598      	lsls	r0, r3, #22
 800a602:	d4ed      	bmi.n	800a5e0 <_vfiprintf_r+0x4c>
 800a604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a606:	f000 fb76 	bl	800acf6 <__retarget_lock_release_recursive>
 800a60a:	e7e9      	b.n	800a5e0 <_vfiprintf_r+0x4c>
 800a60c:	2300      	movs	r3, #0
 800a60e:	9309      	str	r3, [sp, #36]	; 0x24
 800a610:	2320      	movs	r3, #32
 800a612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a616:	f8cd 800c 	str.w	r8, [sp, #12]
 800a61a:	2330      	movs	r3, #48	; 0x30
 800a61c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7e0 <_vfiprintf_r+0x24c>
 800a620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a624:	f04f 0901 	mov.w	r9, #1
 800a628:	4623      	mov	r3, r4
 800a62a:	469a      	mov	sl, r3
 800a62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a630:	b10a      	cbz	r2, 800a636 <_vfiprintf_r+0xa2>
 800a632:	2a25      	cmp	r2, #37	; 0x25
 800a634:	d1f9      	bne.n	800a62a <_vfiprintf_r+0x96>
 800a636:	ebba 0b04 	subs.w	fp, sl, r4
 800a63a:	d00b      	beq.n	800a654 <_vfiprintf_r+0xc0>
 800a63c:	465b      	mov	r3, fp
 800a63e:	4622      	mov	r2, r4
 800a640:	4629      	mov	r1, r5
 800a642:	4630      	mov	r0, r6
 800a644:	f7ff ff94 	bl	800a570 <__sfputs_r>
 800a648:	3001      	adds	r0, #1
 800a64a:	f000 80aa 	beq.w	800a7a2 <_vfiprintf_r+0x20e>
 800a64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a650:	445a      	add	r2, fp
 800a652:	9209      	str	r2, [sp, #36]	; 0x24
 800a654:	f89a 3000 	ldrb.w	r3, [sl]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 80a2 	beq.w	800a7a2 <_vfiprintf_r+0x20e>
 800a65e:	2300      	movs	r3, #0
 800a660:	f04f 32ff 	mov.w	r2, #4294967295
 800a664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a668:	f10a 0a01 	add.w	sl, sl, #1
 800a66c:	9304      	str	r3, [sp, #16]
 800a66e:	9307      	str	r3, [sp, #28]
 800a670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a674:	931a      	str	r3, [sp, #104]	; 0x68
 800a676:	4654      	mov	r4, sl
 800a678:	2205      	movs	r2, #5
 800a67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a67e:	4858      	ldr	r0, [pc, #352]	; (800a7e0 <_vfiprintf_r+0x24c>)
 800a680:	f7f5 fdae 	bl	80001e0 <memchr>
 800a684:	9a04      	ldr	r2, [sp, #16]
 800a686:	b9d8      	cbnz	r0, 800a6c0 <_vfiprintf_r+0x12c>
 800a688:	06d1      	lsls	r1, r2, #27
 800a68a:	bf44      	itt	mi
 800a68c:	2320      	movmi	r3, #32
 800a68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a692:	0713      	lsls	r3, r2, #28
 800a694:	bf44      	itt	mi
 800a696:	232b      	movmi	r3, #43	; 0x2b
 800a698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a69c:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a2:	d015      	beq.n	800a6d0 <_vfiprintf_r+0x13c>
 800a6a4:	9a07      	ldr	r2, [sp, #28]
 800a6a6:	4654      	mov	r4, sl
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	f04f 0c0a 	mov.w	ip, #10
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6b4:	3b30      	subs	r3, #48	; 0x30
 800a6b6:	2b09      	cmp	r3, #9
 800a6b8:	d94e      	bls.n	800a758 <_vfiprintf_r+0x1c4>
 800a6ba:	b1b0      	cbz	r0, 800a6ea <_vfiprintf_r+0x156>
 800a6bc:	9207      	str	r2, [sp, #28]
 800a6be:	e014      	b.n	800a6ea <_vfiprintf_r+0x156>
 800a6c0:	eba0 0308 	sub.w	r3, r0, r8
 800a6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	9304      	str	r3, [sp, #16]
 800a6cc:	46a2      	mov	sl, r4
 800a6ce:	e7d2      	b.n	800a676 <_vfiprintf_r+0xe2>
 800a6d0:	9b03      	ldr	r3, [sp, #12]
 800a6d2:	1d19      	adds	r1, r3, #4
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	9103      	str	r1, [sp, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	bfbb      	ittet	lt
 800a6dc:	425b      	neglt	r3, r3
 800a6de:	f042 0202 	orrlt.w	r2, r2, #2
 800a6e2:	9307      	strge	r3, [sp, #28]
 800a6e4:	9307      	strlt	r3, [sp, #28]
 800a6e6:	bfb8      	it	lt
 800a6e8:	9204      	strlt	r2, [sp, #16]
 800a6ea:	7823      	ldrb	r3, [r4, #0]
 800a6ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ee:	d10c      	bne.n	800a70a <_vfiprintf_r+0x176>
 800a6f0:	7863      	ldrb	r3, [r4, #1]
 800a6f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6f4:	d135      	bne.n	800a762 <_vfiprintf_r+0x1ce>
 800a6f6:	9b03      	ldr	r3, [sp, #12]
 800a6f8:	1d1a      	adds	r2, r3, #4
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	9203      	str	r2, [sp, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	bfb8      	it	lt
 800a702:	f04f 33ff 	movlt.w	r3, #4294967295
 800a706:	3402      	adds	r4, #2
 800a708:	9305      	str	r3, [sp, #20]
 800a70a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a7f0 <_vfiprintf_r+0x25c>
 800a70e:	7821      	ldrb	r1, [r4, #0]
 800a710:	2203      	movs	r2, #3
 800a712:	4650      	mov	r0, sl
 800a714:	f7f5 fd64 	bl	80001e0 <memchr>
 800a718:	b140      	cbz	r0, 800a72c <_vfiprintf_r+0x198>
 800a71a:	2340      	movs	r3, #64	; 0x40
 800a71c:	eba0 000a 	sub.w	r0, r0, sl
 800a720:	fa03 f000 	lsl.w	r0, r3, r0
 800a724:	9b04      	ldr	r3, [sp, #16]
 800a726:	4303      	orrs	r3, r0
 800a728:	3401      	adds	r4, #1
 800a72a:	9304      	str	r3, [sp, #16]
 800a72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a730:	482c      	ldr	r0, [pc, #176]	; (800a7e4 <_vfiprintf_r+0x250>)
 800a732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a736:	2206      	movs	r2, #6
 800a738:	f7f5 fd52 	bl	80001e0 <memchr>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d03f      	beq.n	800a7c0 <_vfiprintf_r+0x22c>
 800a740:	4b29      	ldr	r3, [pc, #164]	; (800a7e8 <_vfiprintf_r+0x254>)
 800a742:	bb1b      	cbnz	r3, 800a78c <_vfiprintf_r+0x1f8>
 800a744:	9b03      	ldr	r3, [sp, #12]
 800a746:	3307      	adds	r3, #7
 800a748:	f023 0307 	bic.w	r3, r3, #7
 800a74c:	3308      	adds	r3, #8
 800a74e:	9303      	str	r3, [sp, #12]
 800a750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a752:	443b      	add	r3, r7
 800a754:	9309      	str	r3, [sp, #36]	; 0x24
 800a756:	e767      	b.n	800a628 <_vfiprintf_r+0x94>
 800a758:	fb0c 3202 	mla	r2, ip, r2, r3
 800a75c:	460c      	mov	r4, r1
 800a75e:	2001      	movs	r0, #1
 800a760:	e7a5      	b.n	800a6ae <_vfiprintf_r+0x11a>
 800a762:	2300      	movs	r3, #0
 800a764:	3401      	adds	r4, #1
 800a766:	9305      	str	r3, [sp, #20]
 800a768:	4619      	mov	r1, r3
 800a76a:	f04f 0c0a 	mov.w	ip, #10
 800a76e:	4620      	mov	r0, r4
 800a770:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a774:	3a30      	subs	r2, #48	; 0x30
 800a776:	2a09      	cmp	r2, #9
 800a778:	d903      	bls.n	800a782 <_vfiprintf_r+0x1ee>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0c5      	beq.n	800a70a <_vfiprintf_r+0x176>
 800a77e:	9105      	str	r1, [sp, #20]
 800a780:	e7c3      	b.n	800a70a <_vfiprintf_r+0x176>
 800a782:	fb0c 2101 	mla	r1, ip, r1, r2
 800a786:	4604      	mov	r4, r0
 800a788:	2301      	movs	r3, #1
 800a78a:	e7f0      	b.n	800a76e <_vfiprintf_r+0x1da>
 800a78c:	ab03      	add	r3, sp, #12
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	462a      	mov	r2, r5
 800a792:	4b16      	ldr	r3, [pc, #88]	; (800a7ec <_vfiprintf_r+0x258>)
 800a794:	a904      	add	r1, sp, #16
 800a796:	4630      	mov	r0, r6
 800a798:	f7fc f864 	bl	8006864 <_printf_float>
 800a79c:	4607      	mov	r7, r0
 800a79e:	1c78      	adds	r0, r7, #1
 800a7a0:	d1d6      	bne.n	800a750 <_vfiprintf_r+0x1bc>
 800a7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7a4:	07d9      	lsls	r1, r3, #31
 800a7a6:	d405      	bmi.n	800a7b4 <_vfiprintf_r+0x220>
 800a7a8:	89ab      	ldrh	r3, [r5, #12]
 800a7aa:	059a      	lsls	r2, r3, #22
 800a7ac:	d402      	bmi.n	800a7b4 <_vfiprintf_r+0x220>
 800a7ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7b0:	f000 faa1 	bl	800acf6 <__retarget_lock_release_recursive>
 800a7b4:	89ab      	ldrh	r3, [r5, #12]
 800a7b6:	065b      	lsls	r3, r3, #25
 800a7b8:	f53f af12 	bmi.w	800a5e0 <_vfiprintf_r+0x4c>
 800a7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7be:	e711      	b.n	800a5e4 <_vfiprintf_r+0x50>
 800a7c0:	ab03      	add	r3, sp, #12
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	462a      	mov	r2, r5
 800a7c6:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <_vfiprintf_r+0x258>)
 800a7c8:	a904      	add	r1, sp, #16
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f7fc faee 	bl	8006dac <_printf_i>
 800a7d0:	e7e4      	b.n	800a79c <_vfiprintf_r+0x208>
 800a7d2:	bf00      	nop
 800a7d4:	0800dafc 	.word	0x0800dafc
 800a7d8:	0800db1c 	.word	0x0800db1c
 800a7dc:	0800dadc 	.word	0x0800dadc
 800a7e0:	0800da8c 	.word	0x0800da8c
 800a7e4:	0800da96 	.word	0x0800da96
 800a7e8:	08006865 	.word	0x08006865
 800a7ec:	0800a571 	.word	0x0800a571
 800a7f0:	0800da92 	.word	0x0800da92

0800a7f4 <__swbuf_r>:
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	460e      	mov	r6, r1
 800a7f8:	4614      	mov	r4, r2
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	b118      	cbz	r0, 800a806 <__swbuf_r+0x12>
 800a7fe:	6983      	ldr	r3, [r0, #24]
 800a800:	b90b      	cbnz	r3, 800a806 <__swbuf_r+0x12>
 800a802:	f000 f9d9 	bl	800abb8 <__sinit>
 800a806:	4b21      	ldr	r3, [pc, #132]	; (800a88c <__swbuf_r+0x98>)
 800a808:	429c      	cmp	r4, r3
 800a80a:	d12b      	bne.n	800a864 <__swbuf_r+0x70>
 800a80c:	686c      	ldr	r4, [r5, #4]
 800a80e:	69a3      	ldr	r3, [r4, #24]
 800a810:	60a3      	str	r3, [r4, #8]
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	071a      	lsls	r2, r3, #28
 800a816:	d52f      	bpl.n	800a878 <__swbuf_r+0x84>
 800a818:	6923      	ldr	r3, [r4, #16]
 800a81a:	b36b      	cbz	r3, 800a878 <__swbuf_r+0x84>
 800a81c:	6923      	ldr	r3, [r4, #16]
 800a81e:	6820      	ldr	r0, [r4, #0]
 800a820:	1ac0      	subs	r0, r0, r3
 800a822:	6963      	ldr	r3, [r4, #20]
 800a824:	b2f6      	uxtb	r6, r6
 800a826:	4283      	cmp	r3, r0
 800a828:	4637      	mov	r7, r6
 800a82a:	dc04      	bgt.n	800a836 <__swbuf_r+0x42>
 800a82c:	4621      	mov	r1, r4
 800a82e:	4628      	mov	r0, r5
 800a830:	f000 f92e 	bl	800aa90 <_fflush_r>
 800a834:	bb30      	cbnz	r0, 800a884 <__swbuf_r+0x90>
 800a836:	68a3      	ldr	r3, [r4, #8]
 800a838:	3b01      	subs	r3, #1
 800a83a:	60a3      	str	r3, [r4, #8]
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	6022      	str	r2, [r4, #0]
 800a842:	701e      	strb	r6, [r3, #0]
 800a844:	6963      	ldr	r3, [r4, #20]
 800a846:	3001      	adds	r0, #1
 800a848:	4283      	cmp	r3, r0
 800a84a:	d004      	beq.n	800a856 <__swbuf_r+0x62>
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	07db      	lsls	r3, r3, #31
 800a850:	d506      	bpl.n	800a860 <__swbuf_r+0x6c>
 800a852:	2e0a      	cmp	r6, #10
 800a854:	d104      	bne.n	800a860 <__swbuf_r+0x6c>
 800a856:	4621      	mov	r1, r4
 800a858:	4628      	mov	r0, r5
 800a85a:	f000 f919 	bl	800aa90 <_fflush_r>
 800a85e:	b988      	cbnz	r0, 800a884 <__swbuf_r+0x90>
 800a860:	4638      	mov	r0, r7
 800a862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <__swbuf_r+0x9c>)
 800a866:	429c      	cmp	r4, r3
 800a868:	d101      	bne.n	800a86e <__swbuf_r+0x7a>
 800a86a:	68ac      	ldr	r4, [r5, #8]
 800a86c:	e7cf      	b.n	800a80e <__swbuf_r+0x1a>
 800a86e:	4b09      	ldr	r3, [pc, #36]	; (800a894 <__swbuf_r+0xa0>)
 800a870:	429c      	cmp	r4, r3
 800a872:	bf08      	it	eq
 800a874:	68ec      	ldreq	r4, [r5, #12]
 800a876:	e7ca      	b.n	800a80e <__swbuf_r+0x1a>
 800a878:	4621      	mov	r1, r4
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 f80c 	bl	800a898 <__swsetup_r>
 800a880:	2800      	cmp	r0, #0
 800a882:	d0cb      	beq.n	800a81c <__swbuf_r+0x28>
 800a884:	f04f 37ff 	mov.w	r7, #4294967295
 800a888:	e7ea      	b.n	800a860 <__swbuf_r+0x6c>
 800a88a:	bf00      	nop
 800a88c:	0800dafc 	.word	0x0800dafc
 800a890:	0800db1c 	.word	0x0800db1c
 800a894:	0800dadc 	.word	0x0800dadc

0800a898 <__swsetup_r>:
 800a898:	4b32      	ldr	r3, [pc, #200]	; (800a964 <__swsetup_r+0xcc>)
 800a89a:	b570      	push	{r4, r5, r6, lr}
 800a89c:	681d      	ldr	r5, [r3, #0]
 800a89e:	4606      	mov	r6, r0
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	b125      	cbz	r5, 800a8ae <__swsetup_r+0x16>
 800a8a4:	69ab      	ldr	r3, [r5, #24]
 800a8a6:	b913      	cbnz	r3, 800a8ae <__swsetup_r+0x16>
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	f000 f985 	bl	800abb8 <__sinit>
 800a8ae:	4b2e      	ldr	r3, [pc, #184]	; (800a968 <__swsetup_r+0xd0>)
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	d10f      	bne.n	800a8d4 <__swsetup_r+0x3c>
 800a8b4:	686c      	ldr	r4, [r5, #4]
 800a8b6:	89a3      	ldrh	r3, [r4, #12]
 800a8b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8bc:	0719      	lsls	r1, r3, #28
 800a8be:	d42c      	bmi.n	800a91a <__swsetup_r+0x82>
 800a8c0:	06dd      	lsls	r5, r3, #27
 800a8c2:	d411      	bmi.n	800a8e8 <__swsetup_r+0x50>
 800a8c4:	2309      	movs	r3, #9
 800a8c6:	6033      	str	r3, [r6, #0]
 800a8c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8cc:	81a3      	strh	r3, [r4, #12]
 800a8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d2:	e03e      	b.n	800a952 <__swsetup_r+0xba>
 800a8d4:	4b25      	ldr	r3, [pc, #148]	; (800a96c <__swsetup_r+0xd4>)
 800a8d6:	429c      	cmp	r4, r3
 800a8d8:	d101      	bne.n	800a8de <__swsetup_r+0x46>
 800a8da:	68ac      	ldr	r4, [r5, #8]
 800a8dc:	e7eb      	b.n	800a8b6 <__swsetup_r+0x1e>
 800a8de:	4b24      	ldr	r3, [pc, #144]	; (800a970 <__swsetup_r+0xd8>)
 800a8e0:	429c      	cmp	r4, r3
 800a8e2:	bf08      	it	eq
 800a8e4:	68ec      	ldreq	r4, [r5, #12]
 800a8e6:	e7e6      	b.n	800a8b6 <__swsetup_r+0x1e>
 800a8e8:	0758      	lsls	r0, r3, #29
 800a8ea:	d512      	bpl.n	800a912 <__swsetup_r+0x7a>
 800a8ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ee:	b141      	cbz	r1, 800a902 <__swsetup_r+0x6a>
 800a8f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8f4:	4299      	cmp	r1, r3
 800a8f6:	d002      	beq.n	800a8fe <__swsetup_r+0x66>
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	f7ff fb41 	bl	8009f80 <_free_r>
 800a8fe:	2300      	movs	r3, #0
 800a900:	6363      	str	r3, [r4, #52]	; 0x34
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	2300      	movs	r3, #0
 800a90c:	6063      	str	r3, [r4, #4]
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	6023      	str	r3, [r4, #0]
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	f043 0308 	orr.w	r3, r3, #8
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	b94b      	cbnz	r3, 800a932 <__swsetup_r+0x9a>
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a928:	d003      	beq.n	800a932 <__swsetup_r+0x9a>
 800a92a:	4621      	mov	r1, r4
 800a92c:	4630      	mov	r0, r6
 800a92e:	f000 fa09 	bl	800ad44 <__smakebuf_r>
 800a932:	89a0      	ldrh	r0, [r4, #12]
 800a934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a938:	f010 0301 	ands.w	r3, r0, #1
 800a93c:	d00a      	beq.n	800a954 <__swsetup_r+0xbc>
 800a93e:	2300      	movs	r3, #0
 800a940:	60a3      	str	r3, [r4, #8]
 800a942:	6963      	ldr	r3, [r4, #20]
 800a944:	425b      	negs	r3, r3
 800a946:	61a3      	str	r3, [r4, #24]
 800a948:	6923      	ldr	r3, [r4, #16]
 800a94a:	b943      	cbnz	r3, 800a95e <__swsetup_r+0xc6>
 800a94c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a950:	d1ba      	bne.n	800a8c8 <__swsetup_r+0x30>
 800a952:	bd70      	pop	{r4, r5, r6, pc}
 800a954:	0781      	lsls	r1, r0, #30
 800a956:	bf58      	it	pl
 800a958:	6963      	ldrpl	r3, [r4, #20]
 800a95a:	60a3      	str	r3, [r4, #8]
 800a95c:	e7f4      	b.n	800a948 <__swsetup_r+0xb0>
 800a95e:	2000      	movs	r0, #0
 800a960:	e7f7      	b.n	800a952 <__swsetup_r+0xba>
 800a962:	bf00      	nop
 800a964:	2000004c 	.word	0x2000004c
 800a968:	0800dafc 	.word	0x0800dafc
 800a96c:	0800db1c 	.word	0x0800db1c
 800a970:	0800dadc 	.word	0x0800dadc

0800a974 <abort>:
 800a974:	b508      	push	{r3, lr}
 800a976:	2006      	movs	r0, #6
 800a978:	f000 fa54 	bl	800ae24 <raise>
 800a97c:	2001      	movs	r0, #1
 800a97e:	f7f8 fe91 	bl	80036a4 <_exit>
	...

0800a984 <__sflush_r>:
 800a984:	898a      	ldrh	r2, [r1, #12]
 800a986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a98a:	4605      	mov	r5, r0
 800a98c:	0710      	lsls	r0, r2, #28
 800a98e:	460c      	mov	r4, r1
 800a990:	d458      	bmi.n	800aa44 <__sflush_r+0xc0>
 800a992:	684b      	ldr	r3, [r1, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	dc05      	bgt.n	800a9a4 <__sflush_r+0x20>
 800a998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	dc02      	bgt.n	800a9a4 <__sflush_r+0x20>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9a6:	2e00      	cmp	r6, #0
 800a9a8:	d0f9      	beq.n	800a99e <__sflush_r+0x1a>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9b0:	682f      	ldr	r7, [r5, #0]
 800a9b2:	602b      	str	r3, [r5, #0]
 800a9b4:	d032      	beq.n	800aa1c <__sflush_r+0x98>
 800a9b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	075a      	lsls	r2, r3, #29
 800a9bc:	d505      	bpl.n	800a9ca <__sflush_r+0x46>
 800a9be:	6863      	ldr	r3, [r4, #4]
 800a9c0:	1ac0      	subs	r0, r0, r3
 800a9c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9c4:	b10b      	cbz	r3, 800a9ca <__sflush_r+0x46>
 800a9c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9c8:	1ac0      	subs	r0, r0, r3
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9d0:	6a21      	ldr	r1, [r4, #32]
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	47b0      	blx	r6
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	d106      	bne.n	800a9ea <__sflush_r+0x66>
 800a9dc:	6829      	ldr	r1, [r5, #0]
 800a9de:	291d      	cmp	r1, #29
 800a9e0:	d82c      	bhi.n	800aa3c <__sflush_r+0xb8>
 800a9e2:	4a2a      	ldr	r2, [pc, #168]	; (800aa8c <__sflush_r+0x108>)
 800a9e4:	40ca      	lsrs	r2, r1
 800a9e6:	07d6      	lsls	r6, r2, #31
 800a9e8:	d528      	bpl.n	800aa3c <__sflush_r+0xb8>
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	6062      	str	r2, [r4, #4]
 800a9ee:	04d9      	lsls	r1, r3, #19
 800a9f0:	6922      	ldr	r2, [r4, #16]
 800a9f2:	6022      	str	r2, [r4, #0]
 800a9f4:	d504      	bpl.n	800aa00 <__sflush_r+0x7c>
 800a9f6:	1c42      	adds	r2, r0, #1
 800a9f8:	d101      	bne.n	800a9fe <__sflush_r+0x7a>
 800a9fa:	682b      	ldr	r3, [r5, #0]
 800a9fc:	b903      	cbnz	r3, 800aa00 <__sflush_r+0x7c>
 800a9fe:	6560      	str	r0, [r4, #84]	; 0x54
 800aa00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa02:	602f      	str	r7, [r5, #0]
 800aa04:	2900      	cmp	r1, #0
 800aa06:	d0ca      	beq.n	800a99e <__sflush_r+0x1a>
 800aa08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa0c:	4299      	cmp	r1, r3
 800aa0e:	d002      	beq.n	800aa16 <__sflush_r+0x92>
 800aa10:	4628      	mov	r0, r5
 800aa12:	f7ff fab5 	bl	8009f80 <_free_r>
 800aa16:	2000      	movs	r0, #0
 800aa18:	6360      	str	r0, [r4, #52]	; 0x34
 800aa1a:	e7c1      	b.n	800a9a0 <__sflush_r+0x1c>
 800aa1c:	6a21      	ldr	r1, [r4, #32]
 800aa1e:	2301      	movs	r3, #1
 800aa20:	4628      	mov	r0, r5
 800aa22:	47b0      	blx	r6
 800aa24:	1c41      	adds	r1, r0, #1
 800aa26:	d1c7      	bne.n	800a9b8 <__sflush_r+0x34>
 800aa28:	682b      	ldr	r3, [r5, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0c4      	beq.n	800a9b8 <__sflush_r+0x34>
 800aa2e:	2b1d      	cmp	r3, #29
 800aa30:	d001      	beq.n	800aa36 <__sflush_r+0xb2>
 800aa32:	2b16      	cmp	r3, #22
 800aa34:	d101      	bne.n	800aa3a <__sflush_r+0xb6>
 800aa36:	602f      	str	r7, [r5, #0]
 800aa38:	e7b1      	b.n	800a99e <__sflush_r+0x1a>
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa40:	81a3      	strh	r3, [r4, #12]
 800aa42:	e7ad      	b.n	800a9a0 <__sflush_r+0x1c>
 800aa44:	690f      	ldr	r7, [r1, #16]
 800aa46:	2f00      	cmp	r7, #0
 800aa48:	d0a9      	beq.n	800a99e <__sflush_r+0x1a>
 800aa4a:	0793      	lsls	r3, r2, #30
 800aa4c:	680e      	ldr	r6, [r1, #0]
 800aa4e:	bf08      	it	eq
 800aa50:	694b      	ldreq	r3, [r1, #20]
 800aa52:	600f      	str	r7, [r1, #0]
 800aa54:	bf18      	it	ne
 800aa56:	2300      	movne	r3, #0
 800aa58:	eba6 0807 	sub.w	r8, r6, r7
 800aa5c:	608b      	str	r3, [r1, #8]
 800aa5e:	f1b8 0f00 	cmp.w	r8, #0
 800aa62:	dd9c      	ble.n	800a99e <__sflush_r+0x1a>
 800aa64:	6a21      	ldr	r1, [r4, #32]
 800aa66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa68:	4643      	mov	r3, r8
 800aa6a:	463a      	mov	r2, r7
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b0      	blx	r6
 800aa70:	2800      	cmp	r0, #0
 800aa72:	dc06      	bgt.n	800aa82 <__sflush_r+0xfe>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa7a:	81a3      	strh	r3, [r4, #12]
 800aa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa80:	e78e      	b.n	800a9a0 <__sflush_r+0x1c>
 800aa82:	4407      	add	r7, r0
 800aa84:	eba8 0800 	sub.w	r8, r8, r0
 800aa88:	e7e9      	b.n	800aa5e <__sflush_r+0xda>
 800aa8a:	bf00      	nop
 800aa8c:	20400001 	.word	0x20400001

0800aa90 <_fflush_r>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	690b      	ldr	r3, [r1, #16]
 800aa94:	4605      	mov	r5, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	b913      	cbnz	r3, 800aaa0 <_fflush_r+0x10>
 800aa9a:	2500      	movs	r5, #0
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	bd38      	pop	{r3, r4, r5, pc}
 800aaa0:	b118      	cbz	r0, 800aaaa <_fflush_r+0x1a>
 800aaa2:	6983      	ldr	r3, [r0, #24]
 800aaa4:	b90b      	cbnz	r3, 800aaaa <_fflush_r+0x1a>
 800aaa6:	f000 f887 	bl	800abb8 <__sinit>
 800aaaa:	4b14      	ldr	r3, [pc, #80]	; (800aafc <_fflush_r+0x6c>)
 800aaac:	429c      	cmp	r4, r3
 800aaae:	d11b      	bne.n	800aae8 <_fflush_r+0x58>
 800aab0:	686c      	ldr	r4, [r5, #4]
 800aab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0ef      	beq.n	800aa9a <_fflush_r+0xa>
 800aaba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aabc:	07d0      	lsls	r0, r2, #31
 800aabe:	d404      	bmi.n	800aaca <_fflush_r+0x3a>
 800aac0:	0599      	lsls	r1, r3, #22
 800aac2:	d402      	bmi.n	800aaca <_fflush_r+0x3a>
 800aac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aac6:	f000 f915 	bl	800acf4 <__retarget_lock_acquire_recursive>
 800aaca:	4628      	mov	r0, r5
 800aacc:	4621      	mov	r1, r4
 800aace:	f7ff ff59 	bl	800a984 <__sflush_r>
 800aad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aad4:	07da      	lsls	r2, r3, #31
 800aad6:	4605      	mov	r5, r0
 800aad8:	d4e0      	bmi.n	800aa9c <_fflush_r+0xc>
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	059b      	lsls	r3, r3, #22
 800aade:	d4dd      	bmi.n	800aa9c <_fflush_r+0xc>
 800aae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aae2:	f000 f908 	bl	800acf6 <__retarget_lock_release_recursive>
 800aae6:	e7d9      	b.n	800aa9c <_fflush_r+0xc>
 800aae8:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <_fflush_r+0x70>)
 800aaea:	429c      	cmp	r4, r3
 800aaec:	d101      	bne.n	800aaf2 <_fflush_r+0x62>
 800aaee:	68ac      	ldr	r4, [r5, #8]
 800aaf0:	e7df      	b.n	800aab2 <_fflush_r+0x22>
 800aaf2:	4b04      	ldr	r3, [pc, #16]	; (800ab04 <_fflush_r+0x74>)
 800aaf4:	429c      	cmp	r4, r3
 800aaf6:	bf08      	it	eq
 800aaf8:	68ec      	ldreq	r4, [r5, #12]
 800aafa:	e7da      	b.n	800aab2 <_fflush_r+0x22>
 800aafc:	0800dafc 	.word	0x0800dafc
 800ab00:	0800db1c 	.word	0x0800db1c
 800ab04:	0800dadc 	.word	0x0800dadc

0800ab08 <std>:
 800ab08:	2300      	movs	r3, #0
 800ab0a:	b510      	push	{r4, lr}
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab16:	6083      	str	r3, [r0, #8]
 800ab18:	8181      	strh	r1, [r0, #12]
 800ab1a:	6643      	str	r3, [r0, #100]	; 0x64
 800ab1c:	81c2      	strh	r2, [r0, #14]
 800ab1e:	6183      	str	r3, [r0, #24]
 800ab20:	4619      	mov	r1, r3
 800ab22:	2208      	movs	r2, #8
 800ab24:	305c      	adds	r0, #92	; 0x5c
 800ab26:	f7fb fdf5 	bl	8006714 <memset>
 800ab2a:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <std+0x38>)
 800ab2c:	6263      	str	r3, [r4, #36]	; 0x24
 800ab2e:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <std+0x3c>)
 800ab30:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab32:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <std+0x40>)
 800ab34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab36:	4b05      	ldr	r3, [pc, #20]	; (800ab4c <std+0x44>)
 800ab38:	6224      	str	r4, [r4, #32]
 800ab3a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab3c:	bd10      	pop	{r4, pc}
 800ab3e:	bf00      	nop
 800ab40:	0800ae5d 	.word	0x0800ae5d
 800ab44:	0800ae7f 	.word	0x0800ae7f
 800ab48:	0800aeb7 	.word	0x0800aeb7
 800ab4c:	0800aedb 	.word	0x0800aedb

0800ab50 <_cleanup_r>:
 800ab50:	4901      	ldr	r1, [pc, #4]	; (800ab58 <_cleanup_r+0x8>)
 800ab52:	f000 b8af 	b.w	800acb4 <_fwalk_reent>
 800ab56:	bf00      	nop
 800ab58:	0800aa91 	.word	0x0800aa91

0800ab5c <__sfmoreglue>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	2268      	movs	r2, #104	; 0x68
 800ab60:	1e4d      	subs	r5, r1, #1
 800ab62:	4355      	muls	r5, r2
 800ab64:	460e      	mov	r6, r1
 800ab66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab6a:	f7ff fa75 	bl	800a058 <_malloc_r>
 800ab6e:	4604      	mov	r4, r0
 800ab70:	b140      	cbz	r0, 800ab84 <__sfmoreglue+0x28>
 800ab72:	2100      	movs	r1, #0
 800ab74:	e9c0 1600 	strd	r1, r6, [r0]
 800ab78:	300c      	adds	r0, #12
 800ab7a:	60a0      	str	r0, [r4, #8]
 800ab7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab80:	f7fb fdc8 	bl	8006714 <memset>
 800ab84:	4620      	mov	r0, r4
 800ab86:	bd70      	pop	{r4, r5, r6, pc}

0800ab88 <__sfp_lock_acquire>:
 800ab88:	4801      	ldr	r0, [pc, #4]	; (800ab90 <__sfp_lock_acquire+0x8>)
 800ab8a:	f000 b8b3 	b.w	800acf4 <__retarget_lock_acquire_recursive>
 800ab8e:	bf00      	nop
 800ab90:	20000995 	.word	0x20000995

0800ab94 <__sfp_lock_release>:
 800ab94:	4801      	ldr	r0, [pc, #4]	; (800ab9c <__sfp_lock_release+0x8>)
 800ab96:	f000 b8ae 	b.w	800acf6 <__retarget_lock_release_recursive>
 800ab9a:	bf00      	nop
 800ab9c:	20000995 	.word	0x20000995

0800aba0 <__sinit_lock_acquire>:
 800aba0:	4801      	ldr	r0, [pc, #4]	; (800aba8 <__sinit_lock_acquire+0x8>)
 800aba2:	f000 b8a7 	b.w	800acf4 <__retarget_lock_acquire_recursive>
 800aba6:	bf00      	nop
 800aba8:	20000996 	.word	0x20000996

0800abac <__sinit_lock_release>:
 800abac:	4801      	ldr	r0, [pc, #4]	; (800abb4 <__sinit_lock_release+0x8>)
 800abae:	f000 b8a2 	b.w	800acf6 <__retarget_lock_release_recursive>
 800abb2:	bf00      	nop
 800abb4:	20000996 	.word	0x20000996

0800abb8 <__sinit>:
 800abb8:	b510      	push	{r4, lr}
 800abba:	4604      	mov	r4, r0
 800abbc:	f7ff fff0 	bl	800aba0 <__sinit_lock_acquire>
 800abc0:	69a3      	ldr	r3, [r4, #24]
 800abc2:	b11b      	cbz	r3, 800abcc <__sinit+0x14>
 800abc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc8:	f7ff bff0 	b.w	800abac <__sinit_lock_release>
 800abcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abd0:	6523      	str	r3, [r4, #80]	; 0x50
 800abd2:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <__sinit+0x68>)
 800abd4:	4a13      	ldr	r2, [pc, #76]	; (800ac24 <__sinit+0x6c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	62a2      	str	r2, [r4, #40]	; 0x28
 800abda:	42a3      	cmp	r3, r4
 800abdc:	bf04      	itt	eq
 800abde:	2301      	moveq	r3, #1
 800abe0:	61a3      	streq	r3, [r4, #24]
 800abe2:	4620      	mov	r0, r4
 800abe4:	f000 f820 	bl	800ac28 <__sfp>
 800abe8:	6060      	str	r0, [r4, #4]
 800abea:	4620      	mov	r0, r4
 800abec:	f000 f81c 	bl	800ac28 <__sfp>
 800abf0:	60a0      	str	r0, [r4, #8]
 800abf2:	4620      	mov	r0, r4
 800abf4:	f000 f818 	bl	800ac28 <__sfp>
 800abf8:	2200      	movs	r2, #0
 800abfa:	60e0      	str	r0, [r4, #12]
 800abfc:	2104      	movs	r1, #4
 800abfe:	6860      	ldr	r0, [r4, #4]
 800ac00:	f7ff ff82 	bl	800ab08 <std>
 800ac04:	68a0      	ldr	r0, [r4, #8]
 800ac06:	2201      	movs	r2, #1
 800ac08:	2109      	movs	r1, #9
 800ac0a:	f7ff ff7d 	bl	800ab08 <std>
 800ac0e:	68e0      	ldr	r0, [r4, #12]
 800ac10:	2202      	movs	r2, #2
 800ac12:	2112      	movs	r1, #18
 800ac14:	f7ff ff78 	bl	800ab08 <std>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	61a3      	str	r3, [r4, #24]
 800ac1c:	e7d2      	b.n	800abc4 <__sinit+0xc>
 800ac1e:	bf00      	nop
 800ac20:	0800d694 	.word	0x0800d694
 800ac24:	0800ab51 	.word	0x0800ab51

0800ac28 <__sfp>:
 800ac28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2a:	4607      	mov	r7, r0
 800ac2c:	f7ff ffac 	bl	800ab88 <__sfp_lock_acquire>
 800ac30:	4b1e      	ldr	r3, [pc, #120]	; (800acac <__sfp+0x84>)
 800ac32:	681e      	ldr	r6, [r3, #0]
 800ac34:	69b3      	ldr	r3, [r6, #24]
 800ac36:	b913      	cbnz	r3, 800ac3e <__sfp+0x16>
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f7ff ffbd 	bl	800abb8 <__sinit>
 800ac3e:	3648      	adds	r6, #72	; 0x48
 800ac40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	d503      	bpl.n	800ac50 <__sfp+0x28>
 800ac48:	6833      	ldr	r3, [r6, #0]
 800ac4a:	b30b      	cbz	r3, 800ac90 <__sfp+0x68>
 800ac4c:	6836      	ldr	r6, [r6, #0]
 800ac4e:	e7f7      	b.n	800ac40 <__sfp+0x18>
 800ac50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac54:	b9d5      	cbnz	r5, 800ac8c <__sfp+0x64>
 800ac56:	4b16      	ldr	r3, [pc, #88]	; (800acb0 <__sfp+0x88>)
 800ac58:	60e3      	str	r3, [r4, #12]
 800ac5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac5e:	6665      	str	r5, [r4, #100]	; 0x64
 800ac60:	f000 f847 	bl	800acf2 <__retarget_lock_init_recursive>
 800ac64:	f7ff ff96 	bl	800ab94 <__sfp_lock_release>
 800ac68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac70:	6025      	str	r5, [r4, #0]
 800ac72:	61a5      	str	r5, [r4, #24]
 800ac74:	2208      	movs	r2, #8
 800ac76:	4629      	mov	r1, r5
 800ac78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac7c:	f7fb fd4a 	bl	8006714 <memset>
 800ac80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac88:	4620      	mov	r0, r4
 800ac8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac8c:	3468      	adds	r4, #104	; 0x68
 800ac8e:	e7d9      	b.n	800ac44 <__sfp+0x1c>
 800ac90:	2104      	movs	r1, #4
 800ac92:	4638      	mov	r0, r7
 800ac94:	f7ff ff62 	bl	800ab5c <__sfmoreglue>
 800ac98:	4604      	mov	r4, r0
 800ac9a:	6030      	str	r0, [r6, #0]
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d1d5      	bne.n	800ac4c <__sfp+0x24>
 800aca0:	f7ff ff78 	bl	800ab94 <__sfp_lock_release>
 800aca4:	230c      	movs	r3, #12
 800aca6:	603b      	str	r3, [r7, #0]
 800aca8:	e7ee      	b.n	800ac88 <__sfp+0x60>
 800acaa:	bf00      	nop
 800acac:	0800d694 	.word	0x0800d694
 800acb0:	ffff0001 	.word	0xffff0001

0800acb4 <_fwalk_reent>:
 800acb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb8:	4606      	mov	r6, r0
 800acba:	4688      	mov	r8, r1
 800acbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acc0:	2700      	movs	r7, #0
 800acc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acc6:	f1b9 0901 	subs.w	r9, r9, #1
 800acca:	d505      	bpl.n	800acd8 <_fwalk_reent+0x24>
 800accc:	6824      	ldr	r4, [r4, #0]
 800acce:	2c00      	cmp	r4, #0
 800acd0:	d1f7      	bne.n	800acc2 <_fwalk_reent+0xe>
 800acd2:	4638      	mov	r0, r7
 800acd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd8:	89ab      	ldrh	r3, [r5, #12]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d907      	bls.n	800acee <_fwalk_reent+0x3a>
 800acde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ace2:	3301      	adds	r3, #1
 800ace4:	d003      	beq.n	800acee <_fwalk_reent+0x3a>
 800ace6:	4629      	mov	r1, r5
 800ace8:	4630      	mov	r0, r6
 800acea:	47c0      	blx	r8
 800acec:	4307      	orrs	r7, r0
 800acee:	3568      	adds	r5, #104	; 0x68
 800acf0:	e7e9      	b.n	800acc6 <_fwalk_reent+0x12>

0800acf2 <__retarget_lock_init_recursive>:
 800acf2:	4770      	bx	lr

0800acf4 <__retarget_lock_acquire_recursive>:
 800acf4:	4770      	bx	lr

0800acf6 <__retarget_lock_release_recursive>:
 800acf6:	4770      	bx	lr

0800acf8 <__swhatbuf_r>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	460e      	mov	r6, r1
 800acfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad00:	2900      	cmp	r1, #0
 800ad02:	b096      	sub	sp, #88	; 0x58
 800ad04:	4614      	mov	r4, r2
 800ad06:	461d      	mov	r5, r3
 800ad08:	da08      	bge.n	800ad1c <__swhatbuf_r+0x24>
 800ad0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	602a      	str	r2, [r5, #0]
 800ad12:	061a      	lsls	r2, r3, #24
 800ad14:	d410      	bmi.n	800ad38 <__swhatbuf_r+0x40>
 800ad16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad1a:	e00e      	b.n	800ad3a <__swhatbuf_r+0x42>
 800ad1c:	466a      	mov	r2, sp
 800ad1e:	f000 f903 	bl	800af28 <_fstat_r>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	dbf1      	blt.n	800ad0a <__swhatbuf_r+0x12>
 800ad26:	9a01      	ldr	r2, [sp, #4]
 800ad28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad30:	425a      	negs	r2, r3
 800ad32:	415a      	adcs	r2, r3
 800ad34:	602a      	str	r2, [r5, #0]
 800ad36:	e7ee      	b.n	800ad16 <__swhatbuf_r+0x1e>
 800ad38:	2340      	movs	r3, #64	; 0x40
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	b016      	add	sp, #88	; 0x58
 800ad40:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad44 <__smakebuf_r>:
 800ad44:	898b      	ldrh	r3, [r1, #12]
 800ad46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad48:	079d      	lsls	r5, r3, #30
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460c      	mov	r4, r1
 800ad4e:	d507      	bpl.n	800ad60 <__smakebuf_r+0x1c>
 800ad50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	6123      	str	r3, [r4, #16]
 800ad58:	2301      	movs	r3, #1
 800ad5a:	6163      	str	r3, [r4, #20]
 800ad5c:	b002      	add	sp, #8
 800ad5e:	bd70      	pop	{r4, r5, r6, pc}
 800ad60:	ab01      	add	r3, sp, #4
 800ad62:	466a      	mov	r2, sp
 800ad64:	f7ff ffc8 	bl	800acf8 <__swhatbuf_r>
 800ad68:	9900      	ldr	r1, [sp, #0]
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	f7ff f973 	bl	800a058 <_malloc_r>
 800ad72:	b948      	cbnz	r0, 800ad88 <__smakebuf_r+0x44>
 800ad74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad78:	059a      	lsls	r2, r3, #22
 800ad7a:	d4ef      	bmi.n	800ad5c <__smakebuf_r+0x18>
 800ad7c:	f023 0303 	bic.w	r3, r3, #3
 800ad80:	f043 0302 	orr.w	r3, r3, #2
 800ad84:	81a3      	strh	r3, [r4, #12]
 800ad86:	e7e3      	b.n	800ad50 <__smakebuf_r+0xc>
 800ad88:	4b0d      	ldr	r3, [pc, #52]	; (800adc0 <__smakebuf_r+0x7c>)
 800ad8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	6020      	str	r0, [r4, #0]
 800ad90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad94:	81a3      	strh	r3, [r4, #12]
 800ad96:	9b00      	ldr	r3, [sp, #0]
 800ad98:	6163      	str	r3, [r4, #20]
 800ad9a:	9b01      	ldr	r3, [sp, #4]
 800ad9c:	6120      	str	r0, [r4, #16]
 800ad9e:	b15b      	cbz	r3, 800adb8 <__smakebuf_r+0x74>
 800ada0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ada4:	4630      	mov	r0, r6
 800ada6:	f000 f8d1 	bl	800af4c <_isatty_r>
 800adaa:	b128      	cbz	r0, 800adb8 <__smakebuf_r+0x74>
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	f023 0303 	bic.w	r3, r3, #3
 800adb2:	f043 0301 	orr.w	r3, r3, #1
 800adb6:	81a3      	strh	r3, [r4, #12]
 800adb8:	89a0      	ldrh	r0, [r4, #12]
 800adba:	4305      	orrs	r5, r0
 800adbc:	81a5      	strh	r5, [r4, #12]
 800adbe:	e7cd      	b.n	800ad5c <__smakebuf_r+0x18>
 800adc0:	0800ab51 	.word	0x0800ab51

0800adc4 <_malloc_usable_size_r>:
 800adc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc8:	1f18      	subs	r0, r3, #4
 800adca:	2b00      	cmp	r3, #0
 800adcc:	bfbc      	itt	lt
 800adce:	580b      	ldrlt	r3, [r1, r0]
 800add0:	18c0      	addlt	r0, r0, r3
 800add2:	4770      	bx	lr

0800add4 <_raise_r>:
 800add4:	291f      	cmp	r1, #31
 800add6:	b538      	push	{r3, r4, r5, lr}
 800add8:	4604      	mov	r4, r0
 800adda:	460d      	mov	r5, r1
 800addc:	d904      	bls.n	800ade8 <_raise_r+0x14>
 800adde:	2316      	movs	r3, #22
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	f04f 30ff 	mov.w	r0, #4294967295
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adea:	b112      	cbz	r2, 800adf2 <_raise_r+0x1e>
 800adec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adf0:	b94b      	cbnz	r3, 800ae06 <_raise_r+0x32>
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 f830 	bl	800ae58 <_getpid_r>
 800adf8:	462a      	mov	r2, r5
 800adfa:	4601      	mov	r1, r0
 800adfc:	4620      	mov	r0, r4
 800adfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae02:	f000 b817 	b.w	800ae34 <_kill_r>
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d00a      	beq.n	800ae20 <_raise_r+0x4c>
 800ae0a:	1c59      	adds	r1, r3, #1
 800ae0c:	d103      	bne.n	800ae16 <_raise_r+0x42>
 800ae0e:	2316      	movs	r3, #22
 800ae10:	6003      	str	r3, [r0, #0]
 800ae12:	2001      	movs	r0, #1
 800ae14:	e7e7      	b.n	800ade6 <_raise_r+0x12>
 800ae16:	2400      	movs	r4, #0
 800ae18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	4798      	blx	r3
 800ae20:	2000      	movs	r0, #0
 800ae22:	e7e0      	b.n	800ade6 <_raise_r+0x12>

0800ae24 <raise>:
 800ae24:	4b02      	ldr	r3, [pc, #8]	; (800ae30 <raise+0xc>)
 800ae26:	4601      	mov	r1, r0
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	f7ff bfd3 	b.w	800add4 <_raise_r>
 800ae2e:	bf00      	nop
 800ae30:	2000004c 	.word	0x2000004c

0800ae34 <_kill_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4d07      	ldr	r5, [pc, #28]	; (800ae54 <_kill_r+0x20>)
 800ae38:	2300      	movs	r3, #0
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	4608      	mov	r0, r1
 800ae3e:	4611      	mov	r1, r2
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	f7f8 fc1f 	bl	8003684 <_kill>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d102      	bne.n	800ae50 <_kill_r+0x1c>
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	b103      	cbz	r3, 800ae50 <_kill_r+0x1c>
 800ae4e:	6023      	str	r3, [r4, #0]
 800ae50:	bd38      	pop	{r3, r4, r5, pc}
 800ae52:	bf00      	nop
 800ae54:	20000990 	.word	0x20000990

0800ae58 <_getpid_r>:
 800ae58:	f7f8 bc0c 	b.w	8003674 <_getpid>

0800ae5c <__sread>:
 800ae5c:	b510      	push	{r4, lr}
 800ae5e:	460c      	mov	r4, r1
 800ae60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae64:	f000 f894 	bl	800af90 <_read_r>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	bfab      	itete	ge
 800ae6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae70:	181b      	addge	r3, r3, r0
 800ae72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae76:	bfac      	ite	ge
 800ae78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae7a:	81a3      	strhlt	r3, [r4, #12]
 800ae7c:	bd10      	pop	{r4, pc}

0800ae7e <__swrite>:
 800ae7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae82:	461f      	mov	r7, r3
 800ae84:	898b      	ldrh	r3, [r1, #12]
 800ae86:	05db      	lsls	r3, r3, #23
 800ae88:	4605      	mov	r5, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	4616      	mov	r6, r2
 800ae8e:	d505      	bpl.n	800ae9c <__swrite+0x1e>
 800ae90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae94:	2302      	movs	r3, #2
 800ae96:	2200      	movs	r2, #0
 800ae98:	f000 f868 	bl	800af6c <_lseek_r>
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aea6:	81a3      	strh	r3, [r4, #12]
 800aea8:	4632      	mov	r2, r6
 800aeaa:	463b      	mov	r3, r7
 800aeac:	4628      	mov	r0, r5
 800aeae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb2:	f000 b817 	b.w	800aee4 <_write_r>

0800aeb6 <__sseek>:
 800aeb6:	b510      	push	{r4, lr}
 800aeb8:	460c      	mov	r4, r1
 800aeba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aebe:	f000 f855 	bl	800af6c <_lseek_r>
 800aec2:	1c43      	adds	r3, r0, #1
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	bf15      	itete	ne
 800aec8:	6560      	strne	r0, [r4, #84]	; 0x54
 800aeca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aed2:	81a3      	strheq	r3, [r4, #12]
 800aed4:	bf18      	it	ne
 800aed6:	81a3      	strhne	r3, [r4, #12]
 800aed8:	bd10      	pop	{r4, pc}

0800aeda <__sclose>:
 800aeda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aede:	f000 b813 	b.w	800af08 <_close_r>
	...

0800aee4 <_write_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	4d07      	ldr	r5, [pc, #28]	; (800af04 <_write_r+0x20>)
 800aee8:	4604      	mov	r4, r0
 800aeea:	4608      	mov	r0, r1
 800aeec:	4611      	mov	r1, r2
 800aeee:	2200      	movs	r2, #0
 800aef0:	602a      	str	r2, [r5, #0]
 800aef2:	461a      	mov	r2, r3
 800aef4:	f7f8 fbfd 	bl	80036f2 <_write>
 800aef8:	1c43      	adds	r3, r0, #1
 800aefa:	d102      	bne.n	800af02 <_write_r+0x1e>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	b103      	cbz	r3, 800af02 <_write_r+0x1e>
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	bd38      	pop	{r3, r4, r5, pc}
 800af04:	20000990 	.word	0x20000990

0800af08 <_close_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4d06      	ldr	r5, [pc, #24]	; (800af24 <_close_r+0x1c>)
 800af0c:	2300      	movs	r3, #0
 800af0e:	4604      	mov	r4, r0
 800af10:	4608      	mov	r0, r1
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	f7f8 fc09 	bl	800372a <_close>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_close_r+0x1a>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_close_r+0x1a>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	20000990 	.word	0x20000990

0800af28 <_fstat_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d07      	ldr	r5, [pc, #28]	; (800af48 <_fstat_r+0x20>)
 800af2c:	2300      	movs	r3, #0
 800af2e:	4604      	mov	r4, r0
 800af30:	4608      	mov	r0, r1
 800af32:	4611      	mov	r1, r2
 800af34:	602b      	str	r3, [r5, #0]
 800af36:	f7f8 fc04 	bl	8003742 <_fstat>
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	d102      	bne.n	800af44 <_fstat_r+0x1c>
 800af3e:	682b      	ldr	r3, [r5, #0]
 800af40:	b103      	cbz	r3, 800af44 <_fstat_r+0x1c>
 800af42:	6023      	str	r3, [r4, #0]
 800af44:	bd38      	pop	{r3, r4, r5, pc}
 800af46:	bf00      	nop
 800af48:	20000990 	.word	0x20000990

0800af4c <_isatty_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	4d06      	ldr	r5, [pc, #24]	; (800af68 <_isatty_r+0x1c>)
 800af50:	2300      	movs	r3, #0
 800af52:	4604      	mov	r4, r0
 800af54:	4608      	mov	r0, r1
 800af56:	602b      	str	r3, [r5, #0]
 800af58:	f7f8 fc03 	bl	8003762 <_isatty>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d102      	bne.n	800af66 <_isatty_r+0x1a>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	b103      	cbz	r3, 800af66 <_isatty_r+0x1a>
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	20000990 	.word	0x20000990

0800af6c <_lseek_r>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	4d07      	ldr	r5, [pc, #28]	; (800af8c <_lseek_r+0x20>)
 800af70:	4604      	mov	r4, r0
 800af72:	4608      	mov	r0, r1
 800af74:	4611      	mov	r1, r2
 800af76:	2200      	movs	r2, #0
 800af78:	602a      	str	r2, [r5, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	f7f8 fbfc 	bl	8003778 <_lseek>
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	d102      	bne.n	800af8a <_lseek_r+0x1e>
 800af84:	682b      	ldr	r3, [r5, #0]
 800af86:	b103      	cbz	r3, 800af8a <_lseek_r+0x1e>
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	20000990 	.word	0x20000990

0800af90 <_read_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d07      	ldr	r5, [pc, #28]	; (800afb0 <_read_r+0x20>)
 800af94:	4604      	mov	r4, r0
 800af96:	4608      	mov	r0, r1
 800af98:	4611      	mov	r1, r2
 800af9a:	2200      	movs	r2, #0
 800af9c:	602a      	str	r2, [r5, #0]
 800af9e:	461a      	mov	r2, r3
 800afa0:	f7f8 fb8a 	bl	80036b8 <_read>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	d102      	bne.n	800afae <_read_r+0x1e>
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	b103      	cbz	r3, 800afae <_read_r+0x1e>
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	20000990 	.word	0x20000990

0800afb4 <pow>:
 800afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb6:	ed2d 8b02 	vpush	{d8}
 800afba:	eeb0 8a40 	vmov.f32	s16, s0
 800afbe:	eef0 8a60 	vmov.f32	s17, s1
 800afc2:	ec55 4b11 	vmov	r4, r5, d1
 800afc6:	f000 f867 	bl	800b098 <__ieee754_pow>
 800afca:	4622      	mov	r2, r4
 800afcc:	462b      	mov	r3, r5
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	ec57 6b10 	vmov	r6, r7, d0
 800afd6:	f7f5 fda9 	bl	8000b2c <__aeabi_dcmpun>
 800afda:	2800      	cmp	r0, #0
 800afdc:	d13b      	bne.n	800b056 <pow+0xa2>
 800afde:	ec51 0b18 	vmov	r0, r1, d8
 800afe2:	2200      	movs	r2, #0
 800afe4:	2300      	movs	r3, #0
 800afe6:	f7f5 fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800afea:	b1b8      	cbz	r0, 800b01c <pow+0x68>
 800afec:	2200      	movs	r2, #0
 800afee:	2300      	movs	r3, #0
 800aff0:	4620      	mov	r0, r4
 800aff2:	4629      	mov	r1, r5
 800aff4:	f7f5 fd68 	bl	8000ac8 <__aeabi_dcmpeq>
 800aff8:	2800      	cmp	r0, #0
 800affa:	d146      	bne.n	800b08a <pow+0xd6>
 800affc:	ec45 4b10 	vmov	d0, r4, r5
 800b000:	f000 fe63 	bl	800bcca <finite>
 800b004:	b338      	cbz	r0, 800b056 <pow+0xa2>
 800b006:	2200      	movs	r2, #0
 800b008:	2300      	movs	r3, #0
 800b00a:	4620      	mov	r0, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	f7f5 fd65 	bl	8000adc <__aeabi_dcmplt>
 800b012:	b300      	cbz	r0, 800b056 <pow+0xa2>
 800b014:	f7fb fb2c 	bl	8006670 <__errno>
 800b018:	2322      	movs	r3, #34	; 0x22
 800b01a:	e01b      	b.n	800b054 <pow+0xa0>
 800b01c:	ec47 6b10 	vmov	d0, r6, r7
 800b020:	f000 fe53 	bl	800bcca <finite>
 800b024:	b9e0      	cbnz	r0, 800b060 <pow+0xac>
 800b026:	eeb0 0a48 	vmov.f32	s0, s16
 800b02a:	eef0 0a68 	vmov.f32	s1, s17
 800b02e:	f000 fe4c 	bl	800bcca <finite>
 800b032:	b1a8      	cbz	r0, 800b060 <pow+0xac>
 800b034:	ec45 4b10 	vmov	d0, r4, r5
 800b038:	f000 fe47 	bl	800bcca <finite>
 800b03c:	b180      	cbz	r0, 800b060 <pow+0xac>
 800b03e:	4632      	mov	r2, r6
 800b040:	463b      	mov	r3, r7
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 fd71 	bl	8000b2c <__aeabi_dcmpun>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d0e2      	beq.n	800b014 <pow+0x60>
 800b04e:	f7fb fb0f 	bl	8006670 <__errno>
 800b052:	2321      	movs	r3, #33	; 0x21
 800b054:	6003      	str	r3, [r0, #0]
 800b056:	ecbd 8b02 	vpop	{d8}
 800b05a:	ec47 6b10 	vmov	d0, r6, r7
 800b05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b060:	2200      	movs	r2, #0
 800b062:	2300      	movs	r3, #0
 800b064:	4630      	mov	r0, r6
 800b066:	4639      	mov	r1, r7
 800b068:	f7f5 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d0f2      	beq.n	800b056 <pow+0xa2>
 800b070:	eeb0 0a48 	vmov.f32	s0, s16
 800b074:	eef0 0a68 	vmov.f32	s1, s17
 800b078:	f000 fe27 	bl	800bcca <finite>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d0ea      	beq.n	800b056 <pow+0xa2>
 800b080:	ec45 4b10 	vmov	d0, r4, r5
 800b084:	f000 fe21 	bl	800bcca <finite>
 800b088:	e7c3      	b.n	800b012 <pow+0x5e>
 800b08a:	4f01      	ldr	r7, [pc, #4]	; (800b090 <pow+0xdc>)
 800b08c:	2600      	movs	r6, #0
 800b08e:	e7e2      	b.n	800b056 <pow+0xa2>
 800b090:	3ff00000 	.word	0x3ff00000
 800b094:	00000000 	.word	0x00000000

0800b098 <__ieee754_pow>:
 800b098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09c:	ed2d 8b06 	vpush	{d8-d10}
 800b0a0:	b089      	sub	sp, #36	; 0x24
 800b0a2:	ed8d 1b00 	vstr	d1, [sp]
 800b0a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b0aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b0ae:	ea58 0102 	orrs.w	r1, r8, r2
 800b0b2:	ec57 6b10 	vmov	r6, r7, d0
 800b0b6:	d115      	bne.n	800b0e4 <__ieee754_pow+0x4c>
 800b0b8:	19b3      	adds	r3, r6, r6
 800b0ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b0be:	4152      	adcs	r2, r2
 800b0c0:	4299      	cmp	r1, r3
 800b0c2:	4b89      	ldr	r3, [pc, #548]	; (800b2e8 <__ieee754_pow+0x250>)
 800b0c4:	4193      	sbcs	r3, r2
 800b0c6:	f080 84d2 	bcs.w	800ba6e <__ieee754_pow+0x9d6>
 800b0ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	f7f5 f8db 	bl	800028c <__adddf3>
 800b0d6:	ec41 0b10 	vmov	d0, r0, r1
 800b0da:	b009      	add	sp, #36	; 0x24
 800b0dc:	ecbd 8b06 	vpop	{d8-d10}
 800b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e4:	4b81      	ldr	r3, [pc, #516]	; (800b2ec <__ieee754_pow+0x254>)
 800b0e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b0ea:	429c      	cmp	r4, r3
 800b0ec:	ee10 aa10 	vmov	sl, s0
 800b0f0:	463d      	mov	r5, r7
 800b0f2:	dc06      	bgt.n	800b102 <__ieee754_pow+0x6a>
 800b0f4:	d101      	bne.n	800b0fa <__ieee754_pow+0x62>
 800b0f6:	2e00      	cmp	r6, #0
 800b0f8:	d1e7      	bne.n	800b0ca <__ieee754_pow+0x32>
 800b0fa:	4598      	cmp	r8, r3
 800b0fc:	dc01      	bgt.n	800b102 <__ieee754_pow+0x6a>
 800b0fe:	d10f      	bne.n	800b120 <__ieee754_pow+0x88>
 800b100:	b172      	cbz	r2, 800b120 <__ieee754_pow+0x88>
 800b102:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b106:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b10a:	ea55 050a 	orrs.w	r5, r5, sl
 800b10e:	d1dc      	bne.n	800b0ca <__ieee754_pow+0x32>
 800b110:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b114:	18db      	adds	r3, r3, r3
 800b116:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b11a:	4152      	adcs	r2, r2
 800b11c:	429d      	cmp	r5, r3
 800b11e:	e7d0      	b.n	800b0c2 <__ieee754_pow+0x2a>
 800b120:	2d00      	cmp	r5, #0
 800b122:	da3b      	bge.n	800b19c <__ieee754_pow+0x104>
 800b124:	4b72      	ldr	r3, [pc, #456]	; (800b2f0 <__ieee754_pow+0x258>)
 800b126:	4598      	cmp	r8, r3
 800b128:	dc51      	bgt.n	800b1ce <__ieee754_pow+0x136>
 800b12a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b12e:	4598      	cmp	r8, r3
 800b130:	f340 84ac 	ble.w	800ba8c <__ieee754_pow+0x9f4>
 800b134:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b138:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b13c:	2b14      	cmp	r3, #20
 800b13e:	dd0f      	ble.n	800b160 <__ieee754_pow+0xc8>
 800b140:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b144:	fa22 f103 	lsr.w	r1, r2, r3
 800b148:	fa01 f303 	lsl.w	r3, r1, r3
 800b14c:	4293      	cmp	r3, r2
 800b14e:	f040 849d 	bne.w	800ba8c <__ieee754_pow+0x9f4>
 800b152:	f001 0101 	and.w	r1, r1, #1
 800b156:	f1c1 0302 	rsb	r3, r1, #2
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	b182      	cbz	r2, 800b180 <__ieee754_pow+0xe8>
 800b15e:	e05f      	b.n	800b220 <__ieee754_pow+0x188>
 800b160:	2a00      	cmp	r2, #0
 800b162:	d15b      	bne.n	800b21c <__ieee754_pow+0x184>
 800b164:	f1c3 0314 	rsb	r3, r3, #20
 800b168:	fa48 f103 	asr.w	r1, r8, r3
 800b16c:	fa01 f303 	lsl.w	r3, r1, r3
 800b170:	4543      	cmp	r3, r8
 800b172:	f040 8488 	bne.w	800ba86 <__ieee754_pow+0x9ee>
 800b176:	f001 0101 	and.w	r1, r1, #1
 800b17a:	f1c1 0302 	rsb	r3, r1, #2
 800b17e:	9304      	str	r3, [sp, #16]
 800b180:	4b5c      	ldr	r3, [pc, #368]	; (800b2f4 <__ieee754_pow+0x25c>)
 800b182:	4598      	cmp	r8, r3
 800b184:	d132      	bne.n	800b1ec <__ieee754_pow+0x154>
 800b186:	f1b9 0f00 	cmp.w	r9, #0
 800b18a:	f280 8478 	bge.w	800ba7e <__ieee754_pow+0x9e6>
 800b18e:	4959      	ldr	r1, [pc, #356]	; (800b2f4 <__ieee754_pow+0x25c>)
 800b190:	4632      	mov	r2, r6
 800b192:	463b      	mov	r3, r7
 800b194:	2000      	movs	r0, #0
 800b196:	f7f5 fb59 	bl	800084c <__aeabi_ddiv>
 800b19a:	e79c      	b.n	800b0d6 <__ieee754_pow+0x3e>
 800b19c:	2300      	movs	r3, #0
 800b19e:	9304      	str	r3, [sp, #16]
 800b1a0:	2a00      	cmp	r2, #0
 800b1a2:	d13d      	bne.n	800b220 <__ieee754_pow+0x188>
 800b1a4:	4b51      	ldr	r3, [pc, #324]	; (800b2ec <__ieee754_pow+0x254>)
 800b1a6:	4598      	cmp	r8, r3
 800b1a8:	d1ea      	bne.n	800b180 <__ieee754_pow+0xe8>
 800b1aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b1ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b1b2:	ea53 030a 	orrs.w	r3, r3, sl
 800b1b6:	f000 845a 	beq.w	800ba6e <__ieee754_pow+0x9d6>
 800b1ba:	4b4f      	ldr	r3, [pc, #316]	; (800b2f8 <__ieee754_pow+0x260>)
 800b1bc:	429c      	cmp	r4, r3
 800b1be:	dd08      	ble.n	800b1d2 <__ieee754_pow+0x13a>
 800b1c0:	f1b9 0f00 	cmp.w	r9, #0
 800b1c4:	f2c0 8457 	blt.w	800ba76 <__ieee754_pow+0x9de>
 800b1c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1cc:	e783      	b.n	800b0d6 <__ieee754_pow+0x3e>
 800b1ce:	2302      	movs	r3, #2
 800b1d0:	e7e5      	b.n	800b19e <__ieee754_pow+0x106>
 800b1d2:	f1b9 0f00 	cmp.w	r9, #0
 800b1d6:	f04f 0000 	mov.w	r0, #0
 800b1da:	f04f 0100 	mov.w	r1, #0
 800b1de:	f6bf af7a 	bge.w	800b0d6 <__ieee754_pow+0x3e>
 800b1e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b1e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b1ea:	e774      	b.n	800b0d6 <__ieee754_pow+0x3e>
 800b1ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b1f0:	d106      	bne.n	800b200 <__ieee754_pow+0x168>
 800b1f2:	4632      	mov	r2, r6
 800b1f4:	463b      	mov	r3, r7
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	4639      	mov	r1, r7
 800b1fa:	f7f5 f9fd 	bl	80005f8 <__aeabi_dmul>
 800b1fe:	e76a      	b.n	800b0d6 <__ieee754_pow+0x3e>
 800b200:	4b3e      	ldr	r3, [pc, #248]	; (800b2fc <__ieee754_pow+0x264>)
 800b202:	4599      	cmp	r9, r3
 800b204:	d10c      	bne.n	800b220 <__ieee754_pow+0x188>
 800b206:	2d00      	cmp	r5, #0
 800b208:	db0a      	blt.n	800b220 <__ieee754_pow+0x188>
 800b20a:	ec47 6b10 	vmov	d0, r6, r7
 800b20e:	b009      	add	sp, #36	; 0x24
 800b210:	ecbd 8b06 	vpop	{d8-d10}
 800b214:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b218:	f000 bc6c 	b.w	800baf4 <__ieee754_sqrt>
 800b21c:	2300      	movs	r3, #0
 800b21e:	9304      	str	r3, [sp, #16]
 800b220:	ec47 6b10 	vmov	d0, r6, r7
 800b224:	f000 fd48 	bl	800bcb8 <fabs>
 800b228:	ec51 0b10 	vmov	r0, r1, d0
 800b22c:	f1ba 0f00 	cmp.w	sl, #0
 800b230:	d129      	bne.n	800b286 <__ieee754_pow+0x1ee>
 800b232:	b124      	cbz	r4, 800b23e <__ieee754_pow+0x1a6>
 800b234:	4b2f      	ldr	r3, [pc, #188]	; (800b2f4 <__ieee754_pow+0x25c>)
 800b236:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d123      	bne.n	800b286 <__ieee754_pow+0x1ee>
 800b23e:	f1b9 0f00 	cmp.w	r9, #0
 800b242:	da05      	bge.n	800b250 <__ieee754_pow+0x1b8>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	2000      	movs	r0, #0
 800b24a:	492a      	ldr	r1, [pc, #168]	; (800b2f4 <__ieee754_pow+0x25c>)
 800b24c:	f7f5 fafe 	bl	800084c <__aeabi_ddiv>
 800b250:	2d00      	cmp	r5, #0
 800b252:	f6bf af40 	bge.w	800b0d6 <__ieee754_pow+0x3e>
 800b256:	9b04      	ldr	r3, [sp, #16]
 800b258:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b25c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b260:	4323      	orrs	r3, r4
 800b262:	d108      	bne.n	800b276 <__ieee754_pow+0x1de>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	4610      	mov	r0, r2
 800b26a:	4619      	mov	r1, r3
 800b26c:	f7f5 f80c 	bl	8000288 <__aeabi_dsub>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	e78f      	b.n	800b196 <__ieee754_pow+0xfe>
 800b276:	9b04      	ldr	r3, [sp, #16]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	f47f af2c 	bne.w	800b0d6 <__ieee754_pow+0x3e>
 800b27e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b282:	4619      	mov	r1, r3
 800b284:	e727      	b.n	800b0d6 <__ieee754_pow+0x3e>
 800b286:	0feb      	lsrs	r3, r5, #31
 800b288:	3b01      	subs	r3, #1
 800b28a:	9306      	str	r3, [sp, #24]
 800b28c:	9a06      	ldr	r2, [sp, #24]
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	4313      	orrs	r3, r2
 800b292:	d102      	bne.n	800b29a <__ieee754_pow+0x202>
 800b294:	4632      	mov	r2, r6
 800b296:	463b      	mov	r3, r7
 800b298:	e7e6      	b.n	800b268 <__ieee754_pow+0x1d0>
 800b29a:	4b19      	ldr	r3, [pc, #100]	; (800b300 <__ieee754_pow+0x268>)
 800b29c:	4598      	cmp	r8, r3
 800b29e:	f340 80fb 	ble.w	800b498 <__ieee754_pow+0x400>
 800b2a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b2a6:	4598      	cmp	r8, r3
 800b2a8:	4b13      	ldr	r3, [pc, #76]	; (800b2f8 <__ieee754_pow+0x260>)
 800b2aa:	dd0c      	ble.n	800b2c6 <__ieee754_pow+0x22e>
 800b2ac:	429c      	cmp	r4, r3
 800b2ae:	dc0f      	bgt.n	800b2d0 <__ieee754_pow+0x238>
 800b2b0:	f1b9 0f00 	cmp.w	r9, #0
 800b2b4:	da0f      	bge.n	800b2d6 <__ieee754_pow+0x23e>
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	b009      	add	sp, #36	; 0x24
 800b2ba:	ecbd 8b06 	vpop	{d8-d10}
 800b2be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c2:	f000 bcf0 	b.w	800bca6 <__math_oflow>
 800b2c6:	429c      	cmp	r4, r3
 800b2c8:	dbf2      	blt.n	800b2b0 <__ieee754_pow+0x218>
 800b2ca:	4b0a      	ldr	r3, [pc, #40]	; (800b2f4 <__ieee754_pow+0x25c>)
 800b2cc:	429c      	cmp	r4, r3
 800b2ce:	dd19      	ble.n	800b304 <__ieee754_pow+0x26c>
 800b2d0:	f1b9 0f00 	cmp.w	r9, #0
 800b2d4:	dcef      	bgt.n	800b2b6 <__ieee754_pow+0x21e>
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	b009      	add	sp, #36	; 0x24
 800b2da:	ecbd 8b06 	vpop	{d8-d10}
 800b2de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e2:	f000 bcd7 	b.w	800bc94 <__math_uflow>
 800b2e6:	bf00      	nop
 800b2e8:	fff00000 	.word	0xfff00000
 800b2ec:	7ff00000 	.word	0x7ff00000
 800b2f0:	433fffff 	.word	0x433fffff
 800b2f4:	3ff00000 	.word	0x3ff00000
 800b2f8:	3fefffff 	.word	0x3fefffff
 800b2fc:	3fe00000 	.word	0x3fe00000
 800b300:	41e00000 	.word	0x41e00000
 800b304:	4b60      	ldr	r3, [pc, #384]	; (800b488 <__ieee754_pow+0x3f0>)
 800b306:	2200      	movs	r2, #0
 800b308:	f7f4 ffbe 	bl	8000288 <__aeabi_dsub>
 800b30c:	a354      	add	r3, pc, #336	; (adr r3, 800b460 <__ieee754_pow+0x3c8>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	4604      	mov	r4, r0
 800b314:	460d      	mov	r5, r1
 800b316:	f7f5 f96f 	bl	80005f8 <__aeabi_dmul>
 800b31a:	a353      	add	r3, pc, #332	; (adr r3, 800b468 <__ieee754_pow+0x3d0>)
 800b31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b320:	4606      	mov	r6, r0
 800b322:	460f      	mov	r7, r1
 800b324:	4620      	mov	r0, r4
 800b326:	4629      	mov	r1, r5
 800b328:	f7f5 f966 	bl	80005f8 <__aeabi_dmul>
 800b32c:	4b57      	ldr	r3, [pc, #348]	; (800b48c <__ieee754_pow+0x3f4>)
 800b32e:	4682      	mov	sl, r0
 800b330:	468b      	mov	fp, r1
 800b332:	2200      	movs	r2, #0
 800b334:	4620      	mov	r0, r4
 800b336:	4629      	mov	r1, r5
 800b338:	f7f5 f95e 	bl	80005f8 <__aeabi_dmul>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	a14b      	add	r1, pc, #300	; (adr r1, 800b470 <__ieee754_pow+0x3d8>)
 800b342:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b346:	f7f4 ff9f 	bl	8000288 <__aeabi_dsub>
 800b34a:	4622      	mov	r2, r4
 800b34c:	462b      	mov	r3, r5
 800b34e:	f7f5 f953 	bl	80005f8 <__aeabi_dmul>
 800b352:	4602      	mov	r2, r0
 800b354:	460b      	mov	r3, r1
 800b356:	2000      	movs	r0, #0
 800b358:	494d      	ldr	r1, [pc, #308]	; (800b490 <__ieee754_pow+0x3f8>)
 800b35a:	f7f4 ff95 	bl	8000288 <__aeabi_dsub>
 800b35e:	4622      	mov	r2, r4
 800b360:	4680      	mov	r8, r0
 800b362:	4689      	mov	r9, r1
 800b364:	462b      	mov	r3, r5
 800b366:	4620      	mov	r0, r4
 800b368:	4629      	mov	r1, r5
 800b36a:	f7f5 f945 	bl	80005f8 <__aeabi_dmul>
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	f7f5 f93f 	bl	80005f8 <__aeabi_dmul>
 800b37a:	a33f      	add	r3, pc, #252	; (adr r3, 800b478 <__ieee754_pow+0x3e0>)
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	f7f5 f93a 	bl	80005f8 <__aeabi_dmul>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4650      	mov	r0, sl
 800b38a:	4659      	mov	r1, fp
 800b38c:	f7f4 ff7c 	bl	8000288 <__aeabi_dsub>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4680      	mov	r8, r0
 800b396:	4689      	mov	r9, r1
 800b398:	4630      	mov	r0, r6
 800b39a:	4639      	mov	r1, r7
 800b39c:	f7f4 ff76 	bl	800028c <__adddf3>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	4632      	mov	r2, r6
 800b3a4:	463b      	mov	r3, r7
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	460d      	mov	r5, r1
 800b3aa:	f7f4 ff6d 	bl	8000288 <__aeabi_dsub>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	4649      	mov	r1, r9
 800b3b6:	f7f4 ff67 	bl	8000288 <__aeabi_dsub>
 800b3ba:	9b04      	ldr	r3, [sp, #16]
 800b3bc:	9a06      	ldr	r2, [sp, #24]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	4682      	mov	sl, r0
 800b3c4:	468b      	mov	fp, r1
 800b3c6:	f040 81e7 	bne.w	800b798 <__ieee754_pow+0x700>
 800b3ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b480 <__ieee754_pow+0x3e8>
 800b3ce:	eeb0 8a47 	vmov.f32	s16, s14
 800b3d2:	eef0 8a67 	vmov.f32	s17, s15
 800b3d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b3da:	2600      	movs	r6, #0
 800b3dc:	4632      	mov	r2, r6
 800b3de:	463b      	mov	r3, r7
 800b3e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3e4:	f7f4 ff50 	bl	8000288 <__aeabi_dsub>
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	462b      	mov	r3, r5
 800b3ec:	f7f5 f904 	bl	80005f8 <__aeabi_dmul>
 800b3f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	4689      	mov	r9, r1
 800b3f8:	4650      	mov	r0, sl
 800b3fa:	4659      	mov	r1, fp
 800b3fc:	f7f5 f8fc 	bl	80005f8 <__aeabi_dmul>
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	4640      	mov	r0, r8
 800b406:	4649      	mov	r1, r9
 800b408:	f7f4 ff40 	bl	800028c <__adddf3>
 800b40c:	4632      	mov	r2, r6
 800b40e:	463b      	mov	r3, r7
 800b410:	4680      	mov	r8, r0
 800b412:	4689      	mov	r9, r1
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	f7f5 f8ee 	bl	80005f8 <__aeabi_dmul>
 800b41c:	460b      	mov	r3, r1
 800b41e:	4604      	mov	r4, r0
 800b420:	460d      	mov	r5, r1
 800b422:	4602      	mov	r2, r0
 800b424:	4649      	mov	r1, r9
 800b426:	4640      	mov	r0, r8
 800b428:	f7f4 ff30 	bl	800028c <__adddf3>
 800b42c:	4b19      	ldr	r3, [pc, #100]	; (800b494 <__ieee754_pow+0x3fc>)
 800b42e:	4299      	cmp	r1, r3
 800b430:	ec45 4b19 	vmov	d9, r4, r5
 800b434:	4606      	mov	r6, r0
 800b436:	460f      	mov	r7, r1
 800b438:	468b      	mov	fp, r1
 800b43a:	f340 82f1 	ble.w	800ba20 <__ieee754_pow+0x988>
 800b43e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b442:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b446:	4303      	orrs	r3, r0
 800b448:	f000 81e4 	beq.w	800b814 <__ieee754_pow+0x77c>
 800b44c:	ec51 0b18 	vmov	r0, r1, d8
 800b450:	2200      	movs	r2, #0
 800b452:	2300      	movs	r3, #0
 800b454:	f7f5 fb42 	bl	8000adc <__aeabi_dcmplt>
 800b458:	3800      	subs	r0, #0
 800b45a:	bf18      	it	ne
 800b45c:	2001      	movne	r0, #1
 800b45e:	e72b      	b.n	800b2b8 <__ieee754_pow+0x220>
 800b460:	60000000 	.word	0x60000000
 800b464:	3ff71547 	.word	0x3ff71547
 800b468:	f85ddf44 	.word	0xf85ddf44
 800b46c:	3e54ae0b 	.word	0x3e54ae0b
 800b470:	55555555 	.word	0x55555555
 800b474:	3fd55555 	.word	0x3fd55555
 800b478:	652b82fe 	.word	0x652b82fe
 800b47c:	3ff71547 	.word	0x3ff71547
 800b480:	00000000 	.word	0x00000000
 800b484:	bff00000 	.word	0xbff00000
 800b488:	3ff00000 	.word	0x3ff00000
 800b48c:	3fd00000 	.word	0x3fd00000
 800b490:	3fe00000 	.word	0x3fe00000
 800b494:	408fffff 	.word	0x408fffff
 800b498:	4bd5      	ldr	r3, [pc, #852]	; (800b7f0 <__ieee754_pow+0x758>)
 800b49a:	402b      	ands	r3, r5
 800b49c:	2200      	movs	r2, #0
 800b49e:	b92b      	cbnz	r3, 800b4ac <__ieee754_pow+0x414>
 800b4a0:	4bd4      	ldr	r3, [pc, #848]	; (800b7f4 <__ieee754_pow+0x75c>)
 800b4a2:	f7f5 f8a9 	bl	80005f8 <__aeabi_dmul>
 800b4a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	1523      	asrs	r3, r4, #20
 800b4ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b4b2:	4413      	add	r3, r2
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	4bd0      	ldr	r3, [pc, #832]	; (800b7f8 <__ieee754_pow+0x760>)
 800b4b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b4bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b4c0:	429c      	cmp	r4, r3
 800b4c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b4c6:	dd08      	ble.n	800b4da <__ieee754_pow+0x442>
 800b4c8:	4bcc      	ldr	r3, [pc, #816]	; (800b7fc <__ieee754_pow+0x764>)
 800b4ca:	429c      	cmp	r4, r3
 800b4cc:	f340 8162 	ble.w	800b794 <__ieee754_pow+0x6fc>
 800b4d0:	9b05      	ldr	r3, [sp, #20]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	9305      	str	r3, [sp, #20]
 800b4d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b4da:	2400      	movs	r4, #0
 800b4dc:	00e3      	lsls	r3, r4, #3
 800b4de:	9307      	str	r3, [sp, #28]
 800b4e0:	4bc7      	ldr	r3, [pc, #796]	; (800b800 <__ieee754_pow+0x768>)
 800b4e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4e6:	ed93 7b00 	vldr	d7, [r3]
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	ec53 2b17 	vmov	r2, r3, d7
 800b4f0:	eeb0 9a47 	vmov.f32	s18, s14
 800b4f4:	eef0 9a67 	vmov.f32	s19, s15
 800b4f8:	4682      	mov	sl, r0
 800b4fa:	f7f4 fec5 	bl	8000288 <__aeabi_dsub>
 800b4fe:	4652      	mov	r2, sl
 800b500:	4606      	mov	r6, r0
 800b502:	460f      	mov	r7, r1
 800b504:	462b      	mov	r3, r5
 800b506:	ec51 0b19 	vmov	r0, r1, d9
 800b50a:	f7f4 febf 	bl	800028c <__adddf3>
 800b50e:	4602      	mov	r2, r0
 800b510:	460b      	mov	r3, r1
 800b512:	2000      	movs	r0, #0
 800b514:	49bb      	ldr	r1, [pc, #748]	; (800b804 <__ieee754_pow+0x76c>)
 800b516:	f7f5 f999 	bl	800084c <__aeabi_ddiv>
 800b51a:	ec41 0b1a 	vmov	d10, r0, r1
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4630      	mov	r0, r6
 800b524:	4639      	mov	r1, r7
 800b526:	f7f5 f867 	bl	80005f8 <__aeabi_dmul>
 800b52a:	2300      	movs	r3, #0
 800b52c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b530:	9302      	str	r3, [sp, #8]
 800b532:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b536:	46ab      	mov	fp, r5
 800b538:	106d      	asrs	r5, r5, #1
 800b53a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b53e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b542:	ec41 0b18 	vmov	d8, r0, r1
 800b546:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b54a:	2200      	movs	r2, #0
 800b54c:	4640      	mov	r0, r8
 800b54e:	4649      	mov	r1, r9
 800b550:	4614      	mov	r4, r2
 800b552:	461d      	mov	r5, r3
 800b554:	f7f5 f850 	bl	80005f8 <__aeabi_dmul>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4630      	mov	r0, r6
 800b55e:	4639      	mov	r1, r7
 800b560:	f7f4 fe92 	bl	8000288 <__aeabi_dsub>
 800b564:	ec53 2b19 	vmov	r2, r3, d9
 800b568:	4606      	mov	r6, r0
 800b56a:	460f      	mov	r7, r1
 800b56c:	4620      	mov	r0, r4
 800b56e:	4629      	mov	r1, r5
 800b570:	f7f4 fe8a 	bl	8000288 <__aeabi_dsub>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	4650      	mov	r0, sl
 800b57a:	4659      	mov	r1, fp
 800b57c:	f7f4 fe84 	bl	8000288 <__aeabi_dsub>
 800b580:	4642      	mov	r2, r8
 800b582:	464b      	mov	r3, r9
 800b584:	f7f5 f838 	bl	80005f8 <__aeabi_dmul>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4630      	mov	r0, r6
 800b58e:	4639      	mov	r1, r7
 800b590:	f7f4 fe7a 	bl	8000288 <__aeabi_dsub>
 800b594:	ec53 2b1a 	vmov	r2, r3, d10
 800b598:	f7f5 f82e 	bl	80005f8 <__aeabi_dmul>
 800b59c:	ec53 2b18 	vmov	r2, r3, d8
 800b5a0:	ec41 0b19 	vmov	d9, r0, r1
 800b5a4:	ec51 0b18 	vmov	r0, r1, d8
 800b5a8:	f7f5 f826 	bl	80005f8 <__aeabi_dmul>
 800b5ac:	a37c      	add	r3, pc, #496	; (adr r3, 800b7a0 <__ieee754_pow+0x708>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	460d      	mov	r5, r1
 800b5b6:	f7f5 f81f 	bl	80005f8 <__aeabi_dmul>
 800b5ba:	a37b      	add	r3, pc, #492	; (adr r3, 800b7a8 <__ieee754_pow+0x710>)
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f7f4 fe64 	bl	800028c <__adddf3>
 800b5c4:	4622      	mov	r2, r4
 800b5c6:	462b      	mov	r3, r5
 800b5c8:	f7f5 f816 	bl	80005f8 <__aeabi_dmul>
 800b5cc:	a378      	add	r3, pc, #480	; (adr r3, 800b7b0 <__ieee754_pow+0x718>)
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	f7f4 fe5b 	bl	800028c <__adddf3>
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	462b      	mov	r3, r5
 800b5da:	f7f5 f80d 	bl	80005f8 <__aeabi_dmul>
 800b5de:	a376      	add	r3, pc, #472	; (adr r3, 800b7b8 <__ieee754_pow+0x720>)
 800b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e4:	f7f4 fe52 	bl	800028c <__adddf3>
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	462b      	mov	r3, r5
 800b5ec:	f7f5 f804 	bl	80005f8 <__aeabi_dmul>
 800b5f0:	a373      	add	r3, pc, #460	; (adr r3, 800b7c0 <__ieee754_pow+0x728>)
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	f7f4 fe49 	bl	800028c <__adddf3>
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	462b      	mov	r3, r5
 800b5fe:	f7f4 fffb 	bl	80005f8 <__aeabi_dmul>
 800b602:	a371      	add	r3, pc, #452	; (adr r3, 800b7c8 <__ieee754_pow+0x730>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f4 fe40 	bl	800028c <__adddf3>
 800b60c:	4622      	mov	r2, r4
 800b60e:	4606      	mov	r6, r0
 800b610:	460f      	mov	r7, r1
 800b612:	462b      	mov	r3, r5
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f4 ffee 	bl	80005f8 <__aeabi_dmul>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	4630      	mov	r0, r6
 800b622:	4639      	mov	r1, r7
 800b624:	f7f4 ffe8 	bl	80005f8 <__aeabi_dmul>
 800b628:	4642      	mov	r2, r8
 800b62a:	4604      	mov	r4, r0
 800b62c:	460d      	mov	r5, r1
 800b62e:	464b      	mov	r3, r9
 800b630:	ec51 0b18 	vmov	r0, r1, d8
 800b634:	f7f4 fe2a 	bl	800028c <__adddf3>
 800b638:	ec53 2b19 	vmov	r2, r3, d9
 800b63c:	f7f4 ffdc 	bl	80005f8 <__aeabi_dmul>
 800b640:	4622      	mov	r2, r4
 800b642:	462b      	mov	r3, r5
 800b644:	f7f4 fe22 	bl	800028c <__adddf3>
 800b648:	4642      	mov	r2, r8
 800b64a:	4682      	mov	sl, r0
 800b64c:	468b      	mov	fp, r1
 800b64e:	464b      	mov	r3, r9
 800b650:	4640      	mov	r0, r8
 800b652:	4649      	mov	r1, r9
 800b654:	f7f4 ffd0 	bl	80005f8 <__aeabi_dmul>
 800b658:	4b6b      	ldr	r3, [pc, #428]	; (800b808 <__ieee754_pow+0x770>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	4606      	mov	r6, r0
 800b65e:	460f      	mov	r7, r1
 800b660:	f7f4 fe14 	bl	800028c <__adddf3>
 800b664:	4652      	mov	r2, sl
 800b666:	465b      	mov	r3, fp
 800b668:	f7f4 fe10 	bl	800028c <__adddf3>
 800b66c:	2000      	movs	r0, #0
 800b66e:	4604      	mov	r4, r0
 800b670:	460d      	mov	r5, r1
 800b672:	4602      	mov	r2, r0
 800b674:	460b      	mov	r3, r1
 800b676:	4640      	mov	r0, r8
 800b678:	4649      	mov	r1, r9
 800b67a:	f7f4 ffbd 	bl	80005f8 <__aeabi_dmul>
 800b67e:	4b62      	ldr	r3, [pc, #392]	; (800b808 <__ieee754_pow+0x770>)
 800b680:	4680      	mov	r8, r0
 800b682:	4689      	mov	r9, r1
 800b684:	2200      	movs	r2, #0
 800b686:	4620      	mov	r0, r4
 800b688:	4629      	mov	r1, r5
 800b68a:	f7f4 fdfd 	bl	8000288 <__aeabi_dsub>
 800b68e:	4632      	mov	r2, r6
 800b690:	463b      	mov	r3, r7
 800b692:	f7f4 fdf9 	bl	8000288 <__aeabi_dsub>
 800b696:	4602      	mov	r2, r0
 800b698:	460b      	mov	r3, r1
 800b69a:	4650      	mov	r0, sl
 800b69c:	4659      	mov	r1, fp
 800b69e:	f7f4 fdf3 	bl	8000288 <__aeabi_dsub>
 800b6a2:	ec53 2b18 	vmov	r2, r3, d8
 800b6a6:	f7f4 ffa7 	bl	80005f8 <__aeabi_dmul>
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	460f      	mov	r7, r1
 800b6b0:	462b      	mov	r3, r5
 800b6b2:	ec51 0b19 	vmov	r0, r1, d9
 800b6b6:	f7f4 ff9f 	bl	80005f8 <__aeabi_dmul>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4630      	mov	r0, r6
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	f7f4 fde3 	bl	800028c <__adddf3>
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	460f      	mov	r7, r1
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4640      	mov	r0, r8
 800b6d0:	4649      	mov	r1, r9
 800b6d2:	f7f4 fddb 	bl	800028c <__adddf3>
 800b6d6:	a33e      	add	r3, pc, #248	; (adr r3, 800b7d0 <__ieee754_pow+0x738>)
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	2000      	movs	r0, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	460d      	mov	r5, r1
 800b6e2:	f7f4 ff89 	bl	80005f8 <__aeabi_dmul>
 800b6e6:	4642      	mov	r2, r8
 800b6e8:	ec41 0b18 	vmov	d8, r0, r1
 800b6ec:	464b      	mov	r3, r9
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	f7f4 fdc9 	bl	8000288 <__aeabi_dsub>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f4 fdc3 	bl	8000288 <__aeabi_dsub>
 800b702:	a335      	add	r3, pc, #212	; (adr r3, 800b7d8 <__ieee754_pow+0x740>)
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	f7f4 ff76 	bl	80005f8 <__aeabi_dmul>
 800b70c:	a334      	add	r3, pc, #208	; (adr r3, 800b7e0 <__ieee754_pow+0x748>)
 800b70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b712:	4606      	mov	r6, r0
 800b714:	460f      	mov	r7, r1
 800b716:	4620      	mov	r0, r4
 800b718:	4629      	mov	r1, r5
 800b71a:	f7f4 ff6d 	bl	80005f8 <__aeabi_dmul>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	4630      	mov	r0, r6
 800b724:	4639      	mov	r1, r7
 800b726:	f7f4 fdb1 	bl	800028c <__adddf3>
 800b72a:	9a07      	ldr	r2, [sp, #28]
 800b72c:	4b37      	ldr	r3, [pc, #220]	; (800b80c <__ieee754_pow+0x774>)
 800b72e:	4413      	add	r3, r2
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	f7f4 fdaa 	bl	800028c <__adddf3>
 800b738:	4682      	mov	sl, r0
 800b73a:	9805      	ldr	r0, [sp, #20]
 800b73c:	468b      	mov	fp, r1
 800b73e:	f7f4 fef1 	bl	8000524 <__aeabi_i2d>
 800b742:	9a07      	ldr	r2, [sp, #28]
 800b744:	4b32      	ldr	r3, [pc, #200]	; (800b810 <__ieee754_pow+0x778>)
 800b746:	4413      	add	r3, r2
 800b748:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b74c:	4606      	mov	r6, r0
 800b74e:	460f      	mov	r7, r1
 800b750:	4652      	mov	r2, sl
 800b752:	465b      	mov	r3, fp
 800b754:	ec51 0b18 	vmov	r0, r1, d8
 800b758:	f7f4 fd98 	bl	800028c <__adddf3>
 800b75c:	4642      	mov	r2, r8
 800b75e:	464b      	mov	r3, r9
 800b760:	f7f4 fd94 	bl	800028c <__adddf3>
 800b764:	4632      	mov	r2, r6
 800b766:	463b      	mov	r3, r7
 800b768:	f7f4 fd90 	bl	800028c <__adddf3>
 800b76c:	2000      	movs	r0, #0
 800b76e:	4632      	mov	r2, r6
 800b770:	463b      	mov	r3, r7
 800b772:	4604      	mov	r4, r0
 800b774:	460d      	mov	r5, r1
 800b776:	f7f4 fd87 	bl	8000288 <__aeabi_dsub>
 800b77a:	4642      	mov	r2, r8
 800b77c:	464b      	mov	r3, r9
 800b77e:	f7f4 fd83 	bl	8000288 <__aeabi_dsub>
 800b782:	ec53 2b18 	vmov	r2, r3, d8
 800b786:	f7f4 fd7f 	bl	8000288 <__aeabi_dsub>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4650      	mov	r0, sl
 800b790:	4659      	mov	r1, fp
 800b792:	e610      	b.n	800b3b6 <__ieee754_pow+0x31e>
 800b794:	2401      	movs	r4, #1
 800b796:	e6a1      	b.n	800b4dc <__ieee754_pow+0x444>
 800b798:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b7e8 <__ieee754_pow+0x750>
 800b79c:	e617      	b.n	800b3ce <__ieee754_pow+0x336>
 800b79e:	bf00      	nop
 800b7a0:	4a454eef 	.word	0x4a454eef
 800b7a4:	3fca7e28 	.word	0x3fca7e28
 800b7a8:	93c9db65 	.word	0x93c9db65
 800b7ac:	3fcd864a 	.word	0x3fcd864a
 800b7b0:	a91d4101 	.word	0xa91d4101
 800b7b4:	3fd17460 	.word	0x3fd17460
 800b7b8:	518f264d 	.word	0x518f264d
 800b7bc:	3fd55555 	.word	0x3fd55555
 800b7c0:	db6fabff 	.word	0xdb6fabff
 800b7c4:	3fdb6db6 	.word	0x3fdb6db6
 800b7c8:	33333303 	.word	0x33333303
 800b7cc:	3fe33333 	.word	0x3fe33333
 800b7d0:	e0000000 	.word	0xe0000000
 800b7d4:	3feec709 	.word	0x3feec709
 800b7d8:	dc3a03fd 	.word	0xdc3a03fd
 800b7dc:	3feec709 	.word	0x3feec709
 800b7e0:	145b01f5 	.word	0x145b01f5
 800b7e4:	be3e2fe0 	.word	0xbe3e2fe0
 800b7e8:	00000000 	.word	0x00000000
 800b7ec:	3ff00000 	.word	0x3ff00000
 800b7f0:	7ff00000 	.word	0x7ff00000
 800b7f4:	43400000 	.word	0x43400000
 800b7f8:	0003988e 	.word	0x0003988e
 800b7fc:	000bb679 	.word	0x000bb679
 800b800:	0800db40 	.word	0x0800db40
 800b804:	3ff00000 	.word	0x3ff00000
 800b808:	40080000 	.word	0x40080000
 800b80c:	0800db60 	.word	0x0800db60
 800b810:	0800db50 	.word	0x0800db50
 800b814:	a3b5      	add	r3, pc, #724	; (adr r3, 800baec <__ieee754_pow+0xa54>)
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	4640      	mov	r0, r8
 800b81c:	4649      	mov	r1, r9
 800b81e:	f7f4 fd35 	bl	800028c <__adddf3>
 800b822:	4622      	mov	r2, r4
 800b824:	ec41 0b1a 	vmov	d10, r0, r1
 800b828:	462b      	mov	r3, r5
 800b82a:	4630      	mov	r0, r6
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f4 fd2b 	bl	8000288 <__aeabi_dsub>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	ec51 0b1a 	vmov	r0, r1, d10
 800b83a:	f7f5 f96d 	bl	8000b18 <__aeabi_dcmpgt>
 800b83e:	2800      	cmp	r0, #0
 800b840:	f47f ae04 	bne.w	800b44c <__ieee754_pow+0x3b4>
 800b844:	4aa4      	ldr	r2, [pc, #656]	; (800bad8 <__ieee754_pow+0xa40>)
 800b846:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b84a:	4293      	cmp	r3, r2
 800b84c:	f340 8108 	ble.w	800ba60 <__ieee754_pow+0x9c8>
 800b850:	151b      	asrs	r3, r3, #20
 800b852:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b856:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b85a:	fa4a f303 	asr.w	r3, sl, r3
 800b85e:	445b      	add	r3, fp
 800b860:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b864:	4e9d      	ldr	r6, [pc, #628]	; (800badc <__ieee754_pow+0xa44>)
 800b866:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b86a:	4116      	asrs	r6, r2
 800b86c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b870:	2000      	movs	r0, #0
 800b872:	ea23 0106 	bic.w	r1, r3, r6
 800b876:	f1c2 0214 	rsb	r2, r2, #20
 800b87a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b87e:	fa4a fa02 	asr.w	sl, sl, r2
 800b882:	f1bb 0f00 	cmp.w	fp, #0
 800b886:	4602      	mov	r2, r0
 800b888:	460b      	mov	r3, r1
 800b88a:	4620      	mov	r0, r4
 800b88c:	4629      	mov	r1, r5
 800b88e:	bfb8      	it	lt
 800b890:	f1ca 0a00 	rsblt	sl, sl, #0
 800b894:	f7f4 fcf8 	bl	8000288 <__aeabi_dsub>
 800b898:	ec41 0b19 	vmov	d9, r0, r1
 800b89c:	4642      	mov	r2, r8
 800b89e:	464b      	mov	r3, r9
 800b8a0:	ec51 0b19 	vmov	r0, r1, d9
 800b8a4:	f7f4 fcf2 	bl	800028c <__adddf3>
 800b8a8:	a37b      	add	r3, pc, #492	; (adr r3, 800ba98 <__ieee754_pow+0xa00>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	460d      	mov	r5, r1
 800b8b4:	f7f4 fea0 	bl	80005f8 <__aeabi_dmul>
 800b8b8:	ec53 2b19 	vmov	r2, r3, d9
 800b8bc:	4606      	mov	r6, r0
 800b8be:	460f      	mov	r7, r1
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	f7f4 fce0 	bl	8000288 <__aeabi_dsub>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	f7f4 fcda 	bl	8000288 <__aeabi_dsub>
 800b8d4:	a372      	add	r3, pc, #456	; (adr r3, 800baa0 <__ieee754_pow+0xa08>)
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	f7f4 fe8d 	bl	80005f8 <__aeabi_dmul>
 800b8de:	a372      	add	r3, pc, #456	; (adr r3, 800baa8 <__ieee754_pow+0xa10>)
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	4680      	mov	r8, r0
 800b8e6:	4689      	mov	r9, r1
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	f7f4 fe84 	bl	80005f8 <__aeabi_dmul>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	4649      	mov	r1, r9
 800b8f8:	f7f4 fcc8 	bl	800028c <__adddf3>
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	460d      	mov	r5, r1
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	4630      	mov	r0, r6
 800b906:	4639      	mov	r1, r7
 800b908:	f7f4 fcc0 	bl	800028c <__adddf3>
 800b90c:	4632      	mov	r2, r6
 800b90e:	463b      	mov	r3, r7
 800b910:	4680      	mov	r8, r0
 800b912:	4689      	mov	r9, r1
 800b914:	f7f4 fcb8 	bl	8000288 <__aeabi_dsub>
 800b918:	4602      	mov	r2, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	4620      	mov	r0, r4
 800b91e:	4629      	mov	r1, r5
 800b920:	f7f4 fcb2 	bl	8000288 <__aeabi_dsub>
 800b924:	4642      	mov	r2, r8
 800b926:	4606      	mov	r6, r0
 800b928:	460f      	mov	r7, r1
 800b92a:	464b      	mov	r3, r9
 800b92c:	4640      	mov	r0, r8
 800b92e:	4649      	mov	r1, r9
 800b930:	f7f4 fe62 	bl	80005f8 <__aeabi_dmul>
 800b934:	a35e      	add	r3, pc, #376	; (adr r3, 800bab0 <__ieee754_pow+0xa18>)
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	4604      	mov	r4, r0
 800b93c:	460d      	mov	r5, r1
 800b93e:	f7f4 fe5b 	bl	80005f8 <__aeabi_dmul>
 800b942:	a35d      	add	r3, pc, #372	; (adr r3, 800bab8 <__ieee754_pow+0xa20>)
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	f7f4 fc9e 	bl	8000288 <__aeabi_dsub>
 800b94c:	4622      	mov	r2, r4
 800b94e:	462b      	mov	r3, r5
 800b950:	f7f4 fe52 	bl	80005f8 <__aeabi_dmul>
 800b954:	a35a      	add	r3, pc, #360	; (adr r3, 800bac0 <__ieee754_pow+0xa28>)
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	f7f4 fc97 	bl	800028c <__adddf3>
 800b95e:	4622      	mov	r2, r4
 800b960:	462b      	mov	r3, r5
 800b962:	f7f4 fe49 	bl	80005f8 <__aeabi_dmul>
 800b966:	a358      	add	r3, pc, #352	; (adr r3, 800bac8 <__ieee754_pow+0xa30>)
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	f7f4 fc8c 	bl	8000288 <__aeabi_dsub>
 800b970:	4622      	mov	r2, r4
 800b972:	462b      	mov	r3, r5
 800b974:	f7f4 fe40 	bl	80005f8 <__aeabi_dmul>
 800b978:	a355      	add	r3, pc, #340	; (adr r3, 800bad0 <__ieee754_pow+0xa38>)
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f7f4 fc85 	bl	800028c <__adddf3>
 800b982:	4622      	mov	r2, r4
 800b984:	462b      	mov	r3, r5
 800b986:	f7f4 fe37 	bl	80005f8 <__aeabi_dmul>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	4640      	mov	r0, r8
 800b990:	4649      	mov	r1, r9
 800b992:	f7f4 fc79 	bl	8000288 <__aeabi_dsub>
 800b996:	4604      	mov	r4, r0
 800b998:	460d      	mov	r5, r1
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	4640      	mov	r0, r8
 800b9a0:	4649      	mov	r1, r9
 800b9a2:	f7f4 fe29 	bl	80005f8 <__aeabi_dmul>
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	ec41 0b19 	vmov	d9, r0, r1
 800b9ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	f7f4 fc68 	bl	8000288 <__aeabi_dsub>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	ec51 0b19 	vmov	r0, r1, d9
 800b9c0:	f7f4 ff44 	bl	800084c <__aeabi_ddiv>
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	f7f4 fe12 	bl	80005f8 <__aeabi_dmul>
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	463b      	mov	r3, r7
 800b9d8:	f7f4 fc58 	bl	800028c <__adddf3>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	f7f4 fc50 	bl	8000288 <__aeabi_dsub>
 800b9e8:	4642      	mov	r2, r8
 800b9ea:	464b      	mov	r3, r9
 800b9ec:	f7f4 fc4c 	bl	8000288 <__aeabi_dsub>
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	493a      	ldr	r1, [pc, #232]	; (800bae0 <__ieee754_pow+0xa48>)
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	f7f4 fc46 	bl	8000288 <__aeabi_dsub>
 800b9fc:	ec41 0b10 	vmov	d0, r0, r1
 800ba00:	ee10 3a90 	vmov	r3, s1
 800ba04:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ba08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba0c:	da2b      	bge.n	800ba66 <__ieee754_pow+0x9ce>
 800ba0e:	4650      	mov	r0, sl
 800ba10:	f000 f966 	bl	800bce0 <scalbn>
 800ba14:	ec51 0b10 	vmov	r0, r1, d0
 800ba18:	ec53 2b18 	vmov	r2, r3, d8
 800ba1c:	f7ff bbed 	b.w	800b1fa <__ieee754_pow+0x162>
 800ba20:	4b30      	ldr	r3, [pc, #192]	; (800bae4 <__ieee754_pow+0xa4c>)
 800ba22:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ba26:	429e      	cmp	r6, r3
 800ba28:	f77f af0c 	ble.w	800b844 <__ieee754_pow+0x7ac>
 800ba2c:	4b2e      	ldr	r3, [pc, #184]	; (800bae8 <__ieee754_pow+0xa50>)
 800ba2e:	440b      	add	r3, r1
 800ba30:	4303      	orrs	r3, r0
 800ba32:	d009      	beq.n	800ba48 <__ieee754_pow+0x9b0>
 800ba34:	ec51 0b18 	vmov	r0, r1, d8
 800ba38:	2200      	movs	r2, #0
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f7f5 f84e 	bl	8000adc <__aeabi_dcmplt>
 800ba40:	3800      	subs	r0, #0
 800ba42:	bf18      	it	ne
 800ba44:	2001      	movne	r0, #1
 800ba46:	e447      	b.n	800b2d8 <__ieee754_pow+0x240>
 800ba48:	4622      	mov	r2, r4
 800ba4a:	462b      	mov	r3, r5
 800ba4c:	f7f4 fc1c 	bl	8000288 <__aeabi_dsub>
 800ba50:	4642      	mov	r2, r8
 800ba52:	464b      	mov	r3, r9
 800ba54:	f7f5 f856 	bl	8000b04 <__aeabi_dcmpge>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	f43f aef3 	beq.w	800b844 <__ieee754_pow+0x7ac>
 800ba5e:	e7e9      	b.n	800ba34 <__ieee754_pow+0x99c>
 800ba60:	f04f 0a00 	mov.w	sl, #0
 800ba64:	e71a      	b.n	800b89c <__ieee754_pow+0x804>
 800ba66:	ec51 0b10 	vmov	r0, r1, d0
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	e7d4      	b.n	800ba18 <__ieee754_pow+0x980>
 800ba6e:	491c      	ldr	r1, [pc, #112]	; (800bae0 <__ieee754_pow+0xa48>)
 800ba70:	2000      	movs	r0, #0
 800ba72:	f7ff bb30 	b.w	800b0d6 <__ieee754_pow+0x3e>
 800ba76:	2000      	movs	r0, #0
 800ba78:	2100      	movs	r1, #0
 800ba7a:	f7ff bb2c 	b.w	800b0d6 <__ieee754_pow+0x3e>
 800ba7e:	4630      	mov	r0, r6
 800ba80:	4639      	mov	r1, r7
 800ba82:	f7ff bb28 	b.w	800b0d6 <__ieee754_pow+0x3e>
 800ba86:	9204      	str	r2, [sp, #16]
 800ba88:	f7ff bb7a 	b.w	800b180 <__ieee754_pow+0xe8>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f7ff bb64 	b.w	800b15a <__ieee754_pow+0xc2>
 800ba92:	bf00      	nop
 800ba94:	f3af 8000 	nop.w
 800ba98:	00000000 	.word	0x00000000
 800ba9c:	3fe62e43 	.word	0x3fe62e43
 800baa0:	fefa39ef 	.word	0xfefa39ef
 800baa4:	3fe62e42 	.word	0x3fe62e42
 800baa8:	0ca86c39 	.word	0x0ca86c39
 800baac:	be205c61 	.word	0xbe205c61
 800bab0:	72bea4d0 	.word	0x72bea4d0
 800bab4:	3e663769 	.word	0x3e663769
 800bab8:	c5d26bf1 	.word	0xc5d26bf1
 800babc:	3ebbbd41 	.word	0x3ebbbd41
 800bac0:	af25de2c 	.word	0xaf25de2c
 800bac4:	3f11566a 	.word	0x3f11566a
 800bac8:	16bebd93 	.word	0x16bebd93
 800bacc:	3f66c16c 	.word	0x3f66c16c
 800bad0:	5555553e 	.word	0x5555553e
 800bad4:	3fc55555 	.word	0x3fc55555
 800bad8:	3fe00000 	.word	0x3fe00000
 800badc:	000fffff 	.word	0x000fffff
 800bae0:	3ff00000 	.word	0x3ff00000
 800bae4:	4090cbff 	.word	0x4090cbff
 800bae8:	3f6f3400 	.word	0x3f6f3400
 800baec:	652b82fe 	.word	0x652b82fe
 800baf0:	3c971547 	.word	0x3c971547

0800baf4 <__ieee754_sqrt>:
 800baf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf8:	ec55 4b10 	vmov	r4, r5, d0
 800bafc:	4e55      	ldr	r6, [pc, #340]	; (800bc54 <__ieee754_sqrt+0x160>)
 800bafe:	43ae      	bics	r6, r5
 800bb00:	ee10 0a10 	vmov	r0, s0
 800bb04:	ee10 3a10 	vmov	r3, s0
 800bb08:	462a      	mov	r2, r5
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	d110      	bne.n	800bb30 <__ieee754_sqrt+0x3c>
 800bb0e:	ee10 2a10 	vmov	r2, s0
 800bb12:	462b      	mov	r3, r5
 800bb14:	f7f4 fd70 	bl	80005f8 <__aeabi_dmul>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	4629      	mov	r1, r5
 800bb20:	f7f4 fbb4 	bl	800028c <__adddf3>
 800bb24:	4604      	mov	r4, r0
 800bb26:	460d      	mov	r5, r1
 800bb28:	ec45 4b10 	vmov	d0, r4, r5
 800bb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb30:	2d00      	cmp	r5, #0
 800bb32:	dc10      	bgt.n	800bb56 <__ieee754_sqrt+0x62>
 800bb34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bb38:	4330      	orrs	r0, r6
 800bb3a:	d0f5      	beq.n	800bb28 <__ieee754_sqrt+0x34>
 800bb3c:	b15d      	cbz	r5, 800bb56 <__ieee754_sqrt+0x62>
 800bb3e:	ee10 2a10 	vmov	r2, s0
 800bb42:	462b      	mov	r3, r5
 800bb44:	ee10 0a10 	vmov	r0, s0
 800bb48:	f7f4 fb9e 	bl	8000288 <__aeabi_dsub>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	f7f4 fe7c 	bl	800084c <__aeabi_ddiv>
 800bb54:	e7e6      	b.n	800bb24 <__ieee754_sqrt+0x30>
 800bb56:	1512      	asrs	r2, r2, #20
 800bb58:	d074      	beq.n	800bc44 <__ieee754_sqrt+0x150>
 800bb5a:	07d4      	lsls	r4, r2, #31
 800bb5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bb60:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bb64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bb68:	bf5e      	ittt	pl
 800bb6a:	0fda      	lsrpl	r2, r3, #31
 800bb6c:	005b      	lslpl	r3, r3, #1
 800bb6e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bb72:	2400      	movs	r4, #0
 800bb74:	0fda      	lsrs	r2, r3, #31
 800bb76:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bb7a:	107f      	asrs	r7, r7, #1
 800bb7c:	005b      	lsls	r3, r3, #1
 800bb7e:	2516      	movs	r5, #22
 800bb80:	4620      	mov	r0, r4
 800bb82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bb86:	1886      	adds	r6, r0, r2
 800bb88:	428e      	cmp	r6, r1
 800bb8a:	bfde      	ittt	le
 800bb8c:	1b89      	suble	r1, r1, r6
 800bb8e:	18b0      	addle	r0, r6, r2
 800bb90:	18a4      	addle	r4, r4, r2
 800bb92:	0049      	lsls	r1, r1, #1
 800bb94:	3d01      	subs	r5, #1
 800bb96:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bb9a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bb9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bba2:	d1f0      	bne.n	800bb86 <__ieee754_sqrt+0x92>
 800bba4:	462a      	mov	r2, r5
 800bba6:	f04f 0e20 	mov.w	lr, #32
 800bbaa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bbae:	4281      	cmp	r1, r0
 800bbb0:	eb06 0c05 	add.w	ip, r6, r5
 800bbb4:	dc02      	bgt.n	800bbbc <__ieee754_sqrt+0xc8>
 800bbb6:	d113      	bne.n	800bbe0 <__ieee754_sqrt+0xec>
 800bbb8:	459c      	cmp	ip, r3
 800bbba:	d811      	bhi.n	800bbe0 <__ieee754_sqrt+0xec>
 800bbbc:	f1bc 0f00 	cmp.w	ip, #0
 800bbc0:	eb0c 0506 	add.w	r5, ip, r6
 800bbc4:	da43      	bge.n	800bc4e <__ieee754_sqrt+0x15a>
 800bbc6:	2d00      	cmp	r5, #0
 800bbc8:	db41      	blt.n	800bc4e <__ieee754_sqrt+0x15a>
 800bbca:	f100 0801 	add.w	r8, r0, #1
 800bbce:	1a09      	subs	r1, r1, r0
 800bbd0:	459c      	cmp	ip, r3
 800bbd2:	bf88      	it	hi
 800bbd4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bbd8:	eba3 030c 	sub.w	r3, r3, ip
 800bbdc:	4432      	add	r2, r6
 800bbde:	4640      	mov	r0, r8
 800bbe0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bbe4:	f1be 0e01 	subs.w	lr, lr, #1
 800bbe8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bbec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bbf0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bbf4:	d1db      	bne.n	800bbae <__ieee754_sqrt+0xba>
 800bbf6:	430b      	orrs	r3, r1
 800bbf8:	d006      	beq.n	800bc08 <__ieee754_sqrt+0x114>
 800bbfa:	1c50      	adds	r0, r2, #1
 800bbfc:	bf13      	iteet	ne
 800bbfe:	3201      	addne	r2, #1
 800bc00:	3401      	addeq	r4, #1
 800bc02:	4672      	moveq	r2, lr
 800bc04:	f022 0201 	bicne.w	r2, r2, #1
 800bc08:	1063      	asrs	r3, r4, #1
 800bc0a:	0852      	lsrs	r2, r2, #1
 800bc0c:	07e1      	lsls	r1, r4, #31
 800bc0e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc16:	bf48      	it	mi
 800bc18:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bc1c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bc20:	4614      	mov	r4, r2
 800bc22:	e781      	b.n	800bb28 <__ieee754_sqrt+0x34>
 800bc24:	0ad9      	lsrs	r1, r3, #11
 800bc26:	3815      	subs	r0, #21
 800bc28:	055b      	lsls	r3, r3, #21
 800bc2a:	2900      	cmp	r1, #0
 800bc2c:	d0fa      	beq.n	800bc24 <__ieee754_sqrt+0x130>
 800bc2e:	02cd      	lsls	r5, r1, #11
 800bc30:	d50a      	bpl.n	800bc48 <__ieee754_sqrt+0x154>
 800bc32:	f1c2 0420 	rsb	r4, r2, #32
 800bc36:	fa23 f404 	lsr.w	r4, r3, r4
 800bc3a:	1e55      	subs	r5, r2, #1
 800bc3c:	4093      	lsls	r3, r2
 800bc3e:	4321      	orrs	r1, r4
 800bc40:	1b42      	subs	r2, r0, r5
 800bc42:	e78a      	b.n	800bb5a <__ieee754_sqrt+0x66>
 800bc44:	4610      	mov	r0, r2
 800bc46:	e7f0      	b.n	800bc2a <__ieee754_sqrt+0x136>
 800bc48:	0049      	lsls	r1, r1, #1
 800bc4a:	3201      	adds	r2, #1
 800bc4c:	e7ef      	b.n	800bc2e <__ieee754_sqrt+0x13a>
 800bc4e:	4680      	mov	r8, r0
 800bc50:	e7bd      	b.n	800bbce <__ieee754_sqrt+0xda>
 800bc52:	bf00      	nop
 800bc54:	7ff00000 	.word	0x7ff00000

0800bc58 <with_errno>:
 800bc58:	b570      	push	{r4, r5, r6, lr}
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	460d      	mov	r5, r1
 800bc5e:	4616      	mov	r6, r2
 800bc60:	f7fa fd06 	bl	8006670 <__errno>
 800bc64:	4629      	mov	r1, r5
 800bc66:	6006      	str	r6, [r0, #0]
 800bc68:	4620      	mov	r0, r4
 800bc6a:	bd70      	pop	{r4, r5, r6, pc}

0800bc6c <xflow>:
 800bc6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc6e:	4614      	mov	r4, r2
 800bc70:	461d      	mov	r5, r3
 800bc72:	b108      	cbz	r0, 800bc78 <xflow+0xc>
 800bc74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bc78:	e9cd 2300 	strd	r2, r3, [sp]
 800bc7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc80:	4620      	mov	r0, r4
 800bc82:	4629      	mov	r1, r5
 800bc84:	f7f4 fcb8 	bl	80005f8 <__aeabi_dmul>
 800bc88:	2222      	movs	r2, #34	; 0x22
 800bc8a:	b003      	add	sp, #12
 800bc8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc90:	f7ff bfe2 	b.w	800bc58 <with_errno>

0800bc94 <__math_uflow>:
 800bc94:	b508      	push	{r3, lr}
 800bc96:	2200      	movs	r2, #0
 800bc98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc9c:	f7ff ffe6 	bl	800bc6c <xflow>
 800bca0:	ec41 0b10 	vmov	d0, r0, r1
 800bca4:	bd08      	pop	{r3, pc}

0800bca6 <__math_oflow>:
 800bca6:	b508      	push	{r3, lr}
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bcae:	f7ff ffdd 	bl	800bc6c <xflow>
 800bcb2:	ec41 0b10 	vmov	d0, r0, r1
 800bcb6:	bd08      	pop	{r3, pc}

0800bcb8 <fabs>:
 800bcb8:	ec51 0b10 	vmov	r0, r1, d0
 800bcbc:	ee10 2a10 	vmov	r2, s0
 800bcc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcc4:	ec43 2b10 	vmov	d0, r2, r3
 800bcc8:	4770      	bx	lr

0800bcca <finite>:
 800bcca:	b082      	sub	sp, #8
 800bccc:	ed8d 0b00 	vstr	d0, [sp]
 800bcd0:	9801      	ldr	r0, [sp, #4]
 800bcd2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bcd6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bcda:	0fc0      	lsrs	r0, r0, #31
 800bcdc:	b002      	add	sp, #8
 800bcde:	4770      	bx	lr

0800bce0 <scalbn>:
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	ec55 4b10 	vmov	r4, r5, d0
 800bce6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bcea:	4606      	mov	r6, r0
 800bcec:	462b      	mov	r3, r5
 800bcee:	b99a      	cbnz	r2, 800bd18 <scalbn+0x38>
 800bcf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bcf4:	4323      	orrs	r3, r4
 800bcf6:	d036      	beq.n	800bd66 <scalbn+0x86>
 800bcf8:	4b39      	ldr	r3, [pc, #228]	; (800bde0 <scalbn+0x100>)
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	ee10 0a10 	vmov	r0, s0
 800bd00:	2200      	movs	r2, #0
 800bd02:	f7f4 fc79 	bl	80005f8 <__aeabi_dmul>
 800bd06:	4b37      	ldr	r3, [pc, #220]	; (800bde4 <scalbn+0x104>)
 800bd08:	429e      	cmp	r6, r3
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	460d      	mov	r5, r1
 800bd0e:	da10      	bge.n	800bd32 <scalbn+0x52>
 800bd10:	a32b      	add	r3, pc, #172	; (adr r3, 800bdc0 <scalbn+0xe0>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	e03a      	b.n	800bd8e <scalbn+0xae>
 800bd18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bd1c:	428a      	cmp	r2, r1
 800bd1e:	d10c      	bne.n	800bd3a <scalbn+0x5a>
 800bd20:	ee10 2a10 	vmov	r2, s0
 800bd24:	4620      	mov	r0, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	f7f4 fab0 	bl	800028c <__adddf3>
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	460d      	mov	r5, r1
 800bd30:	e019      	b.n	800bd66 <scalbn+0x86>
 800bd32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bd36:	460b      	mov	r3, r1
 800bd38:	3a36      	subs	r2, #54	; 0x36
 800bd3a:	4432      	add	r2, r6
 800bd3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bd40:	428a      	cmp	r2, r1
 800bd42:	dd08      	ble.n	800bd56 <scalbn+0x76>
 800bd44:	2d00      	cmp	r5, #0
 800bd46:	a120      	add	r1, pc, #128	; (adr r1, 800bdc8 <scalbn+0xe8>)
 800bd48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd4c:	da1c      	bge.n	800bd88 <scalbn+0xa8>
 800bd4e:	a120      	add	r1, pc, #128	; (adr r1, 800bdd0 <scalbn+0xf0>)
 800bd50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd54:	e018      	b.n	800bd88 <scalbn+0xa8>
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	dd08      	ble.n	800bd6c <scalbn+0x8c>
 800bd5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd66:	ec45 4b10 	vmov	d0, r4, r5
 800bd6a:	bd70      	pop	{r4, r5, r6, pc}
 800bd6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bd70:	da19      	bge.n	800bda6 <scalbn+0xc6>
 800bd72:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bd76:	429e      	cmp	r6, r3
 800bd78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bd7c:	dd0a      	ble.n	800bd94 <scalbn+0xb4>
 800bd7e:	a112      	add	r1, pc, #72	; (adr r1, 800bdc8 <scalbn+0xe8>)
 800bd80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1e2      	bne.n	800bd4e <scalbn+0x6e>
 800bd88:	a30f      	add	r3, pc, #60	; (adr r3, 800bdc8 <scalbn+0xe8>)
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f7f4 fc33 	bl	80005f8 <__aeabi_dmul>
 800bd92:	e7cb      	b.n	800bd2c <scalbn+0x4c>
 800bd94:	a10a      	add	r1, pc, #40	; (adr r1, 800bdc0 <scalbn+0xe0>)
 800bd96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0b8      	beq.n	800bd10 <scalbn+0x30>
 800bd9e:	a10e      	add	r1, pc, #56	; (adr r1, 800bdd8 <scalbn+0xf8>)
 800bda0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bda4:	e7b4      	b.n	800bd10 <scalbn+0x30>
 800bda6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bdaa:	3236      	adds	r2, #54	; 0x36
 800bdac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bdb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	4b0c      	ldr	r3, [pc, #48]	; (800bde8 <scalbn+0x108>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	e7e8      	b.n	800bd8e <scalbn+0xae>
 800bdbc:	f3af 8000 	nop.w
 800bdc0:	c2f8f359 	.word	0xc2f8f359
 800bdc4:	01a56e1f 	.word	0x01a56e1f
 800bdc8:	8800759c 	.word	0x8800759c
 800bdcc:	7e37e43c 	.word	0x7e37e43c
 800bdd0:	8800759c 	.word	0x8800759c
 800bdd4:	fe37e43c 	.word	0xfe37e43c
 800bdd8:	c2f8f359 	.word	0xc2f8f359
 800bddc:	81a56e1f 	.word	0x81a56e1f
 800bde0:	43500000 	.word	0x43500000
 800bde4:	ffff3cb0 	.word	0xffff3cb0
 800bde8:	3c900000 	.word	0x3c900000

0800bdec <_init>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr

0800bdf8 <_fini>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr
